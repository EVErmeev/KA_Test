#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьДопОбработкуПроводок(Проводки) Экспорт
	
	Регистратор = Проводки.Отбор.Регистратор.Значение;
	ДополнительныеСвойства = Проводки.ДополнительныеСвойства;
	
	РассчитатьСуммыУправленческогоУчета(Проводки, Регистратор, ДополнительныеСвойства);
	ОбработатьПроводкиНалоговогоУчета(Проводки, Регистратор, ДополнительныеСвойства);
	ОчиститьНеИспользуемыеСуммы(Проводки);
	ПривестиПустыеЗначенияСубконтоСоставногоТипа(Проводки);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РассчитатьСуммыУправленческогоУчета(Проводки, Регистратор, ДополнительныеСвойства) 
	
	ЗначениеСвойства = Неопределено;
	ДополнительныеСвойства.Свойство("РассчитатьСуммыУУ", ЗначениеСвойства);
	РассчитатьСуммыУУ = ?(ЗначениеСвойства = Неопределено, Ложь, ЗначениеСвойства);
	РассчитатьСуммыУУ = РассчитатьСуммыУУ И ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	
	
	ЗначениеСвойства = Неопределено;
	ДополнительныеСвойства.Свойство("РассчитатьСуммыФО", ЗначениеСвойства);
	РассчитатьСуммыФО = ?(ЗначениеСвойства = Неопределено, Ложь, ЗначениеСвойства);
	РассчитатьСуммыФО = РассчитатьСуммыФО И ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	
	Если НЕ РассчитатьСуммыУУ И НЕ РассчитатьСуммыФО Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУУНаПланеСчетовХозрасчетный = Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Получить();
	
	Для Каждого Проводка Из Проводки Цикл
		
		Если РассчитатьСуммыУУ И Проводка.Период >= ДатаНачалаУУНаПланеСчетовХозрасчетный Тогда
			ПараметрыРасчетаСуммыУУ = РеглУчетВыборкиСерверПовтИсп.ПараметрыРасчетаСуммыУУ(Проводка.Период, Проводка.Организация);
			Проводка.СуммаУУ = Проводка[ПараметрыРасчетаСуммыУУ.РесурсИсточник] * ПараметрыРасчетаСуммыУУ.Коэффициент;
		КонецЕсли;
		
		Если РассчитатьСуммыФО Тогда
			ПараметрыРасчетаСуммыФО = РеглУчетВыборкиСерверПовтИсп.ПараметрыРасчетаСуммыФО(Проводка.Период, Проводка.Организация);
			Проводка.СуммаФО = Проводка[ПараметрыРасчетаСуммыФО.РесурсИсточник] * ПараметрыРасчетаСуммыФО.Коэффициент;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСуммуЕслиЗаполнена(Сумма, КорректируемаяСумма = 0)
	
	// Если сумма не заполнена, то не будем ее менять, чтобы не спровоцировать перезапись фактически неизменного набора.
	// Если сумма заполнена, то ее обнулим за счет корректируемой суммы.
	// Например, это используется, когда важно очистить сумму НУ за счет суммы ПР.
	
	Если Не ЗначениеЗаполнено(Сумма) Тогда // Может быть NULL, если набор редактируется вручную
		Возврат;
	КонецЕсли;
	
	КорректируемаяСумма = КорректируемаяСумма + Сумма;
	
	Сумма = 0;
	
КонецПроцедуры

Процедура ЗаполнитьСуммыНалоговогоУчета(Проводки)
	
	Для Каждого Проводка Из Проводки Цикл
		
		ПериодУчетнойПолитики = НачалоМесяца(Проводка.Период);
		ДанныеУчетнойПолитики = РеглУчетВыборкиСерверПовтИсп.ДанныеУчетнойПолитики(Проводка.Организация, ПериодУчетнойПолитики);
		
		Если НЕ ДанныеУчетнойПолитики.ПлательщикНалогаНаПрибыль Тогда
			Продолжить;
		КонецЕсли;
	
		Если Проводка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СчетДт = Проводка.СчетДт;
		СчетКт = Проводка.СчетКт;
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетУчетаВЭксплуатации(СчетДт)
			ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетУчетаВЭксплуатации(СчетКт) Тогда
			// Налоговые суммы по этим счетам рассчитываются в первичном документе по особым правилам
			Продолжить;
		КонецЕсли;
		
		Если Проводка.Содержание = "Проценты по дисконтированию" Тогда
			// Налоговые суммы с этим содержанием рассчитываются в первичной проводке по особым правилам
			Продолжить;
		КонецЕсли;
		
		Если НалоговыйУчет.ЭтоПроводкаПоНачислениюНДС(Проводка) Тогда
			// НДС не учитывается в НУ
			Продолжить;
		КонецЕсли;
		
		Если Не БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетЦелевоеФинансирование(СчетДт) Тогда
			// Налоговые суммы по этим счетам рассчитываются в первичном документе по особым правилам
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДт);
			Если СвойстваСчетаДт.НалоговыйУчет 
				И Проводка.СуммаНУДт = 0 
				И Проводка.СуммаПРДт = 0 
				И Проводка.СуммаВРДт = 0 Тогда
				
				Проводка.СуммаНУДт = Проводка.Сумма;
				
			КонецЕсли;
		КонецЕсли;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт);
		Если СвойстваСчетаКт.НалоговыйУчет 
			И Проводка.СуммаНУКт = 0
			И Проводка.СуммаПРКт = 0
			И Проводка.СуммаВРКт = 0 Тогда
			
			Проводка.СуммаНУКт = Проводка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете(Проводки)
	
	// Удалим проводки по забалансовым счетам учета доходов и расходов
	ПроводкиКУдалению = Новый Массив;
	Для Каждого Проводка Из Проводки Цикл
		
		СчетДт = Проводка.СчетДт;
		СчетКт = Проводка.СчетКт;
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетЗабалансовогоУчетаДоходов(СчетДт)
 			Или БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетЗабалансовогоУчетаРасходов(СчетКт) Тогда
			// Такие проводки формируем только в этой процедуре
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Найдем проводки по доходам и расходам, не учитываемым в налоговом учете
	
	ПроводкиПоДоходам = Новый Массив;
	ПроводкиПоРасходам = Новый Массив;
	
	Для Каждого Проводка Из Проводки Цикл
		
		ПериодУчетнойПолитики = НачалоМесяца(Проводка.Период);
		ДанныеУчетнойПолитики = РеглУчетВыборкиСерверПовтИсп.ДанныеУчетнойПолитики(Проводка.Организация, ПериодУчетнойПолитики);

		Если НЕ ДанныеУчетнойПолитики.ПлательщикНалогаНаПрибыль ИЛИ ПроводкиКУдалению.Найти(Проводка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Если НалоговыйУчет.ЭтоПроводкаДоходыНеУчитываемыеДляНалогаНаПрибыль(Проводка.СчетКт, Проводка.СубконтоКт) Тогда
			ПроводкиПоДоходам.Добавить(Проводка);
		ИначеЕсли НалоговыйУчет.ЭтоПроводкаРасходыНеУчитываемыеДляНалогаНаПрибыль(Проводка.СчетДт, Проводка.СубконтоДт) Тогда
			ПроводкиПоРасходам.Добавить(Проводка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработаем не учитываемые доходы:
	// - обеспечим, чтобы они не отражались в налоговом учете
	// - добавим проводки по забалансовому учету
	
	Для Каждого Проводка Из ПроводкиПоДоходам Цикл
		
		ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУКт, Проводка.СуммаПРКт);
		
	КонецЦикла;
		
	// Обработаем не учитываемые расходы (также, как и доходы)
	Для Каждого Проводка Из ПроводкиПоРасходам Цикл
		
		ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУДт, Проводка.СуммаПРДт);
		
	КонецЦикла;
	
	Для Каждого Проводка Из ПроводкиКУдалению Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеИспользуемыеСуммы(Проводки)
	
	ВестиУУНаПланеСчетовХозрасчетный = ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	ПроводкиКУдалению = Новый Массив;
	
	Для Каждого Проводка Из Проводки Цикл
		
		Если НЕ ВестиУУНаПланеСчетовХозрасчетный Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаУУ);
		КонецЕсли;
		
		Если НЕ ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаФО);
		КонецЕсли;
		
		ПериодУчетнойПолитики = НачалоМесяца(Проводка.Период);
		ДанныеУчетнойПолитики = РеглУчетВыборкиСерверПовтИсп.ДанныеУчетнойПолитики(Проводка.Организация, ПериодУчетнойПолитики);
		
		Если НЕ ДанныеУчетнойПолитики.ПлательщикНалогаНаПрибыль Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУКт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРКт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРКт);
			Продолжить;
		КонецЕсли;
	
		// Налог на прибыль уплачивается
		
		Если НЕ ДанныеУчетнойПолитики.ПоддержкаПБУ18 Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРКт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРКт);
		КонецЕсли;
		
		Если НетЗначашихДвиженийВПроводке(Проводка) Тогда
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Проводка Из ПроводкиКУдалению Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;
	
КонецПроцедуры

Функция НетЗначашихДвиженийВПроводке(Проводка)
	
	Возврат Проводка.Сумма = 0 И Проводка.СуммаУУ = 0 И Проводка.СуммаФО = 0
			И Проводка.СуммаНУДт = 0 И Проводка.СуммаПРДт = 0 И Проводка.СуммаВРДт = 0
			И Проводка.СуммаНУКт = 0 И Проводка.СуммаПРКт = 0 И Проводка.СуммаВРКт = 0
			И Проводка.ВалютнаяСуммаДт = 0 И Проводка.КоличествоДт = 0
			И Проводка.ВалютнаяСуммаКт = 0 И Проводка.КоличествоКт = 0;
	
КонецФункции

Процедура ОбработатьПроводкиНалоговогоУчета(Проводки, Регистратор, ДополнительныеСвойства)
	
	ПроводкиВведеныПользователем = ЭтоРучноеОтражение(Проводки, Регистратор, ДополнительныеСвойства);
	
	Если ПроводкиВведеныПользователем Тогда
		Возврат;
	КонецЕсли;
	
	СуммыНалоговогоУчетаЗаполнены = // Проводки созданы алгоритмом, который рассчитывает суммы НУ
		ДополнительныеСвойства.Свойство("СуммыНалоговогоУчетаЗаполнены") 
		И ДополнительныеСвойства.СуммыНалоговогоУчетаЗаполнены = Истина;
	
	Если НЕ СуммыНалоговогоУчетаЗаполнены Тогда
		ЗаполнитьСуммыНалоговогоУчета(Проводки);
		ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете(Проводки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривестиПустыеЗначенияСубконтоСоставногоТипа(Проводки)
	
	КэшПустыхЗначенийВидовСубконто = Новый Соответствие;
	
	Для Каждого Проводка Из Проводки Цикл
		
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			
			ПустоеЗначение = ПустоеЗначениеСубконто(Субконто.Ключ, КэшПустыхЗначенийВидовСубконто);
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) И Субконто.Значение <> ПустоеЗначение Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, ПустоеЗначение);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			
			ПустоеЗначение = ПустоеЗначениеСубконто(Субконто.Ключ, КэшПустыхЗначенийВидовСубконто);
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) И Субконто.Значение <> ПустоеЗначение Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, ПустоеЗначение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустоеЗначениеСубконто(ВидСубконто, КэшВидыСубконто)
	
	ПустоеЗначение = КэшВидыСубконто.Получить(ВидСубконто);
	
	Если ПустоеЗначение = Неопределено Тогда
		ПустоеЗначение = ВидСубконто.ТипЗначения.ПривестиЗначение(Неопределено);
		КэшВидыСубконто.Вставить(ВидСубконто, ПустоеЗначение);
	КонецЕсли;
	
	Возврат ПустоеЗначение;
	
КонецФункции

Функция ЭтоРучноеОтражение(Проводки, Регистратор, ДополнительныеСвойства)
	
	ТипРегистратора = ТипЗнч(Регистратор);
	
	ЭтоРучноеОтражение = 
		(ТипРегистратора = Тип("ДокументСсылка.РегламентнаяОперация"))
		Или (ТипРегистратора = Тип("ДокументСсылка.ОперацияБух"))
		Или ДополнительныеСвойства.Свойство("РучноеОтражение") И ДополнительныеСвойства.РучноеОтражение
		Или (ОбщегоНазначения.ЕстьРеквизитОбъекта("РучнаяКорректировка", Регистратор.Метаданные()) И Регистратор.РучнаяКорректировка);
		
	Возврат ЭтоРучноеОтражение;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыБухгалтерии.Хозрасчетный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.12.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f6ceccf8-07fb-11ed-ee9a-001e62090807");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыБухгалтерии.Хозрасчетный.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Корректирует значения в записях регистра бухгалтерии в соответствии с признаками учета плана счетов'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрБухгалтерии.Хозрасчетный";

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	МассивВидовСубконто = Новый Массив;
	ВыборкаВидовСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Выбрать();
	
	Пока ВыборкаВидовСубконто.Следующий() Цикл
		Если ВыборкаВидовСубконто.ТипЗначения.Типы().Количество() = 1 Тогда
			МассивВидовСубконто.Добавить(ВыборкаВидовСубконто.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Вид В (&МассивВидовСубконто)
	|	И ХозрасчетныйСубконто.Значение = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК ХозрасчетныйДт
	|		ПО Хозрасчетный.СчетДт = ХозрасчетныйДт.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК ХозрасчетныйКт
	|		ПО Хозрасчетный.СчетКт = ХозрасчетныйКт.Ссылка
	|ГДЕ
	|	(НЕ ХозрасчетныйДт.Валютный
	|	И НЕ Хозрасчетный.ВалютаДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.Валютный
	|	И НЕ Хозрасчетный.ВалютаКт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйДт.Количественный
	|	И НЕ Хозрасчетный.КоличествоДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.Количественный
	|	И НЕ Хозрасчетный.КоличествоКт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйДт.УчетПоПодразделениям
	|	И НЕ Хозрасчетный.ПодразделениеДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.УчетПоПодразделениям
	|	И НЕ Хозрасчетный.ПодразделениеКт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйДт.УчетПоНаправлениямДеятельности
	|	И НЕ Хозрасчетный.НаправлениеДеятельностиДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.УчетПоНаправлениямДеятельности
	|	И НЕ Хозрасчетный.НаправлениеДеятельностиКт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйДт.НалоговыйУчет
	|	И НЕ Хозрасчетный.СуммаНУДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.НалоговыйУчет
	|	И НЕ Хозрасчетный.СуммаНУКт ЕСТЬ NULL
	|	ИЛИ ХозрасчетныйДт.Забалансовый
	|	И ХозрасчетныйКт.Ссылка ЕСТЬ NULL
	|	И НЕ Хозрасчетный.ВалютаКт ЕСТЬ NULL
	|	ИЛИ ХозрасчетныйКт.Забалансовый
	|	И ХозрасчетныйДт.Ссылка ЕСТЬ NULL
	|	И НЕ Хозрасчетный.ВалютаДт ЕСТЬ NULL)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивВидовСубконто", МассивВидовСубконто);
	
	МассивРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивРегистраторов),
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрБухгалтерии.Хозрасчетный";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	Хозрасчетный.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	Хозрасчетный.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	Хозрасчетный.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	Хозрасчетный.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	Хозрасчетный.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	Хозрасчетный.ВидСубконтоДт1.ТипЗначения КАК ТипЗначенияСубконтоДт1,
	|	Хозрасчетный.ВидСубконтоДт2.ТипЗначения КАК ТипЗначенияСубконтоДт2,
	|	Хозрасчетный.ВидСубконтоДт3.ТипЗначения КАК ТипЗначенияСубконтоДт3,
	|	Хозрасчетный.ВидСубконтоКт1.ТипЗначения КАК ТипЗначенияСубконтоКт1,
	|	Хозрасчетный.ВидСубконтоКт2.ТипЗначения КАК ТипЗначенияСубконтоКт2,
	|	Хозрасчетный.ВидСубконтоКт3.ТипЗначения КАК ТипЗначенияСубконтоКт3,
	|	ХозрасчетныйДт.Валютный КАК СчетДтВалютный,
	|	ХозрасчетныйДт.Количественный КАК СчетДтКоличественный,
	|	ХозрасчетныйДт.УчетПоПодразделениям КАК СчетДтУчетПоПодразделениям,
	|	ХозрасчетныйДт.УчетПоНаправлениямДеятельности КАК СчетДтУчетПоНаправлениямДеятельности,
	|	ХозрасчетныйДт.НалоговыйУчет КАК СчетДтНалоговыйУчет,
	|	ХозрасчетныйДт.Забалансовый КАК СчетДтЗабалансовый,
	|	ХозрасчетныйКт.Валютный КАК СчетКтВалютный,
	|	ХозрасчетныйКт.Количественный КАК СчетКтКоличественный,
	|	ХозрасчетныйКт.УчетПоПодразделениям КАК СчетКтУчетПоПодразделениям,
	|	ХозрасчетныйКт.УчетПоНаправлениямДеятельности КАК СчетКтУчетПоНаправлениямДеятельности,
	|	ХозрасчетныйКт.НалоговыйУчет КАК СчетКтНалоговыйУчет,
	|	ХозрасчетныйКт.Забалансовый КАК СчетКтЗабалансовый
	|ПОМЕСТИТЬ ХозрасчетныйДвиженияССубконто
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(,, Регистратор В
	|		(ВЫБРАТЬ
	|			ВТОбъектыДляОбработки.Регистратор КАК Регистратор
	|		ИЗ
	|			ВТОбъектыДляОбработки КАК ВТОбъектыДляОбработки),,) КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК ХозрасчетныйДт
	|		ПО (Хозрасчетный.СчетДт = ХозрасчетныйДт.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК ХозрасчетныйКт
	|		ПО (Хозрасчетный.СчетКт = ХозрасчетныйКт.Ссылка)
	|ГДЕ
	|	(Хозрасчетный.СубконтоДт1 = НЕОПРЕДЕЛЕНО
	|	ИЛИ Хозрасчетный.СубконтоДт2 = НЕОПРЕДЕЛЕНО
	|	ИЛИ Хозрасчетный.СубконтоДт3 = НЕОПРЕДЕЛЕНО
	|	ИЛИ Хозрасчетный.СубконтоКт1 = НЕОПРЕДЕЛЕНО
	|	ИЛИ Хозрасчетный.СубконтоКт2 = НЕОПРЕДЕЛЕНО
	|	ИЛИ Хозрасчетный.СубконтоКт3 = НЕОПРЕДЕЛЕНО
	|	ИЛИ НЕ ХозрасчетныйДт.Валютный
	|	И НЕ Хозрасчетный.ВалютаДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.Валютный
	|	И НЕ Хозрасчетный.ВалютаКт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйДт.Количественный
	|	И НЕ Хозрасчетный.КоличествоДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.Количественный
	|	И НЕ Хозрасчетный.КоличествоКт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйДт.УчетПоПодразделениям
	|	И НЕ Хозрасчетный.ПодразделениеДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.УчетПоПодразделениям
	|	И НЕ Хозрасчетный.ПодразделениеКт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйДт.УчетПоНаправлениямДеятельности
	|	И НЕ Хозрасчетный.НаправлениеДеятельностиДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.УчетПоНаправлениямДеятельности
	|	И НЕ Хозрасчетный.НаправлениеДеятельностиКт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйДт.НалоговыйУчет
	|	И НЕ Хозрасчетный.СуммаНУДт ЕСТЬ NULL
	|	ИЛИ НЕ ХозрасчетныйКт.НалоговыйУчет
	|	И НЕ Хозрасчетный.СуммаНУКт ЕСТЬ NULL
	|	ИЛИ ХозрасчетныйДт.Забалансовый
	|	И ХозрасчетныйКт.Ссылка ЕСТЬ NULL
	|	И НЕ Хозрасчетный.ВалютаКт ЕСТЬ NULL
	|	ИЛИ ХозрасчетныйКт.Забалансовый
	|	И ХозрасчетныйДт.Ссылка ЕСТЬ NULL
	|	И НЕ Хозрасчетный.ВалютаДт ЕСТЬ NULL)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	Хозрасчетный.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	Хозрасчетный.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	Хозрасчетный.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	Хозрасчетный.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	Хозрасчетный.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	Хозрасчетный.ТипЗначенияСубконтоДт1 КАК ТипЗначенияСубконтоДт1,
	|	Хозрасчетный.ТипЗначенияСубконтоДт2 КАК ТипЗначенияСубконтоДт2,
	|	Хозрасчетный.ТипЗначенияСубконтоДт3 КАК ТипЗначенияСубконтоДт3,
	|	Хозрасчетный.ТипЗначенияСубконтоКт1 КАК ТипЗначенияСубконтоКт1,
	|	Хозрасчетный.ТипЗначенияСубконтоКт2 КАК ТипЗначенияСубконтоКт2,
	|	Хозрасчетный.ТипЗначенияСубконтоКт3 КАК ТипЗначенияСубконтоКт3,
	|	Хозрасчетный.СчетДтВалютный КАК СчетДтВалютный,
	|	Хозрасчетный.СчетДтКоличественный КАК СчетДтКоличественный,
	|	Хозрасчетный.СчетДтУчетПоПодразделениям КАК СчетДтУчетПоПодразделениям,
	|	Хозрасчетный.СчетДтУчетПоНаправлениямДеятельности КАК СчетДтУчетПоНаправлениямДеятельности,
	|	Хозрасчетный.СчетДтНалоговыйУчет КАК СчетДтНалоговыйУчет,
	|	Хозрасчетный.СчетДтЗабалансовый КАК СчетДтЗабалансовый,
	|	Хозрасчетный.СчетКтВалютный КАК СчетКтВалютный,
	|	Хозрасчетный.СчетКтКоличественный КАК СчетКтКоличественный,
	|	Хозрасчетный.СчетКтУчетПоПодразделениям КАК СчетКтУчетПоПодразделениям,
	|	Хозрасчетный.СчетКтУчетПоНаправлениямДеятельности КАК СчетКтУчетПоНаправлениямДеятельности,
	|	Хозрасчетный.СчетКтНалоговыйУчет КАК СчетКтНалоговыйУчет,
	|	Хозрасчетный.СчетКтЗабалансовый КАК СчетКтЗабалансовый
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйДвиженияССубконто КАК Хозрасчетный
	|		ПО ОбъектыДляОбработки.Регистратор = Хозрасчетный.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|ИТОГИ
	|ПО
	|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Регистратор);
			НаборЗаписей.Прочитать();
			
			ТребуетсяЗаписать = Ложь;
			
			Выборка = ВыборкаДокументов.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.НомерСтроки = Null Тогда
					Прервать;
				КонецЕсли;
				
				Запись = НаборЗаписей[Выборка.НомерСтроки - 1];
				
				Если Запись.НомерСтроки <> Выборка.НомерСтроки Тогда
				
					Для каждого ЗаписьНабора Из НаборЗаписей Цикл
						Если ЗаписьНабора.НомерСтроки = Выборка.НомерСтроки Тогда
							Запись = ЗаписьНабора;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				
				КонецЕсли;
				
				Если Выборка.ТипЗначенияСубконтоДт1 <> Null И Запись.СубконтоДт[Выборка.ВидСубконтоДт1] = Неопределено
					И Выборка.ТипЗначенияСубконтоДт1.Типы().Количество() = 1 Тогда //Для составного субконто значение "Неопределено" допустимо
					Запись.СубконтоДт[Выборка.ВидСубконтоДт1] = Выборка.ТипЗначенияСубконтоДт1.ПривестиЗначение();
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.ТипЗначенияСубконтоДт2 <> Null И Запись.СубконтоДт[Выборка.ВидСубконтоДт2] = Неопределено
					И Выборка.ТипЗначенияСубконтоДт2.Типы().Количество() = 1 Тогда
					Запись.СубконтоДт[Выборка.ВидСубконтоДт2] = Выборка.ТипЗначенияСубконтоДт2.ПривестиЗначение();
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.ТипЗначенияСубконтоДт3 <> Null И Запись.СубконтоДт[Выборка.ВидСубконтоДт3] = Неопределено
					И Выборка.ТипЗначенияСубконтоДт3.Типы().Количество() = 1 Тогда
					Запись.СубконтоДт[Выборка.ВидСубконтоДт3] = Выборка.ТипЗначенияСубконтоДт3.ПривестиЗначение();
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.ТипЗначенияСубконтоКт1 <> Null И Запись.СубконтоКт[Выборка.ВидСубконтоКт1] = Неопределено
					И Выборка.ТипЗначенияСубконтоКт1.Типы().Количество() = 1 Тогда //Для составного субконто значение "Неопределено" допустимо
					Запись.СубконтоКт[Выборка.ВидСубконтоКт1] = Выборка.ТипЗначенияСубконтоКт1.ПривестиЗначение();
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.ТипЗначенияСубконтоКт2 <> Null И Запись.СубконтоКт[Выборка.ВидСубконтоКт2] = Неопределено
					И Выборка.ТипЗначенияСубконтоКт2.Типы().Количество() = 1 Тогда //Для составного субконто значение "Неопределено" допустимо
					Запись.СубконтоКт[Выборка.ВидСубконтоКт2] = Выборка.ТипЗначенияСубконтоКт2.ПривестиЗначение();
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.ТипЗначенияСубконтоКт3 <> Null И Запись.СубконтоКт[Выборка.ВидСубконтоКт3] = Неопределено
					И Выборка.ТипЗначенияСубконтоКт3.Типы().Количество() = 1 Тогда //Для составного субконто значение "Неопределено" допустимо
					Запись.СубконтоКт[Выборка.ВидСубконтоКт3] = Выборка.ТипЗначенияСубконтоКт3.ПривестиЗначение();
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетДтВалютный <> Null И Не Выборка.СчетДтВалютный И Запись.ВалютаДт <> Null
					Или Выборка.СчетКтЗабалансовый <> Null И Выборка.СчетКтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетДт) Тогда
					Запись.ВалютаДт = Неопределено;
					Запись.ВалютнаяСуммаДт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетКтВалютный <> Null И Не Выборка.СчетКтВалютный И Запись.ВалютаКт <> Null
					Или Выборка.СчетДтЗабалансовый <> Null И Выборка.СчетДтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетКт) Тогда
					Запись.ВалютаКт = Неопределено;
					Запись.ВалютнаяСуммаКт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетДтКоличественный <> Null И Не Выборка.СчетДтКоличественный И Запись.КоличествоДт <> Null
					Или Выборка.СчетКтЗабалансовый <> Null И Выборка.СчетКтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетДт) Тогда
					Запись.КоличествоДт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетКтКоличественный <> Null И Не Выборка.СчетКтКоличественный И Запись.КоличествоКт <> Null
					Или Выборка.СчетДтЗабалансовый <> Null И Выборка.СчетДтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетКт) Тогда
					Запись.КоличествоКт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетДтУчетПоПодразделениям <> Null И Не Выборка.СчетДтУчетПоПодразделениям И Запись.ПодразделениеДт <> Null
					Или Выборка.СчетКтЗабалансовый <> Null И Выборка.СчетКтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетДт) Тогда
					Запись.ПодразделениеДт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетКтУчетПоПодразделениям <> Null И Не Выборка.СчетКтУчетПоПодразделениям И Запись.ПодразделениеКт <> Null
					Или Выборка.СчетДтЗабалансовый <> Null И Выборка.СчетДтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетКт) Тогда
					Запись.ПодразделениеКт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетДтУчетПоНаправлениямДеятельности <> Null И Не Выборка.СчетДтУчетПоНаправлениямДеятельности И Запись.НаправлениеДеятельностиДт <> Null
					Или Выборка.СчетКтЗабалансовый <> Null И Выборка.СчетКтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетДт) Тогда
					Запись.НаправлениеДеятельностиДт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетКтУчетПоНаправлениямДеятельности <> Null И Не Выборка.СчетКтУчетПоНаправлениямДеятельности И Запись.НаправлениеДеятельностиКт <> Null
					Или Выборка.СчетДтЗабалансовый <> Null И Выборка.СчетДтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетКт) Тогда
					Запись.НаправлениеДеятельностиКт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетДтНалоговыйУчет <> Null И Не Выборка.СчетДтНалоговыйУчет И Запись.СуммаНУДт <> Null
					Или Выборка.СчетКтЗабалансовый <> Null И Выборка.СчетКтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетДт) Тогда
					Запись.СуммаНУДт = Неопределено;
					Запись.СуммаПРДт = Неопределено;
					Запись.СуммаВРДт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
				Если Выборка.СчетКтНалоговыйУчет <> Null И Не Выборка.СчетКтНалоговыйУчет И Запись.СуммаНУКт <> Null
					Или Выборка.СчетДтЗабалансовый <> Null И Выборка.СчетДтЗабалансовый И Не ЗначениеЗаполнено(Запись.СчетКт) Тогда
					Запись.СуммаНУКт = Неопределено;
					Запись.СуммаПРКт = Неопределено;
					Запись.СуммаВРКт = Неопределено;
					ТребуетсяЗаписать = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТребуетсяЗаписать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаДокументов.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
