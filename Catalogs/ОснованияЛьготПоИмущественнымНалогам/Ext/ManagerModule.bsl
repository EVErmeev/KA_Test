
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
	
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	// При создании нового элемента открываем подбор из классификатора.
	// В то же время если в ЗначенияЗаполнения свойство КодЛьготы заполнено, то это признак того,
	// что выбор из классификатора выполнен, и тогда открываем стандартную форму нового объекта.
	Если ВидФормы = "ФормаОбъекта" 
		 И (Не Параметры.Свойство("Ключ") Или Не ЗначениеЗаполнено(Параметры.Ключ)) 
		 И (Не Параметры.Свойство("ЗначенияЗаполнения") Или НЕ Параметры.ЗначенияЗаполнения.Свойство("КодЛьготы")
		  Или Не ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.КодЛьготы)) Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ПодборИзКлассификатора";
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Федеральная льгота по коду.
// 
// Параметры:
//  КодЛьготы - Строка - Код льготы
// 
// Возвращаемое значение:
//  СправочникСсылка.ОснованияЛьготПоИмущественнымНалогам, Произвольный - Федеральная льгота по коду
Функция ФедеральнаяЛьготаПоКоду(КодЛьготы) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОснованияЛьготПоИмущественнымНалогам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОснованияЛьготПоИмущественнымНалогам КАК ОснованияЛьготПоИмущественнымНалогам
	|ГДЕ
	|	НЕ ОснованияЛьготПоИмущественнымНалогам.УстановленаРегиональнымЗаконом
	|	И ОснованияЛьготПоИмущественнымНалогам.КодЛьготы = &КодЛьготы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОснованияЛьготПоИмущественнымНалогам.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодЛьготы", КодЛьготы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка();
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции
 
// Ищет региональную льготу по набору значениий реквизитов справочника
// 
// Параметры:
//  ПараметрыЛьготы - Структура
//   * Ключ - имя реквизита справочника ОснованияЛьготПоИмущественнымНалогам
//   * Значение - значение реквизита
// Возвращаемое значение:
//  СправочникСсылка.ОснованияЛьготПоИмущественнымНалогам - найденная региональная льгота или пустая ссылка
Функция РегиональнаяЛьготаПоПараметрам(ПараметрыЛьготы) Экспорт
	
	// Ниже в запрос добавляются условия
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОснованияЛьготПоИмущественнымНалогам.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОснованияЛьготПоИмущественнымНалогам КАК ОснованияЛьготПоИмущественнымНалогам
	|ГДЕ
	|	ОснованияЛьготПоИмущественнымНалогам.УстановленаРегиональнымЗаконом
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОснованияЛьготПоИмущественнымНалогам.ПометкаУдаления";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	УсловияЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	
	Для каждого Параметр Из ПараметрыЛьготы Цикл
		Если Параметр.Ключ = "УстановленаРегиональнымЗаконом" Тогда
			Продолжить;
		КонецЕсли;	
		УсловияЗапроса.Добавить(СтрШаблон("ОснованияЛьготПоИмущественнымНалогам.%1 = &%1", Параметр.Ключ));
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла; 
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка();
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ОснованияЛьготПоИмущественнымНалогам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.10.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eff4424c-11c9-4d08-aeb7-389d6d6c93ed");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ОснованияЛьготПоИмущественнымНалогам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Обновляет справочник ""Основания льгот по налогу на имущество"":
	|- добавляет новые элементы на основании документов ""Параметры начисления налога на имущество""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОснованияЛьготПоИмущественнымНалогам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ОснованияЛьготПоИмущественнымНалогам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ОснованияЛьготПоИмущественнымНалогам.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ПараметрыНачисленияНалогаНаИмущество КАК ДанныеДокумента
	|ГДЕ
	|	НЕ ДанныеДокумента.РеквизитыОбновлены";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ОснованияЛьготПоИмущественнымНалогам";
	
	КэшКодовРегионов = Новый Соответствие;
	ОписаниеЛьгот = ЛьготыПоИмущественнымНалогамПовтИсп.ДанныеОЛьготахПоИмущественнымНалогам(Ложь);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Документ.ПараметрыНачисленияНалогаНаИмущество");
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПараметрыНачисленияНалогаНаИмущество");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ПараметрыНачисленияНалогаНаИмущество
			
			ПараметрыЛьготы = Документы.ПараметрыНачисленияНалогаНаИмущество.ПараметрыЛьготы(
				ДокументОбъект, ОписаниеЛьгот, КэшКодовРегионов);
				
			Если ПараметрыЛьготы <> Неопределено Тогда
				
				Если ПараметрыЛьготы.Свойство("УстановленаРегиональнымЗаконом")
					И ПараметрыЛьготы.УстановленаРегиональнымЗаконом Тогда
					ОснованиеЛьготы = Справочники.ОснованияЛьготПоИмущественнымНалогам.РегиональнаяЛьготаПоПараметрам(ПараметрыЛьготы);
				Иначе
					ОснованиеЛьготы = Справочники.ОснованияЛьготПоИмущественнымНалогам.ФедеральнаяЛьготаПоКоду(ПараметрыЛьготы.КодЛьготы);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОснованиеЛьготы) Тогда
					НоваяЛьгота = Справочники.ОснованияЛьготПоИмущественнымНалогам.СоздатьЭлемент();
					НоваяЛьгота.Заполнить(ПараметрыЛьготы);
					НоваяЛьгота.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Документ.ПараметрыНачисленияНалогаНаИмущество");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
