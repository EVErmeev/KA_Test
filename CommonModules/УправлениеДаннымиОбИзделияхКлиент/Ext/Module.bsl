////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Открывает форму выбора спецификаций по номенклатуре
//
// Параметры:
//  ДанныеОбИзделии				 - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации
//  ПараметрыВыбораСпецификаций	 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
//  Владелец					 - ФормаКлиентскогоПриложения		- владелец формы.
//
Процедура ОткрытьФормуВыбораСпецификацийПоНоменклатуре(ДанныеОбИзделии, ПараметрыВыбораСпецификаций = Неопределено, Владелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Для каждого КлючИЗначение Из ДанныеОбИзделии Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если ПараметрыВыбораСпецификаций <> Неопределено Тогда
		ИсточникПараметров = ПараметрыВыбораСпецификаций;
	Иначе
		ИсточникПараметров = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ИсточникПараметров Цикл
		Если КлючИЗначение.Ключ <> "ПолучитьСпецификацииПоНоменклатуре"
			И КлючИЗначение.Ключ <> "ПолучитьСпецификацииПоСпискуНоменклатуры" Тогда
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ПолучитьСпецификацииПоНоменклатуре", Истина);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// Открывает форму выбора спецификаций по списку номенклатуры
//
// Параметры:
//  ДанныеОбИзделиях			 - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации
//  ПараметрыВыбораСпецификаций	 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
//  Владелец					 - ФормаКлиентскогоПриложения	 - владелец формы.
//  ОписаниеОповещения			 - ОписаниеОповещения - описание оповещения.
//
Процедура ОткрытьФормуВыбораСпецификацийПоСпискуНоменклатуры(ДанныеОбИзделиях, ПараметрыВыбораСпецификаций = Неопределено, Владелец = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ДанныеОбИзделиях", ДанныеОбИзделиях);
	
	Если ПараметрыВыбораСпецификаций <> Неопределено Тогда
		ИсточникПараметров = ПараметрыВыбораСпецификаций;
	Иначе
		ИсточникПараметров = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	КонецЕсли;
	Для каждого КлючИЗначение Из ИсточникПараметров Цикл
		Если КлючИЗначение.Ключ <> "ПолучитьСпецификацииПоНоменклатуре"
			И КлючИЗначение.Ключ <> "ПолучитьСпецификацииПоСпискуНоменклатуры" Тогда
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("ПолучитьСпецификацииПоСпискуНоменклатуры", Истина);
	
	ОткрытьФорму(
		"Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре",
		ПараметрыФормы,
		Владелец,,,,
		ОписаниеОповещения);
		
КонецПроцедуры

// Копирует спецификацию и этапы
//
// Параметры:
//  Источник							- СправочникСсылка.РесурсныеСпецификации - спецификация, которую нужно скопировать
//  ОписаниеОбработкиПослеКопирования	- ОписаниеОповещения - содержит описание процедуры, которую нужно вызвать после копирования.
//
Процедура КопироватьРесурснуюСпецификацию(Источник, ОписаниеОбработкиПослеКопирования = Неопределено) Экспорт

	ТекстВопроса = НСтр("ru = 'Будет создана и записана копия ресурсной спецификации (включая этапы производственного процесса).
								|Скопировать?'");
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Скопировать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура("Источник,ОписаниеОбработкиПослеКопирования", Источник, ОписаниеОбработкиПослеКопирования);
	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьРесурснуюСпецификациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

// Устанавливает новый статус для спецификаций
//
// Параметры:
//	НовыйСтатус				- ПеречислениеСсылка.СтатусыСпецификаций - новый статус
//	ПредставлениеСтатуса	- Строка - представление нового статуса
//  МассивСпецификаций		- Массив - список спецификаций.
//
Процедура УстановитьСтатусСпецификаций(НовыйСтатус, ПредставлениеСтатуса, МассивСпецификаций) Экспорт
	
	Если МассивСпецификаций.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      НовыйСтатус);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     МассивСпецификаций);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусСпецификацийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru='Выбранным спецификациям будет установлен статус ""%1"". Продолжить?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

//++ Устарело_Производство21


//-- Устарело_Производство21

#КонецОбласти



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет действия при удалении видов рабочих центров из табличной части
// - удаляет альтернативные виды рабочих центров.
//
// Параметры:
//  ТаблицаФормы								- ТаблицаФормы - таблица формы на которой расположен список видов рабочих центров
//  АльтернативныеВидыРабочихЦентров			- ДанныеФормыКоллекция - табличная часть, содержащая альтернативные виды рабочих центров.
//
Процедура ПередУдалениемВидовРабочихЦентров(ТаблицаФормы, АльтернативныеВидыРабочихЦентров) Экспорт

	ВыделенныеСтроки = ТаблицаФормы.ВыделенныеСтроки;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
		
		СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", ДанныеСтроки.КлючСвязи);
		СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			АльтернативныеВидыРабочихЦентров.Удалить(НайденнаяСтрока);
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

// Оповещение копирования ресурсной спецификации
// 
// Параметры:
// 	РезультатВопроса - КодВозвратаДиалога - выбор пользователя
// 	ДополнительныеПараметры - Структура - из:
//		* Источник - СправочникСсылка.РесурсныеСпецификации - копируемая спецификация
//		* ОписаниеОбработкиПослеКопирования - Строка - имя процедуры
Процедура КопироватьРесурснуюСпецификациюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = УправлениеДаннымиОбИзделияхВызовСервера.КопироватьРесурснуюСпецификацию(ДополнительныеПараметры.Источник);
	
	Если Ссылка <> Неопределено Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
		Оповестить("Запись_ЭтапыПроизводства");
		ПоказатьЗначение(, Ссылка);
		
		ПоказатьОповещениеПользователя(
				НСтр("ru = 'Создание:'"), 
				ПолучитьНавигационнуюСсылку(Ссылка), 
				Ссылка);
		
		Если ДополнительныеПараметры.ОписаниеОбработкиПослеКопирования <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОбработкиПослеКопирования, Ссылка);
		КонецЕсли; 
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось скопировать ресурсную спецификацию.'"));
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьСтатусСпецификацийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = УправлениеДаннымиОбИзделияхВызовСервера.УстановитьСтатусСпецификаций(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
										
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Неопределено,
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);
			
	Оповестить("Запись_РесурсныеСпецификации");
	ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
	
КонецПроцедуры




#Область ДеревоСпецификаций

Процедура СохранитьРазвернутыеУровниДерева(Форма, СтрокаДерева = Неопределено) Экспорт
	
	Форма.РазвернутыеУровниДерева = Новый Структура;
	
	СохранитьСостояниеУровняДерева(Форма, 0, -1, ?(СтрокаДерева = Неопределено, Форма.ДеревоСпецификаций, СтрокаДерева));
	
КонецПроцедуры

Процедура ВосстановитьРазвернутыеУровниДерева(Форма, СтрокаДерева = Неопределено) Экспорт
	
	Если Форма.РазвернутыеУровниДерева = Неопределено ИЛИ Форма.РазвернутыеУровниДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВосстановитьСостояниеУровняДерева(Форма, 0, -1, ?(СтрокаДерева = Неопределено, Форма.ДеревоСпецификаций, СтрокаДерева));
	
КонецПроцедуры

// Сохраняет состояние дерева спецификации
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма
// 	Уровень - Число - уровень дерева
// 	ИндексРодителя - Число - индекс родителя
// 	Дерево - ДеревоЗначений - дерево
Процедура СохранитьСостояниеУровняДерева(Форма, Уровень, ИндексРодителя, Дерево)
	
	Элементы = Форма.Элементы;
	
	СтрокиДерева = Дерево.ПолучитьЭлементы();
	Для Индекс = 0 По СтрокиДерева.Количество() - 1 Цикл
		Строка = СтрокиДерева[Индекс];
		
		Развернут = Элементы.ДеревоСпецификаций.Развернут(Строка.ПолучитьИдентификатор());
		Если Развернут Тогда
			ДанныеСтроки = ОписаниеЭлементаСостоянияУровняДерева();
			ДанныеСтроки.Уровень         = Уровень;
			ДанныеСтроки.ИндексРодителя  = ИндексРодителя;
			ДанныеСтроки.Индекс          = Индекс;
			ДанныеСтроки.ВидСтроки       = Строка.ВидСтроки;
			ДанныеСтроки.Номенклатура    = Строка.Номенклатура;
			ДанныеСтроки.Характеристика  = Строка.Характеристика;
			Форма.РазвернутыеУровниДерева.Вставить("_"+Формат(Форма.РазвернутыеУровниДерева.Количество(),"ЧН=0; ЧГ="), ДанныеСтроки);
			СохранитьСостояниеУровняДерева(Форма, Уровень+1, Индекс, Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Восстанавливает состояние уровня дерева
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма
// 	Уровень - Число - уровень дерева
// 	ИндексРодителя - Число - Описание
// 	Дерево - ДеревоЗначений - дерево
Процедура ВосстановитьСостояниеУровняДерева(Форма, Уровень, ИндексРодителя, Дерево)
	
	Элементы = Форма.Элементы;
	
	СтрокиДерева = Дерево.ПолучитьЭлементы();
	Для Индекс = 0 По СтрокиДерева.Количество() - 1 Цикл
		Строка = СтрокиДерева[Индекс];
		
		Для каждого КлючИЗначение Из Форма.РазвернутыеУровниДерева Цикл
			ДанныеСтроки = КлючИЗначение.Значение; // см. ОписаниеЭлементаСостоянияУровняДерева
			Если Уровень = ДанныеСтроки.Уровень
				И ИндексРодителя = ДанныеСтроки.ИндексРодителя
				И Индекс = ДанныеСтроки.Индекс
				И Строка.ВидСтроки = ДанныеСтроки.ВидСтроки
				И (Строка.Номенклатура = ДанныеСтроки.Номенклатура ИЛИ ТипЗнч(Строка.Номенклатура) = Тип("Строка"))
				И Строка.Характеристика = ДанныеСтроки.Характеристика
			Тогда
				Элементы.ДеревоСпецификаций.Развернуть(Строка.ПолучитьИдентификатор(), Ложь);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВосстановитьСостояниеУровняДерева(Форма, Уровень+1, Индекс, Строка);
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор элемента состояния уровня дерева
// 
// Возвращаемое значение:
// 	Структура - из:
// * Уровень - Число - уровень дерева
// * ИндексРодителя - Число - индекс родителя
// * Индекс - Число - индекс элемента
// * ВидСтроки - ПеречислениеСсылка.ВидыСтрокДереваСпецификаций - вид строки дерева
// * Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
Функция ОписаниеЭлементаСостоянияУровняДерева()
	
	Возврат Новый Структура("Уровень,ИндексРодителя,Индекс,ВидСтроки,Номенклатура,Характеристика");
	
КонецФункции

#КонецОбласти


#КонецОбласти