
#Область ПрограммныйИнтерфейс

// Выполняет загрузку модели международного учета из файла
//
// Параметры:
// 	Параметры - Структура - Содержит адрес данных для загрузки:
// 	 * ДвоичныеДанные - ДвоичныеДанные - 
//
Процедура ЗагрузитьМодельУчета(Параметры) Экспорт
	
	ТипЗагружаемойМодели = ТипМодели(Параметры);
	
	ИмяВременногоФайлаДанных = ПолучитьИмяВременногоФайла("xml");
	Параметры.ДвоичныеДанные.Записать(ИмяВременногоФайлаДанных);
	
	Файл = Новый Файл(ИмяВременногоФайлаДанных);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаДанных);
	// проверка формата файла обмена
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		ОписаниеОшибки = Нстр("ru = 'Неверный формат файла загрузки'");
		ВызватьИсключение ОписаниеОшибки;
		
	КонецЕсли;
	
	Если ЧтениеXML.ЗначениеАтрибута("ModelType") <> ТипЗагружаемойМодели Тогда
		
		ОписаниеОшибки = Нстр("ru = 'Неверный тип загружаемой модели'");
		ВызватьИсключение ОписаниеОшибки;
		
	КонецЕсли;

	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
		
		ОписаниеОшибки = Нстр("ru = 'Неверный формат файла выгрузки'");
		ВызватьИсключение ОписаниеОшибки;
		
	КонецЕсли;
	
	ТаблицаЗаменяемыхУИН = ТаблицаЗаменяемыхУИН();//ТаблицаЗначений
	ЗагрузитьТаблицуПредопределенных(ЧтениеXML, ТаблицаЗаменяемыхУИН);
	
	Если Параметры.ЭтоМодельБюджетирования Тогда
		Для Каждого Строка Из Параметры.ЗаменяемыеУИН Цикл
			НоваяСтрока = ТаблицаЗаменяемыхУИН.Добавить();
			НоваяСтрока.СсылкаПоиска = Строка.СсылкаПоиска;
			НоваяСтрока.СсылкаЗамены = Строка.СсылкаЗамены;
		КонецЦикла;
	КонецЕсли;
	
	ЗаменитьСсылкиВФайле(ИмяВременногоФайлаДанных, Параметры.ЗаменяемыеУИН);
	
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайлаДанных);
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	
	// чтение и запись в ИБ записанных в выгрузке объектов
	Если Не ЧтениеXML.Прочитать() Тогда 
		
		ОписаниеОшибки = Нстр("ru = 'Нарушен формат файла после замены предопределенных ссылок'");
		ВызватьИсключение ОписаниеОшибки;
		
	КонецЕсли;
	
	Сериализатор = СериализаторXDTOСАннотациейТипов();
	
	НачатьТранзакцию();
	Попытка
		
		ПроверитьФО = Ложь;
		
		Пока Сериализатор.ВозможностьЧтенияXML(ЧтениеXML) Цикл
			
			ТипЗагружаемогоОбъекта = ЧтениеXML.ЛокальноеИмя;
			
			ЗаписанноеЗначение = Сериализатор.ПрочитатьXML(ЧтениеXML); //СправочникОбъект
			ЗаписанноеЗначение.ОбменДанными.Загрузка = Истина;
			
			Записывать = Истина;
			Если Параметры.ЭтоМодельБюджетирования Тогда
				Если СтрНайти(ТипЗагружаемогоОбъекта, "InformationRegisterRecordSet") <> 0 Тогда
					Для Каждого Отбор Из ЗаписанноеЗначение.Отбор Цикл
						Если Параметры.ЗагружаемыеУИН.Найти(XMLСтрока(Отбор.Значение)) = Неопределено Тогда
							Записывать = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если ЗаписанноеЗначение.ЭтоНовый() Тогда
						ИскомаяСтрокаXML = XMLСтрока(ЗаписанноеЗначение.ПолучитьСсылкуНового());
					Иначе
						ИскомаяСтрокаXML = XMLСтрока(ЗаписанноеЗначение.Ссылка);
					КонецЕсли;
					Если Параметры.ЗагружаемыеУИН.Найти(ИскомаяСтрокаXML) = Неопределено Тогда
						Записывать = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если Записывать Тогда
					Если ТипЗнч(ЗаписанноеЗначение) = Тип("СправочникОбъект.ЭлементыФинансовыхОтчетов") Тогда
						РеквизитХранилище = ЗаписанноеЗначение.ДополнительныйОтбор;
						ЗаменаСсылокВНастройкахКД(РеквизитХранилище, Параметры);
						ЗаписанноеЗначение.ДополнительныйОтбор = РеквизитХранилище;
					ИначеЕсли ТипЗнч(ЗаписанноеЗначение) = Тип("СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов")
						Или ТипЗнч(ЗаписанноеЗначение) = Тип("СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
							РеквизитХранилище = ЗаписанноеЗначение.КомпоновщикНастроек;
							ЗаменаСсылокВНастройкахКД(РеквизитХранилище, Параметры);
							ЗаписанноеЗначение.КомпоновщикНастроек = РеквизитХранилище;
					ИначеЕсли ТипЗнч(ЗаписанноеЗначение) = Тип("СправочникОбъект.ШаблоныВводаНефинансовыхПоказателей") Тогда
						Для Каждого Стр Из ЗаписанноеЗначение.ПоказателиШаблона Цикл
							РеквизитХранилище = Стр.ХранилищеНастроекКомпоновкиДанных;
							ЗаменаСсылокВНастройкахКД(РеквизитХранилище, Параметры);
							Стр.ХранилищеНастроекКомпоновкиДанных = РеквизитХранилище;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Записывать Тогда
				ЗаписанноеЗначение.Записать();
			КонецЕсли;
			
			
			Если ТипЗнч(ЗаписанноеЗначение) = Тип("СправочникОбъект.ВидыБюджетов") Тогда
				НаборЗаписей = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ВидБюджета.Установить(ЗаписанноеЗначение.Ссылка);
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
		КонецЦикла;                                            
		
		// проверка формата файла обмена
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
			
			ОписаниеОшибки = Нстр("ru = 'Неверный формат файла выгрузки'");
			ВызватьИсключение ОписаниеОшибки;
			
		КонецЕсли;
		
		Если Не ЧтениеXML.Прочитать()
			Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "PredefinedData" Тогда
			
			ОписаниеОшибки = Нстр("ru = 'Неверный формат файла выгрузки'");
			ВызватьИсключение ОписаниеОшибки;
			
		КонецЕсли;
		
		ЧтениеXML.Пропустить();
		
		Если Параметры.ЭтоМодельБюджетирования Тогда
			ЧтениеXML.Пропустить();
			ЧтениеXML.Пропустить();
		КонецЕсли;
		
		Если Не ЧтениеXML.Прочитать()
			Или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
			Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
			
			ОписаниеОшибки = Нстр("ru = 'Неверный формат файла выгрузки'");
			ВызватьИсключение ОписаниеОшибки;
			
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайлаДанных);
		
		Если Параметры.Свойство("ЭтоМодельМеждународногоУчета") И Параметры.ЭтоМодельМеждународногоУчета Тогда
			
			ОбработатьФункциональныеОпции();
			
			СтруктураРезультата = Новый Структура("ПроверитьФО", ПроверитьФО);
			ПоместитьВоВременноеХранилище(СтруктураРезультата, Параметры.АдресРезультата);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайлаДанных);

		ОтменитьТранзакцию();
		
		МассивСтрокОшибки = Новый Массив;
		МассивСтрокОшибки.Добавить(Нстр("ru = 'Возможно структура загружаемых данных не соответствует конфигурации, проверьте актуальность файла данных'"));
		МассивСтрокОшибки.Добавить(ОписаниеОшибки());
        ТекстОшибки = СтрСоединить(МассивСтрокОшибки, Символы.ПС);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет выгрузку модели международного учета в файла
//
// Параметры:
// 	Параметры - Структура - Структура параметров
//
Процедура ВыгрузитьМодельУчета(Параметры) Экспорт
	
	ТипВыгружаемойМодели = ТипМодели(Параметры);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	
	СоставВыгрузки = СоставВыгрузки(Параметры.ДанныеВыгрузки);
	
	Если СоставВыгрузки.Количество() = 0 Тогда
		
		ОписаниеОшибки = Нстр("ru = 'Не задан состав выгрузки'");
		ВызватьИсключение ОписаниеОшибки;
		
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("core", "http://v8.1c.ru/data");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	
	ЗаписьXML.ЗаписатьАтрибут("ModelType", ТипВыгружаемойМодели);

	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	
	Сериализатор = СериализаторXDTOСАннотациейТипов();
	ТаблицаПредопределенных = ТаблицаПредопределенныхДанных();
	ТаблицаФильтрации = ТаблицаФильтрации();

	ВыгрузкаДанных(Сериализатор, ЗаписьXML, СоставВыгрузки, ТаблицаПредопределенных, ТаблицаФильтрации);
	
	ТаблицаФильтрации.Свернуть("ИмяТаблицы, Ссылка, СсылкаВладелец, ПредставлениеСсылка, ПредставлениеСсылкаВладелец");
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:Data
	ВыгрузитьТаблицуПредопределенных(ТаблицаПредопределенных, ЗаписьXML);
	
	Если Параметры.ЭтоМодельБюджетирования Тогда
		ВыгрузитьТаблицуФильтрации(ТаблицаФильтрации, ЗаписьXML);
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:_1CV8DtUD 
	
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, Параметры.АдресХранилища);
	
	УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Таблица данных к выгрузке.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * ОбъектМД - ОбъектМетаданных - объект метаданных для выгрузки
//   * РезультатЗапроса - РезультатЗапроса - результат запроса на выгрузку ссылок
//
Функция ТаблицаДанныеВыгрузки() Экспорт
	
	ДанныеВыгрузки = Новый ТаблицаЗначений;
	ДанныеВыгрузки.Колонки.Добавить("ИмяМД");
	ДанныеВыгрузки.Колонки.Добавить("ТекстЗапроса");
	ДанныеВыгрузки.Колонки.Добавить("Владелец"); 
	ДанныеВыгрузки.Колонки.Добавить("МассивОтбора"); 
	ДанныеВыгрузки.Колонки.Добавить("ПолеОтбора"); 
	
	Возврат ДанныеВыгрузки;
	
КонецФункции

// Добавляет строку в данные выгрузки с учетом отбора.
// 
// Параметры:
//  ДанныеВыгрузки - ТаблицаЗначений - Данные выгрузки:
//   * ОбъектМД - ОбъектМетаданных - объект метаданных для выгрузки
//   * РезультатЗапроса - РезультатЗапроса - результат запроса на выгрузку ссылок
//  ОбъектМД - ОбъектМетаданныхСправочник, ОбъектМетаданныхПланВидовХарактеристик, ОбъектМетаданныхРегистрСведений, ОбъектМетаданныхПланСчетов - Объект МД
//  Владелец - ЛюбаяСсылка - Ссылка на владельца фильтра загрузки
//  ОтборПоСсылкам - Неопределено, Массив из ЛюбаяСсылка - Отбор по ссылкам
//  ПолеОтбора - Строка - Поле отбора для отбора
Процедура ДобавитьСтрокуВДанныеВыгрузки(ДанныеВыгрузки, ОбъектМД, Владелец = Неопределено, ОтборПоСсылкам = Неопределено, ПолеОтбора = "") Экспорт
	
	ЕстьОтборПоСсылкам =  ОтборПоСсылкам <> Неопределено;
	
	ТекстЗапроса = ПолучитьТекстЗапроса(ОбъектМД, ЕстьОтборПоСсылкам, ПолеОтбора);
	
	НоваяСтрока = ДанныеВыгрузки.Добавить();
	НоваяСтрока.ИмяМД = ОбъектМД.ПолноеИмя();                   
	НоваяСтрока.ТекстЗапроса = ТекстЗапроса;
	НоваяСтрока.Владелец = Владелец;
	НоваяСтрока.МассивОтбора = ОтборПоСсылкам;
	НоваяСтрока.ПолеОтбора = ПолеОтбора;
	
КонецПроцедуры

// Получает имя измерения для отбора в регистре
// 
// Параметры:
//  ОбъектМДОтбора - ОбъектМетаданных - Объект метаданных в котором ищем тип
//  ОбъектМД - ОбъектМетаданных - Объект метаданных поиска
// 
// Возвращаемое значение:
//  Строка - Имя измерения для отбора
//
Функция ИмяИзмеренияДляОтбора(ОбъектМДОтбора, ОбъектМД) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМДОтбора.ПолноеИмя());
	ИскомыйТип = ТипЗнч(МенеджерОбъекта.ПолучитьСсылку());
		
	ИзмеренияОбъектаМД = ОбъектМД.Измерения;
	Для Каждого Измерение Из ИзмеренияОбъектаМД Цикл
		Если Измерение.Тип.СодержитТип(ИскомыйТип) Тогда
			Возврат Измерение.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТипМодели(Параметры)
	
	ТипМодели = "";
	
	Если Параметры.Свойство("ЭтоМодельБюджетирования") И Параметры.ЭтоМодельБюджетирования Тогда
		ТипМодели = "Budgeting Model";
	ИначеЕсли Параметры.Свойство("ЭтоМодельМеждународногоУчета") И Параметры.ЭтоМодельМеждународногоУчета Тогда
		ТипМодели = "International Accounting Model";
	Иначе 
		ОписаниеОшибки = Нстр("ru = 'Не определен тип модели'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Возврат ТипМодели;
	
КонецФункции

Процедура ВыгрузкаДанных(Сериализатор, ЗаписьXML, СоставВыгрузки, ТаблицаПредопределенных, ТаблицаФильтрации)
	
	ВыгруженныеОбъекты = Новый ТаблицаЗначений;
	ВыгруженныеОбъекты.Колонки.Добавить("Ссылка");
	ВыгруженныеОбъекты.Индексы.Добавить("Ссылка");
	
	Попытка
		
		Для Каждого СтрокаВыгрузки Из СоставВыгрузки Цикл
			
			Если ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаВыгрузки.ОбъектМД.ПолноеИмя()) = Неопределено Тогда
				ОписаниеОшибки = Нстр("ru = 'Выгрузка данных. Внутренняя ошибка'");
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
			
			Если Метаданные.РегистрыСведений.Содержит(СтрокаВыгрузки.ОбъектМД) Тогда
				ЗаписьРегистра(СтрокаВыгрузки, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
			Иначе
				ЗаписьДанныхОбъектногоТипа(СтрокаВыгрузки, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
			КонецЕсли;
		
		КонецЦикла;
		
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписьДанныхОбъектногоТипа(СтрокаВыгрузки, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации)
	ЗапросИЗапись(СтрокаВыгрузки.РезультатЗапроса, СтрокаВыгрузки.Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации, Истина);
КонецПроцедуры

Процедура ЗапросИЗапись(РезультатЗапроса, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации, ЗапросВерхнегоУровня = Ложь)
	ОбработкаРезультатаЗапроса(РезультатЗапроса, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации, Истина, ЗапросВерхнегоУровня);
КонецПроцедуры

// Обработка результата запроса.
// 
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - Результат запроса
//  Владелец - ЛюбаяСсылка - Ссылка на владельца фильтра загрузки
//  Сериализатор - СериализаторXDTO - Сериализатор
//  ЗаписьXML - ЗаписьXML
//  ТаблицаПредопределенных - ТаблицаЗначений - Таблица предопределенных элементов
//  ВыгруженныеОбъекты - Массив из ЛюбаяСсылка - Выгруженные объекты
//  ТаблицаФильтрации - ТаблицаЗначений - Таблица фильрации данных при загрузке
//  ЭтоЗапросПоОбъекту - Булево - Это запрос по объекту
//  ЗапросВерхнегоУровня - Булево - Запрос верхнего уровня
//
Процедура ОбработкаРезультатаЗапроса(РезультатЗапроса, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации, ЭтоЗапросПоОбъекту = Ложь, 
	ЗапросВерхнегоУровня = Ложь)
	
	ВыборкаИзРезультатовЗапроса = РезультатЗапроса.Выбрать(); 
	Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			// Выгрузка ссылочных объектов
			Ссылка = ВыборкаИзРезультатовЗапроса.Ссылка;
			Объект = Ссылка.ПолучитьОбъект();
			МетаданныеОбъекта = Объект.Метаданные();
			
			ДобавитьСтрокуТаблицыФильтрации(ТаблицаФильтрации, МетаданныеОбъекта.ПолноеИмя(), Ссылка, Владелец);  //МетаданныеОбъекта.ПолноеИмя()
			Если СсылкаВыгружена(ВыгруженныеОбъекты, Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьСсылкуКВыгруженным(ВыгруженныеОбъекты, Ссылка);
			
		КонецЕсли;
		
		// Перебираем колонки запроса в поисках ссылочных значений, которые, возможно, нужно выгрузить
		Для Каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
			
			ЗначениеКолонки = ВыборкаИзРезультатовЗапроса[КолонкаЗапроса.Имя];
			Если ТипЗнч(ЗначениеКолонки) = Тип("РезультатЗапроса") Тогда
				ОбработкаРезультатаЗапроса(ЗначениеКолонки, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
			Иначе
				ЗаписатьЗначениеПриНеобходимости(ЗначениеКолонки, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтоЗапросПоОбъекту Тогда
			
			Объект = Ссылка.ПолучитьОбъект();
			
			Попытка
				
				Сериализатор.ЗаписатьXML(ЗаписьXML, Объект);
				
				МетаданныеОбъекта = Объект.Метаданные();
				
				Если ЭтоМетаданныеСПредопределеннымиЭлементами(МетаданныеОбъекта) И Объект.Предопределенный Тогда
					
					МетаданныеИмяПредопределенныхДанных = Объект.Метаданные().СтандартныеРеквизиты.ИмяПредопределенныхДанных; //ОбъектМетаданныхРеквизит
					
					ДобавитьСтрокуТаблицыПредопределенных(
							ТаблицаПредопределенных,
							МетаданныеОбъекта.ПолноеИмя(),
							XMLСтрока(Ссылка),
							МетаданныеИмяПредопределенныхДанных.Имя,
							Объект.ИмяПредопределенныхДанных)
					
				ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Валюты") Тогда
					
					ДобавитьСтрокуТаблицыПредопределенных(
							ТаблицаПредопределенных,
							МетаданныеОбъекта.ПолноеИмя(),
							XMLСтрока(Ссылка),
							Объект.Метаданные().СтандартныеРеквизиты.Код.Имя,
							Объект.Код)
				
				ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных") Тогда
					
					ДобавитьСтрокуТаблицыПредопределенных(
							ТаблицаПредопределенных,
							МетаданныеОбъекта.ПолноеИмя(),
							XMLСтрока(Ссылка),
							Объект.Метаданные().СтандартныеРеквизиты.Наименование.Имя,
							Объект.Наименование)
					
				КонецЕсли;

			Исключение
				
				ШаблонОшибки = Нстр("ru = 'При выгрузке объекта %1(%2) возникла ошибка: |%3'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Объект, ТипЗнч(Объект),  ОписаниеОшибки());
				ВызватьИсключение ТекстОшибки;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗначениеПриНеобходимости(АнализируемоеЗначение, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации)
	
	Если Не ЗначениеЗаполнено(АнализируемоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(АнализируемоеЗначение);
	
	Если ТипЗначения = Тип("ХранилищеЗначения") Тогда
		ВыгрузкаСсылокИзНастроекКД(АнализируемоеЗначение, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		Возврат; // это не ссылка
	КонецЕсли;
	
	ОбъектМД = Метаданные.НайтиПоТипу(ТипЗначения);
	
	Если ОбщегоНазначения.ЭтоПеречисление(ОбъектМД) Тогда
		Возврат; // это перечисление
	КонецЕсли;
	
	ДобавитьСтрокуТаблицыФильтрации(ТаблицаФильтрации, ОбъектМД.ПолноеИмя(), АнализируемоеЗначение, Владелец);
	
	Если СсылкаВыгружена(ВыгруженныеОбъекты, АнализируемоеЗначение) Тогда
		Возврат; // объект уже был выгружен
	КонецЕсли;
	
	ДопЗапрос = Новый Запрос;
	ТекстПодзапроса = "ВЫБРАТЬ * ИЗ #Таблица КАК ТаблицаОбъекта_ ГДЕ Ссылка = &Ссылка";
	ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "#Таблица", ОбъектМД.ПолноеИмя());
	ДопЗапрос.Текст = ТекстПодзапроса;
	ДопЗапрос.УстановитьПараметр("Ссылка", АнализируемоеЗначение);
	РезультатЗапроса = ДопЗапрос.Выполнить();
	
	ЗапросИЗапись(РезультатЗапроса, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
	
КонецПроцедуры

Процедура ЗаписьРегистра(СтрокаВыгрузки, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации)
	
	ОбъектМД = СтрокаВыгрузки.ОбъектМД;
	РезультатЗапроса = СтрокаВыгрузки.РезультатЗапроса;
	Владелец = СтрокаВыгрузки.Владелец;

	ЗаписьЧерезНаборЗаписей(ОбъектМД, РезультатЗапроса, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
	
КонецПроцедуры

Процедура ЗаписьЧерезНаборЗаписей(ОбъектМД, РезультатЗапроса, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации)
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМД.ПолноеИмя());
	НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
	Отбор = НаборЗаписей.Отбор;
	
	КоллекцияКолонок = РезультатЗапроса.Колонки; // КоллекцияКолонокРезультатаЗапроса -
	
	ВыборкаИзРезультата = РезультатЗапроса.Выбрать();
	Пока ВыборкаИзРезультата.Следующий() Цикл
		
		// Отбор устанавливаем для регистров, у которых есть хотя бы один отбор (измерение)
		Для Каждого Колонка Из КоллекцияКолонок Цикл 
			Отбор[Колонка.Имя].Значение = ВыборкаИзРезультата[Колонка.Имя];
			Отбор[Колонка.Имя].ВидСравнения = ВидСравнения.Равно;
			Отбор[Колонка.Имя].Использование = Истина;
		КонецЦикла;
			
		НаборЗаписей.Прочитать();
		
		// проверяем все записанные в наборе значения на необходимость записи "по ссылке"
		ВыгрузитьПодчиненныеЗначенияНабора(Сериализатор, ЗаписьXML, НаборЗаписей, Владелец, КоллекцияКолонок, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
		
		Попытка
			//ДобавитьСтрокуТаблицыФильтрации(ТаблицаФильтрации, ОбъектМД.ПолноеИмя(), НаборЗаписей, Владелец);
			Сериализатор.ЗаписатьXML(ЗаписьXML, НаборЗаписей);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьПодчиненныеЗначенияНабора(Сериализатор, ЗаписьXML, НаборЗаписей, Владелец, МассивКолонок, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации)
	
	Для Каждого ЗаписьИзНабора Из НаборЗаписей Цикл
		
		Для Каждого Колонка Из МассивКолонок Цикл
			
			СохраненноеЗначение = ЗаписьИзНабора[Колонка.Имя]; // КоллекцияКолонокРезультатаЗапроса -
			ЗаписатьЗначениеПриНеобходимости(СохраненноеЗначение, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоставВыгрузки(ДанныеВыгрузки)
	
	
	СоставВыгрузки = Новый ТаблицаЗначений;
	СоставВыгрузки.Колонки.Добавить("ОбъектМД");
	СоставВыгрузки.Колонки.Добавить("Владелец");
	СоставВыгрузки.Колонки.Добавить("РезультатЗапроса");
	
	Для Каждого Строка из ДанныеВыгрузки Цикл
		
		ЕстьОтборПоСсылкам =  Строка.МассивОтбора <> Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.Текст = Строка.ТекстЗапроса;
		Если ЕстьОтборПоСсылкам Тогда
			Запрос.УстановитьПараметр("МассивСсылок", Строка.МассивОтбора);
		КонецЕсли;
		РезультатЗапроса = Запрос.Выполнить();
		
		НоваяСтрока = СоставВыгрузки.Добавить();
		НоваяСтрока.ОбъектМД = Метаданные.НайтиПоПолномуИмени(Строка.ИмяМД);
		НоваяСтрока.Владелец = Строка.Владелец;
		НоваяСтрока.РезультатЗапроса = РезультатЗапроса;
		
	КонецЦикла;
	
	Возврат СоставВыгрузки;
	
КонецФункции

Функция ТаблицаФильтрации()
	
	ТаблицаФильтрации = Новый ТаблицаЗначений;
	ТаблицаФильтрации.Колонки.Добавить("ИмяТаблицы");
	ТаблицаФильтрации.Колонки.Добавить("Ссылка");
	ТаблицаФильтрации.Колонки.Добавить("СсылкаВладелец");
	ТаблицаФильтрации.Колонки.Добавить("ПредставлениеСсылка");
	ТаблицаФильтрации.Колонки.Добавить("ПредставлениеСсылкаВладелец");
	
	Возврат ТаблицаФильтрации;
	
КонецФункции


Процедура ДобавитьСтрокуТаблицыФильтрации(ТаблицаФильтрации, ИмяТаблицыПоиска, СсылкаНаЭлемент, СсылкаВладелец)
	
	НоваяСтрока = ТаблицаФильтрации.Добавить();
	НоваяСтрока.ИмяТаблицы = ИмяТаблицыПоиска;
	НоваяСтрока.Ссылка = XMLСтрока(СсылкаНаЭлемент);
	НоваяСтрока.СсылкаВладелец = XMLСтрока(СсылкаВладелец);
	НоваяСтрока.ПредставлениеСсылка = СсылкаНаЭлемент;
	НоваяСтрока.ПредставлениеСсылкаВладелец = СсылкаВладелец;

КонецПроцедуры

Процедура ВыгрузитьТаблицуФильтрации(ТаблицаФильтрации, ЗаписьXML)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FilterData");
	
	Если ТаблицаФильтрации.Количество() > 0 Тогда
		
		Для Каждого Элемент Из ТаблицаФильтрации Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("itemFilterData");
			ЗаписьXML.ЗаписатьАтрибут("ИмяТаблицы", Элемент.ИмяТаблицы);
			ЗаписьXML.ЗаписатьАтрибут("Ссылка", Элемент.Ссылка);
			ЗаписьXML.ЗаписатьАтрибут("СсылкаВладелец", Элемент.СсылкаВладелец);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ТаблицаЗаменяемыхУИН()
	
	ТаблицаЗаменяемыхУИН = Новый ТаблицаЗначений;
	ТаблицаЗаменяемыхУИН.Колонки.Добавить("СсылкаПоиска");
	ТаблицаЗаменяемыхУИН.Колонки.Добавить("СсылкаЗамены");
	
	Возврат ТаблицаЗаменяемыхУИН;
	
КонецФункции

Функция ТаблицаПредопределенныхДанных()
	
	ТаблицаПредопределенных = Новый ТаблицаЗначений;
	ТаблицаПредопределенных.Колонки.Добавить("ИмяТаблицы");
	ТаблицаПредопределенных.Колонки.Добавить("Ссылка");
	ТаблицаПредопределенных.Колонки.Добавить("ПолеПоиска");
	ТаблицаПредопределенных.Колонки.Добавить("ЗначениеПоиска");
	
	Возврат ТаблицаПредопределенных;
	
КонецФункции

Процедура ДобавитьСтрокуТаблицыПредопределенных(ТаблицаПредопределенных, ИмяТаблицыПоиска, СсылкаНаЭлемент, ПолеПоиска, ЗначениеПоиска)
	
	НоваяСтрока = ТаблицаПредопределенных.Добавить();
	НоваяСтрока.ИмяТаблицы = ИмяТаблицыПоиска;
	НоваяСтрока.Ссылка = СсылкаНаЭлемент;
	НоваяСтрока.ПолеПоиска = ПолеПоиска;
	НоваяСтрока.ЗначениеПоиска = ЗначениеПоиска;
	
КонецПроцедуры

Процедура ВыгрузитьТаблицуПредопределенных(ТаблицаПредопределенных, ЗаписьXML)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("PredefinedData");
	
	Если ТаблицаПредопределенных.Количество() > 0 Тогда
		
		ТаблицаПредопределенных.Сортировать("ИмяТаблицы");
		
		ИмяПредыдущейТаблицы = "";
		
		Для Каждого Элемент Из ТаблицаПредопределенных Цикл
			
			Если ИмяПредыдущейТаблицы <> Элемент.ИмяТаблицы Тогда
				Если Не ПустаяСтрока(ИмяПредыдущейТаблицы) Тогда
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
				ЗаписьXML.ЗаписатьНачалоЭлемента(Элемент.ИмяТаблицы);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("itemPredefinedData");
			ЗаписьXML.ЗаписатьАтрибут("Ссылка", Элемент.Ссылка);
			ЗаписьXML.ЗаписатьАтрибут("ПолеПоиска", Элемент.ПолеПоиска);
			ЗаписьXML.ЗаписатьАтрибут("ЗначениеПоиска", Элемент.ЗначениеПоиска);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ИмяПредыдущейТаблицы = Элемент.ИмяТаблицы;
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗагрузитьТаблицуПредопределенных(ЧтениеXML, ТаблицаЗаменяемыхУИН)
	
	ТаблицаПредопределенных = ТаблицаПредопределенныхДанных();
	
	ЧтениеXML.Пропустить(); // При первом чтении пропускам основной блок данных
	ЧтениеXML.Прочитать();
	
	ВременнаяСтрока = ТаблицаПредопределенных.Добавить();
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.ЛокальноеИмя <> "item" Тогда
				ВременнаяСтрока.ИмяТаблицы = ЧтениеXML.ЛокальноеИмя;
				
				ТекстЗапроса = 
				"ВЫБРАТЬ
				|	Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	#Таблица КАК Таблица
				|ГДЕ
				|	&ПолеПоиска = &ЗначениеПоиска";
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Таблица", ВременнаяСтрока.ИмяТаблицы);
			Иначе
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					ВременнаяСтрока[ЧтениеXML.ЛокальноеИмя] = ЧтениеXML.Значение;
				КонецЦикла;
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеПоиска", "Таблица." + ВременнаяСтрока.ПолеПоиска);
				Запрос = Новый Запрос(ТекстЗапроса);

				Запрос.УстановитьПараметр("ЗначениеПоиска", ВременнаяСтрока.ЗначениеПоиска);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Если Выборка.Количество() = 1 Тогда
						Выборка.Следующий();
						
						СсылкаВБазе = XMLСтрока(Выборка.Ссылка);
						СсылкаВФайле = ВременнаяСтрока.Ссылка;
						
						Если СсылкаВБазе <> СсылкаВФайле Тогда
							НоваяСтрока = ТаблицаЗаменяемыхУИН.Добавить;
							НоваяСтрока.СсылкаПоиска = СсылкаВФайле;
							НоваяСтрока.СсылкаЗамены = СсылкаВБазе;
						КонецЕсли;
					Иначе
						ТекстИсключения = НСтр("ru = 'Обнаружено дублирование предопределенных элементов %1 в таблице %2'");
						ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ВременнаяСтрока.ИмяПредопределенныхДанных);
						ТекстИсключения = СтрЗаменить(ТекстИсключения, "%2", ВременнаяСтрока.ИмяТаблицы);
						
						ВызватьИсключение ТекстИсключения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ЗаменитьСсылкиВФайле(ИмяФайла, ТаблицаЗаменяемыхУИН)
	
	ПотокЧтения = Новый ЧтениеТекста(ИмяФайла);
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	
	ПотокЗаписи = Новый ЗаписьТекста(ВременныйФайл);
	
	// Константы для разбора текста
	НачалоТипа = "xsi:type=""v8:";
	ДлинаНачалаТипа = СтрДлина(НачалоТипа);
	КонецТипа = """>";
	ДлинаКонцаТипа = СтрДлина(КонецТипа);
	
	ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	Пока ИсходнаяСтрока <> Неопределено Цикл
		
		ОстатокСтроки = Неопределено;
		
		ТекущаяПозиция = 1;
		ПозицияТипа = Найти(ИсходнаяСтрока, НачалоТипа);
		Пока ПозицияТипа > 0 Цикл
			
			ПотокЗаписи.Записать(Сред(ИсходнаяСтрока, ТекущаяПозиция, ПозицияТипа - 1 + ДлинаНачалаТипа));
			
			ОстатокСтроки = Сред(ИсходнаяСтрока, ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1);
			ТекущаяПозиция = ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1;
			
			ПозицияКонцаТипа = Найти(ОстатокСтроки, КонецТипа);
			Если ПозицияКонцаТипа = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ИмяТипа = Лев(ОстатокСтроки, ПозицияКонцаТипа - 1);
			
			ПотокЗаписи.Записать(ИмяТипа);
			ПотокЗаписи.Записать(КонецТипа);
			
			ИсходнаяСсылкаXML = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа, 36);
			
			СтрокаЗамены = ТаблицаЗаменяемыхУИН.Найти(ИсходнаяСсылкаXML, "СсылкаПоиска");
			Если СтрокаЗамены = Неопределено Тогда
				ПотокЗаписи.Записать(ИсходнаяСсылкаXML);
			Иначе
				ПотокЗаписи.Записать(СтрокаЗамены.СсылкаЗамены);
			КонецЕсли;
			
			ТекущаяПозиция = ТекущаяПозиция + ПозицияКонцаТипа - 1 + ДлинаКонцаТипа + 36;
			ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа + 36);
			ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
			
		КонецЦикла;
		
		Если ОстатокСтроки <> Неопределено Тогда
			ПотокЗаписи.ЗаписатьСтроку(ОстатокСтроки);
		Иначе
			ПотокЗаписи.ЗаписатьСтроку(ИсходнаяСтрока);
		КонецЕсли;
		
		ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
		
	КонецЦикла;
	
	ПотокЧтения.Закрыть();
	ПотокЗаписи.Закрыть();
	
	КопироватьФайл(ВременныйФайл, ИмяФайла);
	УдалитьФайлы(ВременныйФайл);
	
КонецПроцедуры

Процедура ЗаменаСсылокВНастройкахКД(РеквизитХранилище, Параметры)
	
	Если ТипЗнч(РеквизитХранилище) = Тип("ХранилищеЗначения") Тогда
		НастройкиКомпоновки = РеквизитХранилище.Получить();
		Если ТипЗнч(НастройкиКомпоновки) =  Тип("НастройкиКомпоновкиДанных") Тогда 
			Для Каждого Стр Из НастройкиКомпоновки.Отбор.Элементы Цикл
				Если ТипЗнч(Стр) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;	
				Если ТипЗнч(Стр.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					Для Каждого Эл Из Стр.ПравоеЗначение Цикл
						Если Эл.Значение <> Неопределено И (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Эл.Значение)) 
							ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Эл.Значение))) Тогда

							УИН = Строка(Эл.Значение.УникальныйИдентификатор());
							НайденнаяСтрока = Параметры.ЗаменаЗначенийАналитик.Найти(УИН, "АналитикаФайлаУИН");
							Если НайденнаяСтрока <> Неопределено Тогда
								АналитикаБД = НайденнаяСтрока.АналитикаБД;
								Если ЗначениеЗаполнено(АналитикаБД) Тогда
									Эл.Значение = АналитикаБД;
								КонецЕсли;
							Иначе
								СтрокаЗамены = Параметры.ТаблицаЗаменяемыхУИН.Найти(Новый УникальныйИдентификатор(УИН), "СсылкаПоиска");
 								Если СтрокаЗамены <> Неопределено Тогда
								УИД = Новый УникальныйИдентификатор(СтрокаЗамены.СсылкаЗамены);
									Если ТипЗнч(Эл.Значение) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
										Эл.Значение = Справочники.ВидыБюджетов.ПолучитьСсылку(УИД);
									
									
									ИначеЕсли ТипЗнч(Эл.Значение) = Тип("СправочникСсылка.МоделиБюджетирования") Тогда
										Эл.Значение = Справочники.МоделиБюджетирования.ПолучитьСсылку(УИД);
									Конецесли;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				Иначе 
					Если Стр.ПравоеЗначение <> Неопределено И (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Стр.ПравоеЗначение)) 
						ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Стр.ПравоеЗначение))) Тогда
						
						УИН = Строка(Стр.ПравоеЗначение.УникальныйИдентификатор());
						НайденнаяСтрока = Параметры.ЗаменаЗначенийАналитик.Найти(УИН, "АналитикаФайлаУИН");
						Если НайденнаяСтрока <> Неопределено Тогда
							АналитикаБД = НайденнаяСтрока.АналитикаБД;
							Если ЗначениеЗаполнено(АналитикаБД) Тогда
								Стр.ПравоеЗначение = АналитикаБД;
							КонецЕсли;
						Иначе
							СтрокаЗамены = Параметры.ТаблицаЗаменяемыхУИН.Найти(Новый УникальныйИдентификатор(УИН), "СсылкаПоиска");
 							Если СтрокаЗамены <> Неопределено Тогда
							УИД = Новый УникальныйИдентификатор(СтрокаЗамены.СсылкаЗамены);
								Если ТипЗнч(Эл.Значение) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
									Эл.Значение = Справочники.ВидыБюджетов.ПолучитьСсылку(УИД);
									
								
								ИначеЕсли ТипЗнч(Эл.Значение) = Тип("СправочникСсылка.МоделиБюджетирования") Тогда
									Эл.Значение = Справочники.МоделиБюджетирования.ПолучитьСсылку(УИД);
								Конецесли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			РеквизитХранилище = Новый ХранилищеЗначения(НастройкиКомпоновки);
			
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


Функция ЭтоМетаданныеСПредопределеннымиЭлементами(ОбъектМетаданных)
	
	Возврат ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоПланСчетов(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМетаданных);
	
КонецФункции

Процедура ВыгрузкаСсылокИзНастроекКД(РеквизитХранилище, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации)
	Если ТипЗнч(РеквизитХранилище) = Тип("ХранилищеЗначения") Тогда
		НастройкиКомпоновки = РеквизитХранилище.Получить();
		Если ТипЗнч(НастройкиКомпоновки) =  Тип("НастройкиКомпоновкиДанных") Тогда 
			Для Каждого Стр Из НастройкиКомпоновки.Отбор.Элементы Цикл
					Если ТипЗнч(Стр) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
						Продолжить;
					КонецЕсли;			
					Если ТипЗнч(Стр.ПравоеЗначение) = Тип("СписокЗначений") Тогда
						Для Каждого Эл Из Стр.ПравоеЗначение Цикл
							Если Эл.Значение <> Неопределено И (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Эл.Значение)) 
									ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Эл.Значение))) Тогда
								ЗаписатьЗначениеПриНеобходимости(Эл.Значение, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
							КонецЕсли;
						КонецЦикла;
					Иначе 
						Если Стр.ПравоеЗначение <> Неопределено И (Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Стр.ПравоеЗначение)) 
								ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Стр.ПравоеЗначение))) Тогда
							ЗаписатьЗначениеПриНеобходимости(Стр.ПравоеЗначение, Владелец, Сериализатор, ЗаписьXML, ТаблицаПредопределенных, ВыгруженныеОбъекты, ТаблицаФильтрации);
						КонецЕсли;
					КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Сериализатор XDTOСАннотацией типов.
// 
// Возвращаемое значение:
//  СериализаторXDTO - Сериализатор XDTOСАннотацией типов
Функция СериализаторXDTOСАннотациейТипов() Экспорт
	
	ТипыСАннотациейСсылок = ПредопределенныеТипыПриВыгрузке();
	
	Если ТипыСАннотациейСсылок.Количество() > 0 Тогда
		Фабрика = ПолучитьФабрикуСУказаниемТипов(ТипыСАннотациейСсылок);
		Сериализатор = Новый СериализаторXDTO(Фабрика);
	Иначе
		Сериализатор = СериализаторXDTO;
	КонецЕсли;
	
	Возврат Сериализатор;
	
КонецФункции

Функция ПредопределенныеТипыПриВыгрузке()
	
	Типы = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Если ЭтоОбъектМетаданныхКонфигурации(ОбъектМетаданных) Тогда
			Типы.Добавить(ОбъектМетаданных);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыСчетов Цикл
		Если ЭтоОбъектМетаданныхКонфигурации(ОбъектМетаданных) Тогда
			Типы.Добавить(ОбъектМетаданных);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		Если ЭтоОбъектМетаданныхКонфигурации(ОбъектМетаданных) Тогда
			Типы.Добавить(ОбъектМетаданных);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		Если ЭтоОбъектМетаданныхКонфигурации(ОбъектМетаданных) Тогда
			Типы.Добавить(ОбъектМетаданных);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Типы;
	
КонецФункции

Функция ЭтоОбъектМетаданныхКонфигурации(ОбъектМетаданных)
	ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	Если ТипЗнч(ИдентификаторОбъекта) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьФабрикуСУказаниемТипов(Знач Типы)
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://v8.1c.ru/8.1/data/enterprise/current-config");
	Схема = НаборСхем[0];
	Схема.ОбновитьЭлементDOM();
	
	УказанныеТипы = Новый Соответствие;
	Для каждого Тип Из Типы Цикл
		УказанныеТипы.Вставить(XMLТипСсылки(Тип), Истина);
	КонецЦикла;
	
	ПространствоИмен = Новый Соответствие;
	ПространствоИмен.Вставить("xs", "http://www.w3.org/2001/XMLSchema");
	РазыменовательПространствИменDOM = Новый РазыменовательПространствИменDOM(ПространствоИмен);
	ТекстXPath = "/xs:schema/xs:complexType/xs:sequence/xs:element[starts-with(@type,'tns:')]";
	
	Запрос = Схема.ДокументDOM.СоздатьВыражениеXPath(ТекстXPath, РазыменовательПространствИменDOM);
	Результат = Запрос.Вычислить(Схема.ДокументDOM);

	Пока Истина Цикл
		
		УзелПоля = Результат.ПолучитьСледующий();
		Если УзелПоля = Неопределено Тогда
			Прервать;
		КонецЕсли;
		АтрибутТип = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("type");
		ТипБезNSПрефикса = Сред(АтрибутТип.ТекстовоеСодержимое, СтрДлина("tns:") + 1);
		
		Если УказанныеТипы.Получить(ТипБезNSПрефикса) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзелПоля.УстановитьАтрибут("nillable", "true");
		УзелПоля.УдалитьАтрибут("type");
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("xsd");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаСхемы);
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	Фабрика = СоздатьФабрикуXDTO(ИмяФайлаСхемы);
	
	Попытка
		УдалитьФайлы(ИмяФайлаСхемы);
	Исключение
		ТекстИсключения = НСтр("ru = 'Ошибка создания фабрики XML'");
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Фабрика;
	
КонецФункции

Функция XMLТипСсылки(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Значение;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Ссылка = МенеджерОбъекта.ПолучитьСсылку();
	Иначе
		ОбъектМетаданных = Значение.Метаданные();
		Ссылка = Значение;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Ссылка)) Тогда
		
		Возврат СериализаторXDTO.XMLТипЗнч(Ссылка).ИмяТипа;
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Ошибка при определении XML-типа ссылки для объекта %1: объект не является ссылочным'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ОбъектМетаданных.ПолноеИмя());
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстЗапроса(ОбъектМетаданных, ЕстьОтборПоСсылкам, ПолеОтбора = "")
	
	ИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМетаданных);
		НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
		
		Отбор = НаборЗаписей.Отбор;
		СтрокаПолейДляВыборки = "";
		Для Каждого ЭлементОтбора Из Отбор Цикл 
			СтрокаПолейДляВыборки = ?(ПустаяСтрока(СтрокаПолейДляВыборки), СтрокаПолейДляВыборки, СтрокаПолейДляВыборки + ", ") + ЭлементОтбора.Имя;
		КонецЦикла;
		
	Иначе
		СтрокаПолейДляВыборки = "_.*";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ &ПоляВыборки ИЗ #Таблица КАК _ ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", СтрокаПолейДляВыборки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Таблица", ИмяМетаданных);
	
	Если ЕстьОтборПоСсылкам Тогда
		
		СтрокаОтбор = "
		|	ГДЕ
		|		_." + ?(ЗначениеЗаполнено(ПолеОтбора), ПолеОтбора, "Ссылка") + " В(&МассивСсылок)";
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + СтрокаОтбор;
		
	КонецЕсли;
	
	Возврат  ТекстЗапроса;
	
КонецФункции 

Функция СсылкаВыгружена(ВыгруженныеОбъекты, Ссылка)
	
	Возврат ВыгруженныеОбъекты.Найти(Ссылка, "Ссылка") <> Неопределено;
	
КонецФункции

// Добавить ссылку к выгруженным.
// 
// Параметры:
//  ВыгруженныеОбъекты - ТаблицаЗначений - Выгруженные объекты:
// 	* Ссылка - ЛюбаяСсылка - Ссылка на выгруженный объект
//  Ссылка - ЛюбаяСсылка - Ссылка на выгружаемый объект
Процедура ДобавитьСсылкуКВыгруженным(ВыгруженныеОбъекты, Ссылка)
	
	СтрокаДобавления = ВыгруженныеОбъекты.Добавить();
	СтрокаДобавления.Ссылка = Ссылка;
	
КонецПроцедуры

Процедура ОбработатьФункциональныеОпции()
	
	
КонецПроцедуры

#КонецОбласти
