
#Область СлужебныеПроцедурыИФункции

#Область ЗаписьВЖурналРегистрации

Процедура ЗаписатьСобытиеНачалоОбмена()

	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,, КомментарийЖРНачалоОбмена(НастройкиСервиса));

КонецПроцедуры

Функция КомментарийЖРНачалоОбмена(НастройкиСервиса)

	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), НастройкиСервиса.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), НастройкиСервиса.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Начало процесса обмена данными.'");
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	
	Возврат Комментарий;

КонецФункции

Процедура ЗаписатьСобытиеОкончаниеОбмена(БылиОшибки)

	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,КомментарийЖРОкончаниеОбмена(НастройкиСервиса, БылиОшибки));	

КонецПроцедуры

Функция КомментарийЖРОкончаниеОбмена(НастройкиСервиса, БылиОшибки)

	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), НастройкиСервиса.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), НастройкиСервиса.Идентификатор);
	
	СтрокаСобытие = НСтр("ru = 'Окончание процесса обмена данными.'");
	Если БылиОшибки Тогда
		СтрокаСобытие = СтрШаблон("%1 %2", СтрокаСобытие, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	
	Возврат Комментарий;

КонецФункции

Процедура ЗаписатьСобытиеНачалоПубликацииРЛ()

	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,, КомментарийЖРНачалоПубликацииРЛ(НастройкиСервиса));

КонецПроцедуры

Функция КомментарийЖРНачалоПубликацииРЛ(НастройкиСервиса)

	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), НастройкиСервиса.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), НастройкиСервиса.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Начало процесса публикации расчетных листков.'");
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	
	Возврат Комментарий;

КонецФункции

Процедура ЗаписатьСобытиеОкончаниеПубликацииРЛ(БылиОшибки, КоличествоВыгружено)

	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,КомментарийЖРОкончаниеПубликацииРЛ(НастройкиСервиса, БылиОшибки, КоличествоВыгружено));

КонецПроцедуры

Функция КомментарийЖРОкончаниеПубликацииРЛ(НастройкиСервиса, БылиОшибки, КоличествоВыгружено)

	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), НастройкиСервиса.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), НастройкиСервиса.Идентификатор);
	
	СтрокаСобытие = НСтр("ru = 'Окончание процесса публикации расчетных листков. Опубликовано: %1.'");
	СтрокаСобытие = СтрШаблон(СтрокаСобытие, КоличествоВыгружено);
	Если БылиОшибки Тогда
		СтрокаСобытие = СтрШаблон("%1 %2", СтрокаСобытие, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	
	Возврат Комментарий;

КонецФункции

Процедура ЗаписатьСобытиеНачалоОбновленияПубликацииОбъектов()

	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,, КомментарийЖРНачалоОбновленияПубликацииОбъектов(НастройкиСервиса));	

КонецПроцедуры

Функция КомментарийЖРНачалоОбновленияПубликацииОбъектов(НастройкиСервиса)

	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), НастройкиСервиса.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), НастройкиСервиса.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Начало обновления публикации объектов.'");
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	
	Возврат Комментарий;

КонецФункции

Процедура ЗаписатьСобытиеОкончаниеОбновленияПубликацииОбъектов(БылиОшибки)

	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Информация,,,КомментарийЖРОкончаниеОбновленияПубликацииОбъектов(НастройкиСервиса, БылиОшибки));

КонецПроцедуры

Функция КомментарийЖРОкончаниеОбновленияПубликацииОбъектов(НастройкиСервиса, БылиОшибки)

	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), НастройкиСервиса.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), НастройкиСервиса.Идентификатор);
	
	СтрокаСобытие = НСтр("ru = 'Окончание обновления публикации объектов.'");
	Если БылиОшибки Тогда
		СтрокаСобытие = СтрШаблон("%1 %2", СтрокаСобытие, НСтр("ru = 'Были ошибки.'"));
	КонецЕсли;
	Комментарий = СтрШаблон("%1 %2 %3", СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	
	Возврат Комментарий;

КонецФункции

Функция ОписаниеТекстаЗапросаДляЖР(ПараметрыОбмена, ИмяМетода, HTTPЗапрос)

	АдресСервера = СтрШаблон("%1://%2", ПараметрыОбмена.СтруктураАдреса.Схема, ПараметрыОбмена.СтруктураАдреса.ИмяСервера);
	ЗапросТекст = СтрШаблон("%1 %2%3%4", ИмяМетода, АдресСервера, HTTPЗапрос.АдресРесурса);
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		ИначеЕсли Не ЗначениеЗаполнено(ЗначениеЗаголовка) Тогда
			ЗначениеЗаголовка = "<null>";
		КонецЕсли;
		ЗапросТекст = СтрШаблон("%1%2%3: %4",ЗапросТекст, Символы.ПС, Заголовок.Ключ, ЗначениеЗаголовка);
	КонецЦикла;
	
	Возврат ЗапросТекст;

КонецФункции

Функция ОписаниеОтветаЗапросаДляЖР(HTTPЗапрос, HTTPОтвет, ЗапросФайла = Ложь)

	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		ПубликацияФайла = (HTTPЗапрос.ПолучитьИмяФайлаТела() <> Неопределено);
		Если Не ПубликацияФайла И Не ЗапросФайла Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(ТелоОтвета) Тогда
				ОтветТекст = СтрШаблон("%1%2%2%4", ОтветТекст, Символы.ПС, Символы.ПС, ТелоОтвета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветТекст;

КонецФункции

Процедура ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, HTTPЗапрос)

	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ПараметрыОбмена, ИмяМетода, HTTPЗапрос);
	
	ТелоЗапроса = "";
	ЭтоПередачаФайла = (HTTPЗапрос.ПолучитьИмяФайлаТела() <> Неопределено);
	Если Не ЭтоПередачаФайла Тогда
		ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
		
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ТелоЗапроса);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПротоколЗапрос(), УровеньЖурналаРегистрации.Информация,,,Комментарий);

КонецПроцедуры

Процедура ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, HTTPЗапрос, HTTPОтвет, ЗапросФайла = Ложь)

	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ПараметрыОбмена, ИмяМетода, HTTPЗапрос);
	ОтветТекст  = ОписаниеОтветаЗапросаДляЖР(HTTPЗапрос, HTTPОтвет, ЗапросФайла);
	
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПротоколОтвет(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, HTTPЗапрос, HTTPОтвет = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	ЗапросТекст = ОписаниеТекстаЗапросаДляЖР(ПараметрыОбмена, ИмяМетода, HTTPЗапрос);
	ОтветТекст  = ОписаниеОтветаЗапросаДляЖР(HTTPЗапрос, HTTPОтвет);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОтветТекст = СтрШаблон("%1%2%3",ОтветТекст,Символы.ПС,ОписаниеОшибки);
	КонецЕсли;

	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при загрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, ТипИзменений, ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьПредупреждениеПроверкиВерсийФайлов(ДокументКЭДО, ТекстСообщения)

	ШаблонОписания = НСтр(
	"ru = 'Проверка версии электронного документа:
	|%1'");
	Комментарий = СтрШаблон(ШаблонОписания, ТекстСообщения);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Предупреждение,, ДокументКЭДО, Комментарий);

КонецПроцедуры

Процедура ЗарегистрироватьОшибкуПубликацииОбъекта(ОбъектПубликации, РесурсСервиса, ОписаниеОшибки) Экспорт

	Если ЗначениеЗаполнено(ОбъектПубликации) Тогда
		ПредставлениеОбъекта = Строка(ОбъектПубликации);
	Иначе
		ПредставлениеОбъекта = НСтр("ru = '<объект не найден>'");
	КонецЕсли;
	
	ШаблонОписания = НСтр(
	"ru = 'Ошибка публикации: ресурс: %1, объект: %2
	|Описание ошибки:
	|%3'");
	ТекстОшибки = СтрШаблон(ШаблонОписания, РесурсСервиса, ПредставлениеОбъекта, ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,, ОбъектПубликации, ТекстОшибки);

КонецПроцедуры

Процедура ЗаписатьОшибкуПриВыгрузкеИзменений(ОписаниеИзменений, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при выгрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеИзменений, ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВыгрузкиИзменений(ДанныеСсылка, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при выгрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДанныеСсылка), ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,, ДанныеСсылка, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьПредупреждениеВыгрузкиИзменений(ДанныеСсылка, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при выгрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДанныеСсылка), ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Предупреждение,, ДанныеСсылка, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВыгрузкиФайла(ОписаниеОшибки) Экспорт
	
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеТокенаАутентификации

Функция ТокенАутентификации(ПараметрыОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Приложение.Токен",
		"Токен,СрокГодностиТокена");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеВБезопасномХранилище.Токен <> Неопределено
		И ДанныеВБезопасномХранилище.СрокГодностиТокена <> Неопределено Тогда
		
		Если ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеВБезопасномХранилище.СрокГодностиТокена Тогда
			Возврат НовыйТокенАутентификации(ПараметрыОбмена).Токен;
		Иначе
			Возврат ДанныеВБезопасномХранилище.Токен;
		КонецЕсли;
		
	Иначе
		Возврат НовыйТокенАутентификации(ПараметрыОбмена).Токен;
	КонецЕсли;
	
КонецФункции

Функция НовыйТокенАутентификации(ПараметрыОбмена)
	
	Результат = Новый Структура("Токен,НеактуальныеКлючи",,Ложь);
	
	КлючиПриложения = КабинетСотрудника.КлючиПриложенияИзБезопасногоХранилища();
	Если КлючиПриложения = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заданы ключи приложения.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	СтрокаBase64 = Base64Строка(
	ПолучитьДвоичныеДанныеИзСтроки(СтрШаблон("%1:%2", КлючиПриложения.ИдентификаторКлиента, КлючиПриложения.СекретКлиента)));
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", СтрШаблон("Basic %1", СтрокаBase64));
	Запрос = Новый HTTPЗапрос("/auth/oidc/token", Заголовки);
	Запрос.УстановитьТелоИзСтроки("grant_type=client_credentials");
	
	Соединение = ПараметрыОбмена.Соединение;
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыОбмена, "POST", Запрос, ,ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
		Если РезультатЧтенияJSON.Свойство("id_token") Тогда
			Токен = РезультатЧтенияJSON["id_token"];
			СрокГодностиТокена = ТекущаяУниверсальнаяДатаВМиллисекундах() + 3600*100;
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Токен",Токен, "Токен");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Токен",СрокГодностиТокена, "СрокГодностиТокена");
			УстановитьПривилегированныйРежим(Ложь);
			Результат.Токен = Токен;
		Иначе
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ОтветОшибка = ОбъектОтвета["error"];
		Если ОтветОшибка <> Неопределено Тогда
			Сообщение = ОтветОшибка["message"];
			Если Сообщение <> Неопределено И СтрНайти(Сообщение, "User name or password is invalid") > 0 Тогда
				Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
				ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
				Результат.НеактуальныеКлючи = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Результат.НеактуальныеКлючи Тогда
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 401 Тогда
		
		Комментарий = НСтр("ru = 'Не удалось получить токен аутентификации. Неправильные ключи.'");
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		Результат.НеактуальныеКлючи = Истина;
		
	Иначе
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияЖРАутентификации(),УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОписаниеРесурсовAPI

Функция РесурсAPI(ВерсияAPI)
	
	РесурсAPI = "/api";
	
	Если Не ПустаяСтрока(ВерсияAPI) Тогда
		РесурсAPI = СтрШаблон("%1/v%2", РесурсAPI, ВерсияAPI);
	КонецЕсли;
	
	Возврат РесурсAPI;
	
КонецФункции

Функция РесурсВерсияAPI()

	Возврат "/api/apiVersions";

КонецФункции

Функция РесурсФизическиеЛица()
	
	Возврат "/persons";
	
КонецФункции

Функция РесурсОрганизации()
	
	Возврат "/employers";
	
КонецФункции

Функция РесурсСтруктураПредприятия()
	
	Возврат "/divisions";
	
КонецФункции

Функция РесурсДолжности()
	
	Возврат "/positions";
	
КонецФункции

Функция РесурсШтатноеРасписание()
	
	Возврат "/stafflist-positions";
	
КонецФункции

Функция РесурсСотрудники()
	
	Возврат "/employees";
	
КонецФункции

Функция РесурсПрименяемыеВычеты()
	
	Возврат "/tax-deductions";
	
КонецФункции

Функция РесурсСоставныеЧастиЗарплаты()
	
	Возврат "/payslip-component-types";
	
КонецФункции

Функция РесурсРасчетныеЛисты()
	
	Возврат "/payslips";
	
КонецФункции

Функция РесурсСправки2НДФЛ()
	
	Возврат "/forms2NDFL";
	
КонецФункции

// Устаревший ресурс. Для формата ниже 303.
Функция РесурсОтветыНаЗапросыСправок2НДФЛ(ВерсияAPI)
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияAPI, "1.0") Тогда
		Возврат "/forms2NDFL/responses";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция РесурсСправкиСМестаРаботы()
	
	Возврат "/employment-certificates";
	
КонецФункции

Функция РесурсСправкиОбОстаткеОтпуска()
	
	Возврат "/vacations/balance-reports";
	
КонецФункции

Функция РесурсФайлы()
	
	Возврат "/files";
	
КонецФункции

Функция РесурсФайлыПолучение()
	
	Возврат "/files/{ID}";
	
КонецФункции

Функция РесурсПолучениеВсехИзменений()
	
	Возврат "/data/updates";
	
КонецФункции

Функция РесурсРезультатыСогласования()
	
	Возврат "/agreement-results";
	
КонецФункции


Функция РесурсДокументыНаПодпись()
	
	Возврат "/documents-to-be-signed";
	
КонецФункции

Функция РесурсЗаявлениеНаКомпенсациюОтпуска()
	
	Возврат "/leave-encashment-requests/requests/{ID}";
	
КонецФункции

Функция РесурсЗаявлениеНаУдержаниеДСВ()
	
	Возврат "/contributions/requests/{ID}";
	
КонецФункции

Функция РесурсФизическиеЛицаАктивные()

	Возврат "/persons/active";

КонецФункции

Функция РесурсФизическиеЛицаНеактивные()

	Возврат "/persons/inactive"; 

КонецФункции

Функция РесурсПинг()
	
	Возврат "/ping";
	
КонецФункции

Функция РесурсИнформацияОПриложении()

	Возврат "/application/info";

КонецФункции

Функция РесурсИспользуемыеФункции()

	Возврат "/used-features";

КонецФункции

Функция РесурсНастройкиОтпусков()

	Возврат "/vacations-settings";

КонецФункции

Функция РесурсНастройкиПриложения()

	Возврат "/application/settings";

КонецФункции

Функция РесурсАдминистратор()

	Возврат "/administrators";

КонецФункции

Функция РесурсДоступностьПриложения()

	Возврат "/application/access";

КонецФункции

Функция РесурсОзнакомлениеСРасчетнымЛистком()

	Возврат "/payslips/{personID}/{month}/sign";

КонецФункции

Функция РесурсСистемаВзаимодействияНастройки()

	Возврат "/collaboration-system/settings";

КонецФункции

Функция РесурсСистемаВзаимодействияПриложение()

	Возврат "/collaboration-system/application-info";

КонецФункции

Функция РесурсДоступныеФункцииФизическихЛиц(ВерсияAPI)
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияAPI, "1.0") Тогда
		Возврат "/persons/options";
	Иначе
		Возврат "/office-owners/options";
	КонецЕсли;
	
КонецФункции

Функция РесурсСогласиеНаПрисоединениеККЭДО()
	
	Возврат "/joinToPersonnelEdmСonsent";
	
КонецФункции

Функция РесурсЗаявлениеНаНалоговыеВычеты()
	
	Возврат "/tax-deductions/requests/{ID}";
	
КонецФункции

Функция РесурсЗапросИзменениеЛичныхДанных(ВерсияAPI)
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияAPI, "1.0") Тогда
		Возврат "/persons/information-change-requests/{ID}";
	Иначе
		Возврат "/office-owners/information-change-requests/{ID}";
	КонецЕсли;
	
КонецФункции

Функция РесурсЗапросСправки2НДФЛ()
	
	Возврат "/forms2NDFL/requests/{ID}";
	
КонецФункции

Функция РесурсЗапросСправкиСРаботы()
	
	Возврат "/employment-certificates/requests/{ID}";
	
КонецФункции

Функция РесурсЗаявлениеНаОтпуск()
	
	Возврат "/vacations/requests/{ID}";
	
КонецФункции

Функция РесурсЗапросСправкиОбОстаткеОтпуска()
	
	Возврат "/vacations/balance-reports/requests/{ID}";
	
КонецФункции

Функция РесурсОтсутствие()
	
	Возврат "/absences/{ID}";
	
КонецФункции

Функция РесурсРезультатСогласования()
	
	Возврат "/agreement-results/{ID}";
	
КонецФункции

Функция РесурсДанныеСбораГрафиковОтпусковПредприятия(ВерсияAPI) Экспорт

	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияAPI, "1.0") Тогда
		Возврат "";
	Иначе
		Возврат "/vacations-schedule-draft/enterprise";
	КонецЕсли;

КонецФункции

Функция РесурсСборГрафиковОтпусков(ВерсияAPI)
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияAPI, "1.0") Тогда
		Возврат "";
	Иначе
		Возврат "/vacations-schedule-draft/divisions/{ID}";
	КонецЕсли;
	
КонецФункции

Функция РесурсОграничениеДоступаКРабочимКонтактам(ВерсияAPI)
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияAPI, "1.0") Тогда
		Возврат "";
	Иначе
		Возврат "/office-owners/workContactsAccess";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИспользованиеAPI

Функция НовоеHTTPСоединение(СтруктураURI, Таймаут = 100)
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	КонецЕсли;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Или ВРег(СтруктураURI.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	Возврат Соединение;
	
КонецФункции

Функция НовоеОписаниеПараметрыОбмена()

	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("СтруктураАдреса", 	Неопределено);
	ПараметрыОбмена.Вставить("Соединение",			Неопределено);
	ПараметрыОбмена.Вставить("ВестиПротокол",		Ложь);
	ПараметрыОбмена.Вставить("ОбновлениеПубликации",Ложь);
	ПараметрыОбмена.Вставить("ВерсияПриложения",	"");
	ПараметрыОбмена.Вставить("ВерсияФормата",		"");
	ПараметрыОбмена.Вставить("ВерсияAPI",			"");
	
	Возврат ПараметрыОбмена;

КонецФункции

Функция ПараметрыОбмена(ВестиПротокол)
	
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	
	АдресПриложения = НастройкиСервиса.АдресПриложения;
	Если ЗначениеЗаполнено(НастройкиСервиса.АдресПриложенияПоИмени) И НастройкиСервиса.АдресПриложенияПоИмениДоступен Тогда
		АдресПриложения = НастройкиСервиса.АдресПриложенияПоИмени;
	КонецЕсли;
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПриложения);
	
	ПараметрыОбмена = НовоеОписаниеПараметрыОбмена();
	ПараметрыОбмена.СтруктураАдреса 	= СтруктураАдреса;
	ПараметрыОбмена.Соединение 			= НовоеHTTPСоединение(СтруктураАдреса);
	ПараметрыОбмена.ВестиПротокол 		= ВестиПротокол Или Константы.РегистрироватьВЖурналеСобытийЗапросы.Получить();
	ПараметрыОбмена.ВерсияПриложения 	= НастройкиСервиса.ВерсияПриложения;
	ПараметрыОбмена.ВерсияФормата 		= СокрЛП(НастройкиСервиса.ВерсияФормата);
	ПараметрыОбмена.ВерсияAPI 			= СокрЛП(НастройкиСервиса.ВерсияAPI);
	
	Возврат ПараметрыОбмена;
	
КонецФункции

Функция HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса)
	
	РесурсСервиса 			= ПараметрыЗапроса.РесурсСервиса;
	ИмяМетода 				= ПараметрыЗапроса.ИмяМетода;
	СтрокаТела 				= ПараметрыЗапроса.СтрокаТела;
	ОписаниеФайла 			= ПараметрыЗапроса.ОписаниеФайла;
	РазрешенныйКодОтвета 	= ПараметрыЗапроса.РазрешенныйКодОтвета;
	
	Ответ = Неопределено;
	ИспользоватьВерсии = ЗначениеЗаполнено(ПараметрыОбмена.ВерсияФормата);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Если ИспользоватьВерсии Тогда
		Заголовки.Вставить("formatVersion", ПараметрыОбмена.ВерсияФормата);
	КонецЕсли;
	
	Токен = ТокенАутентификации(ПараметрыОбмена);
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	ИмяФайла = "";
	Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
		ИмяФайла = ОписаниеФайла.ИмяФайла;
		ТипКонтента = ТипКонтента(ИспользоватьВерсии, ОписаниеФайла.Расширение);
		Заголовки.Вставить("Content-Type", ТипКонтента);
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	АдресРесурса = СтрШаблон("/%1%2%3",ПараметрыОбмена.СтруктураАдреса.ПутьНаСервере,РесурсAPI(ПараметрыОбмена.ВерсияAPI),РесурсСервиса);
	
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Запрос.УстановитьИмяФайлаТела(ИмяФайла);
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	КонецЕсли;
	
	Если ПараметрыОбмена.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос);
	КонецЕсли;
	
	Соединение = ПараметрыОбмена.Соединение;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, Запрос, , ОписаниеОшибки());
		Ответ = Неопределено;
	КонецПопытки;
	
	Если ПараметрыОбмена.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос, Ответ, ПараметрыЗапроса.ЗапросФайла);
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 401 Тогда
		ПараметрыОбмена.Соединение = НовоеHTTPСоединение(ПараметрыОбмена.СтруктураАдреса);
		Токен = ТокенАутентификации(ПараметрыОбмена);
		Если Не ЗначениеЗаполнено(Токен) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
		Если ПараметрыОбмена.ВестиПротокол Тогда
			ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос);
		КонецЕсли;
		Соединение = ПараметрыОбмена.Соединение;
		Попытка
			Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
		Исключение
			ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, Запрос, , ОписаниеОшибки());
			Ответ = Неопределено;
		КонецПопытки;
		Если ПараметрыОбмена.ВестиПротокол Тогда
			ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос, Ответ);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния >= 300
		И Не (Ответ.КодСостояния = 404 И ИмяМетода = "DELETE")
		И Ответ.КодСостояния <> РазрешенныйКодОтвета Тогда
		ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция HTTPОтветСервисаЗапросБезВерсионирования(ПараметрыОбмена, РесурсСервиса, ИмяМетода, РазрешенныйКодОтвета = "")
	
	Ответ = Неопределено; 
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	
	Токен = ТокенАутентификации(ПараметрыОбмена);
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	АдресРесурса = СтрШаблон("/%1%2",ПараметрыОбмена.СтруктураАдреса.ПутьНаСервере, РесурсСервиса);
	
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ПараметрыОбмена.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос);
	КонецЕсли;
	
	Соединение = ПараметрыОбмена.Соединение;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, Запрос, , ОписаниеОшибки());
		Ответ = Неопределено;
	КонецПопытки;
	
	Если ПараметрыОбмена.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 401 Тогда
		ПараметрыОбмена.Соединение = НовоеHTTPСоединение(ПараметрыОбмена.СтруктураАдреса);
		
		Токен = ТокенАутентификации(ПараметрыОбмена);
		Если Не ЗначениеЗаполнено(Токен) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
		Попытка
			Если ПараметрыОбмена.ВестиПротокол Тогда
				ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос);
			КонецЕсли;
			Соединение = ПараметрыОбмена.Соединение;
			Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
		Исключение
			ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, Запрос, , ОписаниеОшибки());
			Ответ = Неопределено;
		КонецПопытки;
		Если ПараметрыОбмена.ВестиПротокол Тогда
			ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыОбмена, ИмяМетода, Запрос, Ответ);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния >= 300 И Ответ.КодСостояния <> РазрешенныйКодОтвета Тогда
		ЗаписатьОшибкуВызова(ПараметрыОбмена, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ТипКонтента(ИспользоватьВерсии, Расширение)

	ТипКонтента = "application/octet-stream";
	Если ИспользоватьВерсии Или КабинетСотрудника.ИспользоватьРасширениеФайлаВЗаголовке() Тогда
		РасширениеФайла = НРег(Расширение);
		Если РасширениеФайла = "jpg"
			Или РасширениеФайла = "jpeg"
			Или РасширениеФайла = "jpe"
			Или РасширениеФайла = "jfif" Тогда
			ТипКонтента = "image/jpeg";
		ИначеЕсли РасширениеФайла = "png" Тогда
			ТипКонтента = "image/png";
		ИначеЕсли РасширениеФайла = "gif" Тогда
			ТипКонтента = "image/gif";
		ИначеЕсли РасширениеФайла = "tiff" Тогда
			ТипКонтента = "image/tiff";
		ИначеЕсли РасширениеФайла = "webp" Тогда
			ТипКонтента = "image/webp";
		ИначеЕсли РасширениеФайла = "bmp" Тогда
			ТипКонтента = "image/vnd.wap.wbmp";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКонтента;

КонецФункции

Функция ПараметрыЗапроса(РесурсСервиса, ИмяМетода, СтрокаТела = "", ОписаниеФайла = Неопределено)

	ПараметрыЗапроса = Новый Структура("
	|РесурсСервиса,
	|ИмяМетода,
	|СтрокаТела,
	|ОписаниеФайла,
	|РазрешенныйКодОтвета,
	|ЗапросФайла");
	
	ПараметрыЗапроса.РесурсСервиса 	= РесурсСервиса;
	ПараметрыЗапроса.ИмяМетода 		= ИмяМетода;
	ПараметрыЗапроса.СтрокаТела 	= СтрокаТела;
	ПараметрыЗапроса.ОписаниеФайла 	= ОписаниеФайла;
	ПараметрыЗапроса.ЗапросФайла 	= Ложь;
	
	Возврат ПараметрыЗапроса;

КонецФункции

#КонецОбласти

#Область ОписанияОбъектов

#Область ОписанияОбъектовКакМассив

// Описание объекта - form2NDFLRequest.
Функция ОписаниеОбъектаЗапросСправокНДФЛ(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("purpose", 		"Назначение2НДФЛ", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxYear", 		"НалоговыйПериод", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("proofPeriod",	"КоличествоМесяцев", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("incomePeriodStartDate",	"НачалоПериода", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("incomePeriodEndDate", 	"ОкончаниеПериода", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("obtainingMode",	"ВариантФормированияФайлаОтвета", Тип("ПеречислениеСсылка.ВариантыФормированияФайлаОтветаЗаявкиСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("copiesNumber",	"КоличествоЭкземпляров", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("sendEmail",		"ОтправлятьEmail", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("addressEmail",	"АдресEmail", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note",			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - personalInformationChangeRequest.
Функция ОписаниеОбъектаЗапросНаИзменениеЛичныхДанных(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeName",	"ИзменитьФИО", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("lastName",		"Фамилия", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("firstName",		"Имя", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("patronymic",	"Отчество", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeIdentityDocument", 	"ИзменитьДокумент", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("identityDocument", 			"ДокументУдостоверяющийЛичность", Тип("Структура"), ОписаниеОбъектаДокументУдостоверяющийЛичность(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changePersonalPhone",		"ИзменитьНомерТелефона", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personalPhone",				"ЛичныйНомерТелефона", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeAddress",				"ИзменитьАдрес", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("registrationAddress",		"АдресРегистрации", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("residentialAddress",		"АдресМестаПроживания", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeINN",		"ИзменитьИНН", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("INN",			"ИНН", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeSNILS",	"ИзменитьСНИЛС", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("SNILS",			"СНИЛС", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeEmail",	"ИзменитьEmail", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("email",			"Email", Тип("Строка")));
	Иначе
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeName",	"ИзменитьФИО", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("lastName",		"Фамилия", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("firstName",		"Имя", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("patronymic",	"Отчество", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeIdentityDocument", 	"ИзменитьДокумент", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("identityDocument", 			"ДокументУдостоверяющийЛичность", Тип("Структура"), ОписаниеОбъектаДокументУдостоверяющийЛичность(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changePersonalPhone",		"ИзменитьНомерТелефона", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personalPhone",				"ЛичныйНомерТелефона", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeAddress",				"ИзменитьАдрес", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("registrationAddress",		"АдресРегистрации", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("residentialAddress",		"АдресМестаПроживания", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 			"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 					"Комментарий", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 				"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeTaxID",			"ИзменитьИНН", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxID",					"ИНН", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeInsuranceNumber",	"ИзменитьСНИЛС", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("insuranceNumber",		"СНИЛС", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("changeEmail",			"ИзменитьEmail", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("email",					"Email", Тип("Строка")));
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - certificateFromEmployerRequest.
Функция ОписаниеОбъектаЗапросСправкиСРаботы(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("purpose",		"НазначениеСправкиСРаботыСтрока", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("obtainingMode",	"ВариантФормированияФайлаОтвета", Тип("ПеречислениеСсылка.ВариантыФормированияФайлаОтветаЗаявкиСотрудника")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("copiesNumber",	"КоличествоЭкземпляров", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("sendEmail",		"ОтправлятьEmail", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("addressEmail",	"АдресEmail", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		Если КабинетСотрудника.ИспользоватьФормат50375() Тогда
			ТипПоля = КабинетСотрудникаВнутренний.ТипСсылкаВидыПредоставляемыхСотрудникамСправок();
			Если ТипПоля <> Неопределено Тогда
				ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("certificateTypeID", "ВидСправки", ТипПоля));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("purpose",		"НазначениеСправкиСРаботыСтрока", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("obtainingMode",	"ВариантФормированияФайлаОтвета", Тип("ПеречислениеСсылка.ВариантыФормированияФайлаОтветаЗаявкиСотрудника")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("copiesNumber",	"КоличествоЭкземпляров", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("sendEmail",		"ОтправлятьEmail", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("addressEmail",	"АдресEmail", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		
		ТипПоля = КабинетСотрудникаВнутренний.ТипСсылкаВидыПредоставляемыхСотрудникамСправок();
		ТипПоля = ?(ТипПоля = Неопределено, Тип("Строка"), ТипПоля);
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("certificateTypeID", "ВидСправки", ТипПоля));
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationRequest.
Функция ОписаниеОбъектаЗапросНаОтпуск(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",	"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employeeID",	"Сотрудник", Тип("СправочникСсылка.Сотрудники")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("startDate",		"ДатаНачала", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("endDate",		"ДатаОкончания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("unpaid",		"ЗаСвойСчет", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("leaveEncashmentDays", 	"КоличествоДнейКомпенсации", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("leaveEncashment", 		"КомпенсироватьОтпуск", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note",			"Комментарий", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicDocumentID", "ИдентификаторЭлектронногоДокумента", Тип("Строка")));
	Иначе
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",	"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employeeID",	"Сотрудник", Тип("СправочникСсылка.Сотрудники")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("startDate",		"ДатаНачала", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("endDate",		"ДатаОкончания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("unpaid",		"ЗаСвойСчет", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("leaveEncashmentDays", 	"КоличествоДнейКомпенсации", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("leaveEncashment", 		"КомпенсироватьОтпуск", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note",			"Комментарий", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicDocumentID", 				"ИдентификаторЭлектронногоДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("oneТimeAdditionalVacationPayment", 	"ЕдиновременнаяВыплата", Тип("Булево")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("vacationMaterialAid", 				"МатериальнаяПомощь", Тип("Булево")));
	КонецЕсли;
		
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - leaveEncashmentRequest.
Функция ОписаниеОбъектаЗапросНаКомпенсациюОтпуска(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("leaveEncashmentDays",	"КоличествоДнейКомпенсации", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationBalanceRequest.
Функция ОписаниеОбъектаЗапросСправкиОбОстаткеОтпуска(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("obtainingMode",	"ВариантФормированияФайлаОтвета", Тип("ПеречислениеСсылка.ВариантыФормированияФайлаОтветаЗаявкиСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("copiesNumber",	"КоличествоЭкземпляров", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("sendEmail",		"ОтправлятьEmail", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("addressEmail",	"АдресEmail", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - taxDeductionRequest.
Функция ОписаниеОбъектаЗаявлениеНаНалоговыеВычеты(ВерсияФормата)
	 
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 				"ИдентификаторЗапроса", Тип("Строка"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 			"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 		"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 			"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 		"Организация", Тип("СправочникСсылка.Организации"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("applyMonth", 		"МесяцПрименения", Тип("Дата"), Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personalDeduction", "ЭтоЛичныйВычет", Тип("Булево"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("childTaxDeduction", "ЭтоВычетНаДетей", Тип("Булево"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("childTaxDeductions", 	"ВычетыНаДетей", Тип("ТаблицаЗначений"), ОписаниеОбъектаВычетаНаДетей(ВерсияФормата)));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxAuthorityNotices", 	"УведомленияИзНалоговой", Тип("ТаблицаЗначений"), ОписаниеОбъектаУведомленияИзНалоговой(ВерсияФормата)));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("educationTaxDeduction", 		"ЭтоВычетНаОбучение", Тип("Булево"), Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("medicalTreatmentTaxDeduction", 	"ЭтоВычетНаЛечение", Тип("Булево"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("realEstateTaxDeduction", 		"ЭтоВычетНаНедвижимость", Тип("Булево"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 						"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 			"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата),Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 					"Комментарий", Тип("Строка"),, Истина));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - childTaxDeductionsRequest.
Функция ОписаниеОбъектаВычетаНаДетей(ВерсияФормата)
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("childSeniority", "СтаршинствоРебенка", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("childDisability", "РебенокИнвалид", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("singleParent", "РодительОдиночка", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("guardian", "ЗаявительОпекун", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("endDate", "ДатаОкончания", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "Комментарий", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание объекта - taxAuthorityNoticesRequest.
Функция ОписаниеОбъектаУведомленияИзНалоговой(ВерсияФормата)
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("amount", "Размер", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("attachment", "Вложение", Неопределено, ОписаниеОбъектаФайл(ВерсияФормата)));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "Комментарий", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание объекта - voluntaryInsuranceContributionsRequest.
Функция ОписаниеОбъектаЗапросНаУдержаниеДСВ(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации"),,Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("calculationMethod", "СпособРасчетаУдержанияДСВ", Тип("ПеречислениеСсылка.СпособыРасчетаУдержанийКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("percentage",	"Процент", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("amount",		"Сумма", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата),Истина));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - absence.
Функция ОписаниеОбъектаУведомлениеОбОтсутствии(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("reason", 		"ПричинаОтсутствия", Тип("ПеречислениеСсылка.ПричиныОтсутствийЗаявокКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("startDate",		"ДатаНачала", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("endDate",		"ДатаОкончания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 	"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("allDay",		"ВесьДень", Тип("Булево")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note",			"Комментарий", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicDocumentID", "ИдентификаторЭлектронногоДокумента", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - agreementResult.
Функция ОписаниеОбъектРезультатСогласования(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторОбъекта", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"Подписант", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personName",	"ИмяПодписанта", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentID",	"ИдентификаторДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicDocumentID",	"ИдентификаторЭлектронногоДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("result",				"РезультатСогласования", Тип("ПеречислениеСсылка.РезультатыСогласованияБЗК")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicSignature",	"ЭлектроннаяПодпись", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("signatoryRole",			"РольПодписанта", Тип("ПеречислениеСсылка.РолиПодписантовКабинетСотрудника")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentVersion",		"ВерсияДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("comment", 				"Комментарий", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("certificate",			"СертификатЭП", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("time",					"ДатаПодписи", Тип("Строка")));
		Если КабинетСотрудника.ИспользоватьФормат503() Тогда
			ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("updateDocument",		"ОбновитьПредставление", Тип("Булево")));
		КонецЕсли;
		
	Иначе
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторОбъекта", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"Подписант", Тип("СправочникСсылка.ФизическиеЛица"),,Истина));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personName",	"ИмяПодписанта", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentID",	"ИдентификаторДокумента", Тип("Строка"),,Истина));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicDocumentID",	"ИдентификаторЭлектронногоДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("result",				"РезультатСогласования", Тип("ПеречислениеСсылка.РезультатыСогласованияБЗК")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("electronicSignature",	"ЭлектроннаяПодпись", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("signatoryRole",			"РольПодписанта", Тип("ПеречислениеСсылка.РолиПодписантовКабинетСотрудника")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentVersion",		"ВерсияДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("comment", 				"Комментарий", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("certificate",			"СертификатЭП", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("time",					"ДатаПодписи", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("updateDocument",		"ОбновитьПредставление", Тип("Булево")));
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - electronicDocument.
Функция ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("originalDocument", "ИсходныйДокумент", Тип("Структура"), ОписаниеОбъектаФайл(ВерсияФормата)));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("additionalPresentations", "ПредставленияДокумента", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - file
Функция ОписаниеОбъектаФайл(ВерсияФормата) Экспорт
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("name", "НаименованиеФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("extension", "РасширениеФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("size", "РазмерФайла", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("ID", "ИдентификаторФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("hash", "ХешСумма", Тип("Строка")));

	Возврат ОписаниеПолей;
	
КонецФункции

// Описание объекта - inputFile, устаревший метод.
Функция ОписаниеОбъектаВходящийФайл()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("fileID", 	"ИдентификаторФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name", 		"НаименованиеФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("extension", "РасширениеФайла", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("size", 		"РазмерФайла", Тип("Число"))); 
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - identityDocument.
Функция ОписаниеОбъектаДокументУдостоверяющийЛичность(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("identityDocumentType",	"ДокументВид", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("serias",				"ДокументСерия", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("number",				"ДокументНомер", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("issueDate",				"ДокументДатаВыдачи", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("issuingAuthority",		"ДокументКемВыдан", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("issuingAuthorityID",	"ДокументКодПодразделения", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationBalanceReport.
Функция ОписаниеОбъектаСправкаОбОстаткеОтпуска(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", "ИдентификаторЗаявки", Тип("Строка"),,Истина));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachment",  "Вложение", Неопределено, ОписаниеОбъектаВходящийФайл()));
		
	Иначе
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"Заявка", Неопределено));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", 	"ИдентификаторЗаявки", Тип("Строка"),,Истина));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachment", 	"Вложение", Неопределено, ОписаниеОбъектаФайл(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта  - documentToBeSigned.
Функция ОписаниеОбъектаДокументНаПодпись(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID",							"ИдентификаторДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",					"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("date",							"Дата", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name",							"НазваниеДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document",						"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note",							"Комментарий", Тип("Строка")));
		Если Не КабинетСотрудника.ИспользоватьФормат503() Тогда
			ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("emloyees", 	"ФизическиеЛица", Тип("ТаблицаЗначений")));
		Иначе
			ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employees", "ФизическиеЛица", Тип("ТаблицаЗначений")));
			ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("updatePresentationsPossible",	"ВозможноОбновлениеПредставлений", Тип("Булево")));
		КонецЕсли;
		
	Иначе
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID",							"ИдентификаторДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",					"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("date",							"Дата", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name",							"НазваниеДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document",						"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note",							"Комментарий", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employees", "ФизическиеЛица", Тип("ТаблицаЗначений")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("updatePresentationsPossible",	"ВозможноОбновлениеПредставлений", Тип("Булево")));
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - certificateFromEmployer.
Функция ОписаниеОбъектаСправкаСРаботы(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 		"Заявка", Неопределено));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", "ИдентификаторЗаявки", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID","Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachment","Вложение", Неопределено, ОписаниеОбъектаВходящийФайл()));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 	"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 		"Комментарий", Тип("Строка")));
		
	Иначе
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 		"Заявка", Неопределено));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", "ИдентификаторЗаявки", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID","Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 	"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 		"Комментарий", Тип("Строка")));
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - form2NDFL.
Функция ОписаниеОбъектаСправка2НДФЛ(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"Справка2НДФЛ", Неопределено));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", 	"ИдентификаторЗаявки", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",	"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxYear", 		"НалоговыйПериод", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("incomeAmount", 	"СуммаДохода", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxAmount", 	"СуммаНалога", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
		// не используется с версии 3.0.3.1
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachment",	"Вложение", Неопределено, ОписаниеОбъектаВходящийФайл()));
		
	Иначе
		
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"Справка2НДФЛ", Неопределено));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", 	"ИдентификаторЗаявки", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID",	"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxYear", 		"НалоговыйПериод", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("incomeAmount", 	"СуммаДохода", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("taxAmount", 	"СуммаНалога", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 	"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("document", 		"ЭлектронныйДокумент", Тип("Структура"), ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата)));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("note", 			"Комментарий", Тип("Строка")));
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - employeeContributions.
Функция ОписаниеОбъектаПлановыеУдержания(ВерсияФормата) Экспорт

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("contributions", "ПлановыеУдержания", Тип("ТаблицаЗначений"), ОписаниеОбъектаПлановоеУдержание(ВерсияФормата)));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - contribution.
Функция ОписаниеОбъектаПлановоеУдержание(ВерсияФормата) Экспорт

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("presentation", 		"ПредставлениеУдержания", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("expirationDate", 	"ДатаОкончания", Тип("Дата")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("calculationMethod", "СпособРасчета", Тип("ПеречислениеСсылка.СпособыРасчетаУдержанийКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("percentage", 		"Процент", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("amount", 			"Сумма", Тип("Число")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - applicationInfo.
Функция ОписаниеОбъектаИнформацияОПриложении(ВерсияФормата)

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("id", 					"ИдентификаторПриложения", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("applicationVersion", 	"ВерсияПриложения", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - joinToPersonnelEdmConsent
Функция ОписаниеОбъектаСогласиеНаПрисоединениеККЭДО(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 					"Согласие", Неопределено));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 			"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 				"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentToBeSignedID", 	"ИдентификаторДокументаНаПодпись", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 			"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 				"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 			"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
	Иначе
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 					"Согласие", Неопределено));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 			"Организация", Тип("СправочникСсылка.Организации")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 				"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("documentToBeSignedID", 	"ИдентификаторДокументаНаПодпись", Тип("Строка")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("dateCreated", 			"ДатаСоздания", Тип("Дата")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 				"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("attachments", 			"Вложения", Тип("ТаблицаЗначений"), ОписаниеОбъектаФайл(ВерсияФормата)));
	КонецЕсли;

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - personOptions.
Функция ОписаниеОбъектаДоступныеФункцииФизическихЛиц(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 			"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personnelEdmUse", 	"ИспользуетКЭДО", Тип("Булево")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - taxDeductionsApplied
Функция ОписаниеПолейПрименяемыеНалоговыеВычеты(ВерсияФормата)
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("employerID", "Организация",Тип("СправочникСсылка.Организации"),,Истина));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("personID",   "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"),,Истина));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("deductions", "ИнформацияОВычетах", Тип("ТаблицаЗначений"), ОписаниеОбъектаИнформацияОВычетах(ВерсияФормата)));
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание объекта - taxDeduction
Функция ОписаниеОбъектаИнформацияОВычетах(ВерсияФормата)
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("startDate", 	"ДатаНачала", Тип("Дата"),,Истина));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("amount", 		"РазмерВычета", Тип("Число"),,Истина));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("endDate", 	"ДатаОкончания", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", 		"ОписаниеВычета", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание объекта - salaryComponent.
Функция ОписаниеОбъектаСоставнаяЧастьЗарплаты(ВерсияФормата)

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 						"Идентификатор", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("section", 					"Группа", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("name", 						"Наименование", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("specificSalaryComponent", 	"Вид", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("priority", 					"Приоритет", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("accrualType", 				"ТипНачисления", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - salaryComponentInfo.
Функция ОписаниеОбъектаСтрокаРасчетногоЛистка(ВерсияФормата)

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID", 	"Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employeeID", 	"Сотрудник", Тип("СправочникСсылка.Сотрудники")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("componentID", 	"СоставнаяЧасть", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("amount", 		"Сумма", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("workplace", 	"ПредставлениеРабочегоМеста", Тип("Строка")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - form2NDFLResponse, используется до версии 3.0.3.1..
Функция ОписаниеОбъектаОтветНаЗапросСправок2НДФЛ()
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestID", "ИдентификаторЗаявки", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("employerID","Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("forms2NDFL", "Справки2НДФЛ", Тип("ТаблицаЗначений"), ОписаниеОбъектаСправка2НДФЛ("")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - agreementRule.
Функция ОписаниеОбъектаПравилоСогласования(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("ID", 			"ИдентификаторПравила", Тип("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("requestType", 	"ТипЗаявки", Тип("ПеречислениеСсылка.ТипыЗаявокКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("divisionID", 	"ИдентификаторПодразделения", Новый ОписаниеТипов("Строка")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("steps", 		"ШагиПравилаСогласования", Тип("ТаблицаЗначений"), ОписаниеОбъектаШагиПравилаСогласования(ВерсияФормата))); 
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("isDeleted", 	"ПометкаУдаления", Тип("Булево")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - agreementStep.
Функция ОписаниеОбъектаШагиПравилаСогласования(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("stepNumber", 	"НомерШага", Тип("Число")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("stepType", 		"ТипШага", Тип("ПеречислениеСсылка.ТипыШаговСогласованияКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("signatoryRole", "РольПодписанта", Тип("ПеречислениеСсылка.РолиПодписантовКабинетСотрудника")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 		"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("needElectronicSignature", "ТребуемаяПодпись", Тип("ПеречислениеСсылка.ВидыТребуемойПодписиКабинетСотрудника")));
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - workContactsAccess.
Функция ОписаниеОбъектаОграничениеДоступаКРабочимКонтактам(ВерсияФормата) 

	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("personID", 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(НовоеОписаниеПоля("access", 	"УровеньДоступа", Тип("ПеречислениеСсылка.УровниДоступаКИнформацииОСотрудниках")));
	
	Возврат ОписаниеОбъекта;

КонецФункции

#КонецОбласти

#Область КонструкторыСоответствияПолей

// Описание полей объекта - employer.
Функция ОписаниеПолейОрганизаций(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",		"Организация");
	СоответствиеПолей.Вставить("name",		"Наименование");
	СоответствиеПолей.Вставить("taxID",		"ИНН");
	СоответствиеПолей.Вставить("isBranch",	"ОбособленноеПодразделение");
	СоответствиеПолей.Вставить("parentOrganizationID", "ГоловнаяОрганизация");
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - division.
Функция ОписаниеПолейСтруктурыПредприятия(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"СтруктураПредприятия");
	СоответствиеПолей.Вставить("name",				"Наименование");
	СоответствиеПолей.Вставить("code",				"Код");
	СоответствиеПолей.Вставить("parentDivisionID",	"Родитель");
	СоответствиеПолей.Вставить("headID",			"ФизическоеЛицоРуководителя");
	СоответствиеПолей.Вставить("priority",			"Порядок");
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - position.
Функция ОписаниеПолейДолжностей(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",		"Должность");
	СоответствиеПолей.Вставить("name",		"Наименование");
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - staffListPosition.
Функция ОписаниеПолейШтатногоРасписания(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",			"ПозицияШтатногоРасписания");
	СоответствиеПолей.Вставить("name",			"Наименование");
	СоответствиеПолей.Вставить("employerID",	"Организация");
	СоответствиеПолей.Вставить("divisionID",	"МестоВСтруктуреПредприятия");
	СоответствиеПолей.Вставить("positionID",	"Должность");
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - person.
Функция ОписаниеПолейФизическихЛиц(ВерсияФормата) Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		СоответствиеПолей.Вставить("ID",				"ФизическоеЛицо");
		СоответствиеПолей.Вставить("lastName",			"Фамилия");
		СоответствиеПолей.Вставить("firstName",			"Имя");
		СоответствиеПолей.Вставить("patronymic",		"Отчество");
		СоответствиеПолей.Вставить("initials",			"Инициалы");
		СоответствиеПолей.Вставить("gender",			"Пол");
		СоответствиеПолей.Вставить("birthDate",			"ДатаРождения");
		СоответствиеПолей.Вставить("taxID",				"ИНН");
		СоответствиеПолей.Вставить("insuranceNumber",	"СтраховойНомерПФР");
		СоответствиеПолей.Вставить("birthPlace",		"МестоРождения");
		СоответствиеПолей.Вставить("phoneNumber",		"ТелефонРабочийПредставление");
		СоответствиеПолей.Вставить("mobilePhoneNumber",	"ТелефонМобильныйПредставление");
		СоответствиеПолей.Вставить("eMail",				"EMailПредставление");
		СоответствиеПолей.Вставить("identityDocument",	ОписаниеПолейДокументВид(ВерсияФормата));
		СоответствиеПолей.Вставить("registrationAddress", "АдресПоПропискеПредставление");
		СоответствиеПолей.Вставить("residentialAddress",  "АдресМестаПроживанияПредставление");
		СоответствиеПолей.Вставить("workContactsAccess",  "ДоступКонтактнойИнформации");
		СоответствиеПолей.Вставить("picture", 			  ОписаниеПолейФайл(ВерсияФормата));
	Иначе
		СоответствиеПолей.Вставить("ID",				"ФизическоеЛицо");
		СоответствиеПолей.Вставить("lastName",			"Фамилия");
		СоответствиеПолей.Вставить("firstName",			"Имя");
		СоответствиеПолей.Вставить("patronymic",		"Отчество");
		СоответствиеПолей.Вставить("initials",			"Инициалы");
		СоответствиеПолей.Вставить("gender",			"Пол");
		СоответствиеПолей.Вставить("birthDate",			"ДатаРождения");
		СоответствиеПолей.Вставить("taxID",				"ИНН");
		СоответствиеПолей.Вставить("insuranceNumber",	"СтраховойНомерПФР");
		СоответствиеПолей.Вставить("birthPlace",		"МестоРождения");
		СоответствиеПолей.Вставить("phoneNumber",		"ТелефонРабочийПредставление");
		СоответствиеПолей.Вставить("mobilePhoneNumber",	"ТелефонМобильныйПредставление");
		СоответствиеПолей.Вставить("eMail",				"EMailПредставление");
		СоответствиеПолей.Вставить("identityDocument",	ОписаниеПолейДокументВид(ВерсияФормата));
		СоответствиеПолей.Вставить("registrationAddress", "АдресПоПропискеПредставление");
		СоответствиеПолей.Вставить("residentialAddress",  "АдресМестаПроживанияПредставление");
		СоответствиеПолей.Вставить("picture", 			  ОписаниеПолейФайл(ВерсияФормата));
		СоответствиеПолей.Вставить("presentationForms",   ОписаниеПолейСклонений(ВерсияФормата));
	КонецЕсли;
	
	Возврат СоответствиеПолей;

КонецФункции

// Описание полей объекта - presentationForms.
Функция ОписаниеПолейСклонений(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	Если Не КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		СоответствиеПолей.Вставить("nominative",	"Именительный");
		СоответствиеПолей.Вставить("genitive",		"Родительный");
		СоответствиеПолей.Вставить("dative",		"Дательный");
		СоответствиеПолей.Вставить("accusative",	"Винительный");
		СоответствиеПолей.Вставить("instrumental",	"Творительный");
		СоответствиеПолей.Вставить("prepositional",	"Предложный");
	КонецЕсли;
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей - file.
Функция ОписаниеПолейФайл(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		СоответствиеПолей.Вставить("name",		"НаименованиеФайла");
		СоответствиеПолей.Вставить("extension",	"РасширениеФайла");
		СоответствиеПолей.Вставить("fileID",	"ИдентификаторФайла");
	Иначе
		Описание = ОписаниеОбъектаФайл(ВерсияФормата);
		Для каждого ОписаниеПоля Из Описание Цикл
			СоответствиеПолей.Вставить(ОписаниеПоля["ИмяПоляСервиса"], ОписаниеПоля["ИмяПоляКонфигурации"]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - identityDocument.
Функция ОписаниеПолейДокументВид(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	
	Описание = ОписаниеОбъектаДокументУдостоверяющийЛичность(ВерсияФормата);
	Для каждого ОписаниеПоля Из Описание Цикл
		СоответствиеПолей.Вставить(ОписаниеПоля["ИмяПоляСервиса"], ОписаниеПоля["ИмяПоляКонфигурации"]);
	КонецЦикла;
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - employee.
Функция ОписаниеПолейСотрудников(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",					"Сотрудник");
	СоответствиеПолей.Вставить("personID",				"ФизическоеЛицо");
	СоответствиеПолей.Вставить("employmentDate",		"ДатаПриема");
	СоответствиеПолей.Вставить("staffListPositionID",	"ДолжностьПоШтатномуРасписанию");
	СоответствиеПолей.Вставить("employerID",			"Организация");
	СоответствиеПолей.Вставить("divisionID",			"МестоВСтруктуреПредприятия");
	СоответствиеПолей.Вставить("positionID",			"Должность");
	СоответствиеПолей.Вставить("transferDate",			"РабочееМестоПериодРегистрации");
	СоответствиеПолей.Вставить("employmentType",		"ВидЗанятости");
	СоответствиеПолей.Вставить("wageRate",				ОписаниеПолейТарифнойСтавки(ВерсияФормата));
	СоответствиеПолей.Вставить("workScheduleID", 		"ГрафикРаботы");
	СоответствиеПолей.Вставить("dismissed", 			"Уволен");
	СоответствиеПолей.Вставить("hidden", 				"СкрыватьВСписках");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - wageRate.
Функция ОписаниеПолейТарифнойСтавки(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("value",			"ТарифнаяСтавка");
	СоответствиеПолей.Вставить("presentation",	"ПоказательТарифнойСтавки");
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - collaborationSettings.
Функция ОписаниеПолейНастройкиСистемыВзаимодействия(ВерсияФормата)

	Описание = Новый Соответствие;
	Описание.Вставить("botID", 					"ИдентификаторПользователяСВ");
	Описание.Вставить("botName", 				"ИмяПользователяСВ");
	Описание.Вставить("systemConversationID", 	"ИдентификаторОбсужденияСВ");
	
	Возврат Описание;

КонецФункции

// Описание полей объекта - applicationSettings.
Функция ОписаниеПолейНастройкиПриложения(ВерсияФормата)

	Описание = Новый Соответствие;
	Описание.Вставить("applicationUrl", "АдресПриложения");
	
	Возврат Описание;

КонецФункции

// Описание полей объекта - personExternal.
Функция ОписаниеВнешнееФизическоеЛицо(ВерсияФормата)

	Описание = Новый Соответствие;
	Описание.Вставить("personExternalID", "ФизическоеЛицо");
	
	Возврат Описание;

КонецФункции

// Описание полей объекта - applicationAcess.
Функция ОписаниеПолейДоступностьПриложения(ВерсияФормата)

	Описание = Новый Соответствие;
	Описание.Вставить("infosystemAccess", "СостояниеДоступности");
	
	Возврат Описание;

КонецФункции

// Описание полей объекта - apiVersions.
Функция ОписаниеПолейОбъектаВерсииФормата()

	Описание = Новый Соответствие;
	Описание.Вставить("apiVersion", 	"ВерсияAPI");
	Описание.Вставить("formatVersion", 	"ВерсияФормата");
	
	Возврат Описание;

КонецФункции

// Описание полей объекта - vacationsSettings.
Функция ОписаниеПолейОбъектаНастройкиЗаявокНаОтпуск(ВерсияФормата)

	Описание = Новый Соответствие;
	Описание.Вставить("vacationStartDateControl", 		"КонтролироватьДатуНачалаОтпускаПриПодачеЗаявления");
	Описание.Вставить("daysBeforeVacationStart", 		"КоличествоДнейДоНачалаОтпуска");
	Описание.Вставить("fourteenDaysVacationControl", 	"КонтролироватьНаличиеОтпускаМенее14дней");
	Описание.Вставить("advanceVacationControl", 		"ОграничиватьПредоставлениеОтпускаАвансом");
	Описание.Вставить("advanceVacationDays", 			"МаксимальноеКоличествоДнейОтпускаАвансом");
	Описание.Вставить("workDaysControl", 				"ПроверятьНаличиеРабочихДнейВПериодеОтпуска");
	
	Возврат Описание;

КонецФункции

// Описание полей объекта - usedFeatures.
Функция ОписаниеПолейОбъектаИспользуемаяФункциональность(ВерсияФормата)

	Описание = Новый Соответствие;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.0") Тогда
		
		Описание.Вставить("salaryInfo", 						"ИнформацияОЗарплате");
		Описание.Вставить("taxDeductionApplication", 			"ЗаявленияНаВычетыНДФЛ");
		Описание.Вставить("absenceInfo", 						"РегистрацияОтсутствий");
		Описание.Вставить("personalReason", 					"ОтсутствиеПоЛичнымОбстоятельствам");
		Описание.Вставить("late", 								"Опоздание");
		Описание.Вставить("vacation", 							"Отпуск");
		Описание.Вставить("illness", 							"Болезнь");
		Описание.Вставить("businessTrip", 						"Командировка");
		Описание.Вставить("studyLeave", 						"УчебныйОтпуск");
		Описание.Вставить("unpaidLeave", 						"ОтпускБезОплаты");
		Описание.Вставить("timeOff", 							"Отгул");
		Описание.Вставить("maternityLeave", 					"ОтпускПоБеременностиИРодам");
		Описание.Вставить("parentalLeave", 						"ОтпускПоУходуЗаРебенком");
		Описание.Вставить("invalidChildCare", 					"УходЗаРебенкомИнвалидом");
		Описание.Вставить("vacationInfo", 						"ИнформацияОбОтпуске");
		Описание.Вставить("vacationScheduleInfo", 				"ГрафикОтпусков");
		Описание.Вставить("form2NDFLRequest", 					"ЗапросСправки2НДФЛ");
		Описание.Вставить("certificateFromEmployerRequest", 	"ЗапросСправкиСМестаРаботы");
		Описание.Вставить("employeeAddress", 					"АдресСотрудника");
		Описание.Вставить("personalContactInfo", 				"ЛичнаяКонтактнаяИнформация");
		Описание.Вставить("personalInformationChangeRequest", 	"ЗапросНаИзменениеЛичнойИнформации");
		Описание.Вставить("fileForPrinterOutput", 				"ДоступноПолучениеФайлаДляПечати");
		Описание.Вставить("documentScan", 						"ДоступноПолучениеСканаОригинала");
		Описание.Вставить("fileWithElectronicSignature", 		"ДоступноПолучениеДокументаСЭП");
		Описание.Вставить("paperForm", 							"ДоступноПолучениеДокументаВБумажномВиде");
		Описание.Вставить("sendCopyToEMail", 					"ДоступноПолучениеКопииНаЭлектроннуюПочту");
		Описание.Вставить("leaveEncashmentRequest",				"ЗаявленияНаКомпенсациюОтпуска");
		Описание.Вставить("voluntaryInsuranceContributions",	"ЗаявленияНаДСВ");
		Описание.Вставить("calculationMethodPercentage",			"СпособРасчетаДСВПроцентом");
		Описание.Вставить("calculationMethodFixedAmount",			"СпособРасчетаДСВСуммой");
		Описание.Вставить("calculationMethodPercentageUpToAmount",	"СпособРасчетаДСВПроцентомНеБолееСуммы");
		Описание.Вставить("positionRequestsInApplication", 		"ЗапросМестаРаботыВЗаявлении");
		Описание.Вставить("extendedInformationChangeRequest",	"РасширенныйЗапросНаИзменениеЛичнойИнформации");
		Описание.Вставить("correspondence", 					"ИспользуютсяОбсуждения");
		Описание.Вставить("companyInfo", 						"РазделКомпания");
		Описание.Вставить("certificatesInfo", 					"РазделСправки");
		Описание.Вставить("documentsToBeSignedInfo", 			"РазделДокументы");
		Описание.Вставить("joinToPersonnelEdmPaper", 			"ПолучениеСогласияКЭДОНаБумаге");
		Описание.Вставить("joinToPersonnelEdmElectronicSignature", 	"ПолучениеСогласияКЭДОУНЭП");
		Если КабинетСотрудника.ИспользоватьФормат50366() Тогда
			Описание.Вставить("personnelEdm", "ИспользуетсяКЭДО");
		КонецЕсли;
		
	Иначе
		
		Описание.Вставить("salaryInfo", 						"ИнформацияОЗарплате");
		Описание.Вставить("taxDeductionApplication", 			"ЗаявленияНаВычетыНДФЛ");
		Описание.Вставить("absenceInfo", 						"РегистрацияОтсутствий");
		Описание.Вставить("personalReason", 					"ОтсутствиеПоЛичнымОбстоятельствам");
		Описание.Вставить("late", 								"Опоздание");
		Описание.Вставить("vacation", 							"Отпуск");
		Описание.Вставить("illness", 							"Болезнь");
		Описание.Вставить("businessTrip", 						"Командировка");
		Описание.Вставить("studyLeave", 						"УчебныйОтпуск");
		Описание.Вставить("unpaidLeave", 						"ОтпускБезОплаты");
		Описание.Вставить("timeOff", 							"Отгул");
		Описание.Вставить("maternityLeave", 					"ОтпускПоБеременностиИРодам");
		Описание.Вставить("parentalLeave", 						"ОтпускПоУходуЗаРебенком");
		Описание.Вставить("invalidChildCare", 					"УходЗаРебенкомИнвалидом");
		Описание.Вставить("vacationInfo", 						"ИнформацияОбОтпуске");
		Описание.Вставить("vacationScheduleInfo", 				"ГрафикОтпусков");
		Описание.Вставить("form2NDFLRequest", 					"ЗапросСправки2НДФЛ");
		Описание.Вставить("certificateFromEmployerRequest", 	"ЗапросСправкиСМестаРаботы");
		Описание.Вставить("employeeAddress", 					"АдресСотрудника");
		Описание.Вставить("personalContactInfo", 				"ЛичнаяКонтактнаяИнформация");
		Описание.Вставить("personalInformationChangeRequest", 	"ЗапросНаИзменениеЛичнойИнформации");
		Описание.Вставить("fileForPrinterOutput", 				"ДоступноПолучениеФайлаДляПечати");
		Описание.Вставить("documentScan", 						"ДоступноПолучениеСканаОригинала");
		Описание.Вставить("fileWithElectronicSignature", 		"ДоступноПолучениеДокументаСЭП");
		Описание.Вставить("paperForm", 							"ДоступноПолучениеДокументаВБумажномВиде");
		Описание.Вставить("sendCopyToEMail", 					"ДоступноПолучениеКопииНаЭлектроннуюПочту");
		Описание.Вставить("leaveEncashmentRequest",				"ЗаявленияНаКомпенсациюОтпуска");
		Описание.Вставить("voluntaryInsuranceContributions",	"ЗаявленияНаДСВ");
		Описание.Вставить("calculationMethodPercentage",			"СпособРасчетаДСВПроцентом");
		Описание.Вставить("calculationMethodFixedAmount",			"СпособРасчетаДСВСуммой");
		Описание.Вставить("calculationMethodPercentageUpToAmount",	"СпособРасчетаДСВПроцентомНеБолееСуммы");
		Описание.Вставить("positionRequestsInApplication", 		"ЗапросМестаРаботыВЗаявлении");
		Описание.Вставить("extendedInformationChangeRequest",	"РасширенныйЗапросНаИзменениеЛичнойИнформации");
		Описание.Вставить("correspondence", 					"ИспользуютсяОбсуждения");
		Описание.Вставить("companyInfo", 						"РазделКомпания");
		Описание.Вставить("certificatesInfo", 					"РазделСправки");
		Описание.Вставить("documentsToBeSignedInfo", 			"РазделДокументы");
		Описание.Вставить("joinToPersonnelEdmPaper", 			"ПолучениеСогласияКЭДОНаБумаге");
		Описание.Вставить("joinToPersonnelEdmElectronicSignature", 	"ПолучениеСогласияКЭДОУНЭП");
		Описание.Вставить("personnelEdm", 						"ИспользуетсяКЭДО");
		Описание.Вставить("oneТimeAdditionalVacationPayment",	"ЕдиновременнаяВыплатаКОтпуску");
		Описание.Вставить("vacationMaterialAid",				"МатериальнаяПомощьКОтпуску");
		Описание.Вставить("extendedApprovalRoles", 				"РасширенныеРолиСогласования");
		Описание.Вставить("certificateAboutVacationBalanceRequest", "ЗапросСправкиОстаткиОтпусков");
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

// Описание объекта salaryInfo
Функция ОписаниеИнформацияОЗарплате()

	Описание = Новый Структура("
	|personID,
	|month,
	|isFirstHalf,
	|components,
	|documentsToBeSigned");
	
	Возврат Описание;

КонецФункции

#КонецОбласти

#Область МетодыПреобразованияОбъектов

// Возвращает описание объекта на основании описания объекта сервиса.
//
// 	Параметры:
// 		ОписаниеОбъекта - содержит описание полей объекта сервиса.
//
// Возвращаемое значение:
// 		Структура - свойства структуры ИмяПоляКонфигурации описания объекта.
//
Функция ОписаниеОбъекта(ОписаниеОбъекта) Экспорт

	ОписаниеПолей = Новый Массив;
	Для каждого ОписаниеПоля Из ОписаниеОбъекта Цикл
		ОписаниеПолей.Добавить(ОписаниеПоля["ИмяПоляКонфигурации"]); 
	КонецЦикла;
	
	Возврат Новый Структура(СтрСоединить(ОписаниеПолей,","));

КонецФункции

// Преобразование структуры ОписаниеОбъекта в структуру с именами полей сервиса.
//
// 	Параметры:
// 		ОписаниеОбъекта - Структура - имена свойств ИмяПоляКонфигурации описания объекта,
// 		ОписаниеОбъектаСервиса - Массив - содержит описание полей объекта сервиса.
//
// Возвращаемое значение:
// 		Структура - имена свойств ИмяПоляСервиса  описания объекта.
//
Функция ОбъектСервисаПоОписанию(ОписаниеОбъекта, ОписаниеОбъектаСервиса) Экспорт

	Результат = Новый Структура;
	Для каждого ОписаниеПоля Из ОписаниеОбъектаСервиса Цикл
		ЗначениеПоля = Неопределено;
		ОписаниеОбъекта.Свойство(ОписаниеПоля["ИмяПоляКонфигурации"], ЗначениеПоля);
		Если ЗначениеПоля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(ОписаниеПоля["ИмяПоляСервиса"], ЗначениеПоля);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Возвращает объект сервиса file
Функция ОбъектСервисаФайл(ИдентификаторФайла, ИмяФайла, РасширениеФайла, РазмерФайла, ВерсияФормата, ВерсияФайла = Неопределено)

	ОписаниеОбъектаФайл = ОписаниеОбъектаФайл(ВерсияФормата);
	
	ОписаниеФайла = ОписаниеОбъекта(ОписаниеОбъектаФайл);
	ОписаниеФайла.НаименованиеФайла 	= ИмяФайла;
	ОписаниеФайла.РасширениеФайла 		= РасширениеФайла;
	ОписаниеФайла.РазмерФайла 			= РазмерФайла;
	ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
	ОписаниеФайла.ХешСумма 				= ВерсияФайла;
	
	Возврат ОбъектСервисаПоОписанию(ОписаниеФайла, ОписаниеОбъектаФайл);

КонецФункции

Функция НовоеОписаниеПоля(ИмяПоляСервиса, ИмяПоляКонфигурации, ТипПоля, ОписаниеПолей = Неопределено, ОбязательноеПоле = Ложь) Экспорт
	
	ОписаниеПоля = Новый Соответствие;
	ОписаниеПоля.Вставить("ИмяПоляСервиса", ИмяПоляСервиса);
	ОписаниеПоля.Вставить("ИмяПоляКонфигурации", ИмяПоляКонфигурации);
	ОписаниеПоля.Вставить("ТипПоля", ТипПоля);
	ОписаниеПоля.Вставить("ОписаниеПолей", ОписаниеПолей);
	ОписаниеПоля.Вставить("ОбязательноеПоле", ОбязательноеПоле);
	Возврат ОписаниеПоля;
	
КонецФункции

// Возвращает структуру с описание объекта на основании  описания полей.
//
// Параметры:
// 		ОписаниеПолейОбъекта -  Соответствие - описание полей объекта
//
// Возвращаемое значение;
// 		Структура
//
Функция НовоеОписаниеОбъекта(ОписаниеПолейОбъекта)

	Описание = Новый Структура;
	Для каждого ЭлементКоллекции Из ОписаниеПолейОбъекта Цикл
		Описание.Вставить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	Возврат Описание;

КонецФункции

// Возвращает соответствие заполненное на основании описания объекта.
//
// Параметры:
// 		ОписаниеОбъекта - Структура - 
// 		ОписаниеПолейОбъекта - Соответствие - описание полей, ключ - имя поля сервиса, значение - имя в конфигурации.
//
// Возвращаемое значение:
// 		Соответствие
//
Функция ОбъектСервисаПоОписаниюПолей(ОписаниеОбъекта, ОписаниеПолейОбъекта)

	ОбъектСервиса = Новый Соответствие;
	Для каждого ОписаниеПоля Из ОписаниеПолейОбъекта Цикл
		ОбъектСервиса.Вставить(ОписаниеПоля.Ключ, ОписаниеОбъекта[ОписаниеПоля.Значение]);
	КонецЦикла;
	
	Возврат ОбъектСервиса;

КонецФункции

// Возвращает структуру заполненную на основании объекта сервиса.
//
// Параметры:
// 		ОбъектОтвета - Соответствие
// 		ОписаниеПолейОбъекта - Соответствие - описание полей, ключ - имя поля сервиса, значение - имя в конфигурации.
//
// Возвращаемое значение:
// 		Соответствие
//
Функция ОписаниеОбъектаИзОбъектаОтвета(ОбъектОтвета, ОписаниеПолейОбъекта)

	ОписаниеОбъекта = Новый Структура;
	Для каждого ОписаниеПоля Из ОписаниеПолейОбъекта Цикл
		ОписаниеОбъекта.Вставить(ОписаниеПоля.Значение, ОбъектОтвета[ОписаниеПоля.Ключ]);
	КонецЦикла;
	
	Возврат ОписаниеОбъекта;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПреобразованиеЗагруженныхОбъектов

// Преобразование Соответствия ОбъектСервиса в структуру с именами полей ИБ.
//
// 	Параметры:
// 		ОбъектСервиса - Соответствие - объект загруженный из сервиса,
// 		ОписаниеПолей - Массив - содержит описание полей объекта.
//
// Возвращаемое значение:
// 		Структура - имена свойств ИмяПоляКонфигурации.
//
Функция СтруктураИзОбъектаСервиса(ОбъектСервиса, ОписаниеПолей)

	Объекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектСервиса);
	Таблица = ТаблицаИзМассиваОбъектов(Объекты, ОписаниеПолей);
	
	ОписаниеОбъекта = Новый Структура;
	Для каждого Колонка Из Таблица.Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		ОписаниеОбъекта.Вставить(ИмяКолонки, Таблица[0][ИмяКолонки]);
	КонецЦикла;
	
	Возврат ОписаниеОбъекта;

КонецФункции

// Преобразование массива объектов сервиса в таблицу значений с именами полей ИБ.
//
// 	Параметры:
// 		Объекты - Массив - элемент массива это соответствие описывающее объект загруженный из сервиса,
// 		ОписаниеПолей - Массив - содержит описание полей объекта.
//
// Возвращаемое значение:
// 		ТаблицаЗначений - имена колонок ИмяПоляКонфигурации.
//
Функция ТаблицаИзМассиваОбъектов(Объекты, ОписаниеПолей) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПолей);
	Для Каждого ОписаниеОбъекта Из Объекты Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьСтрокуТаблицыПоОписанию(НоваяСтрока, ОписаниеОбъекта, ОписаниеПолей);
	КонецЦикла;
	
	Возврат Таблица;

КонецФункции

Процедура ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПолей)
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПоля["ОписаниеПолей"]);
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ОписаниеПоля["ТипПоля"]);
			Таблица.Колонки.Добавить(ОписаниеПоля["ИмяПоляКонфигурации"], Новый ОписаниеТипов(МассивТипов));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицыПоОписанию(СтрокаТаблицы, ОписаниеОбъекта, ОписаниеПолей)
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		ЗначениеПоляСервиса = ОписаниеОбъекта.Получить(ОписаниеПоля["ИмяПоляСервиса"]);
		Если ЗначениеПоляСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			ЗаполнитьСтрокуТаблицыПоОписанию(СтрокаТаблицы, ОписаниеОбъекта, ОписаниеПоля["ОписаниеПолей"]);
		Иначе
			СтрокаТаблицы[ОписаниеПоля["ИмяПоляКонфигурации"]] = ЗначениеИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ОписаниеПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ОписаниеПоля)
	
	Значение = ЗначениеПоляСервиса;
	Если ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
		Значение = ТаблицаИзМассиваОбъектов(Значение, ОписаниеПоля["ОписаниеПолей"]);
	ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("Структура") Тогда
		Значение = СтруктураИзЗначенияПоляСервиса(Значение, ОписаниеПоля["ОписаниеПолей"]);
	Иначе
		ИмяПоля = ОписаниеПоля["ИмяПоляКонфигурации"];
		Если ИмяПоля = "ФизическоеЛицо" Или ИмяПоля = "Подписант" Тогда  
			Значение = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
		ИначеЕсли ИмяПоля = "Сотрудник" Тогда  
			Значение = Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
		ИначеЕсли ИмяПоля = "Организация" Тогда
			Значение = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
		ИначеЕсли ИмяПоля = "Подразделение" Тогда
			Значение = ПодразделениеСервиса(Значение);
		ИначеЕсли ИмяПоля = "ВидСправки" Тогда
			Значение = КабинетСотрудникаВнутренний.СсылкаВидыПредоставляемыхСотрудникамСправок(Значение);
		ИначеЕсли ИмяПоля = "Назначение2НДФЛ" Тогда
			Значение = НазначениеСправкиНДФЛСервиса(Значение);
		ИначеЕсли ИмяПоля = "ВариантФормированияФайлаОтвета" Тогда
			Значение = ВариантФормированияФайлаОтветаСервиса(Значение);
		ИначеЕсли ИмяПоля = "РезультатСогласования" Тогда
			Значение = ЗначениеРезультатСогласования(Значение);
		ИначеЕсли ИмяПоля = "ПричинаОтсутствия" Тогда
			Значение = ПричинаОтсутствияСервиса(Значение);
		ИначеЕсли ИмяПоля = "СпособРасчетаУдержанияДСВ" Тогда
			Значение = СпособРасчетаУдержанияДСВ(Значение);
		ИначеЕсли ИмяПоля = "РольПодписанта" Тогда
			Значение = РольПодписантаСервиса(Значение);
		ИначеЕсли ИмяПоля = "ТипЗаявки" Тогда
			Значение = ТипЗаявкиСервиса(Значение);
		ИначеЕсли ИмяПоля = "ТипШага" Тогда
			Значение = ТипШагаСогласованияСервиса(Значение);
		ИначеЕсли ИмяПоля = "ТребуемаяПодпись" Тогда
			Значение = ВидТребуемойПодписиСервиса(Значение);
		Иначе
			Значение = КабинетСотрудникаВнутренний.ЗначениеИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ИмяПоля);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция СтруктураИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ОписаниеПолей)

	ОписаниеОбъекта = Новый Структура;
	Для каждого ОписаниеПоля Из ОписаниеПолей Цикл
		
		ЗначениеПоля = ЗначениеПоляСервиса.Получить(ОписаниеПоля["ИмяПоляСервиса"]);
		Если ЗначениеПоля = Неопределено Тогда
			Значение = Неопределено;
		ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
			Значение = ТаблицаИзМассиваОбъектов(ЗначениеПоля, ОписаниеПоля["ОписаниеПолей"]);
		ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("Структура") Тогда
			Значение = СтруктураИзЗначенияПоляСервиса(ЗначениеПоля, ОписаниеПоля["ОписаниеПолей"]);
		Иначе
			Значение = ЗначениеИзЗначенияПоляСервиса(ЗначениеПоля, ОписаниеПоля);
		КонецЕсли;
		
		ОписаниеОбъекта.Вставить(ОписаниеПоля["ИмяПоляКонфигурации"], Значение);
	
	КонецЦикла;
	
	Возврат ОписаниеОбъекта;

КонецФункции

Функция НазначениеСправкиНДФЛСервиса(Назначение)
	
	Результат = Назначение;
	Если Назначение = "incomeProof" Тогда
		Результат = "ПодтверждениеДоходов";
	ИначеЕсли Назначение = "declare" Тогда
		Результат = "ДекларированиеДоходов";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ВариантФормированияФайлаОтветаСервиса(Вариант)
	
	ВариантыФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника;
	Результат = Неопределено;
	
	Если Вариант = "fileForPrinterOutput" Тогда
		Результат = ВариантыФормированияФайлаОтвета.ФайлДляВыводаНаПринтер;
	ИначеЕсли Вариант = "scanWithSignatureAndStamp" Тогда
		Результат = ВариантыФормированияФайлаОтвета.СканСПодписьюИПечатью;
	ИначеЕсли Вариант = "paperForm" Тогда
		Результат = ВариантыФормированияФайлаОтвета.ВБумажномВиде;
	ИначеЕсли Вариант = "fileWithElectronicSignature" Тогда
		Результат = ВариантыФормированияФайлаОтвета.ФайлСЭП;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеРезультатСогласования(ЗначениеПоля)

	Результат = ЗначениеПоля;
	Если ЗначениеПоля = "agreed" Тогда
		Результат = Перечисления.РезультатыСогласованияБЗК.Согласовано;
	ИначеЕсли ЗначениеПоля = "denied" Тогда
		Результат = Перечисления.РезультатыСогласованияБЗК.Отклонено;
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция СоответствиеЗначенийРольПодписанта()

	Описание = Новый Соответствие;
	Описание.Вставить("employee", 				Перечисления.РолиПодписантовКабинетСотрудника.Сотрудник);
	Описание.Вставить("directManager", 			Перечисления.РолиПодписантовКабинетСотрудника.НепосредственныйРуководитель);
	Описание.Вставить("executor", 				Перечисления.РолиПодписантовКабинетСотрудника.Исполнитель);
	Описание.Вставить("employer", 				Перечисления.РолиПодписантовКабинетСотрудника.Организация);
	Описание.Вставить("allWorkspaceManager",	Перечисления.РолиПодписантовКабинетСотрудника.РуководителиПоВсемМестамРаботы);
	Описание.Вставить("superiorManager",		Перечисления.РолиПодписантовКабинетСотрудника.ВышестоящийРуководитель);
	Описание.Вставить("teamLeader",				Перечисления.РолиПодписантовКабинетСотрудника.НеформальныйРуководитель);
	Описание.Вставить("additionalWorkspaceManager",	Перечисления.РолиПодписантовКабинетСотрудника.РуководительПоДополнительнымМестамРаботы);
	
	Возврат Описание;

КонецФункции

Функция РольПодписантаСервиса(ЗначениеПоля)

	СоответствиеЗначений = СоответствиеЗначенийРольПодписанта();
	Результат = СоответствиеЗначений[ЗначениеПоля];
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоля;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПричинаОтсутствияСервиса(ПричинаОтсутствия)
	
	Результат = ПричинаОтсутствия;
	Если ПричинаОтсутствия = "late" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Опоздание;
	ИначеЕсли ПричинаОтсутствия = "illness" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь;
	ИначеЕсли ПричинаОтсутствия = "vacation" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Отпуск;
	ИначеЕсли ПричинаОтсутствия = "studyLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск;
	ИначеЕсли ПричинаОтсутствия = "unpaidLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускЗаСвойСчет;
	ИначеЕсли ПричинаОтсутствия = "maternityLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам;
	ИначеЕсли ПричинаОтсутствия = "parentalLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоУходуЗаРебенком;
	ИначеЕсли ПричинаОтсутствия = "timeOff" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Отгул;
	ИначеЕсли ПричинаОтсутствия = "businessTrip" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Командировка;
	ИначеЕсли ПричинаОтсутствия = "personalReason" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ЛичныеДела;
	ИначеЕсли ПричинаОтсутствия = "invalidChildCare" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ДниУходаЗаДетьмиИнвалидами;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СпособРасчетаУдержанияДСВ(СпособРасчета)

	Результат = СпособРасчета;
	Если СпособРасчета = "percentage" Тогда
		Результат = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.Процентом; 
	ИначеЕсли СпособРасчета = "fixedAmount" Тогда
		Результат = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.ФиксированнойСуммой;
	ИначеЕсли СпособРасчета = "percentageUpToAmount" Тогда
		Результат =  Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.ПроцентомНеБолееСуммы;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТипЗаявкиСервиса(ЗначениеПоля)
	
	Результат = ЗначениеПоля;
	Если ЗначениеПоля = "forms2NDFLRequests" Тогда
		Результат = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ;
	ИначеЕсли ЗначениеПоля = "leaveEncashmentRequests" Тогда
		Результат = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска;
	ИначеЕсли ЗначениеПоля = "personalInformationChangeRequests" Тогда
		Результат = Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных;
	ИначеЕсли ЗначениеПоля = "voluntaryInsuranceContributionsRequests" Тогда
		Результат = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ;
	ИначеЕсли ЗначениеПоля = "certificatesFromEmployerRequests" Тогда
		Результат = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы;
	ИначеЕсли ЗначениеПоля = "vacationRequests" Тогда
		Результат = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск;
	ИначеЕсли ЗначениеПоля = "vacationBalanceRequests" Тогда
		Результат = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска;
	ИначеЕсли ЗначениеПоля = "taxDeductionRequests" Тогда
		Результат = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты;
	ИначеЕсли ЗначениеПоля = "absences" Тогда
		Результат = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипШагаСогласованияСервиса(ЗначениеПоля)
	
	Результат = Неопределено;
	
	Если ЗначениеПоля = "all" Тогда 
		Результат = Перечисления.ТипыШаговСогласованияКабинетСотрудника.ВсеСогласующие;
	ИначеЕсли ЗначениеПоля = "anybody" Тогда
		Результат = Перечисления.ТипыШаговСогласованияКабинетСотрудника.ЛюбойИзСогласующих;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидТребуемойПодписиСервиса(ЗначениеПоля)
	
	Результат = Неопределено;
	
	Если ЗначениеПоля = "notRequired" Тогда
		Результат = Перечисления.ВидыТребуемойПодписиКабинетСотрудника.НеТребуется;
	ИначеЕсли ЗначениеПоля = "unqualifiedSignature" Тогда
		Результат = Перечисления.ВидыТребуемойПодписиКабинетСотрудника.УНЭП
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодразделениеСервиса(СтрокаИдентификатора)

	Если КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат Справочники.ПодразделенияОрганизаций.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификатора));
	Иначе
		Возврат Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаИдентификатора));
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИБ

#Область ФункцииПолученияДанных

Функция ДанныеФизическихЛиц(ПараметрыОбмена, МассивОтбора)
	
	ТаблицаДанных = СведенияФизическихЛиц(МассивОтбора, ПараметрыОбмена.ВерсияФормата);
	Фотографии = КабинетСотрудникаВнутренний.ФотографииФизическихЛиц(ТаблицаДанных.ВыгрузитьКолонку("ФизическоеЛицо"));

	Если Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		НастройкиФункциональности = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
		УровеньДоступаКИ = УровньДоступаКИнформацииОСотрудниках(НастройкиФункциональности.УровеньДоступаКИ);
		ТаблицаДанных.Колонки.Добавить("ДоступКонтактнойИнформации", Новый ОписаниеТипов("Строка"));
		ТаблицаДанных.ЗаполнитьЗначения(УровеньДоступаКИ, "ДоступКонтактнойИнформации");
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаДанных", ТаблицаДанных);
	Результат.Вставить("Фотографии", 	Фотографии);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДолжностей(ПараметрыОбмена, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейДолжностей(ПараметрыОбмена.ВерсияФормата);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОтбора", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	Должности.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.Ссылка В(&СписокОтбора)";
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);

КонецФункции

Функция ДанныеОрганизаций(ПараметрыОбмена, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейОрганизаций(ПараметрыОбмена.ВерсияФормата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОтбора", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Организации.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОтбора)";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
КонецФункции

Функция ДанныеСтруктурыПредприятия(ПараметрыОбмена, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейСтруктурыПредприятия(ПараметрыОбмена.ВерсияФормата);
	ТаблицаДанных = КабинетСотрудникаВнутренний.ДанныеСтруктурыПредприятия(МассивОтбора);
	
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
КонецФункции

Функция ДанныеСтруктурыЮридическихЛиц(ПараметрыОбмена, Организации, ПодразделенияОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Подразделения", ПодразделенияОрганизаций);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	""0000"" КАК Код,
	|	Организации.Наименование КАК Наименование,
	|	НЕОПРЕДЕЛЕНО КАК РодительПодразделения,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицоРуководителя,
	|	"""" КАК Порядок,
	|	Организации.Ссылка КАК Организация,
	|	ИСТИНА КАК ЭтоОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подразделения.Ссылка,
	|	Подразделения.Код,
	|	Подразделения.Наименование,
	|	Подразделения.Родитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|	Подразделения.РеквизитДопУпорядочиванияИерархического,
	|	Подразделения.Владелец,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.Ссылка В(&Подразделения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыОрганизаций.Организация КАК Организация,
	|	ИдентификаторыОрганизаций.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыОрганизацийКабинетСотрудника КАК ИдентификаторыОрганизаций";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаСтруктурыПредприятия = РезультатЗапроса[0].Выгрузить();
	Если Не ЗначениеЗаполнено(ТаблицаСтруктурыПредприятия) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТаблицаСтруктурыПредприятия.Колонки.Добавить("СтруктураПредприятия");
	ТаблицаСтруктурыПредприятия.Колонки.Добавить("Родитель");
	
	ИдентификаторыОрганизаций = Новый Соответствие;
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыОрганизаций.Вставить(Выборка.Организация, Выборка.Идентификатор);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО ФизическиеЛица.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	ОрганизацииРуководители = Новый Соответствие;
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСтруктурыПредприятия, "Организация", Истина);
	Для Каждого Организация Из Организации Цикл
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		ОтветственныеЛица = ПодписиДокументов.ОтветственныеЛицаОрганизации(Организация, "Руководитель", ТекущаяДатаСеанса());
		Если ПубликуемыеФизическиеЛица[ОтветственныеЛица.Руководитель] <> Неопределено Тогда
			ОрганизацииРуководители.Вставить(Организация, ОтветственныеЛица.Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	ПодразделенияРуководители = КабинетСотрудникаВнутренний.РуководителиПодразделенийОрганизаций(ПодразделенияОрганизаций);
	
	ПорядокОрганизаций = ПорядокОрганизаций();
	Для Каждого СтрокаТЗ Из ТаблицаСтруктурыПредприятия Цикл
		
		ПорядокОрганизации = ПорядокОрганизаций[СтрокаТЗ.Организация];
		ПорядокПодразделения = СтрокаТЗ.Порядок;
		Если ЗначениеЗаполнено(ПорядокОрганизации) Тогда
			СтрокаТЗ.Порядок = ПорядокОрганизации + ПорядокПодразделения;
		КонецЕсли;
		
		СтрокаТЗ.Родитель = СтрокаТЗ.РодительПодразделения;
		СтрокаТЗ.СтруктураПредприятия = СтрокаТЗ.Ссылка;
		
		СтрокаТЗ.ФизическоеЛицоРуководителя = ПодразделенияРуководители[СтрокаТЗ.Ссылка];
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ФизическоеЛицоРуководителя) Или ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицоРуководителя] = Неопределено Тогда
			СтрокаТЗ.ФизическоеЛицоРуководителя = ОрганизацииРуководители[СтрокаТЗ.Организация];
		КонецЕсли;
		
		Если СтрокаТЗ.ЭтоОрганизация Или Не ЗначениеЗаполнено(СтрокаТЗ.Родитель) Тогда
			ИдентификаторОрганизации = ИдентификаторыОрганизаций[СтрокаТЗ.Организация];
			Если ИдентификаторОрганизации = Неопределено Тогда
				ИдентификаторОрганизации = Строка(Новый УникальныйИдентификатор);
				СтрокаЗаписи = РегистрыСведений.ИдентификаторыОрганизацийКабинетСотрудника.СоздатьМенеджерЗаписи();
				СтрокаЗаписи.Организация = СтрокаТЗ.Организация;
				СтрокаЗаписи.Идентификатор = ИдентификаторОрганизации;
				СтрокаЗаписи.Записать();
				ИдентификаторыОрганизаций.Вставить(СтрокаТЗ.Организация, ИдентификаторОрганизации);
			КонецЕсли;
			Если СтрокаТЗ.ЭтоОрганизация Тогда
				СтрокаТЗ.СтруктураПредприятия = ИдентификаторОрганизации;
			Иначе
				СтрокаТЗ.Родитель = ИдентификаторОрганизации;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеПолей = ОписаниеПолейСтруктурыПредприятия(ПараметрыОбмена.ВерсияФормата);
	
	Возврат ТаблицаДанныхВМассив(ТаблицаСтруктурыПредприятия, СоответствиеПолей);
	
КонецФункции

Функция ДанныеШтатногоРасписания(ПараметрыОбмена, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейШтатногоРасписания(ПараметрыОбмена.ВерсияФормата);
	ТаблицаДанных = КабинетСотрудникаВнутренний.ДанныеШтатногоРасписания(МассивОтбора);
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.МестоВСтруктуреПредприятия) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	ПозицииСОшибками = Новый Массив;
	Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ПозицииСОшибками.Добавить(УдаляемаяСтрока.ПозицияШтатногоРасписания);
		ТаблицаДанных.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	КабинетСотрудника.ЗарегистрироватьПозицииСОшибкамиЗаполнения(ПозицииСОшибками);
	
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);

КонецФункции

Функция ДанныеСотрудников(ПараметрыОбмена, МассивОтбора)
	
	ДанныеСотрудников = КабинетСотрудникаВнутренний.ДанныеСотрудниковДляПубликации(ПараметрыОбмена, МассивОтбора);
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеСотрудников, "ДолжностьПоШтатномуРасписанию", Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПубликации.ОбъектПравила КАК ОбъектПравила
	|ИЗ
	|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|ГДЕ
	|	ПравилаПубликации.ОбъектПравила В(&Позиции)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ПубликуемыеПозиции = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеПозиции.Вставить(Выборка.ОбъектПравила, Истина);
	КонецЦикла;
	
	СоответствиеПолей = ОписаниеПолейСотрудников(ПараметрыОбмена.ВерсияФормата);
	ВыбираемыеПоля = ВыбираемыеПоля(СоответствиеПолей);
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ИмяПоля Из ВыбираемыеПоля Цикл
		ТаблицаДанных.Колонки.Добавить(ИмяПоля);
	КонецЦикла;
	
	ОшибкиЗаполнения = Новый ТаблицаЗначений;
	ОшибкиЗаполнения.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ОшибкиЗаполнения.Колонки.Добавить("Позиция", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	
	Для каждого СтрокаТЗ Из ДанныеСотрудников Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Организация) Тогда
			КабинетСотрудника.ЗарегистрироватьОбъектДляУдаленияИзСервиса(СтрокаТЗ.Сотрудник);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ВидЗанятости) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЗ.МестоВСтруктуреПредприятия) Тогда
			НоваяСтрока = ОшибкиЗаполнения.Добавить();
			НоваяСтрока.Сотрудник 	= СтрокаТЗ.Сотрудник;
			НоваяСтрока.Позиция 	= СтрокаТЗ.ДолжностьПоШтатномуРасписанию;
			Продолжить;
		КонецЕсли;
		ИсключаяСвойства = "";
		Уволен = Ложь;
		Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			ИсключаяСвойства = "ТарифнаяСтавка,ПоказательТарифнойСтавки";
			Уволен = Истина;
		КонецЕсли;
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,, ИсключаяСвойства);
		НоваяСтрока.Уволен = Уволен;
		НоваяСтрока.СкрыватьВСписках = ?(ПубликуемыеПозиции[СтрокаТЗ.ДолжностьПоШтатномуРасписанию] = Неопределено, Истина, Ложь);
	КонецЦикла;
	
	КабинетСотрудника.ЗарегистрироватьСотрудниковПозииСОшибкамиЗаполнения(ОшибкиЗаполнения);
	
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
КонецФункции

Функция ДанныеОВычетах(ПараметрыОбмена, МассивОтбора)
	
	ТаблицаДанных = ПрименяемыеВычеты(МассивОтбора, ТекущаяДатаСеанса());
	ФизическиеЛицаСВычетами  = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "ФизическоеЛицо", Истина);
	
	ОписаниеПолей = ОписаниеПолейПрименяемыеНалоговыеВычеты(ПараметрыОбмена.ВерсияФормата);
	
	Результат = Новый Структура("Данные,ФизическиеЛицаБезВычетов");
	Результат.Данные = МассивИзТаблицы(ТаблицаДанных, ОписаниеПолей);
	Результат.ФизическиеЛицаБезВычетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивОтбора, ФизическиеЛицаСВычетами);
	
	Возврат Результат;
	
КонецФункции

Функция ПрименяемыеВычеты(СписокФизическихЛиц, ДатаАктуальности)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерВычетовНДФЛСрезПоследних.КодВычета КАК КодВычета,
	|	РазмерВычетовНДФЛСрезПоследних.Размер КАК Размер
	|ИЗ
	|	РегистрСведений.РазмерВычетовНДФЛ.СрезПоследних(&ДатаАктуальности, ) КАК РазмерВычетовНДФЛСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	РазмерыВычетов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыВычетов.Вставить(Выборка.КодВычета, Выборка.Размер);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ДатаАктуальности));
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТРегистраторыИмущественныхВычетов
	|ИЗ
	|	Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.Проведен
	|	И ИмущественныеВычетыНДФЛ.ПрименятьВычетыС МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ИмущественныеВычетыНДФЛ.Сотрудник В(&СписокФизическихЛиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПоследнийМесяцВычетовНаДетей
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.ДействуетДо >= &ДатаНачала
	|	И СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцРегистрации,
	|	Организация,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(СтандартныеВычетыФизическихЛицНДФЛ.Период) КАК Период,
	|	СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПоследнийМесяцВычетов
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо,
	|	СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.Организация КАК Организация,
	|	ИмущественныеВычетыНДФЛ.Сотрудник КАК ФизическоеЛицо,
	|	ИмущественныеВычетыНДФЛ.ПрименятьВычетыС КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ИмущественныеВычетыНДФЛ.ПрименятьВычетыС, ГОД) КАК ДатаОкончания,
	|	ИмущественныеВычетыНДФЛ.РасходыНаСтроительствоПриобретение КАК РасходыНаСтроительствоПриобретение,
	|	ИмущественныеВычетыНДФЛ.ПроцентыПоКредитам КАК ПроцентыПоКредитам,
	|	ИмущественныеВычетыНДФЛ.ПроцентыПриПерекредитовании КАК ПроцентыПриПерекредитовании,
	|	ИмущественныеВычетыНДФЛ.РасходыНаСвоеОбучение КАК РасходыНаСвоеОбучение,
	|	ИмущественныеВычетыНДФЛ.РасходыНаОбучениеДетей КАК РасходыНаОбучениеДетей,
	|	ИмущественныеВычетыНДФЛ.РасходыНаЛечение КАК РасходыНаЛечение,
	|	ИмущественныеВычетыНДФЛ.СтраховыеВзносыНаМедУслуги КАК СтраховыеВзносыНаМедУслуги,
	|	ИмущественныеВычетыНДФЛ.РасходыНаДорогостоящееЛечение КАК РасходыНаДорогостоящееЛечение,
	|	ИмущественныеВычетыНДФЛ.ВзносыНаДобровольноеСтрахованиеЖизни КАК ВзносыНаДобровольноеСтрахованиеЖизни
	|ИЗ
	|	ВТРегистраторыИмущественныхВычетов КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
	|		ПО Регистраторы.Ссылка = ИмущественныеВычетыНДФЛ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация КАК Организация,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации КАК ДатаНачала,
	|	СтандартныеВычетыНаДетейНДФЛ.ДействуетДо КАК ДатаОкончания,
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета КАК КодВычета,
	|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей КАК КоличествоДетей,
	|	ВидыВычетовНДФЛ.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийМесяцВычетовНаДетей КАК ПоследнийМесяцВычетовНаДетей
	|		ПО СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации = ПоследнийМесяцВычетовНаДетей.МесяцРегистрации
	|			И СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация = ПоследнийМесяцВычетовНаДетей.Организация
	|			И СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = ПоследнийМесяцВычетовНаДетей.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|		ПО СтандартныеВычетыНаДетейНДФЛ.КодВычета = ВидыВычетовНДФЛ.Ссылка
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета.Код,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация КАК Организация,
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтандартныеВычетыФизическихЛицНДФЛ.Период КАК ДатаНачала,
	|	СтандартныеВычетыФизическихЛицНДФЛ.КодВычетаЛичный КАК КодВычета,
	|	ВидыВычетовНДФЛ.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийМесяцВычетов КАК ВТПоследнийМесяцВычетов
	|		ПО СтандартныеВычетыФизическихЛицНДФЛ.Период = ВТПоследнийМесяцВычетов.Период
	|			И СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо = ВТПоследнийМесяцВычетов.ФизическоеЛицо
	|			И СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация = ВТПоследнийМесяцВычетов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|		ПО СтандартныеВычетыФизическихЛицНДФЛ.КодВычетаЛичный = ВидыВычетовНДФЛ.Ссылка";
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10)));
	Таблица.Колонки.Добавить("ОписаниеВычета", Новый ОписаниеТипов("Строка"));
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.РасходыНаСтроительствоПриобретение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаСтроительствоПриобретение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на жилье'");
		КонецЕсли;
		
		Если Выборка.ПроцентыПоКредитам > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ПроцентыПоКредитам;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Проценты по кредитам'");
		КонецЕсли;
		
		Если Выборка.ПроцентыПриПерекредитовании > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ПроцентыПриПерекредитовании;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Проценты при перекредитовании'");
		КонецЕсли;
		
		Если Выборка.РасходыНаСвоеОбучение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаСвоеОбучение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на свое обучение'");
		КонецЕсли;
		
		Если Выборка.РасходыНаОбучениеДетей > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаОбучениеДетей;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на обучение детей'");
		КонецЕсли;
		
		Если Выборка.РасходыНаЛечение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаЛечение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на лечение'");
		КонецЕсли;
		
		Если Выборка.СтраховыеВзносыНаМедУслуги > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.СтраховыеВзносыНаМедУслуги;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Страховые взносы на медицинские услуги'");
		КонецЕсли;
		
		Если Выборка.РасходыНаДорогостоящееЛечение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаДорогостоящееЛечение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на дорогостоящее лечение'");
		КонецЕсли;
		
		Если Выборка.ВзносыНаДобровольноеСтрахованиеЖизни > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ВзносыНаДобровольноеСтрахованиеЖизни;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Взносы на добровольное страхование жизни'");
		КонецЕсли;
	КонецЦикла;
		
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		РазмерВычета = РазмерыВычетов[Выборка.КодВычета];
		ТекстРубли = НСтр("ru = 'р'");
		ОписаниеВычета = СтрШаблон("%1 %2. %3", РазмерВычета, ТекстРубли, Выборка.ПолноеНаименование);
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.РазмерВычета = РазмерВычета;
		НоваяСтрока.ОписаниеВычета = ОписаниеВычета;
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[5].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		РазмерВычета = РазмерыВычетов[Выборка.КодВычета];
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.РазмерВычета = РазмерВычета;
		НоваяСтрока.ОписаниеВычета = Выборка.ПолноеНаименование;
	КонецЦикла;
	
	Результат = Таблица.Скопировать(, "Организация, ФизическоеЛицо");
	Результат.Свернуть("Организация, ФизическоеЛицо");
	Результат.Колонки.Добавить("ИнформацияОВычетах", Новый ОписаниеТипов("ТаблицаЗначений"));
	Для Каждого СтрокаТаблицы  Из Результат Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтрокаТаблицы.Организация);
		Отбор.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
		ТаблицаИнформацияОВычетах = НоваяТаблицаИнформацияОВычетах();
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаИнформацияОВычетах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;
		СтрокаТаблицы.ИнформацияОВычетах = ТаблицаИнформацияОВычетах;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаИнформацияОВычетах()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ОписаниеВычета", Новый ОписаниеТипов("Строка"));
	Возврат Результат;
	
КонецФункции

Функция ДанныеСогласийНаПрисоединениеККЭДО(ДокументыОтбор)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Согласия", ДокументыОтбор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СогласиеНаПрисоединениеККЭДО.Ссылка КАК Согласие,
	|	СогласиеНаПрисоединениеККЭДО.Организация КАК Организация,
	|	СогласиеНаПрисоединениеККЭДО.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СогласиеНаПрисоединениеККЭДО.Дата КАК ДатаСоздания
	|ИЗ
	|	Документ.СогласиеНаПрисоединениеККЭДО КАК СогласиеНаПрисоединениеККЭДО
	|ГДЕ
	|	СогласиеНаПрисоединениеККЭДО.Ссылка В(&Согласия)";
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция СведенияФизическихЛиц(МассивОтбора, ВерсияФормата) Экспорт
	
	СоответствиеПолей = ОписаниеПолейФизическихЛиц(ВерсияФормата);
	ВыбираемыеПоля = ВыбираемыеПоля(СоответствиеПолей);
	ВыбираемыеПоля.Добавить("ФИОПолные");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВыбираемыеПоля, "ТелефонМобильныйПредставление");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВыбираемыеПоля, "EMailПредставление");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВыбираемыеПоля, "ДоступКонтактнойИнформации");
	
	ПоляФайл = ВыбираемыеПоля(ОписаниеПолейФайл(ВерсияФормата));
	Для каждого ИмяПоля Из ПоляФайл Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВыбираемыеПоля, ИмяПоля);
	КонецЦикла;
	
	ПоляСклонений = ВыбираемыеПоля(ОписаниеПолейСклонений(ВерсияФормата));
	Для Каждого ИмяПоля Из ПоляСклонений Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВыбираемыеПоля, ИмяПоля);
	КонецЦикла;
	
	КадровыеДанные = СтрСоединить(ВыбираемыеПоля, ", ");
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, МассивОтбора, КадровыеДанные, ТекущаяДатаСеанса());
	
	КонтактнаяИнформация = КабинетСотрудника.КонтактнаяИнформацияФизическихЛиц(МассивОтбора);
	
	ТаблицаДанных.Колонки.Добавить("ТелефонМобильныйПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("EMailПредставление", 			Новый ОписаниеТипов("Строка"));
	
	Для каждого ИмяПоля Из ПоляФайл Цикл
		ТаблицаДанных.Колонки.Добавить(ИмяПоля, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	Для Каждого ИмяПоля Из ПоляСклонений Цикл
		ТаблицаДанных.Колонки.Добавить(ИмяПоля, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Истина;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		СтрокаТЗ.ТелефонМобильныйПредставление = КонтактнаяИнформация.МобильныеТелефоны[СтрокаТЗ.ФизическоеЛицо];
		СтрокаТЗ.EMailПредставление = КонтактнаяИнформация.АдресаПочты[СтрокаТЗ.ФизическоеЛицо];
		СтрокаТЗ.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(СтрокаТЗ.МестоРождения);
		Если ЗначениеЗаполнено(СтрокаТЗ.ТелефонРабочийПредставление) И СтрДлина(СтрокаТЗ.ТелефонРабочийПредставление) > 40 Тогда
			СтрокаТЗ.ТелефонРабочийПредставление = "";
		КонецЕсли;
		ПараметрыСклонения.Пол = ?(СтрокаТЗ.Пол = Перечисления.ПолФизическогоЛица.Мужской,1,2);
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, СклонениеПредставленийОбъектов.ДанныеСклонения(СтрокаТЗ.ФИОПолные, ПараметрыСклонения));
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхРасчетныхЛистков

Функция ДанныеРасчетныхЛистов(ПараметрыВыгрузки, ВерсияФормата)
	
	Организация 			= ПараметрыВыгрузки.Организация;
	Месяц 					= ПараметрыВыгрузки.Месяц;
	ПерваяПоловинаМесяца 	= ПараметрыВыгрузки.ПерваяПоловинаМесяца;
	СписокФизическихЛиц 	= ПараметрыВыгрузки.СписокФизическихЛиц;
	ПовторнаяПубликация 	= ПараметрыВыгрузки.ПовторнаяПубликация;
	
	Данные = ДанныеРасчетныхЛистовДляПубликации(ПараметрыВыгрузки);
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРасчетныхЛистов   = Данные.ДанныеРасчетныхЛистков;
	
	ВидыМестВыплатыРегистраторов = ВидыМестВыплатыРегистраторов(ДанныеРасчетныхЛистов);
	ОписаниеСоставныхЧастейЗарплаты = ОписаниеСоставныхЧастейЗарплаты(ДанныеРасчетныхЛистов, ВерсияФормата);
	ОписаниеОбъектаСтрокаРасчетногоЛистка = ОписаниеОбъектаСтрокаРасчетногоЛистка(ВерсияФормата);
	
	ДанныеРасчетныхЛистов.Индексы.Добавить("ФизическоеЛицо");
	Отбор = Новый Структура("ФизическоеЛицо");
	
	СоставныеЧастиЗарплаты = Новый Соответствие;
	ИнформацияОЗарплате = Новый Соответствие;
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		
		Отбор.ФизическоеЛицо = ФизическоеЛицо;
		СтрокиДанных = ДанныеРасчетныхЛистов.НайтиСтроки(Отбор);
		
		Компоненты = Новый Массив;
		Для каждого СтрокаДанных Из СтрокиДанных Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Сотрудник)
				Или Не ЗначениеЗаполнено(СтрокаДанных.ВидРасчета) И Не ЗначениеЗаполнено(СтрокаДанных.Группа) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо") Тогда
				Если СтрокаДанных.Сумма < 0 Тогда
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ДолгСотрудникаНаНачало"];
				Иначе
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ДолгОрганизацииНаНачало"];
				КонецЕсли;
			ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо") Тогда
				Если СтрокаДанных.Сумма < 0 Тогда
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ДолгСотрудникаНаКонец"];
				Иначе
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ДолгОрганизацииНаКонец"];
				КонецЕсли;
			ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено") Тогда
				Если ВидыМестВыплатыРегистраторов[СтрокаДанных.РегистраторВыплаты] = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ВыплатаНаКарту"];
				ИначеЕсли ВидыМестВыплатыРегистраторов[СтрокаДанных.РегистраторВыплаты] = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ВыплатаНаСчет"];
				Иначе
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ВыплатаНаличными"];
				КонецЕсли;
			ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено")
				Или СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано")
				Или СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно")
				Или СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы") Тогда
				СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты[СтрокаДанных.ВидРасчета];
			Иначе
				Продолжить;
			КонецЕсли;
			
			СоставныеЧастиЗарплаты.Вставить(СоставнаяЧасть.ID, СоставнаяЧасть);
			
			СтрокаРасчетногоЛистка = ОписаниеОбъекта(ОписаниеОбъектаСтрокаРасчетногоЛистка);
			СтрокаРасчетногоЛистка.Организация 		= Организация;
			СтрокаРасчетногоЛистка.Сотрудник 		= СтрокаДанных.Сотрудник;
			СтрокаРасчетногоЛистка.СоставнаяЧасть 	= СоставнаяЧасть.ID;
			СтрокаРасчетногоЛистка.Сумма 			= ?(СтрокаДанных.Сумма = Неопределено, 0, Число(СтрокаДанных.Сумма));
			СтрокаРасчетногоЛистка.ПредставлениеРабочегоМеста = СтрокаДанных.ПредставлениеРабочегоМеста;
			ОбъектСтрокаРасчетногоЛистка = ОбъектСервисаПоОписанию(СтрокаРасчетногоЛистка, ОписаниеОбъектаСтрокаРасчетногоЛистка);
			
			Компоненты.Добавить(ОбъектСтрокаРасчетногоЛистка);
			
		КонецЦикла;
		
		Если Компоненты.Количество() = 0 И Не ПовторнаяПубликация Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектИнформацияОЗарплате = ОписаниеИнформацияОЗарплате();
		ОбъектИнформацияОЗарплате.personID 		= ФизическоеЛицо;
		ОбъектИнформацияОЗарплате.month 		= Месяц;
		ОбъектИнформацияОЗарплате.isFirstHalf 	= ПерваяПоловинаМесяца;
		ОбъектИнформацияОЗарплате.components 	= Компоненты;
		ИнформацияОЗарплате.Вставить(ФизическоеЛицо, ОбъектИнформацияОЗарплате);
	
	КонецЦикла;
	
	СоставныеЧастиЗарплатыДляПубликации = Новый Массив;
	Для каждого ЭлементКоллекции Из СоставныеЧастиЗарплаты Цикл
		СоставныеЧастиЗарплатыДляПубликации.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("СоставныеЧастиЗарплаты", 	СоставныеЧастиЗарплатыДляПубликации);
	Результат.Вставить("ИнформацияОЗарплате", 		ИнформацияОЗарплате);
	Результат.Вставить("РасчетныеЛистыДокументы", 	Данные.РасчетныеЛистыДокументы);
	Возврат Результат;
	
КонецФункции

Функция ДанныеРасчетныхЛистовДляПубликации(ПараметрыВыгрузки)
	
	Организация 			= ПараметрыВыгрузки.Организация;
	Месяц 					= ПараметрыВыгрузки.Месяц;
	СписокФизическихЛиц 	= ПараметрыВыгрузки.СписокФизическихЛиц;
	ПерваяПоловинаМесяца 	= ПараметрыВыгрузки.ПерваяПоловинаМесяца;
	ВариантОтчета 			= ПараметрыВыгрузки.ВариантОтчета;
	
	ДанныеДляРасчетныхЛистков = ДанныеРасчетныхЛистовДляПубликацииВариантовПоВарианту(
		Организация, Месяц, СписокФизическихЛиц, ПерваяПоловинаМесяца, ВариантОтчета);
	
	Если ПараметрыВыгрузки.ФормироватьРасчетныеЛистыОтдельнымЗапросом Тогда
		Данные = ДанныеРасчетныхЛистовДляПубликацииВариантовПоВарианту(
			Организация, Месяц, СписокФизическихЛиц, ПерваяПоловинаМесяца);
	Иначе
		Данные = ДанныеДляРасчетныхЛистков;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ДанныеРасчетныхЛистков) Тогда
		Результат = Новый Структура("ДанныеРасчетныхЛистков,РасчетныеЛистыДокументы");
		Результат.ДанныеРасчетныхЛистков  = Данные.ДанныеРасчетныхЛистков.ДанныеРасчетныхЛистков;
		Результат.РасчетныеЛистыДокументы = РасчетныеЛистыДокументы(ДанныеДляРасчетныхЛистков.ДокументРезультат);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДанныеРасчетныхЛистовДляПубликацииВариантовПоВарианту(Организация, Месяц, СписокФизическихЛиц, ПерваяПоловинаМесяца, ВариантОтчета = Неопределено)
	Если ПерваяПоловинаМесяца Тогда
		ОтчетРасчтныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛистокЗаПервуюПоловинуМесяца(ВариантОтчета);
	Иначе
		ОтчетРасчтныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток(ВариантОтчета);
	КонецЕсли;
	Возврат ЗарплатаКадрыОтчеты.ДанныеРасчетныхЛистков(
		СписокФизическихЛиц, Организация, НачалоМесяца(Месяц), КонецМесяца(Месяц), ОтчетРасчтныйЛисток);
КонецФункции

Функция РасчетныеЛистыДокументы(ДокументРезультат)
	
	Результат = Новый Соответствие;
	
	Для Каждого Область Из ДокументРезультат.Области Цикл
		
		Если Не СтрНачинаетсяС(Область.Имя, "payslip_") Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор = Сред(Область.Имя, СтрНайти(Область.Имя, "_", , , 3) + 1);
		Идентификатор = Лев(Идентификатор, СтрНайти(Идентификатор, "_") - 1);
		
		ИдентификаторФизлица = Новый УникальныйИдентификатор(
			Лев(Идентификатор, 8)
			+ "-"
			+ Сред(Идентификатор, 9, 4)
			+ "-"
			+ Сред(Идентификатор, 13, 4)
			+ "-"
			+ Сред(Идентификатор, 17, 4)
			+ "-"
			+ Прав(Идентификатор, 12));
		
		ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(ИдентификаторФизлица);
		Если Не ФизическоеЛицо.Пустая() Тогда
			РасчетныйЛист = ДокументРезультат.ПолучитьОбласть(Область.Имя);
			ЗаполнитьЗначенияСвойств(РасчетныйЛист, ДокументРезультат, "АвтоМасштаб,ПолеСверху,ПолеСнизу,ПолеСлева,ПолеСправа,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу");
			Результат.Вставить(ФизическоеЛицо, РасчетныйЛист);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеСоставныхЧастейЗарплаты(ДанныеРасчетныхЛистов, ВерсияФормата)
	
	СоставныеЧасти = Новый Соответствие;
	МенеджерПеречисления = Перечисления.ГруппыНачисленияУдержанияВыплаты;
	ОписаниеОбъектаСоставнаяЧастьЗарплаты = ОписаниеОбъектаСоставнаяЧастьЗарплаты(ВерсияФормата);
	
	// incomingEmployerDebt - Долг сотрудника на начало.
	Описание = ОписаниеОбъекта(ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	Описание.Идентификатор 	= "2f576597-ec81-482e-a504-202004ac75c4";
	Описание.Группа 		= "incomingBalance";
	Описание.Наименование 	= НСтр("ru = 'Долг сотрудника на начало'");
	Описание.Вид 			= "incomingEmployerDebt";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.НачальноеСальдо) + 1 )* 10000000;
	ОбъектСоставнаяЧастьЗарплаты 	= ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	СоставныеЧасти.Вставить("ДолгСотрудникаНаНачало", ОбъектСоставнаяЧастьЗарплаты);
	
	// incomingEmployeeDebt - Долг предприятия на начало.
	Описание = ОписаниеОбъекта(ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	Описание.Идентификатор 	= "a51bf7db-9fd5-451e-a3e4-7c4613b0a11b";
	Описание.Группа 		= "incomingBalance";
	Описание.Наименование 	= НСтр("ru = 'Долг предприятия на начало'");
	Описание.Вид 			= "incomingEmployeeDebt";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.НачальноеСальдо) + 1 )* 10000000;
	ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	СоставныеЧасти.Вставить("ДолгОрганизацииНаНачало", ОбъектСоставнаяЧастьЗарплаты);
	
	// outgoingEmployerDebt - Долг сотрудника на конец.
	Описание = ОписаниеОбъекта(ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	Описание.Идентификатор 	= "a110f6ae-17cf-4f8a-8545-6c86f3d45ac6";
	Описание.Группа 		= "outgoingBalance";
	Описание.Наименование 	= НСтр("ru = 'Долг сотрудника на конец'");
	Описание.Вид 			= "incomingEmployerDebt";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.КонечноеСальдо) + 1 )* 10000000;
	ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	СоставныеЧасти.Вставить("ДолгСотрудникаНаКонец", ОбъектСоставнаяЧастьЗарплаты);
	
	// outgoingEmployerDebt - Долг предприятия на конец.
	Описание = ОписаниеОбъекта(ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	Описание.Идентификатор 	= "375922cb-9d6a-4614-be5b-46e2cd2e1f12";
	Описание.Группа 		= "outgoingBalance";
	Описание.Наименование 	= НСтр("ru = 'Долг предприятия на конец'");
	Описание.Вид 			= "outgoingEmployeeDebt";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.КонечноеСальдо) + 1 )* 10000000;
	ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	СоставныеЧасти.Вставить("ДолгОрганизацииНаКонец", ОбъектСоставнаяЧастьЗарплаты);
	
	// bankPayment - Выплата на карту
	Описание = ОписаниеОбъекта(ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	Описание.Идентификатор 	= "dd587525-ff57-4ebc-9ef7-5c0f9d515d08";
	Описание.Группа 		= "payouts";
	Описание.Наименование 	= НСтр("ru = 'Выплата на карту'");
	Описание.Вид 			= "bankPayment";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.Выплачено) + 1 )* 10000000;
	ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	СоставныеЧасти.Вставить("ВыплатаНаКарту", ОбъектСоставнаяЧастьЗарплаты);
	
	// bankPayment - Выплата на счет
	Описание = ОписаниеОбъекта(ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	Описание.Идентификатор 	= "669dbc3b-fcab-11ea-8106-4cedfb95099a";
	Описание.Группа 		= "payouts";
	Описание.Наименование 	= НСтр("ru = 'Выплата на счет'");
	Описание.Вид 			= "bankPayment";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.Выплачено) + 1 )* 10000000;
	ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	СоставныеЧасти.Вставить("ВыплатаНаСчет", ОбъектСоставнаяЧастьЗарплаты);
	
	// bankPayment - Выплата наличными
	Описание = ОписаниеОбъекта(ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	Описание.Идентификатор 	= "2a1c604e-8c6a-4b6c-a8d9-e984984f1c57";
	Описание.Группа 		= "payouts";
	Описание.Наименование 	= НСтр("ru = 'Выплата наличными'");
	Описание.Вид 			= "cashPayment";
	Описание.Приоритет 		= (МенеджерПеречисления.Индекс(МенеджерПеречисления.Выплачено) + 1 )* 10000000;
	ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
	СоставныеЧасти.Вставить("ВыплатаНаличными", ОбъектСоставнаяЧастьЗарплаты);
	
	ВидыРасчетов = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеРасчетныхЛистов,"ВидРасчета", Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыРасчетов", ВидыРасчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&ВидыРасчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.Ссылка,
	|	Удержания.РеквизитДопУпорядочивания
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка В(&ВидыРасчетов)";
	ТаблицаВР = Запрос.Выполнить().Выгрузить();
	ПриоритерыВР = Новый Соответствие;
	Для каждого СтрокаТЗ Из ТаблицаВР Цикл
		ПриоритерыВР.Вставить(СтрокаТЗ.Ссылка, СтрокаТЗ.РеквизитДопУпорядочивания);
	КонецЦикла;
	
	НачислениеТип = НачислениеТип(ДанныеРасчетныхЛистов);
	Для каждого СтрокаТЗ Из ДанныеРасчетныхЛистов Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ВидРасчета) Или Не ЗначениеЗаполнено(СтрокаТЗ.Группа)
			Или СоставныеЧасти[СтрокаТЗ.ВидРасчета] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Приоритет = (МенеджерПеречисления.Индекс(СтрокаТЗ.Группа) + 1 )* 10000000;
		Описание = ОписаниеОбъекта(ОписаниеОбъектаСоставнаяЧастьЗарплаты);
		
		Если СтрокаТЗ.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
			
			Если ТипЗнч(СтрокаТЗ.ВидРасчета) = Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний") Тогда
				
				Описание.Идентификатор 	= ИдентификаторЗначенияПеречисления(СтрокаТЗ.ВидРасчета);
				Описание.Группа 		= "accruals";
				Описание.Наименование 	= Строка(СтрокаТЗ.ВидРасчета);
				Описание.Приоритет 		= Приоритет + 99 + Перечисления.ВидыОсобыхНачисленийИУдержаний.Индекс(СтрокаТЗ.ВидРасчета);
				Описание.ТипНачисления 	= "variable";
				
				Если СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа
					Или СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги Тогда
					Описание.Вид = "civilContractAcrual";
				ИначеЕсли СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты Тогда
					Описание.Вид = "salaryDelayCompensation";
				ИначеЕсли СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности
					Или СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка
					Или СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение
					Или СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику Тогда
					Описание.Вид = "allowance";
				КонецЕсли;
				
			Иначе
				
				ПриоритетВР = ПриоритерыВР[СтрокаТЗ.ВидРасчета];
				
				Описание.Идентификатор 	= Строка(СтрокаТЗ.ВидРасчета.УникальныйИдентификатор());
				Описание.Группа 		= "accruals";
				Описание.Наименование 	= ?(ПустаяСтрока(СтрокаТЗ.ВидРасчетаКраткоеНаименование), Строка(СтрокаТЗ.ВидРасчета), СтрокаТЗ.ВидРасчетаКраткоеНаименование);
				Описание.Приоритет 		= Приоритет + ПриоритетВР;
				Описание.ТипНачисления 	= НачислениеТип[СтрокаТЗ.ВидРасчета];
				
			КонецЕсли;
			ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
			СоставныеЧасти.Вставить(СтрокаТЗ.ВидРасчета, ОбъектСоставнаяЧастьЗарплаты);
			
		ИначеЕсли СтрокаТЗ.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано Тогда
			
			Если ТипЗнч(СтрокаТЗ.ВидРасчета) = Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний") Тогда
				
				Описание.Идентификатор 	= ИдентификаторЗначенияПеречисления(СтрокаТЗ.ВидРасчета);
				Описание.Группа 		= "deductions";
				Описание.Наименование 	= Строка(СтрокаТЗ.ВидРасчета);
				Описание.Приоритет 		= Приоритет + 99 + Перечисления.ВидыОсобыхНачисленийИУдержаний.Индекс(СтрокаТЗ.ВидРасчета);
				
				Если СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму Тогда
					Описание.Вид = "loanInterestRepayment";
				ИначеЕсли СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты Тогда
					Описание.Вид = "loanRepayment";
				ИначеЕсли СтрокаТЗ.ВидРасчета = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ Тогда
					Описание.Вид = "tax";
				КонецЕсли;
				
			Иначе
				
				ПриоритетВР = ПриоритерыВР[СтрокаТЗ.ВидРасчета];
				
				Описание.Идентификатор 	= Строка(СтрокаТЗ.ВидРасчета.УникальныйИдентификатор());
				Описание.Группа 		= "deductions";
				Описание.Наименование 	= ?(ПустаяСтрока(СтрокаТЗ.ВидРасчетаКраткоеНаименование), Строка(СтрокаТЗ.ВидРасчета), СтрокаТЗ.ВидРасчетаКраткоеНаименование);
				Описание.Приоритет 		= Приоритет + ПриоритетВР;
				
			КонецЕсли;
			ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
			СоставныеЧасти.Вставить(СтрокаТЗ.ВидРасчета, ОбъектСоставнаяЧастьЗарплаты);
			
		ИначеЕсли СтрокаТЗ.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно Тогда
			
			ПриоритетВР = ПриоритерыВР[СтрокаТЗ.ВидРасчета];
			
			Описание.Идентификатор 	= Строка(СтрокаТЗ.ВидРасчета.УникальныйИдентификатор());
			Описание.Группа 		= "additionalInfo";
			Описание.Наименование 	= ?(ПустаяСтрока(СтрокаТЗ.ВидРасчетаКраткоеНаименование), Строка(СтрокаТЗ.ВидРасчета), СтрокаТЗ.ВидРасчетаКраткоеНаименование);
			Описание.Приоритет 		= Приоритет + ПриоритетВР;
			
			ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
			СоставныеЧасти.Вставить(СтрокаТЗ.ВидРасчета, ОбъектСоставнаяЧастьЗарплаты);
			
		ИначеЕсли СтрокаТЗ.Группа = Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы Тогда
			
			ПриоритетВР = ПриоритерыВР[СтрокаТЗ.ВидРасчета];
			
			Описание.Идентификатор 	= Строка(СтрокаТЗ.ВидРасчета.УникальныйИдентификатор());
			Описание.Группа 		= "benefits";
			Описание.Наименование 	= ?(ПустаяСтрока(СтрокаТЗ.ВидРасчетаКраткоеНаименование), Строка(СтрокаТЗ.ВидРасчета), СтрокаТЗ.ВидРасчетаКраткоеНаименование);
			Описание.Приоритет 		= Приоритет + ПриоритетВР;
			
			ОбъектСоставнаяЧастьЗарплаты = ОбъектСервисаПоОписанию(Описание, ОписаниеОбъектаСоставнаяЧастьЗарплаты);
			СоставныеЧасти.Вставить(СтрокаТЗ.ВидРасчета, ОбъектСоставнаяЧастьЗарплаты);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СоставныеЧасти;

КонецФункции

Функция НачислениеТип(ДанныеРасчетныхЛистов)

	НачислениеТип = Новый Соответствие;
	
	Отбор = Новый Структура("Группа", Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	Начисления = ДанныеРасчетныхЛистов.Скопировать(Отбор, "ВидРасчета");
	Начисления.Свернуть("ВидРасчета");
	
	НачисленияТарифнойСтавки = РасчетЗарплаты.НачисленияТарифнойСтавки();
	НачисленияПоТарифнойСтавке = Новый Соответствие;
	Для каждого Начисление Из НачисленияТарифнойСтавки Цикл
		НачисленияПоТарифнойСтавке.Вставить(Начисление);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из Начисления Цикл
		Если НачисленияПоТарифнойСтавке[СтрокаТЗ.ВидРасчета] <> Неопределено Тогда
			ТипНачисления = "permanent";
		Иначе
			ТипНачисления = "variable";
		КонецЕсли;
		НачислениеТип.Вставить(СтрокаТЗ.ВидРасчета, ТипНачисления);
	КонецЦикла;
	
	Возврат НачислениеТип;

КонецФункции

Функция ИдентификаторЗначенияПеречисления(Знач Значение)
	
	Если Не Метаданные.Перечисления.Содержит(Значение.Метаданные()) Тогда
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение НСтр("ru = 'Значение не является значением перечисления.'");
	КонецЕсли;
	
	Значение = ЗначениеВСтрокуВнутр(Значение);
	Значение = Сред(Значение, СтрНайти(Значение, ":") + 1, 32);
	Значение =
		Лев(Значение, 8)+ "-"
		+ Сред(Значение, 9, 4) + "-"
		+ Сред(Значение, 13, 4) + "-"
		+ Сред(Значение, 17, 4) + "-"
		+ Прав(Значение, 12);
	
	Возврат Значение;
	
КонецФункции

Функция ВидыМестВыплатыРегистраторов(ДанныеРасчетныхЛистов)

	Отбор = Новый Структура("Группа", Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено);
	СтрокиВыплат = ДанныеРасчетныхЛистов.Скопировать(Отбор);
	РегистраторыВыплаты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиВыплат, "РегистраторВыплаты", Истина);
	
	ВидыМестВыплатыРегистраторов = Новый Соответствие;
	ПрочиеРегистраторы = Новый Массив;
	Для каждого РегистраторВыплаты Из РегистраторыВыплаты Цикл
		Если ЗначениеЗаполнено(РегистраторВыплаты) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(РегистраторВыплаты)) Тогда
			ВидМестаВыплаты = ВедомостьНаВыплатуЗарплаты.ВидМестаВыплатыПоДокументу(РегистраторВыплаты);
			Если ЗначениеЗаполнено(ВидМестаВыплаты) Тогда
				ВидыМестВыплатыРегистраторов.Вставить(РегистраторВыплаты, ВидМестаВыплаты);
			Иначе
				ПрочиеРегистраторы.Добавить(РегистраторВыплаты);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КабинетСотрудникаПереопределяемый.ДополнитьВидыМестВыплатыРегистраторов(ВидыМестВыплатыРегистраторов, ПрочиеРегистраторы);
	
	Возврат ВидыМестВыплатыРегистраторов;

КонецФункции

#КонецОбласти

Функция ПорядокОрганизаций() Экспорт
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Счетчик = 1;
		Пока Выборка.Следующий() Цикл
			Порядок = ДобавитьЛидирующиеНули(Формат(Счетчик, "ЧГ=0"), 3);
			Результат.Вставить(Выборка.Организация, Порядок);
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(ИсходнаяСтрока, ДлинаСтроки)
	
	ТекстПолный = ИсходнаяСтрока;
	Пока СтрДлина(ТекстПолный) < ДлинаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	
	Возврат ТекстПолный;
	
КонецФункции

#КонецОбласти

#Область Обмен

Функция РезультатВыполненияОбмена(ВестиПротокол) Экспорт
	
	РезультатОбмена = РегистрыСведений.РезультатОбменаКабинетСотрудника.РезультатОбмена();
	РезультатОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	ЗаписатьСобытиеНачалоОбмена();
	
	БылиОшибки = Ложь;
	Попытка
		КабинетСотрудника.ОтложенноеОбновлениеСписковПубликуемыхОбъектов(БылиОшибки);
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка
		
		НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		
		Если Не Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить() 
			И Не НастройкиСервиса.АдресПриложенияПоИмениДоступен И ЗначениеЗаполнено(НастройкиСервиса.АдресПриложенияПоИмени) Тогда
			ПроверитьДоступностьАдресаПоИмени(ВестиПротокол);
		КонецЕсли;
		
		ПараметрыОбмена = ПараметрыОбмена(ВестиПротокол);
		
		ПроверитьВерсиюФорматаОбмена(ПараметрыОбмена);
		ПроверитьОбновитьНастройкиФункциональностиСервиса(ПараметрыОбмена);
		ОпубликоватьНастройкиЗаявокНаОтпуск(ПараметрыОбмена);
		ОпубликоватьУдалениеДанных(ПараметрыОбмена, БылиОшибки);
		ОпубликоватьУдалениеДокументов(ПараметрыОбмена, БылиОшибки);
		ЗагрузитьНезагруженныеОбъекты(ПараметрыОбмена, БылиОшибки);
		ЗагрузитьИзмененияИзСервиса(ПараметрыОбмена, БылиОшибки);
		ОпубликоватьИзменения(ПараметрыОбмена, БылиОшибки);
		ОпубликоватьИзмененияЗаявок(ПараметрыОбмена, БылиОшибки);
		ОпубликоватьИзмененияДокументов(ПараметрыОбмена, БылиОшибки);
		
		КабинетСотрудника.ВыполнитьОбработчикиОбмена(ПараметрыОбмена);
		
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ЗаписатьСобытиеОкончаниеОбмена(БылиОшибки);
	
	РезультатОбмена.ДатаОкончания = ТекущаяДатаСеанса();
	РезультатОбмена.БылиОшибки = БылиОшибки;
	РегистрыСведений.РезультатОбменаКабинетСотрудника.ЗаписатьРезультатОбмена(РезультатОбмена);
	
	Возврат БылиОшибки;
	
КонецФункции

Функция РезультатОбновленияПубликацииОбъектов(ВестиПротокол, ОбновитьРегистрацию) Экспорт

	ЗаписатьСобытиеНачалоОбновленияПубликацииОбъектов();
	
	БылиОшибки = Ложь;
	Попытка
		
		ПараметрыОбмена = ПараметрыОбмена(ВестиПротокол);
		ПараметрыОбмена.ОбновлениеПубликации = Истина;
		
		ПроверитьВерсиюФорматаОбмена(ПараметрыОбмена);
		
		// Регистрация всех публикуемых объектов как изменения для публикации.
		Если ОбновитьРегистрацию Тогда
			КабинетСотрудника.РегистрацияИзмененийПередОбновлениемПубликации(БылиОшибки);
		КонецЕсли;
		
		ОпубликоватьУдалениеДанных(ПараметрыОбмена, БылиОшибки);
		ОпубликоватьИзменения(ПараметрыОбмена, БылиОшибки);
		
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ЗаписатьСобытиеОкончаниеОбновленияПубликацииОбъектов(БылиОшибки);
	
	Возврат БылиОшибки;

КонецФункции

#Область ПубликацияУдаленияОбъектов

Процедура ОпубликоватьУдалениеДанных(ПараметрыОбмена, БылиОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыДляУдаления.ОбъектДляУдаления КАК ОбъектДляУдаления,
	|	ТИПЗНАЧЕНИЯ(ОбъектыДляУдаления.ОбъектДляУдаления) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника КАК ОбъектыДляУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТипыДанных = ТипыПубликуемыхДанных();
	РесурсСервисаПоТипуДанных = Новый Соответствие;
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["ФизическиеЛица"], 		РесурсФизическиеЛица());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["Организации"], 			РесурсОрганизации());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["Должности"], 			РесурсДолжности());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["Сотрудники"], 			РесурсСотрудники());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["ШтатноеРасписание"], 	РесурсШтатноеРасписание());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["СтруктураПредприятия"], 	РесурсСтруктураПредприятия());
	
	УдаленныеОбъекты = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РесурсСервиса = РесурсСервисаПоТипуДанных[Выборка.ТипДанных];
		Если РесурсСервиса <> Неопределено Тогда
			Идентификатор = Строка(Выборка.ОбъектДляУдаления.УникальныйИдентификатор());
			Если РезультатУдаленияОбъектаИзСервиса(ПараметрыОбмена, РесурсСервиса, Идентификатор) Тогда
				УдаленныеОбъекты.Добавить(Выборка.ОбъектДляУдаления);
			Иначе
				БылиОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ОбъектДляУдаления Из УдаленныеОбъекты Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ОбъектДляУдаления", ОбъектДляУдаления);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектДляУдаления.Установить(ОбъектДляУдаления);
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпубликоватьУдалениеДокументов(ПараметрыОбмена, БылиОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыДокументов.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ИдентификаторыДокументов.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ДокументыКУдалениюКабинетСотрудника КАК ИдентификаторыДокументов";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	УдаленныеДокументы = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РесурсСервиса = РесурсСервисаПоТипуОбъекта(Выборка.ТипОбъекта, ПараметрыОбмена);
		Если Не ЗначениеЗаполнено(РесурсСервиса) Тогда
			УдаленныеДокументы.Добавить(Выборка.ИдентификаторДокумента);
			Продолжить;
		КонецЕсли;
		
		Если РезультатУдаленияОбъектаИзСервиса(ПараметрыОбмена, РесурсСервиса, СокрЛП(Выборка.ИдентификаторДокумента)) Тогда
			УдаленныеДокументы.Добавить(Выборка.ИдентификаторДокумента);
		Иначе
			БылиОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ИдентификаторДокумента Из УдаленныеДокументы Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыКУдалениюКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ИдентификаторДокумента);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ДокументыКУдалениюКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			КабинетСотрудника.ЗаписатьОшибкуРегистрацииИзменений(ИдентификаторДокумента, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатУдаленияОбъектаИзСервиса(ПараметрыОбмена, Знач РесурсСервиса, ИдентификаторОбъекта)
	
	РесурсСервиса = СтрШаблон("%1/%2", РесурсСервиса , ИдентификаторОбъекта);
	
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "DELETE"));
	Если Ответ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Или Ответ.КодСостояния = 404 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РесурсСервисаПоТипуОбъекта(ТипОбъекта, ПараметрыОбмена)

	РесурсСервиса = Неопределено;
	Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
		РесурсСервиса = РесурсДокументыНаПодпись();
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовКабинетСотрудника.ДокументНаПодпись Тогда
		РесурсСервиса = РесурсДокументыНаПодпись();
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовКабинетСотрудника.СогласиеНаПрисоединениеККЭДО Тогда
		РесурсСервиса = РесурсСогласиеНаПрисоединениеККЭДО();
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовКабинетСотрудника.СборГрафиковОтпусков Тогда
		РесурсСервиса = РесурсДанныеСбораГрафиковОтпусковПредприятия(ПараметрыОбмена.ВерсияAPI);
	КонецЕсли;
	
	Возврат РесурсСервиса;

КонецФункции

#КонецОбласти

#Область ПовторнаяЗагрузкаОбъектов

Процедура ЗагрузитьНезагруженныеОбъекты(ПараметрыОбмена, БылиОшибки)
	
	Если Не КабинетСотрудника.ПовторнаяЗагрузкаОбъектовДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	|	Таблица.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ИдентификаторыНезагруженныхОбъектовКабинетСотрудника КАК Таблица";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаРесурс 		= ТипОбъектаРесурсСервиса(ПараметрыОбмена);
	ТипОбъектаИмяОбъекта 	= ТипОбъектаИмяОбъекта();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РесурсСервиса = ТипОбъектаРесурс[Выборка.ТипОбъекта];
		Если Не ЗначениеЗаполнено(РесурсСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ИдентификаторОбъекта) Тогда
			ЗарегистрироватьНезагруженныйИдентификатор(Выборка.ИдентификаторОбъекта, Выборка.ТипОбъекта, Истина);
			Продолжить;
		КонецЕсли;
		
		Ответ = ЗагрузитьОбъектИзСервиса(ПараметрыОбмена, РесурсСервиса, СокрЛП(Выборка.ИдентификаторОбъекта));
		Если Ответ.БылиОшибки Тогда
			БылиОшибки = Истина;
		ИначеЕсли ЗначениеЗаполнено(Ответ.ПолученныеИзменения) Тогда
			ПолученныеИзменения = Новый Соответствие;
			ПолученныеИзменения.Вставить(ТипОбъектаИмяОбъекта[Выборка.ТипОбъекта], Ответ.ПолученныеИзменения);
			Результат = ОбработатьИзмененияИзСервиса(ПараметрыОбмена, ПолученныеИзменения, Истина);
			Если Не Результат.БылиОшибки Тогда
				ЗарегистрироватьНезагруженныйИдентификатор(Выборка.ИдентификаторОбъекта, Выборка.ТипОбъекта, Истина)
			КонецЕсли;
			БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ТипОбъектаРесурсСервиса(ПараметрыОбмена)

	РесурсСтатусов = Новый Соответствие;
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ, РесурсЗапросСправки2НДФЛ());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы, РесурсЗапросСправкиСРаботы());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска, РесурсЗапросСправкиОбОстаткеОтпуска());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных, РесурсЗапросИзменениеЛичныхДанных(ПараметрыОбмена.ВерсияAPI));
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск, РесурсЗаявлениеНаОтпуск());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия, РесурсОтсутствие());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты, РесурсЗаявлениеНаНалоговыеВычеты());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска, РесурсЗаявлениеНаКомпенсациюОтпуска());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ, РесурсЗаявлениеНаУдержаниеДСВ());
	РесурсСтатусов.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.РезультатСогласования, РесурсРезультатСогласования());
	РесурсСтатусов.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.СборГрафиковОтпусков, РесурсСборГрафиковОтпусков(ПараметрыОбмена.ВерсияAPI));
	
	Возврат РесурсСтатусов;

КонецФункции

Функция ТипОбъектаИмяОбъекта()

	ТипОбъектаИмяОбъекта = Новый Соответствие;
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ, "forms2NDFLRequests");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск, "vacationRequests");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты, "taxDeductionRequests");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных, "personalInformationChangeRequests");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия, "absences");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска, "vacationBalanceRequests");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы, "certificatesFromEmployerRequests");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска, "leaveEncashmentRequests");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ, "voluntaryInsuranceContributionsRequests");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.РезультатСогласования, "agreementResults");
	ТипОбъектаИмяОбъекта.Вставить(Перечисления.ТипыОбъектовКабинетСотрудника.СборГрафиковОтпусков, "divisionVacationsScheduleRequests");
	
	Возврат ТипОбъектаИмяОбъекта;

КонецФункции

Функция ЗагрузитьОбъектИзСервиса(ПараметрыОбмена, РесурсСервиса, ИдентификаторОбъекта)
	
	Результат = Новый Структура("БылиОшибки,ПолученныеИзменения", Ложь);
	РесурсСервиса = СтрЗаменить(РесурсСервиса, "{ID}", ИдентификаторОбъекта);
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "GET"));
	Если Ответ = Неопределено Тогда
		Результат.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ИменаСвойствСервисаСоЗначениямиДата = ИменаСвойствСервисаСоЗначениямиДата();
		Результат.ПолученныеИзменения = ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСервисаСоЗначениямиДата, ФорматДатыJSON.ISO, "ВосстановлениеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудникаМенеджерОбмена"),, ИменаСвойствСервисаСоЗначениямиДата);	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// объект не найден
	Иначе
		Результат.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗарегистрироватьНезагруженныйИдентификатор(ИдентификаторОбъекта, ТипОбъекта, ЗарегистрироватьУдаление = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыНезагруженныхОбъектовКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОбъекта", ИдентификаторОбъекта);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ИдентификаторыНезагруженныхОбъектовКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторОбъекта.Установить(ИдентификаторОбъекта);
		НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъекта);
		Если Не ЗарегистрироватьУдаление Тогда
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ИдентификаторОбъекта 	= ИдентификаторОбъекта;
			ЗаписьНабора.ТипОбъекта 			= ТипОбъекта;
		КонецЕсли;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = НСтр(
		"ru = 'Ошибка регистрации незагруженных объектов %1, %2
		|Описание ошибки:
		|%3'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИдентификаторОбъекта, ТипОбъекта, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзменений

Процедура ЗагрузитьИзмененияИзСервиса(ПараметрыОбмена, БылиОшибки)
	
	Лимит = 100;
	Результат = НовыйРезультатЗагрузкиИзменений();
	
	ПервыйЗапрос = Истина;
	Пока ПервыйЗапрос Или Не Результат.БылиОшибки И Результат.КоличествоОбъектов = Лимит Цикл
		
		ПервыйЗапрос = Ложь;
		Результат.КоличествоОбъектов = 0;
		
		ВерсияИзменений = Константы.ВерсияИзмененийКабинетСотрудника.Получить();
		Ответ = ИзмененияИзСервиса(ПараметрыОбмена, ВерсияИзменений, Лимит);
		Если Ответ.БылиОшибки Тогда
			Результат.БылиОшибки = Истина;
		ИначеЕсли ЗначениеЗаполнено(Ответ.ПолученныеИзменения) Тогда
			Результат = ОбработатьИзмененияИзСервиса(ПараметрыОбмена, Ответ.ПолученныеИзменения);
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатОбработки = РезультатОбработкиНеобработанныхРезультатовСогласования();
	Результат.БылиОшибки = Результат.БылиОшибки Или РезультатОбработки.БылиОшибки;
	
	БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
	
КонецПроцедуры

Функция ИзмененияИзСервиса(ПараметрыОбмена, ВерсияИзменений, Лимит)
	
	Результат = Новый Структура("БылиОшибки,ПолученныеИзменения", Ложь);
	
	Версия = Формат(ВерсияИзменений + 1, "ЧН=0; ЧГ=0");
	РесурсСервиса = РесурсПолучениеВсехИзменений();
	РесурсСервиса = СтрШаблон("%1?version=%2&limit=%3", РесурсСервиса, Версия, Лимит);
	
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "GET"));
	Если Ответ = Неопределено Тогда
		Результат.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ИменаСвойствСервисаСоЗначениямиДата = ИменаСвойствСервисаСоЗначениямиДата();
		Результат.ПолученныеИзменения = ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСервисаСоЗначениямиДата, ФорматДатыJSON.ISO, "ВосстановлениеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудникаМенеджерОбмена"),, ИменаСвойствСервисаСоЗначениямиДата);	
	ИначеЕсли Ответ.КодСостояния = 204 Тогда
		// нет изменений
	Иначе
		Результат.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбработатьИзмененияИзСервиса(ПараметрыОбмена, ПолученныеИзменения, ПовторнаяЗагрузка = Ложь)

	РезультатОбработки = НовыйРезультатЗагрузкиИзменений();
	
	ВерсияИзменений = ЗагрузитьЗаявки(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки);
	ВерсияИзменений = ЗагрузитьРезультатыСогласования(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки, ВерсияИзменений);
	ВерсияИзменений = ЗагрузитьПравилаСогласования(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки, ВерсияИзменений);
	ВерсияИзменений = КабинетСотрудникаВнутренний.ЗагрузитьГрафикиОтпусков(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки, ВерсияИзменений);
	
	Если Не ПовторнаяЗагрузка И ВерсияИзменений <> 0 Тогда
		Константы.ВерсияИзмененийКабинетСотрудника.Установить(ВерсияИзменений);
	КонецЕсли;
	
	Возврат РезультатОбработки;

КонецФункции

Функция ЗагрузитьЗаявки(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки)

	ВерсияФормата = ПараметрыОбмена.ВерсияФормата;
	
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	ТаблицаЗаявок.Колонки.Добавить("Объект");
	ТаблицаЗаявок.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаЗаявок.Колонки.Добавить("ТипЗаявки", 			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаявокКабинетСотрудника"));
	ТаблицаЗаявок.Колонки.Добавить("ПричинаОтсутствия", 	Новый ОписаниеТипов("ПеречислениеСсылка.ПричиныОтсутствийЗаявокКабинетСотрудника"));
	ТаблицаЗаявок.Колонки.Добавить("ИдентификаторЗаявки", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаЗаявок.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	ТипыОбрабатываемыхЗаявок = КабинетСотрудникаВнутренний.ТипыОбрабатываемыхЗаявок();
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["forms2NDFLRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросСправокНДФЛ(ВерсияФормата));
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["vacationRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросНаОтпуск(ВерсияФормата));
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["taxDeductionRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗаявлениеНаНалоговыеВычеты(ВерсияФормата));
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["personalInformationChangeRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросНаИзменениеЛичныхДанных(ВерсияФормата));
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["absences"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаУведомлениеОбОтсутствии(ВерсияФормата));
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["vacationBalanceRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросСправкиОбОстаткеОтпуска(ВерсияФормата));
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["certificatesFromEmployerRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросСправкиСРаботы(ВерсияФормата));
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["leaveEncashmentRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросНаКомпенсациюОтпуска(ВерсияФормата));
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ) <> Неопределено Тогда
		МассивОбъектов = ПолученныеИзменения["voluntaryInsuranceContributionsRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЗаявкиСервиса = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаЗапросНаУдержаниеДСВ(ВерсияФормата));
			ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаЗаявок, ТаблицаЗаявкиСервиса, Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ);
		КонецЕсли;
	КонецЕсли;
		
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаявок, "ФизическоеЛицо", Истина);
	// в таблицу будет добавлена колонка "ИмяТаблицы"
	ПараметрыБизнесПроцессов = БизнесПроцессыЗаявокСотрудников.ПараметрыСозданияБизнесПроцессовПоЗаявкамСервиса(СписокФизическихЛиц, ТаблицаЗаявок);
	
	ТаблицаЗаявок.Сортировать("ВерсияИзменений");
	СвойстваОтветовПоЗаявкам = "ВариантФормированияФайлаОтвета,КоличествоЭкземпляров,ОтправлятьEmail,АдресEmail";
	ВерсияИзменений = 0;
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		
		ОписаниеЗаявки = СтрокаТЗ.Объект;
		
		ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
		ВерсияИзменений = СтрокаТЗ.ВерсияИзменений;
		
		// проверка повторной регистрации заявки
		РезультатРегистрацииЗаявки = ПараметрыБизнесПроцессов.ЗарегистрированныеЗаявки[ИдентификаторЗаявки];
		Если РезультатРегистрацииЗаявки <> Неопределено Тогда
			// заявка с таким идентификатором уже зарегистрирована
			ЗаявкаЗарегистрирована = Истина;
			Если ТипЗнч(РезультатРегистрацииЗаявки) = Тип("Массив") Тогда
				// есть заявки с дополнительной идентификацией
				Если ЗначениеЗаполнено(ОписаниеЗаявки.ИдентификаторЭлектронногоДокумента)
					И РезультатРегистрацииЗаявки.Найти(ОписаниеЗаявки.ИдентификаторЭлектронногоДокумента) = Неопределено Тогда
					ЗаявкаЗарегистрирована = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗаявкаЗарегистрирована Тогда
				ВерсияИзменений = СтрокаТЗ.ВерсияИзменений;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ИмяТаблицы = СтрокаТЗ.ИмяТаблицы;
			ОписаниеБизнесПроцесса = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыБизнесПроцессов.ОписанияБизнесПроцессов[ИмяТаблицы]);
			
			ОписаниеБизнесПроцесса.ТипЗаявкиКабинетСотрудника 	= СтрокаТЗ.ТипЗаявки;
			ОписаниеБизнесПроцесса.ИдентификаторЗаявки 			= ИдентификаторЗаявки;
			
			ФайлыЗаявки = Новый Массив;
			Если ОписаниеЗаявки.Свойство("Вложения") И ЗначениеЗаполнено(ОписаниеЗаявки.Вложения) Тогда
				ФайлыЗаявки = ФайлыЗаявки(ПараметрыОбмена, ОписаниеЗаявки.Вложения);
			КонецЕсли;
			ОписаниеБизнесПроцесса.Вложения = ФайлыЗаявки;
			
			ЭлектронныйДокумент = Неопределено;
			Если ОписаниеЗаявки.Свойство("ЭлектронныйДокумент") И ЗначениеЗаполнено(ОписаниеЗаявки.ЭлектронныйДокумент) Тогда
				ЭлектронныйДокумент = ФайлЗаявки(ПараметрыОбмена, ОписаниеЗаявки.ЭлектронныйДокумент);
			КонецЕсли;
			ОписаниеБизнесПроцесса.ЭлектронныйДокумент = ЭлектронныйДокумент;
			
			Если СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ Тогда
				
				ЗаполнитьЗначенияСвойств(ОписаниеБизнесПроцесса, ОписаниеЗаявки, СвойстваОтветовПоЗаявкам);
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				Если ОписаниеЗаявки.Назначение2НДФЛ = "ПодтверждениеДоходов" Тогда
					ОписаниеБизнесПроцесса.НачалоПериода = ОписаниеЗаявки.НачалоПериода;
					ОписаниеБизнесПроцесса.ОкончаниеПериода = ОписаниеЗаявки.ОкончаниеПериода;
					ОписаниеБизнесПроцесса.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно;
				Иначе
					ОписаниеБизнесПроцесса.НалоговыйПериод = ОписаниеЗаявки.НалоговыйПериод;
					ОписаниеБизнесПроцесса.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО;
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				Если ОписаниеЗаявки.ИзменитьФИО Тогда
					Если ЗначениеЗаполнено(ОписаниеЗаявки.Фамилия) Тогда
						ОписаниеБизнесПроцесса.Фамилия = ОписаниеЗаявки.Фамилия;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеЗаявки.Имя) Тогда
						ОписаниеБизнесПроцесса.Имя = ОписаниеЗаявки.Имя;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеЗаявки.Отчество) Тогда
						ОписаниеБизнесПроцесса.Отчество = ОписаниеЗаявки.Отчество;
					КонецЕсли;
				КонецЕсли;
				
				Если ОписаниеЗаявки.ИзменитьДокумент Тогда
					ОписаниеДокумента = ОписаниеЗаявки.ДокументУдостоверяющийЛичность;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументВид) Тогда
						ВидДокумента = ВидыДокументовСервиса(ОписаниеДокумента.ДокументВид); 
						ОписаниеБизнесПроцесса.ДокументВид = ?(ВидДокумента.Ссылка <> Неопределено, ВидДокумента.Ссылка, ВидДокумента.ТекстовоеПредставление);
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументСерия) Тогда
						ОписаниеБизнесПроцесса.ДокументСерия = ОписаниеДокумента.ДокументСерия; 
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументНомер) Тогда
						ОписаниеБизнесПроцесса.ДокументНомер = ОписаниеДокумента.ДокументНомер;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументДатаВыдачи) Тогда
						ОписаниеБизнесПроцесса.ДокументДатаВыдачи = ОписаниеДокумента.ДокументДатаВыдачи;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументКемВыдан) Тогда
						ОписаниеБизнесПроцесса.ДокументКемВыдан = ОписаниеДокумента.ДокументКемВыдан;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеДокумента.ДокументКодПодразделения) Тогда
						ОписаниеБизнесПроцесса.ДокументКодПодразделения = ОписаниеДокумента.ДокументКодПодразделения;
					КонецЕсли;
				КонецЕсли;
				
				Если ОписаниеЗаявки.ИзменитьНомерТелефона Тогда
					Если ЗначениеЗаполнено(ОписаниеЗаявки.ЛичныйНомерТелефона) Тогда
						ОписаниеБизнесПроцесса.НомерМобильногоТелефона = ОписаниеЗаявки.ЛичныйНомерТелефона;
					КонецЕсли;
				КонецЕсли;
				
				Если ОписаниеЗаявки.ИзменитьАдрес Тогда
					Если ЗначениеЗаполнено(ОписаниеЗаявки.АдресРегистрации) Тогда
						ОписаниеБизнесПроцесса.АдресРегистрации = ОписаниеЗаявки.АдресРегистрации;
					КонецЕсли;
					Если ЗначениеЗаполнено(ОписаниеЗаявки.АдресМестаПроживания) Тогда
						ОписаниеБизнесПроцесса.АдресМестаПроживания = ОписаниеЗаявки.АдресМестаПроживания;
					КонецЕсли;
				КонецЕсли;
				
				Если ОписаниеЗаявки.ИзменитьEmail Тогда
					Если ЗначениеЗаполнено(ОписаниеЗаявки.Email) Тогда
						ОписаниеБизнесПроцесса.Email = ОписаниеЗаявки.Email;
					КонецЕсли;
				КонецЕсли;
				
				Если ОписаниеЗаявки.ИзменитьИНН Тогда
					Если ЗначениеЗаполнено(ОписаниеЗаявки.ИНН) Тогда
						ОписаниеБизнесПроцесса.ИНН = ОписаниеЗаявки.ИНН;
					КонецЕсли;
				КонецЕсли;
				
				Если ОписаниеЗаявки.ИзменитьСНИЛС Тогда
					Если ЗначениеЗаполнено(ОписаниеЗаявки.СНИЛС) Тогда
						ОписаниеБизнесПроцесса.СНИЛС = ОписаниеЗаявки.СНИЛС;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы Тогда
				
				ЗаполнитьЗначенияСвойств(ОписаниеБизнесПроцесса, ОписаниеЗаявки, СвойстваОтветовПоЗаявкам);
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				ОписаниеБизнесПроцесса.НазначениеСправки = ОписаниеЗаявки.НазначениеСправкиСРаботыСтрока;
				
				ВидСправки = Неопределено;
				Если ОписаниеЗаявки.Свойство("ВидСправки", ВидСправки) Тогда
					ОписаниеБизнесПроцесса.ВидСправки = ВидСправки;
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.Сотрудник 			 = ОписаниеЗаявки.Сотрудник;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				ОписаниеБизнесПроцесса.ИдентификаторЭлектронногоДокумента = ОписаниеЗаявки.ИдентификаторЭлектронногоДокумента;
				
				ОписаниеБизнесПроцесса.ЗаСвойСчет 			= ОписаниеЗаявки.ЗаСвойСчет;
				ОписаниеБизнесПроцесса.ДатаНачалаОтпуска 	= ОписаниеЗаявки.ДатаНачала;
				ОписаниеБизнесПроцесса.ДатаОкончанияОтпуска = ОписаниеЗаявки.ДатаОкончания;
				
				Если ОписаниеЗаявки.КомпенсироватьОтпуск Тогда
					ОписаниеБизнесПроцесса.КоличествоДнейКомпенсации = ОписаниеЗаявки.КоличествоДнейКомпенсации;
				КонецЕсли;
				
				// ВерсияФормата 1.0 и выше.
				МатериальнаяПомощь = Неопределено;
				Если ОписаниеЗаявки.Свойство("МатериальнаяПомощь", МатериальнаяПомощь) Тогда
					ОписаниеБизнесПроцесса.МатериальнаяПомощь = МатериальнаяПомощь;
				КонецЕсли;
				ЕдиновременнаяВыплата = Неопределено;
				Если ОписаниеЗаявки.Свойство("ЕдиновременнаяВыплата", ЕдиновременнаяВыплата) Тогда
					ОписаниеБизнесПроцесса.ЕдиновременнаяВыплата = ЕдиновременнаяВыплата;
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				ОписаниеБизнесПроцесса.КоличествоДнейКомпенсации = ОписаниеЗаявки.КоличествоДнейКомпенсации;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска Тогда
				
				ЗаполнитьЗначенияСвойств(ОписаниеБизнесПроцесса, ОписаниеЗаявки, СвойстваОтветовПоЗаявкам);
				ОписаниеБизнесПроцесса.ФизическоеЛицо  = ОписаниеЗаявки.ФизическоеЛицо;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				ОписаниеБизнесПроцесса.ЛичныйВычет 			= ОписаниеЗаявки.ЭтоЛичныйВычет;
				ОписаниеБизнесПроцесса.ВычетНаДетей 		= ОписаниеЗаявки.ЭтоВычетНаДетей;
				ОписаниеБизнесПроцесса.ВычетНаНедвижимость 	= ОписаниеЗаявки.ЭтоВычетНаНедвижимость;
				ОписаниеБизнесПроцесса.ВычетНаЛечение 		= ОписаниеЗаявки.ЭтоВычетНаЛечение;
				ОписаниеБизнесПроцесса.ВычетНаОбучение 		= ОписаниеЗаявки.ЭтоВычетНаОбучение;
				
				Если ОписаниеЗаявки.ЭтоВычетНаДетей Тогда
					Для каждого ВычетНаРебенка Из ОписаниеЗаявки.ВычетыНаДетей Цикл
						НовыйВычет = ОписаниеБизнесПроцесса.Вычеты.Добавить();
						НовыйВычет.ДействуетДо = ВычетНаРебенка.ДатаОкончания - 86400;
						НовыйВычет.ВидВычета = ОпределитьВидВычетаНаРебенка(ВычетНаРебенка);
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				
				ОписаниеБизнесПроцесса.СпособРасчета = ОписаниеЗаявки.СпособРасчетаУдержанияДСВ;
				ОписаниеБизнесПроцесса.РазмерУдержанияПроцент 	= ОписаниеЗаявки.Процент;
				ОписаниеБизнесПроцесса.РазмерУдержанияСумма 	= ОписаниеЗаявки.Сумма;
				
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия Тогда
				
				ОписаниеБизнесПроцесса.Организация 			 = ОписаниеЗаявки.Организация;
				ОписаниеБизнесПроцесса.ФизическоеЛицо 		 = ОписаниеЗаявки.ФизическоеЛицо;
				ОписаниеБизнесПроцесса.КомментарийСотрудника = ОписаниеЗаявки.Комментарий;
				ОписаниеБизнесПроцесса.ИдентификаторЭлектронногоДокумента = ОписаниеЗаявки.ИдентификаторЭлектронногоДокумента;
				
				Если СтрокаТЗ.ПричинаОтсутствия =  Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
					
					ОписаниеБизнесПроцесса.ДатаНачалаОтпуска 	= ОписаниеЗаявки.ДатаНачала;
					ОписаниеБизнесПроцесса.ДатаОкончанияОтпуска = ОписаниеЗаявки.ДатаОкончания;
					ОписаниеБизнесПроцесса.УчебныйОтпуск 		= Истина;
					
				ИначеЕсли СтрокаТЗ.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь
					Или СтрокаТЗ.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам Тогда
					
					Если СтрокаТЗ.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам Тогда
						ОписаниеБизнесПроцесса.ПоБеременности = Истина;
					КонецЕсли;
					
					ОписаниеБизнесПроцесса.ДатаНачалаОтсутствия 	= ОписаниеЗаявки.ДатаНачала;
					ОписаниеБизнесПроцесса.ДатаОкончанияОтсутствия 	= ОписаниеЗаявки.ДатаОкончания;
					
				Иначе
					
					ОписаниеБизнесПроцесса.ПричинаОтсутствия 		= СтрокаТЗ.ПричинаОтсутствия;
					ОписаниеБизнесПроцесса.ДатаНачалаОтсутствия 	= ОписаниеЗаявки.ДатаНачала;
					ОписаниеБизнесПроцесса.ДатаОкончанияОтсутствия 	= ОписаниеЗаявки.ДатаОкончания;
					ОписаниеБизнесПроцесса.ВесьДень 				= ОписаниеЗаявки.ВесьДень;
					
				КонецЕсли;
				
			КонецЕсли;
			
			БизнесПроцессыЗаявокСотрудников.СоздатьБизнесПроцессПоЗаявке(ИмяТаблицы, ОписаниеБизнесПроцесса, ПараметрыБизнесПроцессов);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			РезультатОбработки.БылиОшибки = Истина;
			ЗаписатьОшибкуЗагрузкиИзменений(СтрокаТЗ.ТипЗаявки, ОписаниеОшибки());
			ЗарегистрироватьНезагруженныйИдентификатор(ИдентификаторЗаявки, СтрокаТЗ.ТипЗаявки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатОбработки.КоличествоОбъектов = РезультатОбработки.КоличествоОбъектов + ТаблицаЗаявок.Количество();
	
	Возврат ВерсияИзменений;
	
КонецФункции

Функция ЗагрузитьРезультатыСогласования(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки, ВерсияИзменений)

	ВерсияФормата = ПараметрыОбмена.ВерсияФормата;
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	ТаблицаРезультатовСогласований = Новый ТаблицаЗначений;
	ТаблицаРезультатовСогласований.Колонки.Добавить("Объект");
	ТаблицаРезультатовСогласований.Колонки.Добавить("ВерсияИзменений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаРезультатовСогласований.Колонки.Добавить("ИдентификаторДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(72)));
	
	МассивОбъектов = ПолученныеИзменения["agreementResults"];
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ТаблицаОбъектов = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектРезультатСогласования(ВерсияФормата));
		ЗаполнитьТаблицуДанныхПоРезультатамСогласования(ТаблицаРезультатовСогласований, ТаблицаОбъектов);
	КонецЕсли;
	
	Если ТаблицаРезультатовСогласований.Количество() = 0 Тогда
		Возврат ВерсияИзменений;
	КонецЕсли;
	
	Идентификаторы = ТаблицаРезультатовСогласований.ВыгрузитьКолонку("ИдентификаторДокумента");
	// получаем таблицу с существующими документами по идентификаторам 
	ДокументыКЭДО = ДокументыКЭДОПоИдентификатору(Идентификаторы);
	ДокументыКЭДОРасчетныеЛистки = ДокументыКЭДОРасчетныеЛисткиДляСогласования(ДокументыКЭДО);
	
	ДокументыОтбор = ДокументыКЭДО.ВыгрузитьКолонку("Ссылка");
	ДокументыКЭДОСогласия = КадровыйЭДО.ДокументыКЭДОСогласиеНаПрисоединениеККЭДО(ДокументыОтбор);
	
	ИдентификаторыДокументовПовторнойПубликации = Новый Массив;
	НеобработанныеОбъекты = Новый Соответствие;
	Для каждого СтрокаТЗ Из ТаблицаРезультатовСогласований Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЗДокументКЭДО = ДокументыКЭДО.Найти(СтрокаТЗ.ИдентификаторДокумента, "ИдентификаторДокумента");
		Если СтрокаТЗДокументКЭДО = Неопределено Тогда
			НеобработанныеОбъекты.Вставить(СтрокаТЗ.ИдентификаторДокумента,СтрокаТЗ.Объект);
			Продолжить;
		КонецЕсли;
		
		РезультатСогласования = СтрокаТЗ.Объект;
		
		Если Не ЭлектронныйДокументСоответствуетОтвету(СтрокаТЗДокументКЭДО, РезультатСогласования) Тогда
			// Электронный документ не соответствует тому, который получен в результате согласования,
			// не обрабатываем.
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ВыполняетсяБлокировка = Ложь;
			ЗагрузитьРезультатСогласования(ИспользуетсяКадровыйЭДО, РезультатСогласования, СтрокаТЗДокументКЭДО,
				ДокументыКЭДОРасчетныеЛистки, ДокументыКЭДОСогласия, ИдентификаторыДокументовПовторнойПубликации);
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			// не удалось обработать результат согласования
			ОтменитьТранзакцию();
			// Если ошибка блокировки, не регистрируем ошибку обработки,
			// результат согласования будет сохранен как не обработанный.
			Если ВыполняетсяБлокировка Тогда
				НеобработанныеОбъекты.Вставить(СтрокаТЗ.ИдентификаторДокумента,СтрокаТЗ.Объект);
			Иначе
				РезультатОбработки.БылиОшибки = Истина;
				ТипИзменений = НСтр("ru = 'Результат согласования'");
				ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки());
				ЗарегистрироватьНезагруженныйИдентификатор(РезультатСогласования.ИдентификаторОбъекта, Перечисления.ТипыОбъектовКабинетСотрудника.РезультатСогласования);
			КонецЕсли;
			
		КонецПопытки;
	
	КонецЦикла;
	
	КабинетСотрудника.РегистрацияПовторнойПубликацииДокументовКЭДО(ИдентификаторыДокументовПовторнойПубликации);
	
	// Сохранение необработанных результатов согласования текущего пакета изменений.
	Для каждого ЭлементКоллекции Из НеобработанныеОбъекты Цикл
		Запись = РегистрыСведений.НеобработанныеРезультатыСогласованияКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторДокумента = ЭлементКоллекции.Ключ;
		Запись.Подписант = ЭлементКоллекции.Значение.Подписант;
		Запись.РезультатСогласования = Новый ХранилищеЗначения(ЭлементКоллекции.Значение);
		Запись.Записать();
	КонецЦикла;
	
	РезультатОбработки.КоличествоОбъектов = РезультатОбработки.КоличествоОбъектов + ТаблицаРезультатовСогласований.Количество();
	
	Возврат ВерсияИзменений;

КонецФункции

Функция РезультатОбработкиНеобработанныхРезультатовСогласования()

	РезультатОбработки = НовыйРезультатЗагрузкиИзменений();
	
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	НеобработанныеРезультаты = НеобработанныеРезультаты();
	Идентификаторы = НеобработанныеРезультаты.ВыгрузитьКолонку("ИдентификаторДокумента");
	// получаем таблицу с существующими документами по идентификаторам 
	ДокументыКЭДО = ДокументыКЭДОПоИдентификатору(Идентификаторы);
	ДокументыКЭДОРасчетныеЛистки = ДокументыКЭДОРасчетныеЛисткиДляСогласования(ДокументыКЭДО);
	
	ДокументыОтбор = ДокументыКЭДО.ВыгрузитьКолонку("Ссылка");
	ДокументыКЭДОСогласия = КадровыйЭДО.ДокументыКЭДОСогласиеНаПрисоединениеККЭДО(ДокументыОтбор);
	
	ИдентификаторыДокументовПовторнойПубликации = Новый Массив;
	ОбработанныеОбъекты = Новый Соответствие;
	Для каждого СтрокаТЗ Из НеобработанныеРезультаты Цикл
		
		РезультатСогласования = СтрокаТЗ.РезультатСогласования.Получить();
		
		СтрокаТЗДокументКЭДО = ДокументыКЭДО.Найти(СтрокаТЗ.ИдентификаторДокумента, "ИдентификаторДокумента");
		Если СтрокаТЗДокументКЭДО = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлектронныйДокументСоответствуетОтвету(СтрокаТЗДокументКЭДО, РезультатСогласования) Тогда
			// Электронный документ не соответствует тому, который получен в результате согласования,
			// не обрабатываем.
			ОбработанныеОбъекты.Вставить(СтрокаТЗ.ИдентификаторДокумента, РезультатСогласования.Подписант);
			Продолжить;
		КонецЕсли;
		
		ОбъектОбработан = Истина;
		
		НачатьТранзакцию();
		Попытка
			
			ВыполняетсяБлокировка = Ложь;
			ЗагрузитьРезультатСогласования(ИспользуетсяКадровыйЭДО, РезультатСогласования, СтрокаТЗДокументКЭДО,
				ДокументыКЭДОРасчетныеЛистки, ДокументыКЭДОСогласия, ИдентификаторыДокументовПовторнойПубликации);
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			// не удалось обработать результат согласования
			ОтменитьТранзакцию();
			Если ВыполняетсяБлокировка Тогда
				ОбъектОбработан = Ложь;
			Иначе	
				РезультатОбработки.БылиОшибки = Истина;
				ТипИзменений = НСтр("ru = 'Результат согласования'");
				ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки());
				ЗарегистрироватьНезагруженныйИдентификатор(РезультатСогласования.ИдентификаторОбъекта, Перечисления.ТипыОбъектовКабинетСотрудника.РезультатСогласования);
			КонецЕсли;
		КонецПопытки;
		
		Если ОбъектОбработан Тогда
			ОбработанныеОбъекты.Вставить(СтрокаТЗ.ИдентификаторДокумента, РезультатСогласования.Подписант);
		КонецЕсли;
	
	КонецЦикла;
	
	КабинетСотрудника.РегистрацияПовторнойПубликацииДокументовКЭДО(ИдентификаторыДокументовПовторнойПубликации);
	Для каждого ЭлементКоллекции Из ОбработанныеОбъекты Цикл
	
		Запись = РегистрыСведений.НеобработанныеРезультатыСогласованияКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторДокумента = ЭлементКоллекции.Ключ;
		Запись.Подписант = ЭлементКоллекции.Значение;
		Запись.Удалить();
	КонецЦикла;
	
	Возврат РезультатОбработки;

КонецФункции

Процедура ЗагрузитьРезультатСогласования(ИспользуетсяКадровыйЭДО, РезультатСогласования, СтрокаТЗДокументКЭДО, ДокументыКЭДОРасчетныеЛистки, ДокументыКЭДОСогласия, ИдентификаторыДокументовПовторнойПубликации)

	Если РезультатСогласования.РольПодписанта = Перечисления.РолиПодписантовКабинетСотрудника.ВышестоящийРуководитель
		Или РезультатСогласования.РольПодписанта = Перечисления.РолиПодписантовКабинетСотрудника.НепосредственныйРуководитель
		Или РезультатСогласования.РольПодписанта = Перечисления.РолиПодписантовКабинетСотрудника.НеформальныйРуководитель
		Или РезультатСогласования.РольПодписанта = Перечисления.РолиПодписантовКабинетСотрудника.РуководителиПоВсемМестамРаботы
		Или РезультатСогласования.РольПодписанта = Перечисления.РолиПодписантовКабинетСотрудника.РуководительПоДополнительнымМестамРаботы Тогда
		
		// Обработка записи ЭП
		Если ИспользуетсяКадровыйЭДО И ЗначениеЗаполнено(РезультатСогласования.ЭлектроннаяПодпись) Тогда
			СохранитьЭлектроннуюПодписьРезультатаСогласования(СтрокаТЗДокументКЭДО.ЭлектронныйДокумент, РезультатСогласования)
		КонецЕсли;
		
	ИначеЕсли РезультатСогласования.РольПодписанта = Перечисления.РолиПодписантовКабинетСотрудника.Сотрудник Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
		ЭлементБлокировки.УстановитьЗначение("Объект", СтрокаТЗДокументКЭДО.Ссылка);
		ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", РезультатСогласования.Подписант);
		
		СтрокаТЗРасчетныйЛисток = ДокументыКЭДОРасчетныеЛистки.Найти(СтрокаТЗДокументКЭДО.Ссылка, "ДокументКадровогоЭДО");
		Если ЗначениеЗаполнено(СтрокаТЗРасчетныйЛисток) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("Организация", 	СтрокаТЗРасчетныйЛисток.Организация);
			ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо",	СтрокаТЗРасчетныйЛисток.ФизическоеЛицо);
			ЭлементБлокировки.УстановитьЗначение("Месяц", 			СтрокаТЗРасчетныйЛисток.Месяц);
			ЭлементБлокировки.УстановитьЗначение("ПерваяПоловинаМесяца", СтрокаТЗРасчетныйЛисток.ПерваяПоловинаМесяца);
		КонецЕсли;
		
		СтрокаТЗСогласие = ДокументыКЭДОСогласия.Найти(СтрокаТЗДокументКЭДО.Ссылка, "ДокументКадровогоЭДО");
		Если ЗначениеЗаполнено(СтрокаТЗСогласие) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеСогласияНаПрисоединениеККЭДО");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТЗСогласие.Ссылка);
		КонецЕсли;
	
		ВыполняетсяБлокировка = Истина;
		Блокировка.Заблокировать();
		ВыполняетсяБлокировка = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаТЗРасчетныйЛисток) Тогда
			Запись = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТЗРасчетныйЛисток, "Организация,ФизическоеЛицо,Месяц,ПерваяПоловинаМесяца");
			Запись.Прочитать();
			Запись.СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился;
			Запись.Записать();
		КонецЕсли;
		
		// Обработка записи ЭП
		Отпечаток = "";
		Если ИспользуетсяКадровыйЭДО И ЗначениеЗаполнено(РезультатСогласования.ЭлектроннаяПодпись) Тогда
			СохранитьЭлектроннуюПодписьРезультатаСогласования(СтрокаТЗДокументКЭДО.ЭлектронныйДокумент, РезультатСогласования, Отпечаток);
			ОбновитьПредставление = Неопределено;
			Если РезультатСогласования.Свойство("ОбновитьПредставление", ОбновитьПредставление) И ОбновитьПредставление Тогда
				ИдентификаторыДокументовПовторнойПубликации.Добавить(СтрокаТЗДокументКЭДО.ИдентификаторДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Запись = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
		Запись.Объект = СтрокаТЗДокументКЭДО.Ссылка;
		Запись.ФизическоеЛицо = РезультатСогласования.Подписант;
		Запись.Отпечаток = Отпечаток;
		Запись.ДатаПодписи = РезультатСогласования.ДатаПодписи;
		Запись.РезультатСогласования = РезультатСогласования.РезультатСогласования;
		Запись.Записать();
		
		Если ЗначениеЗаполнено(СтрокаТЗСогласие) Тогда
			Состояние = ?(РезультатСогласования.РезультатСогласования = Перечисления.РезультатыСогласованияБЗК.Согласовано,
						Перечисления.СостоянияСогласийНаПрисоединениеККЭДО.Согласие,
						Перечисления.СостоянияСогласийНаПрисоединениеККЭДО.Отказ);
			Подтвержден = ЗначениеЗаполнено(Отпечаток);
			РегистрыСведений.СостояниеСогласияНаПрисоединениеККЭДО.УстановитьСостояние(СтрокаТЗСогласие.Ссылка, Состояние, Подтвержден);
		КонецЕсли;
		
	КонецЕсли;
	
	БизнесПроцессыЗаявокСотрудников.ЗарегистрироватьРезультатСогласованияЗаявки(СтрокаТЗДокументКЭДО.Документ, РезультатСогласования);

КонецПроцедуры

Процедура ЗаполнитьТаблицуДанныхПоЗаявкам(ТаблицаДанных, ТаблицаЗаявок, ТипЗаявки)

	ЗаполнятьПричинуОтсутствия = (ТаблицаЗаявок.Колонки.Найти("ПричинаОтсутствия") <> Неопределено);
	
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Объект 				= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		НоваяСтрока.ТипЗаявки 			= ТипЗаявки;
		Если ЗаполнятьПричинуОтсутствия Тогда
			НоваяСтрока.ПричинаОтсутствия = СтрокаТЗ.ПричинаОтсутствия;
		КонецЕсли;
		НоваяСтрока.ВерсияИзменений 	= СтрокаТЗ.Версия;
		НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
		НоваяСтрока.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗапроса;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТаблицуДанныхПоРезультатамСогласования(ТаблицаДанных, ТаблицаОбъектов)
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Объект 			= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		НоваяСтрока.ВерсияИзменений = СтрокаТЗ.Версия;
		Если ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЭлектронногоДокумента) Тогда
			НоваяСтрока.ИдентификаторДокумента = СтрокаТЗ.ИдентификаторЭлектронногоДокумента;
		Иначе
			НоваяСтрока.ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ФайлыЗаявки(ПараметрыОбмена, ТаблицаВложений) Экспорт
	
	ФайлыЗаявки = Новый Массив;
	
	ПараметрыЗапроса = ПараметрыЗапроса("", "GET");
	ПараметрыЗапроса.ЗапросФайла = Истина;
	
	ШаблонРесурса = РесурсФайлыПолучение();
	Для Каждого СтрокаТаблицы Из ТаблицаВложений Цикл
		
		РесурсСервиса = СтрЗаменить(ШаблонРесурса,"{ID}",СтрокаТаблицы.ИдентификаторФайла);
		ПараметрыЗапроса.РесурсСервиса = РесурсСервиса;
		Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса);
		Если Ответ = Неопределено Или Не Ответ.КодСостояния = 200 Тогда
			// вызывающий метод обрабатывает исключение
			ВызватьИсключение НСтр("ru = 'Произошла ошибка при загрузке файлов из сервиса. Подробности в журнале регистрации.'");
		КонецЕсли;
		
		ОписаниеФайла = Новый Структура("ИмяФайла,РасширениеФайла,ДвоичныеДанные,ХешСумма");
		ОписаниеФайла.ИмяФайла = СтрЗаменить(СтрокаТаблицы.НаименованиеФайла, "." + СтрокаТаблицы.РасширениеФайла, "");
		ОписаниеФайла.РасширениеФайла = СтрЗаменить(СтрокаТаблицы.РасширениеФайла, ".", "");
		ОписаниеФайла.ХешСумма = СтрокаТаблицы.ХешСумма;
		ОписаниеФайла.ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		
		ФайлыЗаявки.Добавить(ОписаниеФайла);
		
	КонецЦикла;
	
	Возврат ФайлыЗаявки;
	
КонецФункции

Функция ФайлЗаявки(ПараметрыОбмена, ЭлектронныйДокумент) Экспорт
	
	ИсходныйДокумент = ЭлектронныйДокумент.ИсходныйДокумент;
	
	НаименованиеФайла 	= ЗаменитьЗапрещенныеСимволыВИмениФайла(ИсходныйДокумент.НаименованиеФайла);
	РасширениеФайла 	= ИсходныйДокумент.РасширениеФайла;
	ИдентификаторФайла 	= ИсходныйДокумент.ИдентификаторФайла;
	ХешСумма 			= ИсходныйДокумент.ХешСумма;
	
	ШаблонРесурса = РесурсФайлыПолучение();
	РесурсСервиса = СтрЗаменить(ШаблонРесурса,"{ID}",ИдентификаторФайла);
	ПараметрыЗапроса = ПараметрыЗапроса(РесурсСервиса, "GET");
	ПараметрыЗапроса.ЗапросФайла = Истина;
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса);
	Если Ответ = Неопределено Или Не Ответ.КодСостояния = 200 Тогда
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение НСтр("ru = 'Произошла ошибка при загрузке файлов из сервиса. Подробности в журнале регистрации.'");
	КонецЕсли;
	
	ОписаниеФайла = Новый Структура("ИмяФайла,РасширениеФайла,ДвоичныеДанные,ХешСумма");
	ОписаниеФайла.ИмяФайла 			= НаименованиеФайла;
	ОписаниеФайла.РасширениеФайла 	= РасширениеФайла;
	ОписаниеФайла.ХешСумма 			= ХешСумма;
	ОписаниеФайла.ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
	
	Возврат ОписаниеФайла;
	
КонецФункции

Функция ЗаменитьЗапрещенныеСимволыВИмениФайла(ИсходнаяСтрока, ЗаменятьНа = "_")
	
	ЗапрещенныеСимволы = СтрРазделить("@,\,/,:,*,?,"",<,>,|,+", ",");
	
	СтрокаПослеЗамены = СокрЛП(ИсходнаяСтрока);
	
	Для Каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл
		СтрокаПослеЗамены = СтрЗаменить(СтрокаПослеЗамены, ЗапрещенныйСимвол, ЗаменятьНа);
	КонецЦикла;
	
	Если СтрЗаканчиваетсяНа(СтрокаПослеЗамены, ".") Тогда
		СтрокаПослеЗамены = Лев(СтрокаПослеЗамены, СтрДлина(СтрокаПослеЗамены) - 1) + ЗаменятьНа;
	КонецЕсли;
	
	Возврат СтрокаПослеЗамены;
	
КонецФункции

Функция НовыйРезультатЗагрузкиИзменений()

	Возврат Новый Структура("БылиОшибки,КоличествоОбъектов", Ложь, 0);

КонецФункции

Функция ОпределитьВидВычетаНаРебенка(ВычетНаРебенка)
	
	ТекстВычета = НСтр("ru = 'Вычет на'");
	
	СтаршинствоРебенка = "первого";
	Если ВычетНаРебенка.СтаршинствоРебенка = 1 Тогда
		СтаршинствоРебенка = НСтр("ru = 'первого'");
	ИначеЕсли ВычетНаРебенка.СтаршинствоРебенка = 2 Тогда
		СтаршинствоРебенка =  НСтр("ru = 'второго'");
	ИначеЕсли ВычетНаРебенка.СтаршинствоРебенка = 3 Тогда
		СтаршинствоРебенка =  НСтр("ru = 'третьего или последующего'");
	КонецЕсли;
			
	Возврат (ТекстВычета + " " + СтаршинствоРебенка + " " + НСтр("ru = 'ребенка'") 
						 + ?(ВычетНаРебенка.РебенокИнвалид, НСтр("ru = '-инвалида'"), "")
						 + " " + ?(ВычетНаРебенка.ЗаявительОпекун, НСтр("ru = 'опекуну'"), НСтр("ru = 'родителю'")) 
						 + ?(ВычетНаРебенка.РодительОдиночка, " " + НСтр("ru = 'в двойном размере'"), ""));
КонецФункции

Функция ВосстановлениеJSON(Знач Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	Исключение
		Результат = Дата(1,1,1);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ИменаСвойствСервисаСоЗначениямиДата()
	
	Результат = Новый Массив;
	Результат.Добавить("dateCreated");
	Результат.Добавить("issueDate");
	Результат.Добавить("startDate");
	Результат.Добавить("endDate");
	Результат.Добавить("applyMonth");
	Результат.Добавить("incomePeriodStartDate");
	Результат.Добавить("incomePeriodEndDate");
	Результат.Добавить("time");
	Возврат Результат;
	
КонецФункции

Функция ВидыДокументовСервиса(ВидДокумента)
	
	ВидыДокументовФизическихЛиц = Справочники.ВидыДокументовФизическихЛиц;

	Результат = Новый Структура;
	
	Если ВидДокумента = "passport" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.ПаспортРФ);
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Паспорт гражданина РФ'"));
	ИначеЕсли ВидДокумента = "foreignPassport" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(10));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Иностранный паспорт'"));
	ИначеЕсли ВидДокумента = "residenceCard" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(12));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Вид на жительство'"));
	ИначеЕсли ВидДокумента = "identityCard" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(14));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Временное удостоверение личности гражданина РФ'"));
	ИначеЕсли ВидДокумента = "militaryIdentityCard" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.УдостоверениеОфицера);
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Удостоверение личности офицера'"));
	ИначеЕсли ВидДокумента = "residencePermission" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(15));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Разрешение на временное проживание в Российской Федерации'"));
	Иначе
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(91));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Иной документ'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДокументыКЭДОРасчетныеЛисткиДляСогласования(ТаблицаДокументыКЭДО)

	ДокументыКЭДО = ТаблицаДокументыКЭДО.ВыгрузитьКолонку("Ссылка");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКЭДО", ДокументыКЭДО);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетныеЛисткиКабинетСотрудника.Организация КАК Организация,
	|	РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеЛисткиКабинетСотрудника.Месяц КАК Месяц,
	|	РасчетныеЛисткиКабинетСотрудника.ПерваяПоловинаМесяца КАК ПерваяПоловинаМесяца,
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛисткиКабинетСотрудника
	|ГДЕ
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО В(&ДокументыКЭДО)";
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ЭлектронныйДокументСоответствуетОтвету(ДанныеДокументаКЭДО, РезультатСогласования)
	
	ЭлектронныйДокумент = ДанныеДокументаКЭДО.ЭлектронныйДокумент;
	ДокументКЭДО = ДанныеДокументаКЭДО.Ссылка;
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Нет электронного документа.'");
		ЗаписатьПредупреждениеПроверкиВерсийФайлов(ДокументКЭДО, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатСогласования.ВерсияДокумента) Тогда
		Возврат Истина;
	КонецЕсли;
		
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ЭлектронныйДокумент, Ложь);
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка получения данных электронного документа.'");
		ЗаписатьПредупреждениеПроверкиВерсийФайлов(ДокументКЭДО, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанныеФайла);
	ВерсииСовпадают = (ВерсияФайла = ВРег(РезультатСогласования.ВерсияДокумента));
	Если Не ВерсииСовпадают Тогда
		ТекстСообщения = НСтр("ru = 'Версии файлов различаются.'");
		ЗаписатьПредупреждениеПроверкиВерсийФайлов(ДокументКЭДО, ТекстСообщения);
	КонецЕсли;
	
	Возврат ВерсииСовпадают;

КонецФункции

Функция НеобработанныеРезультаты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НеобработанныеРезультаты.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	НеобработанныеРезультаты.РезультатСогласования КАК РезультатСогласования
	|ИЗ
	|	РегистрСведений.НеобработанныеРезультатыСогласованияКабинетСотрудника КАК НеобработанныеРезультаты";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ДокументыКЭДОПоИдентификатору(Идентификаторы)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", Идентификаторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ДокументКадровогоЭДО.ОснованиеДокумента КАК Документ
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)
	|	И НЕ ДокументКадровогоЭДО.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ЗагрузитьПравилаСогласования(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки, ВерсияИзменений)

	ТаблицаПравилСогласования = Новый ТаблицаЗначений;
	ТаблицаПравилСогласования.Колонки.Добавить("Объект");
	ТаблицаПравилСогласования.Колонки.Добавить("ВерсияИзменений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаПравилСогласования.Колонки.Добавить("ИдентификаторПравила", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаПравилСогласования.Колонки.Добавить("ИдентификаторПодразделения", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	
	МассивОбъектов = ПолученныеИзменения["agreementRules"];
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ТаблицаОбъектов = ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаПравилоСогласования(ПараметрыОбмена.ВерсияФормата));
		ЗаполнитьТаблицуДанныхПоПравиламСогласования(ТаблицаПравилСогласования, ТаблицаОбъектов);
	КонецЕсли;
	
	Если ТаблицаПравилСогласования.Количество() = 0 Тогда
		Возврат ВерсияИзменений;
	КонецЕсли;
	
	Идентификаторы = ТаблицаПравилСогласования.ВыгрузитьКолонку("ИдентификаторПравила");
	ИдентификаторПравилоСогласаования = ПравилаСогласованияПоИдентификаторам(Идентификаторы); 
	
	Идентификаторы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПравилСогласования, "ИдентификаторПодразделения", Истина);
	ИдентификаторПодразделение = ПодразделенияПоИдентификаторам(Идентификаторы);
	
	Для Каждого СтрокаТЗ Из ТаблицаПравилСогласования Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		ОписаниеПравила = СтрокаТЗ.Объект;
		ПравилоСогласования = ИдентификаторПравилоСогласаования[СтрокаТЗ.ИдентификаторПравила];
		Если ПравилоСогласования = Неопределено И ОписаниеПравила.ПометкаУдаления = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ВыполняетсяБлокировка = Ложь;
			
			Если ПравилоСогласования = Неопределено Тогда
				ПравилоОбъект = Справочники.ПравилаСогласованияЗаявокКабинетСотрудника.СоздатьЭлемент();
			Иначе
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ПравилаСогласованияЗаявокКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ПравилоСогласования);
				
				ВыполняетсяБлокировка = Истина;
				Блокировка.Заблокировать();
				ВыполняетсяБлокировка = Ложь;
				
				ПравилоОбъект = ПравилоСогласования.ПолучитьОбъект();
				
			КонецЕсли;
			
			Если ОписаниеПравила.ПометкаУдаления = Истина Тогда
				ПравилоОбъект.ПометкаУдаления = Истина;
			Иначе
				ПравилоОбъект.ТипЗаявки = ОписаниеПравила.ТипЗаявки;
				Если Не ПустаяСтрока(ОписаниеПравила.ИдентификаторПодразделения) Тогда
					ПравилоОбъект.Подразделение = ИдентификаторПодразделение[ОписаниеПравила.ИдентификаторПодразделения];
				КонецЕсли;
				ПравилоОбъект.ФизическоеЛицо = ОписаниеПравила.ФизическоеЛицо;
				ПравилоОбъект.ИдентификаторПравила = ОписаниеПравила.ИдентификаторПравила;
				ПравилоОбъект.ШагиПравилаСогласования.Очистить();
				Для Каждого ШагПравила Из ОписаниеПравила.ШагиПравилаСогласования Цикл
					НоваяСтрока = ПравилоОбъект.ШагиПравилаСогласования.Добавить();
					НоваяСтрока.ШагСогласования 	= ШагПравила.НомерШага;
					НоваяСтрока.ТипШага 			= ШагПравила.ТипШага;
					НоваяСтрока.РольПодписанта 	= ШагПравила.РольПодписанта;
					НоваяСтрока.Подписант 		= ШагПравила.ФизическоеЛицо;
					НоваяСтрока.ТребуемаяПодпись 	= ШагПравила.ТребуемаяПодпись;
				КонецЦикла;
			КонецЕсли;
			ПравилоОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			// не удалось обработать правило согласования
			ОтменитьТранзакцию();
			Если Не ВыполняетсяБлокировка Тогда
				РезультатОбработки.БылиОшибки = Истина;
				ТипИзменений = НСтр("ru = 'Правило согласования'");
				ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки());
			КонецЕсли;
			ЗарегистрироватьНезагруженныйИдентификатор(ПравилоСогласования.ИдентификаторПравила, Перечисления.ТипыОбъектовКабинетСотрудника.ПравилоСогласования);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ВерсияИзменений;
	
КонецФункции

Процедура ЗаполнитьТаблицуДанныхПоПравиламСогласования(ТаблицаДанных, ТаблицаОбъектов)
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Объект = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		НоваяСтрока.ВерсияИзменений = СтрокаТЗ.Версия;
		НоваяСтрока.ИдентификаторПравила 		= СтрокаТЗ.ИдентификаторПравила;
		НоваяСтрока.ИдентификаторПодразделения 	= СтрокаТЗ.ИдентификаторПодразделения;
	КонецЦикла;
	
КонецПроцедуры

Функция ПравилаСогласованияПоИдентификаторам(Идентификаторы)

	ЗагруженныеПравила = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат ЗагруженныеПравила;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаСогласования.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ПравилаСогласования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаСогласованияЗаявокКабинетСотрудника КАК ПравилаСогласования
	|ГДЕ
	|	ПравилаСогласования.ИдентификаторПравила В(&Идентификаторы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗагруженныеПравила.Вставить(Выборка.ИдентификаторПравила, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ЗагруженныеПравила;

КонецФункции

Функция ПодразделенияПоИдентификаторам(Идентификаторы)

	ИдентификаторПодразделение = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат ИдентификаторПодразделение;
	КонецЕсли;
	
	ПубликоватьСтруктуруЮридическихЛиц = КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц();
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		СправочникМенеджер = Справочники.ПодразделенияОрганизаций;
		ИмяТаблицы = Метаданные.Справочники.ПодразделенияОрганизаций.ПолноеИмя();
	Иначе
		СправочникМенеджер = Справочники.СтруктураПредприятия;
		ИмяТаблицы = Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя();
	КонецЕсли;
	
	Подразделения = Новый Массив;
	Для каждого Идентификатор Из Идентификаторы Цикл
		Если ПустаяСтрока(Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		Подразделения.Добавить(СправочникМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	#Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В(&Подразделения)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);
	Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для каждого Подразделение Из Подразделения Цикл
		ИдентификаторПодразделение.Вставить(Строка(Подразделение.УникальныйИдентификатор()), Подразделение);
	КонецЦикла;
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОрганизаций.Организация КАК Организация,
		|	ИдентификаторыОрганизаций.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ИдентификаторыОрганизацийКабинетСотрудника КАК ИдентификаторыОрганизаций
		|ГДЕ
		|	ИдентификаторыОрганизаций.Идентификатор В(&Идентификаторы)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторПодразделение.Вставить(Выборка.Идентификатор, Выборка.Организация);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИдентификаторПодразделение;

КонецФункции

#КонецОбласти

#Область ПубликацияИзмененийОбъектов

#Область ФункцииПреобразованияПеречисленийВЗначенияСервиса

Функция ПолФизическогоЛица(Пол)
	
	Результат = Неопределено;
	
	Если Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской") Тогда
		Результат = "male";
	ИначеЕсли Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский") Тогда
		Результат = "female";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидЗанятостиСотрудника(ВидЗанятости)
	
	Результат = Неопределено;
	
	Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		Результат = "mainWork";
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда
		Результат = "extraWorkExternal";
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
		Результат = "extraWorkInternal";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидДокументаФизическогоЛица(ВидДокумента)
	
	Результат = "other";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		КодМВД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "КодМВД");
		Если КодМВД = "21" Тогда
			Результат = "passport";
		ИначеЕсли КодМВД = "10" Тогда
			Результат = "foreignPassport";
		ИначеЕсли КодМВД = "12" Тогда
			Результат = "residenceCard";
		ИначеЕсли КодМВД = "14" Тогда
			Результат = "identityCard";
		ИначеЕсли КодМВД = "04" Тогда
			Результат = "militaryIdentityCard";
		ИначеЕсли КодМВД = "15" Тогда
			Результат = "residencePermission";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СпособРасчетаУдержания(СпособРасчета)

	Результат = Неопределено;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.Процентом Тогда
		Результат = "percentage";
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.ФиксированнойСуммой Тогда
		Результат = "fixedAmount";
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаУдержанийКабинетСотрудника.ПроцентомНеБолееСуммы Тогда
		Результат = "percentageUpToAmount";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УровньДоступаКИнформацииОСотрудниках(УровньДоступа)

	Результат = "grantEveryone";
	Если УровньДоступа = Перечисления.УровниДоступаКИнформацииОСотрудниках.НетОграничений Тогда
		Результат = "grantEveryone";
	ИначеЕсли УровньДоступа = Перечисления.УровниДоступаКИнформацииОСотрудниках.Руководители Тогда
		Результат = "grantDivisionHeads";
	ИначеЕсли УровньДоступа = Перечисления.УровниДоступаКИнформацииОСотрудниках.СотрудникиПодразделения Тогда
		Результат = "grantPeers";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПубликацияОбъектовПоТипам

Функция РезультатВыгрузкиФизическихЛиц(ПараметрыОбмена, Список)
	
	ВерсияФормата = ПараметрыОбмена.ВерсияФормата;
	Результат = НовыйРезультатВыгрузки();
	ДанныеФизическихЛиц = ДанныеФизическихЛиц(ПараметрыОбмена, Список);
	
	ТаблицаДанных = ДанныеФизическихЛиц.ТаблицаДанных;
	
	БылиОшибки = Ложь;
	Если ЗначениеЗаполнено(ДанныеФизическихЛиц.Фотографии) Тогда
		БылиОшибки = ВыгрузитьФотографииВСервис(ПараметрыОбмена, ТаблицаДанных, ДанныеФизическихЛиц.Фотографии);
	КонецЕсли;
	
	СоответствиеПолей = ОписаниеПолейФизическихЛиц(ВерсияФормата);
	Данные = ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
	РесурсСервиса = РесурсФизическиеЛица();
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID");
	Результат.БылиОшибки = Результат.БылиОшибки Или БылиОшибки;
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиОрганизаций(ПараметрыОбмена, Список)
	
	РесурсСервиса = РесурсОрганизации();
	Данные = ДанныеОрганизаций(ПараметрыОбмена, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID");
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСтруктурыПредприятия(ПараметрыОбмена, Список)
	
	РесурсСервиса = РесурсСтруктураПредприятия();
	Данные = ДанныеСтруктурыПредприятия(ПараметрыОбмена, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID",,10);
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСтруктурыЮридическихЛиц(ПараметрыОбмена, Организации, ПодразделенияОрганизаций)
	
	РесурсСервиса = РесурсСтруктураПредприятия();
	Данные = ДанныеСтруктурыЮридическихЛиц(ПараметрыОбмена,  Организации, ПодразделенияОрганизаций);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID",,10);
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиДолжностей(ПараметрыОбмена, Список)
	
	РесурсСервиса = РесурсДолжности();
	Данные = ДанныеДолжностей(ПараметрыОбмена, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID");
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиШтатногоРасписания(ПараметрыОбмена, Список)

	Результат = НовыйРезультатВыгрузки();
	Данные = ДанныеШтатногоРасписания(ПараметрыОбмена, Список);
	
	Если ЗначениеЗаполнено(Данные) Тогда
		РесурсСервиса = РесурсШтатноеРасписание();
		Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID");
		Для Каждого Ошибка Из Результат.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСотрудников(ПараметрыОбмена, ТаблицаДляВыгрузки)
	
	Результат = НовыйРезультатВыгрузки();
	ОтменитьПубликацию = Новый Массив;
	
	// проверим, что сотрудник опубликован в сервисе
	Отбор = Новый Структура("УсловноПубликуется", Истина);
	УсловноПубликуемыеСотрудники = ТаблицаДляВыгрузки.НайтиСтроки(Отбор);
	Если Не КабинетСотрудника.ИспользоватьФормат30396() Тогда
		УдаляемыеСтроки = Новый Массив;
		Для каждого СтрокаТЗ Из УсловноПубликуемыеСотрудники Цикл
			УдаляемыеСтроки.Добавить(СтрокаТЗ);
		КонецЦикла;
		Для каждого СтрокаТЗ Из УдаляемыеСтроки Цикл
			ТаблицаДляВыгрузки.Удалить(СтрокаТЗ);
		КонецЦикла;
	Иначе
		РесурсФизическиеЛица = РесурсФизическиеЛица();
		ПроверенныеФизическиеЛица = Новый Соответствие;
		УдаляемыеСтроки = Новый Массив;
		Для каждого СтрокаТЗ Из УсловноПубликуемыеСотрудники Цикл
			
			Публикуется = ПроверенныеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо];
			Если Публикуется = Неопределено Тогда
				
				РесурсСервиса = СтрШаблон("%1/%2", РесурсФизическиеЛица, Строка(СтрокаТЗ.ФизическоеЛицо.УникальныйИдентификатор()));
				ПараметрыЗапроса = ПараметрыЗапроса(РесурсСервиса, "GET");
				ПараметрыЗапроса.РазрешенныйКодОтвета = 404;
				Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса);
				Если Ответ = Неопределено Тогда
					Публикуется = -1; // не удалось проверить
				ИначеЕсли Ответ.КодСостояния = 200 Тогда
					Публикуется = 1 // публикуется
				ИначеЕсли Ответ.КодСостояния = 404 Тогда
					Публикуется = 0; // не публикуется
				Иначе
					Публикуется = -1; // не удалось проверить
				КонецЕсли;
			КонецЕсли;
			
			Если Публикуется <> 1 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЗ);
				Если Публикуется = 0 Тогда
					ОтменитьПубликацию.Добавить(СтрокаТЗ.ПредметПубликации);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		Для каждого СтрокаТЗ Из УдаляемыеСтроки Цикл
			ТаблицаДляВыгрузки.Удалить(СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	Данные = ДанныеСотрудников(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
	
	Если ЗначениеЗаполнено(Данные) Тогда
		РесурсСервиса = РесурсСотрудники();
		Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID");
		Для каждого Сотрудник Из ОтменитьПубликацию Цикл
			Результат.Выгружено.Добавить(Сотрудник);
		КонецЦикла;
		Для Каждого Ошибка Из Результат.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиПрименяемыхВычетов(ПараметрыОбмена, Список)
	
	РесурсСервиса = РесурсПрименяемыеВычеты();
	СведенияОВычетах = ДанныеОВычетах(ПараметрыОбмена, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, СведенияОВычетах.Данные, "personID");
	Результат.Вставить("ФизическиеЛицаБезВычетов", СведенияОВычетах.ФизическиеЛицаБезВычетов);
	
	Для Каждого Ошибка Из Результат.НеВыгружено Цикл
		ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСогласийКЭДО(ПараметрыОбмена, ТаблицаИзменений)

	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
			РезультатОбработки.ОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
		КонецЦикла;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ВерсияФормата = ПараметрыОбмена.ВерсияФормата;
	ДокументыНаПодпись = ДанныеДляВыгрузкиДокументовНаПодпись(ТаблицаИзменений);
	
	ДокументыОтбор = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "Документ", Истина);
	ТаблицаСогласий = ДанныеСогласийНаПрисоединениеККЭДО(ДокументыОтбор);
	
	// Массив ссылок на документы КЭДО, по которым
	// не удалось сформировать объект для выгрузки.
	НеОбработанныеДокументы = Новый Массив;
	
	// Массив объектов документов для публикации.
	ДокументыНаПодписьКПубликации = Новый Массив;
	
	// Коллекция документов с результатами согласования.
	// Ключ - ссылка на Документ,
	// Значение - массив объектов РезультатСогласования.
	ДокументРезультатыСогласования = Новый Соответствие;
	
	// Коллекция документов с результатами согласования.
	// Ключ - ссылка на Документ,
	// Значение - объект Согласие.
	ДокументСогласие = Новый Соответствие;
	
	// Коллекция документов КЭДО.
	// Ключ - идентификатор документа,
	// Значение - ссылка на ДокументКЭДО.
	ИдентификаторыДокументов = Новый Соответствие;
	
	ОписаниеОбъектаДокументНаПодпись = ОписаниеОбъектаДокументНаПодпись(ВерсияФормата);
	ОписаниеОбъектаСогласиеНаПрисоединениеККЭДО = ОписаниеОбъектаСогласиеНаПрисоединениеККЭДО(ВерсияФормата);
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
	
		ДокументНаПодпись = ДокументыНаПодпись.Найти(СтрокаТЗ.ПубликуемыйДокумент, "ПубликуемыйДокумент");
		
		Ответ = ЭлектронныйДокументРезультатыСогласования(ПараметрыОбмена, ДокументНаПодпись.ДанныеЭлектронногоДокумента, ДокументНаПодпись.ИдентификаторДокумента);
		
		ОбъектЭлектронныйДокумент 	= Ответ.ЭлектронныйДокумент;
		РезультатыСогласования 		= Ответ.РезультатыСогласования;
		Если ОбъектЭлектронныйДокумент = Неопределено Тогда
			РезультатОбработки.БылиОшибки = Истина;
			НеОбработанныеДокументы.Добавить(ДокументНаПодпись.ПубликуемыйДокумент);
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
			ДокументРезультатыСогласования.Вставить(ДокументНаПодпись.ПубликуемыйДокумент, РезультатыСогласования);
		КонецЕсли;
		
		ОписаниеДокументНаПодпись =  ОписаниеОбъекта(ОписаниеОбъектаДокументНаПодпись);
		ОписаниеДокументНаПодпись.ИдентификаторДокумента 	= ДокументНаПодпись.ИдентификаторДокумента;
		ОписаниеДокументНаПодпись.Организация 				= ДокументНаПодпись.Организация;
		ОписаниеДокументНаПодпись.ФизическиеЛица 			= ДокументНаПодпись.ФизическиеЛица;
		ОписаниеДокументНаПодпись.Дата 						= ДокументНаПодпись.ДатаДокумента;
		ОписаниеДокументНаПодпись.НазваниеДокумента 		= ДокументНаПодпись.НазваниеДокумента;
		ОписаниеДокументНаПодпись.ЭлектронныйДокумент 		= ОбъектЭлектронныйДокумент;
		ОбъектДокументНаПодпись = ОбъектСервисаПоОписанию(ОписаниеДокументНаПодпись, ОписаниеОбъектаДокументНаПодпись);
		
		ДокументыНаПодписьКПубликации.Добавить(ОбъектДокументНаПодпись);
		ИдентификаторыДокументов.Вставить(ДокументНаПодпись.ИдентификаторДокумента, ДокументНаПодпись.ПубликуемыйДокумент);
		
		Согласие = ТаблицаСогласий.Найти(СтрокаТЗ.Документ, "Согласие");
		
		ОписаниеСогласия =  ОписаниеОбъекта(ОписаниеОбъектаСогласиеНаПрисоединениеККЭДО);
		ОписаниеСогласия.Согласие 							= Согласие.Согласие;
		ОписаниеСогласия.Организация 						= Согласие.Организация;
		ОписаниеСогласия.ФизическоеЛицо 					= Согласие.ФизическоеЛицо;
		ОписаниеСогласия.ИдентификаторДокументаНаПодпись 	= ДокументНаПодпись.ИдентификаторДокумента;
		ОписаниеСогласия.ДатаСоздания 						= Согласие.ДатаСоздания;
		ОбъектСогласие = ОбъектСервисаПоОписанию(ОписаниеСогласия, ОписаниеОбъектаСогласиеНаПрисоединениеККЭДО);
		
		ДокументСогласие.Вставить(ДокументНаПодпись.ПубликуемыйДокумент, ОбъектСогласие);
	
	КонецЦикла;
	
	РесурсСервиса = РесурсДокументыНаПодпись();
	РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыОбмена,
				РесурсСервиса,
				ДокументыНаПодписьКПубликации,
				"ID");
		
	РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	ВыгруженныеДокументы = Новый Соответствие;
	РезультатыСогласованияКПубликации = Новый Массив;
	Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
		ДокументНаПодпись = ИдентификаторыДокументов[ИдентификаторДокумента];
		ВыгруженныеДокументы.Вставить(ДокументНаПодпись, Истина);
		РезультатыСогласования = ДокументРезультатыСогласования[ДокументНаПодпись];
		Если РезультатыСогласования <> Неопределено Тогда
			Для каждого РезультатСогласования Из РезультатыСогласования Цикл
				РезультатыСогласованияКПубликации.Добавить(РезультатСогласования);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
		СтрокаДанных = ТаблицаИзменений.Найти(Ошибка.Ключ, "ИдентификаторДокумента");
		РезультатОбработки.НеВыгружено.Добавить(СтрокаДанных.ПубликуемыйДокумент);
		ЗарегистрироватьОшибкуПубликацииОбъекта(СтрокаДанных.ПубликуемыйДокумент, РесурсСервиса, Ошибка.Значение);
		ДокументСогласие.Удалить(СтрокаДанных.ПубликуемыйДокумент);
	КонецЦикла;
	
	Если РезультатыСогласованияКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсРезультатыСогласования();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
			ПараметрыОбмена,
			РесурсСервиса,
			РезультатыСогласованияКПубликации,
			"documentID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			СтрокаДанных = ТаблицаИзменений.Найти(Ошибка.Ключ, "ИдентификаторДокумента");
			РезультатОбработки.НеВыгружено.Добавить(СтрокаДанных.ПубликуемыйДокумент);
			ВыгруженныеДокументы.Удалить(СтрокаДанных.ДокументНаПодпись);
			ДокументСогласие.Удалить(СтрокаДанных.ДокументНаПодпись);
			ЗарегистрироватьОшибкуПубликацииОбъекта(СтрокаДанных.ПубликуемыйДокумент, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;

	СогласияКПубликации = Новый Массив;
	Для каждого ЭлементКоллекции Из ДокументСогласие Цикл
		СогласияКПубликации.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	Если СогласияКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсСогласиеНаПрисоединениеККЭДО();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
			ПараметрыОбмена,
			РесурсСервиса,
			СогласияКПубликации,
			"ID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			СтрокаДанных = ТаблицаИзменений.Найти(Ошибка.Ключ, "Документ");
			РезультатОбработки.НеВыгружено.Добавить(СтрокаДанных.ПубликуемыйДокумент);
			ВыгруженныеДокументы.Удалить(СтрокаДанных.ДокументНаПодпись);
			ЗарегистрироватьОшибкуПубликацииОбъекта(СтрокаДанных.ПубликуемыйДокумент, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ВыгруженныеДокументы Цикл
		РезультатОбработки.Выгружено.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
	
	Возврат РезультатОбработки

КонецФункции

Процедура АктивироватьФизическихЛицПоРезультатуВыгрузки(ПараметрыОбмена, РезультатВыгрузки)

	Если Не КабинетСотрудника.ИспользоватьФормат503() Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыгрузки.Выгружено.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Новый Массив;
	Для каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
		Данные.Добавить(ФизическоеЛицо);
	КонецЦикла;
	
	РесурсСервиса = РесурсФизическиеЛицаАктивные();
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные);
	
	Если Результат.БылиОшибки Тогда
		РезультатВыгрузки.БылиОшибки = Истина;
		Если ЗначениеЗаполнено(Результат.Выгружено) Тогда
			РезультатВыгрузки.Выгружено = Результат.Выгружено;
		Иначе
			РезультатВыгрузки.Выгружено.Очистить();
		КонецЕсли;
		Для Каждого Ошибка Из Результат.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
			РезультатВыгрузки.НеВыгружено.Вставить(Ошибка.Ключ, Ошибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьУровниДоступаФизическихЛиц(ПараметрыОбмена, РезультатВыгрузки)

	Если Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыгрузки.Выгружено) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиФункциональности = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	ОписаниеОбъектаОграничениеДоступаКРабочимКонтактам = ОписаниеОбъектаОграничениеДоступаКРабочимКонтактам(ПараметрыОбмена.ВерсияФормата);
	Данные = Новый Массив;
	Для каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
		ОписаниеОграничениеДоступа =  ОписаниеОбъекта(ОписаниеОбъектаОграничениеДоступаКРабочимКонтактам);
		ОписаниеОграничениеДоступа.ФизическоеЛицо = ФизическоеЛицо;
		ОписаниеОграничениеДоступа.УровеньДоступа = НастройкиФункциональности.УровеньДоступаКИ;
		ОбъектОграничениеДоступа = ОбъектСервисаПоОписанию(ОписаниеОграничениеДоступа, ОписаниеОбъектаОграничениеДоступаКРабочимКонтактам); 
		Данные.Добавить(ОбъектОграничениеДоступа);
	КонецЦикла;
	
	РесурсСервиса = РесурсОграничениеДоступаКРабочимКонтактам(ПараметрыОбмена.ВерсияAPI);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "personID");
	
	Если Результат.БылиОшибки Тогда
		РезультатВыгрузки.БылиОшибки = Истина;
		Если ЗначениеЗаполнено(Результат.Выгружено) Тогда
			РезультатВыгрузки.Выгружено = Результат.Выгружено;
		Иначе
			РезультатВыгрузки.Выгружено.Очистить();
		КонецЕсли;
		Для Каждого Ошибка Из Результат.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
			РезультатВыгрузки.НеВыгружено.Вставить(Ошибка.Ключ, Ошибка.Значение);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьДоступныеФункцииФизическихЛиц(ПараметрыОбмена, РезультатВыгрузки)

	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО") Или Не КабинетСотрудника.ИспользоватьФормат503() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыгрузки.Выгружено) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = КадровыйЭДО.ФизическиеЛицаПрисоединенныеККЭДО(РезультатВыгрузки.Выгружено);
	ИспользуетКЭДО = Новый Соответствие;
	Для каждого СтрокаТЗ Из Результат Цикл
		ИспользуетКЭДО.Вставить(СтрокаТЗ.ФизическоеЛицо, СтрокаТЗ.ИспользуетКЭДО);
	КонецЦикла;
	
	ОписаниеОбъектаДоступныеФункцииФизическихЛиц = ОписаниеОбъектаДоступныеФункцииФизическихЛиц(ПараметрыОбмена.ВерсияФормата);
	Данные = Новый Массив;
	Для каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
		ОписаниеДоступныеФункции =  ОписаниеОбъекта(ОписаниеОбъектаДоступныеФункцииФизическихЛиц);
		ОписаниеДоступныеФункции.ФизическоеЛицо = ФизическоеЛицо;
		ОписаниеДоступныеФункции.ИспользуетКЭДО = ?(ИспользуетКЭДО[ФизическоеЛицо] = Неопределено,Ложь,ИспользуетКЭДО[ФизическоеЛицо]);
		ОбъектДоступныеФункции = ОбъектСервисаПоОписанию(ОписаниеДоступныеФункции, ОписаниеОбъектаДоступныеФункцииФизическихЛиц); 
		Данные.Добавить(ОбъектДоступныеФункции);
	КонецЦикла;
	
	РесурсСервиса = РесурсДоступныеФункцииФизическихЛиц(ПараметрыОбмена.ВерсияAPI);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "personID");
	
	Если Результат.БылиОшибки Тогда
		РезультатВыгрузки.БылиОшибки = Истина;
		Если ЗначениеЗаполнено(Результат.Выгружено) Тогда
			РезультатВыгрузки.Выгружено = Результат.Выгружено;
		Иначе
			РезультатВыгрузки.Выгружено.Очистить();
		КонецЕсли;
		Для Каждого Ошибка Из Результат.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
			РезультатВыгрузки.НеВыгружено.Вставить(Ошибка.Ключ, Ошибка.Значение);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ВыгрузитьФотографииВСервис(ПараметрыОбмена, ТаблицаДанных, Фотографии)
	
	БылиОшибки = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ХранилищеВложения = Фотографии[СтрокаТаблицы.ФизическоеЛицо];
		Если Не ЗначениеЗаполнено(ХранилищеВложения) Тогда
			Продолжить;
		КонецЕсли;
		
		Фотография = ХранилищеВложения.Получить();
		Если ТипЗнч(Фотография) <> Тип("ДвоичныеДанные") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не КабинетСотрудника.РазмерФайлаСоответсвуетТребованиям(Фотография) Тогда
			ТекстСообщения = НСтр("ru = 'Размер фотографии превышает 5Мб: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТаблицы.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Расширение = КабинетСотрудника.РасширениеФотографии(Фотография);
		Если Расширение = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неизвестный формат картинки фотографии: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТаблицы.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Картинка = Новый Картинка(Фотография);
		ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, Картинка, Расширение);
		Если ИдентификаторФайла = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка публикации файла фотографии: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТаблицы.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ПостфиксИмени = НСтр("ru = 'Фотография'");
		НаименованиеФайла = СтрШаблон("%1 %2.%3",Строка(СтрокаТаблицы.ФизическоеЛицо), ПостфиксИмени, Расширение);
		
		ОписаниеФайла = Новый Структура("ИдентификаторФайла,НаименованиеФайла,РасширениеФайла,РазмерФайла");
		
		ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
		ОписаниеФайла.НаименованиеФайла 	= НаименованиеФайла;
		ОписаниеФайла.РасширениеФайла 		= Расширение;
		// преобразуем в строку, т.к. поле в таблице имеет тип Строка
		ОписаниеФайла.РазмерФайла 			= Формат(Фотография.Размер(), "ЧГ=0"); 
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОписаниеФайла);
		
	КонецЦикла;
	
	Возврат БылиОшибки;
	
КонецФункции

#КонецОбласти

Процедура ОпубликоватьИзменения(ПараметрыОбмена, БылиОшибки)
	
	ОпубликоватьИзмененияПубликуемыхОбъектов(ПараметрыОбмена, БылиОшибки);
	ОпубликоватьПрочиеИзменения(ПараметрыОбмена, БылиОшибки);
	
КонецПроцедуры

Процедура ОпубликоватьИзмененияПубликуемыхОбъектов(ПараметрыОбмена, БылиОшибки)
	
	ПубликоватьСтруктуруЮридическихЛиц = КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц();
		
	// Таблица с данными зарегистрированными к отправке.
	// Колонки таблицы: ПредметПубликации, ВерсияДанных, Публикуется, ТипДанных
	ТаблицаИзменений = ИзмененияДляПубликации();
	Если ТаблицаИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИзменений.Индексы.Добавить("ТипДанных,Публикуется");
	Отбор = Новый Структура("ТипДанных,Публикуется");
	Отбор.Публикуется = Истина;
	ТипыДанных = ТипыПубликуемыхДанных();
	
	Результат = НовыйРезультатВыгрузки();
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ОбновитьУровеньДоступаКИ = Настройки.ОбновитьУровеньДоступаКИ;
	
	Отбор.ТипДанных = ТипыДанных["ФизическиеЛица"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиФизическихЛиц(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		АктивироватьФизическихЛицПоРезультатуВыгрузки(ПараметрыОбмена, РезультатВыгрузки);
		Если Не ОбновитьУровеньДоступаКИ Тогда
			ОбновитьУровниДоступаФизическихЛиц(ПараметрыОбмена, РезультатВыгрузки);
		КонецЕсли;
		ОбновитьДоступныеФункцииФизическихЛиц(ПараметрыОбмена, РезультатВыгрузки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["Организации"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиОрганизаций(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		
		Отбор.ТипДанных = ТипыДанных["Организации"];
		Организации = ТаблицаИзменений.Скопировать(Отбор).ВыгрузитьКолонку("ПредметПубликации");
		
		Отбор.ТипДанных = ТипыДанных["ПодразделенияОрганизаций"];
		ПодразделенияОрганизаций = ТаблицаИзменений.Скопировать(Отбор).ВыгрузитьКолонку("ПредметПубликации");
		
		Если Организации.Количество()>0 Или ПодразделенияОрганизаций.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиСтруктурыЮридическихЛиц(ПараметрыОбмена, Организации, ПодразделенияОрганизаций);
			// Выгруженные организации пропускаем, они уже в списке выгруженных.
			Для каждого ВыгруженныйОбъект Из РезультатВыгрузки.Выгружено Цикл
				Если ТипЗнч(ВыгруженныйОбъект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					Результат.Выгружено.Добавить(ВыгруженныйОбъект);
				КонецЕсли;
			КонецЦикла;
			// Если организация не выгружена, проверяем ее выгрузку на этапе выгрузке организаций и исключаем
			// из выгруженных объектов, что бы повторить выгрузку в составе структуры предприятия.
			Для каждого ЭлементКоллекции Из РезультатВыгрузки.НеВыгружено Цикл
				Если ТипЗнч(ЭлементКоллекции.Ключ) = Тип("СправочникСсылка.Организации") Тогда
					Индекс = Результат.Выгружено.Найти(ЭлементКоллекции.Ключ);
					Если Индекс <> Неопределено Тогда
						Результат.Выгружено.Удалить(Индекс);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
		КонецЕсли;
		
	Иначе
		
		Отбор.ТипДанных = ТипыДанных["СтруктураПредприятия"];
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиСтруктурыПредприятия(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["Должности"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиДолжностей(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["ШтатноеРасписание"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиШтатногоРасписания(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["Сотрудники"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиСотрудников(ПараметрыОбмена, ТаблицаДляВыгрузки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Если ОбновитьУровеньДоступаКИ Тогда
		РезультатОбновления = ОбновитьУровеньДоступаКИВсех(ПараметрыОбмена);
		Результат.БылиОшибки = Результат.БылиОшибки Или РезультатОбновления;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ОпубликоватьЗарегистрированныеИзменения(ПараметрыОбмена, ТаблицаИзменений, Результат);
	
	ОтменитьРегистрациюИзмененийПоРезультатамПубликации(ТаблицаИзменений, Результат);
	ОтменитьРегистрациюУсловноПубликуемыхОбъектов(Результат.БылиОшибки);
	
	БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
	
КонецПроцедуры

Функция ОбновитьУровеньДоступаКИВсех(ПараметрыОбмена)

	Если Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Идентификаторы = ИдентификаторыОпубликованныхФизическихЛиц(ПараметрыОбмена);
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиФункциональности = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	ОписаниеОбъектаОграничениеДоступаКРабочимКонтактам = ОписаниеОбъектаОграничениеДоступаКРабочимКонтактам(ПараметрыОбмена.ВерсияФормата);
	Данные = Новый Массив;
	Для каждого Идентификатор Из Идентификаторы Цикл
		ОписаниеОграничениеДоступа =  ОписаниеОбъекта(ОписаниеОбъектаОграничениеДоступаКРабочимКонтактам);
		ОписаниеОграничениеДоступа.ФизическоеЛицо = Идентификатор;
		ОписаниеОграничениеДоступа.УровеньДоступа = НастройкиФункциональности.УровеньДоступаКИ;
		ОбъектОграничениеДоступа = ОбъектСервисаПоОписанию(ОписаниеОграничениеДоступа, ОписаниеОбъектаОграничениеДоступаКРабочимКонтактам); 
		Данные.Добавить(ОбъектОграничениеДоступа);
	КонецЦикла;
	
	РесурсСервиса = РесурсОграничениеДоступаКРабочимКонтактам(ПараметрыОбмена.ВерсияAPI);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "personID");
	
	Если Не Результат.БылиОшибки Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьОбновитьУровеньДоступаКИ(Ложь);
	КонецЕсли;
	
	Возврат Результат.БылиОшибки;

КонецФункции

Процедура ОпубликоватьПрочиеИзменения(ПараметрыОбмена, БылиОшибки)
	
	Результат = НовыйРезультатВыгрузки();
	
	ТаблицаИзменений = ИзмененияВычетыНДФЛ();
	Если ТаблицаИзменений <> Неопределено Тогда
		
		Отбор = Новый Структура("Публикуется");
		Отбор.Публикуется = Истина;
		
		ТаблицаИзменений.Индексы.Добавить("Публикуется");
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиПрименяемыхВычетов(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ФизическоеЛицо"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
			// Физические лица по которым заказали публикацию вычетов, но они не имеют вычетов.
			ФизическиеЛицаБезВычетов = РезультатВыгрузки.ФизическиеЛицаБезВычетов;
			// Включим этих физических лиц в список выгруженных.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, ФизическиеЛицаБезВычетов);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
		КонецЕсли;
		
		Если ТаблицаИзменений.Количество() > 0 Тогда
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
				Блокировка.Заблокировать();
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
				Запрос.УстановитьПараметр("Выгружено", Результат.Выгружено);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
				|	ТаблицаИзменений.Публикуется КАК Публикуется
				|ПОМЕСТИТЬ ВТОтменитьИзменения
				|ИЗ
				|	&ТаблицаИзменений КАК ТаблицаИзменений
				|ГДЕ
				|	(ТаблицаИзменений.ФизическоеЛицо В (&Выгружено)
				|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ОтменитьИзменения.ФизическоеЛицо КАК ФизическоеЛицо
				|ИЗ
				|	ВТОтменитьИзменения КАК ОтменитьИзменения
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛица
				|		ПО ОтменитьИзменения.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
				|			И (ОтменитьИзменения.ВерсияДанных = ФизическиеЛица.ВерсияДанных
				|				ИЛИ НЕ ОтменитьИзменения.Публикуется)";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ФизическоеЛицо = Выборка.ФизическоеЛицо;
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				
				Если Результат.БылиОшибки Тогда
					Для Каждого Ошибка Из Результат.НеВыгружено Цикл
						МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.ФизическоеЛицо = Ошибка.Ключ;
						МенеджерЗаписи.Прочитать();
						МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
						МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
						МенеджерЗаписи.Записать();
					КонецЦикла;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ОписаниеИзменений = НСтр("ru = 'Прочие изменения'");
				ЗаписатьОшибкуПриВыгрузкеИзменений(ОписаниеИзменений, ОписаниеОшибки());
				Результат.БылиОшибки = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
		
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ОпубликоватьПрочиеИзменения(ПараметрыОбмена, БылиОшибки);
	
КонецПроцедуры

Функция ИзмененияДляПубликации()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации КАК ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТВсеИзменения
	|ИЗ
	|	РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ВсеИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации КАК ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется,
	|	ЕСТЬNULL(ПубликуемыеОбъекты.УсловноПубликуется, ЛОЖЬ) КАК УсловноПубликуется
	|ПОМЕСТИТЬ ВТИзмененияПрочихОбъектов
	|ИЗ
	|	ВТВсеИзменения КАК ВсеИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ВсеИзменения.ПредметПубликации = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	НЕ ВсеИзменения.ПредметПубликации ССЫЛКА Справочник.ФизическиеЛица";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТВсеИзменения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.ПредметПубликации КАК ПредметПубликации,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется,
	|	ЛОЖЬ КАК УсловноПубликуется,
	|	ТИПЗНАЧЕНИЯ(Изменения.ПредметПубликации) КАК ТипДанных,
	|	NULL КАК ФизическоеЛицо
	|ИЗ
	|	ВТВсеИзменения КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО Изменения.ПредметПубликации = ПубликуемыеОбъекты.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО Изменения.ПредметПубликации = ОшибкиЗаполнения.ОбъектПубликации
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	Изменения.ПредметПубликации ССЫЛКА Справочник.ФизическиеЛица
	|	И ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных,
	|	ВсеИзменения.Публикуется,
	|	ЛОЖЬ,
	|	ТИПЗНАЧЕНИЯ(ВсеИзменения.ПредметПубликации),
	|	NULL
	|ИЗ
	|	ВТИзмененияПрочихОбъектов КАК ВсеИзменения
	|ГДЕ
	|	НЕ ВсеИзменения.ПредметПубликации ССЫЛКА Справочник.Сотрудники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных,
	|	ВсеИзменения.Публикуется,
	|	ВсеИзменения.УсловноПубликуется,
	|	ТИПЗНАЧЕНИЯ(ВсеИзменения.ПредметПубликации),
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	ВТИзмененияПрочихОбъектов КАК ВсеИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|				И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|		ПО ВсеИзменения.ПредметПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ВсеИзменения.ПредметПубликации ССЫЛКА Справочник.Сотрудники
	|	И (ВсеИзменения.УсловноПубликуется
	|			ИЛИ ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ИзмененияВычетыНДФЛ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вычеты.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК Вычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ПО Вычеты.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО Вычеты.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Процедура ОтменитьРегистрациюИзмененийПоРезультатамПубликации(ТаблицаИзменений, РезультатВыгрузки)

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("Выгружено", РезультатВыгрузки.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ПредметПубликации КАК ПредметПубликации,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
		|	ТаблицаИзменений.Публикуется КАК Публикуется
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	(ТаблицаИзменений.ПредметПубликации В (&Выгружено)
		|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ПредметПубликации КАК ПредметПубликации
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервисаКабинетСотрудника
		|		ПО ОтменитьИзменения.ПредметПубликации = ИзмененияДляСервисаКабинетСотрудника.ПредметПубликации
		|			И (ОтменитьИзменения.ВерсияДанных = ИзмененияДляСервисаКабинетСотрудника.ВерсияДанных
		|				ИЛИ НЕ ОтменитьИзменения.Публикуется)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Выборка.ПредметПубликации;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Если РезультатВыгрузки.БылиОшибки Тогда
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации = Ошибка.Ключ;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
				МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Публикуемые объекты'");
		ЗаписатьОшибкуПриВыгрузкеИзменений(ОписаниеИзменений, ОписаниеОшибки());
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Функция ТипыПубликуемыхДанных() Экспорт

	ОписаниеТиповДанных = Новый Соответствие;

	ОписаниеТиповДанных.Вставить("ФизическиеЛица", 				Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеТиповДанных.Вставить("Организации", 				Тип("СправочникСсылка.Организации"));
	ОписаниеТиповДанных.Вставить("Должности", 					Тип("СправочникСсылка.Должности"));
	ОписаниеТиповДанных.Вставить("Сотрудники", 					Тип("СправочникСсылка.Сотрудники"));
	ОписаниеТиповДанных.Вставить("ПодразделенияОрганизаций", 	Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	ОписаниеТиповДанных.Вставить("ШтатноеРасписание", 	 КабинетСотрудникаВнутренний.ТипШтатноеРасписание());
	ОписаниеТиповДанных.Вставить("СтруктураПредприятия", КабинетСотрудникаВнутренний.ТипСтруктураПредприятия());
	
	Возврат ОписаниеТиповДанных;
	
КонецФункции

Функция НовыйРезультатВыгрузки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выгружено", Новый Массив);
	Результат.Вставить("НеВыгружено", Новый Соответствие);
	Результат.Вставить("БылиОшибки", Ложь);
	Результат.Вставить("ОтменитьРегистрацию", Новый Массив);
	Возврат Результат;
	
КонецФункции

Функция СформироватьJSON(Значение) Экспорт
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( ,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON, "ПреобразованиеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудникаМенеджерОбмена"));
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;

	Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
		Результат = ПолФизическогоЛица(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыЗанятости") Тогда
		Результат = ВидЗанятостиСотрудника(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Результат = ВидДокументаФизическогоЛица(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.СпособыРасчетаУдержанийКабинетСотрудника") Тогда
		Результат = СпособРасчетаУдержания(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.УровниДоступаКИнформацииОСотрудниках") Тогда
		Результат = УровньДоступаКИнформацииОСотрудниках(Значение);
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			Или Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Если Не Значение.Пустая() Тогда
			Результат = Строка(Значение.УникальныйИдентификатор());
		КонецЕсли;
	Иначе
		Результат = КабинетСотрудникаВнутренний.ПреобразованиеJSON(Свойство, Значение, ДополнительныеПараметры, Отказ);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, Знач РесурсСервиса, Знач Данные, ПолеКлюча = "", РезультатВыгрузки = Неопределено, РазмерПакета = 100) Экспорт

	Если РезультатВыгрузки = Неопределено Тогда
		РезультатВыгрузки = НовыйРезультатВыгрузки();
	КонецЕсли;
	
	Если Не ТипЗнч(Данные) = Тип("Массив") Тогда
		ВызватьИсключение НСтр("ru = 'Произошла ошибка при выгрузки коллекции в сервис. Ожидается массив.'");
	КонецЕсли;
	
	КоличествоЭлементов = Данные.Количество();
	
	Если КоличествоЭлементов > РазмерПакета Тогда
		ДанныеПакета = Новый Массив;
		Для Сч = 1 По РазмерПакета Цикл
			ДанныеПакета.Добавить(Данные[0]);
			Данные.Удалить(0);
		КонецЦикла;
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, ПолеКлюча, РезультатВыгрузки, РазмерПакета);
	Иначе
		ДанныеПакета = Данные;
	КонецЕсли;
	
	СтрокаТела = СформироватьJSON(ДанныеПакета);
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "PUT", СтрокаТела));
	
	ЕстьПолеКлюча = Не ПустаяСтрока(ПолеКлюча);
	Если Ответ = Неопределено Тогда
		РезультатВыгрузки.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Тогда
		Для Каждого ЭлементПакета Из ДанныеПакета Цикл
			Если ЕстьПолеКлюча Тогда
				ЭлементКоллекции = ЭлементПакета[ПолеКлюча];
			Иначе
				ЭлементКоллекции = ЭлементПакета;
			КонецЕсли;
			РезультатВыгрузки.Выгружено.Добавить(ЭлементКоллекции);
		КонецЦикла;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		
		РезультатВыгрузки.БылиОшибки = Истина;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			КабинетСотрудника.ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			РезультатВыгрузки.БылиОшибки = Истина;
			Возврат РезультатВыгрузки;
		КонецПопытки;
		
		Результат = ОбъектОтвета["result"];
		Если Результат <> Неопределено Тогда
			Для Каждого ЭлементРезультат Из Результат Цикл
				ЭлементПакета = ДанныеПакета[Число(ЭлементРезультат["position"]) - 1];
				Если ЕстьПолеКлюча Тогда
					ЭлементКоллекции = ЭлементПакета[ПолеКлюча];
				Иначе
					ЭлементКоллекции = ЭлементПакета;
				КонецЕсли;
				РезультатВыгрузки.Выгружено.Добавить(ЭлементКоллекции);
			КонецЦикла;
		КонецЕсли;
		
		КоличествоЭлементов = ДанныеПакета.Количество();
		Ошибки = ОбъектОтвета["errors"];
		Если Ошибки <> Неопределено Тогда
			Для Каждого ЭлементОшибки Из Ошибки Цикл
				ПозицияВКоллекции = ЭлементОшибки["position"];
				Если ПозицияВКоллекции <> Неопределено Тогда
					НомерПозиции = Число(ПозицияВКоллекции);
					Если НомерПозиции <= КоличествоЭлементов Тогда
						ЭлементПакета = ДанныеПакета[НомерПозиции - 1];
						Если ЕстьПолеКлюча Тогда
							ЭлементКоллекции = ЭлементПакета[ПолеКлюча];
						Иначе
							ЭлементКоллекции = ЭлементПакета;
						КонецЕсли;
						РезультатВыгрузки.НеВыгружено.Вставить(ЭлементКоллекции, ОписаниеОшибкиВыгрузки(ЭлементОшибки));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ОписаниеОшибкиВыгрузки(ОбъектОшибка)
	
	Попытка
		Результат = НСтр("ru = 'Тип ошибки: %1
						|Код ошибки: %2
						|Описание: %3
						|Подробно:'");
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат, ОбъектОшибка["error"]["type"], ОбъектОшибка["error"]["code"], ОбъектОшибка["error"]["description"]);
	
		Для Каждого КлючЗначение Из ОбъектОшибка["error"]["value"] Цикл
			Результат = Результат + Символы.ПС + КлючЗначение.Ключ + ": " + КлючЗначение.Значение;
		КонецЦикла;
	Исключение
		Результат = НСтр("ru = 'Неизвестное описание ошибки.'");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтменитьРегистрациюУсловноПубликуемыхОбъектов(БылиОшибки)

	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	ОкончаниеПубликации = НачалоДня(ТекущаяДатаСеанса()) - Настройки.ДнейСохраненияПубликации * 86400;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОкончаниеПубликации", ОкончаниеПубликации);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|			ПО Сотрудники.Ссылка = ИзмененияДляСервиса.ПредметПубликации
	|		ПО ФизическиеЛица.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.ОкончаниеПубликации <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ФизическиеЛица.ОкончаниеПубликации <= &ОкончаниеПубликации
	|	И ИзмененияДляСервиса.БылаОшибкаПриПубликации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	|			ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = ИзмененияДляСервиса.ПредметПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется
	|	И ИзмененияДляСервиса.БылаОшибкаПриПубликации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПубликуемыеОбъекты = РезультатЗапроса[1].Выгрузить();
	ФизическиеЛица = РезультатЗапроса[2].Выгрузить();
	
	Если ПубликуемыеОбъекты.Количество() = 0 И ФизическиеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПубликуемыеОбъекты;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ФизическиеЛица;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ПубликуемыеОбъекты Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.ОбъектПубликации;
			Запись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ФизическиеЛица Цикл
			Запись = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			Запись.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Публикуемые объекты'");
		ЗаписатьОшибкуПриВыгрузкеИзменений(ОписаниеИзменений, ОписаниеОшибки());
		БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ПубликацияИзмененийЗаявок

Процедура ОпубликоватьИзмененияЗаявок(ПараметрыОбмена, БылиОшибки)

	РезультатОбработки = НовыйРезультатВыгрузки();
	ВерсияФормата = ПараметрыОбмена.ВерсияФормата;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзмененияДляСервиса.ПредметПубликации КАК ПредметПубликации,
	|	ИзмененияДляСервиса.ВерсияДанных КАК ВерсияДанных,
	|	ТИПЗНАЧЕНИЯ(ИзмененияДляСервиса.ПредметПубликации) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипДанных";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТаблицаИзменений = РезультатЗапроса.Выгрузить();
	
	ТаблицаИзменений.Индексы.Добавить("ТипДанных");
	Отбор = Новый Структура("ТипДанных");
	ТипыДанных = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ТипДанных", Истина);
	
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	ПубликоватьРезультатСогласования = КабинетСотрудника.ИспользоватьФормат303();
	РесурсСтатусовСервиса = РесурсСтатусовСервиса(ПараметрыОбмена);
	
	// Заявки с ошибками заполнения, например пустой идентификатор заявки,
	// снимаем с регистрации изменений после выгрузки данных.
	ЗаявкиОтменитьРегистрацию = Новый Массив;
	
	// Заявки к выгрузке, не участвующие в кадровом ЭДО.
	// Ключ - ТипыЗаявокКабинетСотрудника,
	// Значение - массив объектов к выгрузке.
	ЗаявкиКВыгрузке = Новый Соответствие;
	
	// Заявки по которым были ошибки при обработке, до публикации результатов.
	// Ключ - ссылка на заявку,
	// Значение - описание причины не обработки заявки.
	НеОбработанныеЗаявки = Новый Соответствие;
	
	// Содержит все заявки полученный как изменения для публикации.
	// Ключ - ИдентификаторЗаявки - идентификатор в сервисе,
	// Значение - ссылка на заявку.
	ИдентификаторЗаявка = Новый Соответствие;
	
	// Результаты согласования для выгрузки.
	// Ключ - ИдентификаторЗаявки - идентификатор в сервисе,
	// Значение - массив объектов РезультатСогласования.
	ЗаявкаРезультатыСогласования = Новый Соответствие;
	
	// Заявки для выгрузки по "строму" формату.
	// Ключ - ИдентификаторЗаявки - идентификатор в сервисе,
	// Значение - Структура, ресурс сервиса и СтатусПубликации.
	СтатусыЗаявокКПубликации = Новый Соответствие;
	
	// Таблица с документами кадрового ЭДО по заявкам, содержит колонки
	// Ссылка - ссылка на документ КЭДО,
	// Документ - ссылка на бизнес-процесс - Заявку,
	// ЭлектронныйДокумент - ссылка на присоединенный файл.
	ДокументыКЭДОПоЗаявкам = ДокументыКЭДОПоПолюДокумент(ТаблицаИзменений.ВыгрузитьКолонку("ПредметПубликации"));
	ДокументыКЭДОПоЗаявкам.Индексы.Добавить("Документ");
	
	ОписаниеОбъектРезультатСогласования = ОписаниеОбъектРезультатСогласования(ВерсияФормата);
	Для каждого ТипДанных Из ТипыДанных Цикл
		
		Если ТипДанных = Тип("Неопределено") Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.ТипДанных = ТипДанных;
		ТаблицаПоТипуДанных = ТаблицаИзменений.Скопировать(Отбор);
		ПубликуемыеЗаявки = ТаблицаПоТипуДанных.ВыгрузитьКолонку("ПредметПубликации");
		
		// Таблица с данными заявок, содержит колонки
		// Заявка - ссылка на бизнес-процесс,
		// ТипЗаявкиКабинетСотрудника - ПеречислениеСсылка.ТипыЗаявокКабинетСотрудника,
		// ИдентификаторЗаявки - строка, идентификатор заявки из сервиса,
		// СостояниеЗаявки - ПеречислениеСсылка.СостоянияЗаявокКабинетСотрудника
		// ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
		// Комментарий - Строка - ответ по заявке
		// ЗаявкаПодписывается - Булево - признак того, что заявка подписывается
		// ВариантФормированияФайлаОтвета - вариант формирования ответа
		// Исполнитель - Пользователь или Роль исполнителя.
		ТаблицаЗаявок = БизнесПроцессыЗаявокСотрудников.ТаблицаЗаявокСотрудника(ПубликуемыеЗаявки, ТипДанных);
		
		// Таблица содержит вложения по заявкам не участвующим в кадровом ЭДО.
		ТаблицаВложенийЗаявок = БизнесПроцессыЗаявокСотрудников.ТаблицаФайловОтветаЗаявокСотрудника(ПубликуемыеЗаявки, ТипДанных);
		ОтборЗаявок = Новый Структура("Заявка");
		
		Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЗаявки) Тогда
				РезультатОбработки.БылиОшибки = Истина;
				ЗаявкиОтменитьРегистрацию.Добавить(СтрокаТЗ.Заявка);
				ОписаниеОшибки = НСтр("ru = 'Не заполнен идентификатор заявки.'");
				ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
				Продолжить;
			КонецЕсли;
			
			ТипЗаявкиСервиса = СтрокаТЗ.ТипЗаявкиКабинетСотрудника;
			ИдентификаторЗаявка.Вставить(СтрокаТЗ.ИдентификаторЗаявки, СтрокаТЗ.Заявка);
			
			ЭлектронныйДокумент = Неопределено;
			
			// Проверяем, что у заявки есть документ кадрового ЭДО,
			// документ может отсутствовать, если еще не выполнена обработка обновления.
			СтрокаТаблицы = ДокументыКЭДОПоЗаявкам.Найти(СтрокаТЗ.Заявка, "Документ");
			Если СтрокаТаблицы = Неопределено Тогда
				ОписаниеОшибки = НСтр("ru = 'Не найден документ кадрового ЭДО.'");
				НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, ОписаниеОшибки);
				ЗаписатьПредупреждениеВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
				Продолжить;
			Иначе
				ЭлектронныйДокумент = СтрокаТаблицы.ЭлектронныйДокумент;
				// Электронный документ есть в заявках, полученных из сервиса с использованием ЭП.
				ТребуетсяЭлектроннаяПодпись = СтрокаТЗ.ЗаявкаПодписывается И ИспользуетсяКадровыйЭДО И ЗначениеЗаполнено(ЭлектронныйДокумент);
			КонецЕсли;
			
			РезультатВыполнения = "";
			ЗаявкаИсполнена = Ложь;
			Если СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				РезультатВыполнения = "agreed";
				ЗаявкаИсполнена = Истина;
			ИначеЕсли СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				РезультатВыполнения = "denied";
			Иначе
				РезультатОбработки.БылиОшибки = Истина;
				ОписаниеОшибки = НСтр("ru = 'Не установлен статус выполнения заявки.'");
				НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, ОписаниеОшибки);
				ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
				Продолжить;
			КонецЕсли;
			
			// Обработка заявок не участвующих в кадровом ЭДО.
			Если ЗаявкаИсполнена И ТипЗаявкиСервиса = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска Тогда
				
				ОбъектСправка = ОбъектСправкаОбОстаткеОтпуска(ПараметрыОбмена, СтрокаТЗ, ТаблицаВложенийЗаявок, НеОбработанныеЗаявки);
				Если ОбъектСправка <> Неопределено Тогда
					ЗаявкиПоТипу = ЗаявкиКВыгрузке[ТипЗаявкиСервиса];
					Если ЗаявкиПоТипу = Неопределено Тогда
						ЗаявкиПоТипу = Новый Массив;
					КонецЕсли;
					ЗаявкиПоТипу.Добавить(ОбъектСправка);
					ЗаявкиКВыгрузке.Вставить(ТипЗаявкиСервиса, ЗаявкиПоТипу);
				КонецЕсли;
				
			КонецЕсли;
			
			// Комментарий передаем, если отказ по заявке
			// или это не заявки на справку с места наботы или 2-НДФЛ,
			// для этих справок комментарий публикуется со справкой.
			Комментарий = "";
			Если Не ЗаявкаИсполнена
				Или ТипЗаявкиСервиса <> Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ И ТипЗаявкиСервиса <> Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы 
				Или СтрокаТЗ.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ВБумажномВиде Тогда
				Комментарий = СтрокаТЗ.Комментарий;
			КонецЕсли;
			
			Если ПубликоватьРезультатСогласования Тогда
				
				РезультатыСогласования = Новый Массив;
				
				Если ТребуетсяЭлектроннаяПодпись Тогда
					
					Ответ = РезультатыСогласованияЗаявкиСПодписью(
								СтрокаТЗ.ИдентификаторЗаявки,
								РезультатВыполнения,
								ЭлектронныйДокумент,
								Комментарий,
								ВерсияФормата);
					
					Если Ответ.ОписаниеОшибки <> Неопределено Тогда
						РезультатОбработки.БылиОшибки = Истина;
						НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, Ответ.ОписаниеОшибки);
						Продолжить;
					ИначеЕсли Ответ.РезультатыСогласования <> Неопределено Тогда
						РезультатыСогласования = Ответ.РезультатыСогласования;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
					
					// не требуется ЭП, или у заявки нет ЭП
					
					Исполнитель = СтрокаТЗ.Исполнитель;
					Подписант = "";
					ИмяПодписанта = "";
					Если ЗначениеЗаполнено(Исполнитель) 
						И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") 
						И Исполнитель <> Пользователи.СсылкаНеуказанногоПользователя(Ложь) Тогда
						Подписант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнитель, "ФизическоеЛицо");
						Если ЗначениеЗаполнено(Подписант) И КабинетСотрудника.ФизическоеЛицоПубликуется(Подписант) Тогда
							ИмяПодписанта = Строка(Подписант);
						Иначе
							Подписант = "";
							ИмяПодписанта = Строка(Исполнитель);
						КонецЕсли;
					КонецЕсли;
					
					РезультатСогласования = ОписаниеОбъекта(ОписаниеОбъектРезультатСогласования);
					РезультатСогласования.Подписант 				= Подписант;
					РезультатСогласования.ИмяПодписанта 			= ИмяПодписанта;
					РезультатСогласования.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторЗаявки;
					РезультатСогласования.РезультатСогласования 	= РезультатВыполнения;
					РезультатСогласования.РольПодписанта 			= "executor";
					РезультатСогласования.Комментарий 				= Комментарий;
					
					ОбъектРезультатСогласования = ОбъектСервисаПоОписанию(РезультатСогласования, ОписаниеОбъектРезультатСогласования);
					РезультатыСогласования.Добавить(ОбъектРезультатСогласования);
					
				КонецЕсли;
				
				ЗаявкаРезультатыСогласования.Вставить(СтрокаТЗ.ИдентификаторЗаявки, РезультатыСогласования);
				
			Иначе
				
				РесурсСервиса = РесурсСтатусовСервиса[ТипЗаявкиСервиса];
				Если ЗаявкаИсполнена Тогда
					СтатусПубликации = "completed";
				Иначе
					СтатусПубликации = "rejected";
				КонецЕсли;
				
				ПараметрыСтатуса = Новый Структура;
				ПараметрыСтатуса.Вставить("РесурсСервиса", РесурсСервиса);
				ПараметрыСтатуса.Вставить("СтатусПубликации", СтатусПубликации);
				
				СтатусыЗаявокКПубликации.Вставить(СтрокаТЗ.ИдентификаторЗаявки, ПараметрыСтатуса);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Идентификаторы заявок по которым были ошибки выгрузки.
	НеВыгруженныеЗаявки = Новый Массив;
	
	// Публикация заявок не участвующие в кадровом ЭДО.
	Если ЗаявкиКВыгрузке.Количество() > 0 Тогда
		
		РесурсЗаявокСервиса = РесурсЗаявокСервисаБезКЭДО();
		Для каждого ЭлементКоллекции Из ЗаявкиКВыгрузке Цикл
		
			ТипЗаявкиСервиса = ЭлементКоллекции.Ключ;
			ЗаявкиПоТипу = ЭлементКоллекции.Значение;
			РесурсСервиса = РесурсЗаявокСервиса[ТипЗаявкиСервиса];
			
			РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыОбмена,
				РесурсСервиса,
				ЗаявкиПоТипу,
				"requestID");
				
			РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				// Не найденные заявки с таким идентификатором, регистрируем как успешно выгруженные.
				РегистрироватьКаКВыгружена = (ЗначениеЗаполнено(Ошибка.Значение) И СтрНайти(Ошибка.Значение, "objectNotFound") > 0);
				НеВыгруженныеЗаявки.Добавить(Ошибка.Ключ);
				Заявка = ИдентификаторЗаявка[Ошибка.Ключ];
				Если Заявка <> Неопределено Тогда
					Если РегистрироватьКаКВыгружена Тогда
						РезультатОбработки.Выгружено.Добавить(Заявка);
					Иначе	
						РезультатОбработки.НеВыгружено.Вставить(Заявка, Ошибка.Значение);
					КонецЕсли;
				КонецЕсли;
				ЗарегистрироватьОшибкуПубликацииОбъекта(Заявка, РесурсСервиса, Ошибка.Значение);
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Публикация результатов согласования по заявкам.
	Если ПубликоватьРезультатСогласования Тогда
		
		// вычеркнем заявки, которые не выгрузились на предыдущем шаге
		Для каждого ИдентификаторЗаявки Из НеВыгруженныеЗаявки Цикл
			ЗаявкаРезультатыСогласования.Удалить(ИдентификаторЗаявки);
		КонецЦикла;
		
		РезультатыСогласования = Новый Массив;
		Для каждого ЭлементКоллекции Из ЗаявкаРезультатыСогласования Цикл
			Для каждого РезультатСогласования Из ЭлементКоллекции.Значение Цикл
				РезультатыСогласования.Добавить(РезультатСогласования);
			КонецЦикла;
		КонецЦикла;
		
		РесурсСервиса = РесурсРезультатыСогласования();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, РезультатыСогласования, "documentID");
			
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для каждого Идентификатор Из РезультатВыгрузки.Выгружено Цикл
			ОпубликованнаяЗаявка = ИдентификаторЗаявка[Идентификатор];
			Если ОпубликованнаяЗаявка <> Неопределено Тогда
				РезультатОбработки.Выгружено.Добавить(ОпубликованнаяЗаявка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			// Не найденные заявки с таким идентификатором, регистрируем как успешно выгруженные.
			РегистрироватьКаКВыгружена = (ЗначениеЗаполнено(Ошибка.Значение) И СтрНайти(Ошибка.Значение, "objectNotFound") > 0);
			Заявка = ИдентификаторЗаявка[Ошибка.Ключ];
			Если Заявка <> Неопределено Тогда
				Если РегистрироватьКаКВыгружена Тогда
					РезультатОбработки.Выгружено.Добавить(Заявка);
				Иначе	
					РезультатОбработки.НеВыгружено.Вставить(Заявка, Ошибка.Значение);
				КонецЕсли;
			КонецЕсли;
			ЗарегистрироватьОшибкуПубликацииОбъекта(Заявка, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	Иначе
		
		// вычеркнем заявки, которые не выгрузились на предыдущем шаге
		Для каждого ИдентификаторЗаявки Из НеВыгруженныеЗаявки Цикл
			СтатусыЗаявокКПубликации.Удалить(ИдентификаторЗаявки);
		КонецЦикла;
		
		Для каждого ЭлементКоллекции Из СтатусыЗаявокКПубликации Цикл
		
			ИдентификаторЗаявки = ЭлементКоллекции.Ключ;
			СтатусПубликации = ЭлементКоллекции.Значение.СтатусПубликации;
			РесурсСервиса = ЭлементКоллекции.Значение.РесурсСервиса;
			
			Заявка = ИдентификаторЗаявка[ИдентификаторЗаявки];
			Если ОпубликоватьСтатусЗаявки(ПараметрыОбмена, РесурсСервиса, ИдентификаторЗаявки, СтатусПубликации) Тогда
				ОпубликованнаяЗаявка = ИдентификаторЗаявка[ИдентификаторЗаявки];
				Если Заявка <> Неопределено Тогда
					РезультатОбработки.Выгружено.Добавить(ОпубликованнаяЗаявка);
				КонецЕсли;
			Иначе
				РезультатОбработки.БылиОшибки = Истина;
				ОписаниеОшибки = НСтр("ru = 'Ошибка обновления статуса заявки.'");
				ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
				Если Заявка <> Неопределено Тогда
					РезультатОбработки.НеВыгружено.Вставить(Заявка, ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатОбработки.НеВыгружено, НеОбработанныеЗаявки);
	РезультатОбработки.ОтменитьРегистрацию = ЗаявкиОтменитьРегистрацию;
	ОтменитьРегистрациюИзмененийЗаявокПоРезультатамПубликации(ТаблицаИзменений, РезультатОбработки);
	
	БылиОшибки = БылиОшибки Или РезультатОбработки.БылиОшибки;
	
КонецПроцедуры

Процедура ОтменитьРегистрациюИзмененийЗаявокПоРезультатамПубликации(ТаблицаИзменений, РезультатВыгрузки)

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("Выгружено", РезультатВыгрузки.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ПредметПубликации КАК ПредметПубликации,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.ПредметПубликации В(&Выгружено)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ПредметПубликации КАК ПредметПубликации
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
		|		ПО ОтменитьИзменения.ПредметПубликации = ИзмененияДляСервиса.ПредметПубликации
		|			И ОтменитьИзменения.ВерсияДанных = ИзмененияДляСервиса.ВерсияДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Выборка.ПредметПубликации;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Если РезультатВыгрузки.БылиОшибки Тогда
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации = Ошибка.Ключ;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
				МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ПредметПубликации Из РезультатВыгрузки.ОтменитьРегистрацию Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = ПредметПубликации;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Заявки сотрудников'");
		ЗаписатьОшибкуПриВыгрузкеИзменений(ОписаниеИзменений, ОписаниеОшибки());
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Функция ОпубликоватьСтатусЗаявки(ПараметрыОбмена, РесурсЗаявкиСервиса, ИдентификаторЗаявки, Статус)
	
	РесурсСервиса = СтрЗаменить(РесурсЗаявкиСервиса,"{ID}",ИдентификаторЗаявки);
	РесурсСервиса = СтрШаблон("%1/status?status=%2",РесурсСервиса,Статус);
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "PUT"));
	Если Ответ <> Неопределено И (Ответ.КодСостояния = 404 Или Ответ.КодСостояния = 200) Тогда
		СтатусУстановлен = Истина;
	Иначе
		СтатусУстановлен = Ложь;
	КонецЕсли;
	
	Возврат СтатусУстановлен;
	
КонецФункции

Функция ОбъектСправкаОбОстаткеОтпуска(ПараметрыОбмена, СтрокаТЗ, ТаблицаВложенийЗаявок, НеОбработанныеЗаявки)

	ОбъектСправка = Неопределено;
	
	СтрокаВложений = ТаблицаВложенийЗаявок.Найти(СтрокаТЗ.Заявка, "Заявка");
	Если СтрокаВложений <> Неопределено Тогда
		
		Попытка
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(СтрокаВложений.ФайлЗаявки, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка получения данных файла.'");
			НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, ОписаниеОшибки);
			ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки());
			Возврат ОбъектСправка;
		КонецПопытки;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		
		ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанныеФайла, ДанныеФайла.Расширение);
		Если ИдентификаторФайла = Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Ошибка публикации файла.'");
			НеОбработанныеЗаявки.Вставить(СтрокаТЗ.Заявка, ОписаниеОшибки);
			ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.Заявка, ОписаниеОшибки);
			Возврат ОбъектСправка;
		КонецЕсли;
		
		Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ПараметрыОбмена.ВерсияФормата, "1.0") Тогда
			
			ОписаниеОбъектаВходящийФайл = ОписаниеОбъектаВходящийФайл();
			ОписаниеФайла = ОписаниеОбъекта(ОписаниеОбъектаВходящийФайл);
			ОписаниеФайла.НаименованиеФайла 	= ДанныеФайла.ИмяФайла;
			ОписаниеФайла.РасширениеФайла 		= ДанныеФайла.Расширение;
			ОписаниеФайла.РазмерФайла 			= ДанныеФайла.Размер;
			ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
			ОбъектФайл = ОбъектСервисаПоОписанию(ОписаниеФайла, ОписаниеОбъектаВходящийФайл);
			
			ОписаниеОбъектаСправкаОбОстаткеОтпуска = ОписаниеОбъектаСправкаОбОстаткеОтпуска(ПараметрыОбмена.ВерсияФормата);
			ОписаниеСправка = ОписаниеОбъекта(ОписаниеОбъектаСправкаОбОстаткеОтпуска);
			ОписаниеСправка.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
			ОписаниеСправка.Вложение = ОбъектФайл;
			ОбъектСправка = ОбъектСервисаПоОписанию(ОписаниеСправка, ОписаниеОбъектаСправкаОбОстаткеОтпуска);
			
		Иначе
			
			ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанныеФайла);
			ИмяФайлаБезРасширения = ИмяФайлаБезРасширения(ДанныеФайла.ИмяФайла, ДанныеФайла.Расширение);
			ОбъектФайл = ОбъектСервисаФайл(ИдентификаторФайла, ИмяФайлаБезРасширения, ДанныеФайла.Расширение, ДанныеФайла.Размер, ПараметрыОбмена.ВерсияФормата, ВерсияФайла);
			
			ОписаниеОбъектаСправкаОбОстаткеОтпуска = ОписаниеОбъектаСправкаОбОстаткеОтпуска(ПараметрыОбмена.ВерсияФормата);
			ОписаниеСправка = ОписаниеОбъекта(ОписаниеОбъектаСправкаОбОстаткеОтпуска);
			ОписаниеСправка.Заявка 				= СтрокаТЗ.ИдентификаторЗаявки;
			ОписаниеСправка.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
			ОписаниеСправка.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
			ОписаниеСправка.Вложение 			= ОбъектФайл;
			ОбъектСправка = ОбъектСервисаПоОписанию(ОписаниеСправка, ОписаниеОбъектаСправкаОбОстаткеОтпуска);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектСправка;

КонецФункции

Функция РезультатыСогласованияЗаявкиСПодписью(ИдентификаторЗаявки, РезультатВыполнения, ПрисоединенныйФайл, Комментарий, ВерсияФормата)

	Результат = Новый Структура("РезультатыСогласования,ОписаниеОшибки");
	
	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
	Исключение
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОписаниеОшибки = НСтр("ru = 'Ошибка получения файла.'");
		Результат.ОписаниеОшибки = ОписаниеОшибки;
		Возврат Результат;
	КонецПопытки;
	
	РезультатыСогласования = Новый Массив;
	
	Если ДанныеФайла.ПодписанЭП Тогда
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанныеФайла);
		
		ОписаниеОбъектРезультатСогласования = ОписаниеОбъектРезультатСогласования(ВерсияФормата);
		ПодписиДокумента = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
		Для каждого ПодписьДокумента Из ПодписиДокумента Цикл
			
			Если КабинетСотрудника.ЭтоПодписанСервиса(ПодписьДокумента.Комментарий) Тогда
				Продолжить;
			КонецЕсли;
			
			Подписант = "";
			ИмяПодписанта = "";
			Если ЗначениеЗаполнено(ПодписьДокумента.УстановившийПодпись) Тогда
				Подписант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписьДокумента.УстановившийПодпись, "ФизическоеЛицо");
				Если ЗначениеЗаполнено(Подписант) И КабинетСотрудника.ФизическоеЛицоПубликуется(Подписант) Тогда
					ИмяПодписанта = Строка(Подписант);
				Иначе
					Подписант = "";
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Подписант) И ЗначениеЗаполнено(ПодписьДокумента.КомуВыданСертификат) Тогда
				ИмяПодписанта = ПодписьДокумента.КомуВыданСертификат;
			КонецЕсли;
			
			РезультатСогласования = ОписаниеОбъекта(ОписаниеОбъектРезультатСогласования);
			РезультатСогласования.Подписант 	= Подписант;
			РезультатСогласования.ИмяПодписанта = ИмяПодписанта;
			РезультатСогласования.ИдентификаторДокумента = ИдентификаторЗаявки;
			РезультатСогласования.РезультатСогласования = РезультатВыполнения;
			РезультатСогласования.ЭлектроннаяПодпись 	= Base64Строка(ПодписьДокумента.Подпись);
			РезультатСогласования.РольПодписанта 		= "executor";
			РезультатСогласования.ВерсияДокумента 		= ВерсияФайла;
			РезультатСогласования.Комментарий 			= Комментарий;
			РезультатСогласования.ДатаПодписи			= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ПодписьДокумента.ДатаПодписи);
			
			ОбъектРезультатСогласования = ОбъектСервисаПоОписанию(РезультатСогласования, ОписаниеОбъектРезультатСогласования);
			РезультатыСогласования.Добавить(ОбъектРезультатСогласования);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатыСогласования.Количество() > 0 Тогда
		Результат.РезультатыСогласования = РезультатыСогласования;;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция РесурсСтатусовСервиса(ПараметрыОбмена)

	РесурсСтатусов = Новый Соответствие;
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ, РесурсЗапросСправки2НДФЛ());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы, РесурсЗапросСправкиСРаботы());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска, РесурсЗапросСправкиОбОстаткеОтпуска());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных, РесурсЗапросИзменениеЛичныхДанных(ПараметрыОбмена.ВерсияAPI));
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск, РесурсЗаявлениеНаОтпуск());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия, РесурсОтсутствие());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты, РесурсЗаявлениеНаНалоговыеВычеты());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаКомпенсациюОтпуска, РесурсЗаявлениеНаКомпенсациюОтпуска());
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ, РесурсЗаявлениеНаУдержаниеДСВ());
	
	Возврат РесурсСтатусов;

КонецФункции

Функция РесурсЗаявокСервисаБезКЭДО()

	РесурсСтатусов = Новый Соответствие;
	РесурсСтатусов.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска, РесурсСправкиОбОстаткеОтпуска());
	
	Возврат РесурсСтатусов;

КонецФункции

Функция ДокументыКЭДОПоПолюДокумент(СписокДокументов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документы", СписокДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ОснованиеДокумента КАК Документ,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ОснованиеДокумента В(&Документы)
	|	И НЕ ДокументКадровогоЭДО.ПометкаУдаления
	|	И ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область ПубликацияИзмененийДокументовКЭДО

Функция НовыйРезультатВыгрузкиДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выгружено", 			Новый Массив);
	Результат.Вставить("НеВыгружено", 			Новый Массив);
	Результат.Вставить("ОтменитьРегистрацию", 	Новый Массив);
	Результат.Вставить("БылиОшибки", Ложь);
	Возврат Результат;
	
КонецФункции

Процедура ОпубликоватьИзмененияДокументов(ПараметрыОбмена, БылиОшибки)

	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		
		Попытка
			КабинетСотрудника.ЗарегистрироватьДокументыНаПодпись();
		Исключение
			ШаблонОписания = НСтр(
			"ru = 'Произошла ошибка при регистрации изменений документов на подпись
			|Описание ошибки:
			|%1'");
			ТекстОшибки = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ПубликуемыйДокумент КАК ПубликуемыйДокумент,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ДокументКадровогоЭДО.ОснованиеДокумента КАК Документ,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ДокументКадровогоЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ТИПЗНАЧЕНИЯ(ДокументКадровогоЭДО.ОснованиеДокумента) КАК ТипДанных,
	|	ВЫБОР
	|		КОГДА ДокументКадровогоЭДО.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ИЗ
	|	РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника КАК Изменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|		ПО Изменения.ПубликуемыйДокумент = ДокументКадровогоЭДО.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВсеИзменения = РезультатЗапроса.Выгрузить();
	
	Отбор = Новый Структура("Публикуется");
	Отбор.Публикуется = Ложь;
	ОтменаРегистрации = ВсеИзменения.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из ОтменаРегистрации Цикл
		РезультатОбработки.ОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент)
	КонецЦикла;
	
	Отбор.Публикуется = Истина;
	ТаблицаИзменений = ВсеИзменения.Скопировать(Отбор);
	ТипыДанных = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ТипДанных", Истина);
	ТаблицаИзменений.Индексы.Добавить("ТипДанных");
	Отбор = Новый Структура("ТипДанных");
	
	ДокументыКПубликации = Новый Массив;
	НеобработанныеДокументы = Новый Массив;
	
	ТипДанныхЗаявкаСправкаСРаботы = БизнесПроцессыЗаявокСотрудников.ТипЗаявкаСотрудникаСправкаСМестаРаботы();
	
	ТаблицаДокументовНаПодпись = ТаблицаИзменений.СкопироватьКолонки();
	
	Для каждого ТипДанных Из ТипыДанных Цикл
		
		Отбор.ТипДанных = ТипДанных;
		ТаблицаПоТипуДанных = ТаблицаИзменений.Скопировать(Отбор);
		
		Если ТипДанных = Тип("ДокументСсылка.СправкаНДФЛ") Тогда
			РезультатВыгрузки = РезультатВыгрузки2НДФЛ(ПараметрыОбмена, ТаблицаПоТипуДанных);
			ДополнитьРезультатОбработки(РезультатОбработки, РезультатВыгрузки);
		ИначеЕсли ТипДанных = ТипДанныхЗаявкаСправкаСРаботы Тогда
			РезультатВыгрузки = РезультатВыгрузкиСправокСРаботы(ПараметрыОбмена, ТаблицаПоТипуДанных);
			ДополнитьРезультатОбработки(РезультатОбработки, РезультатВыгрузки);
		ИначеЕсли ТипДанных = Тип("ДокументСсылка.СогласиеНаПрисоединениеККЭДО") Тогда
			РезультатВыгрузки = РезультатВыгрузкиСогласийКЭДО(ПараметрыОбмена, ТаблицаПоТипуДанных);
			ДополнитьРезультатОбработки(РезультатОбработки, РезультатВыгрузки);
		Иначе
			
			Если Не КадровыйЭДО.ЭтоТипОбъектаСПечатнымиФормами(ТипДанных) Тогда
				Для каждого СтрокаТЗ Из ТаблицаПоТипуДанных Цикл
					РезультатОбработки.ОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаТЗ Из ТаблицаПоТипуДанных Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДокументовНаПодпись.Добавить(), СтрокаТЗ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатВыгрузки = РезультатВыгрузкиДокументовНаПодпись(ПараметрыОбмена, ТаблицаДокументовНаПодпись);
	ДополнитьРезультатОбработки(РезультатОбработки, РезультатВыгрузки);
	
	ОтменитьРегистрациюИзмененийДокументов(ТаблицаИзменений, РезультатОбработки);
	
	БылиОшибки = БылиОшибки Или РезультатОбработки.БылиОшибки;

КонецПроцедуры

Процедура ОтменитьРегистрациюИзмененийДокументов(ТаблицаИзменений, РезультатВыгрузки)

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПубликуемыйДокумент", "ПубликуемыйДокумент");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("Выгружено", РезультатВыгрузки.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ПубликуемыйДокумент КАК ПубликуемыйДокумент,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	(ТаблицаИзменений.ПубликуемыйДокумент В (&Выгружено)
		|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ПубликуемыйДокумент КАК ПубликуемыйДокумент
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
		|		ПО ОтменитьИзменения.ПубликуемыйДокумент = ИзмененияДляСервиса.ПубликуемыйДокумент
		|			И ОтменитьИзменения.ВерсияДанных = ИзмененияДляСервиса.ВерсияДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПубликуемыйДокумент = Выборка.ПубликуемыйДокумент;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Для Каждого ПубликуемыйДокумент Из РезультатВыгрузки.ОтменитьРегистрацию Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПубликуемыйДокумент = ПубликуемыйДокумент;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Если РезультатВыгрузки.БылиОшибки Тогда
			Для Каждого ПубликуемыйДокумент Из РезультатВыгрузки.НеВыгружено Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПубликуемыйДокумент = ПубликуемыйДокумент;
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Документы кадрового ЭДО'");
		ЗаписатьОшибкуПриВыгрузкеИзменений(ОписаниеИзменений, ОписаниеОшибки());
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ДополнитьРезультатОбработки(РезультатОбработки, РезультатВыгрузки)

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.Выгружено, РезультатВыгрузки.Выгружено);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, РезультатВыгрузки.НеВыгружено);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.ОтменитьРегистрацию, РезультатВыгрузки.ОтменитьРегистрацию);
	РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;	

КонецПроцедуры

Функция ЭлектронныйДокументРезультатыСогласования(ПараметрыОбмена, ДанныеЭлектронногоДокумента, ИдентификаторДокумента)
	
	Результат = Новый Структура("ЭлектронныйДокумент,РезультатыСогласования");
	
	ВерсияФормата = ПараметрыОбмена.ВерсияФормата;
	
	Оригинал 		= ДанныеЭлектронногоДокумента.Оригинал;
	Подписи 		= ДанныеЭлектронногоДокумента.Подписи;
	Представления 	= ДанныеЭлектронногоДокумента.Представления;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Оригинал.АдресВоВременномХранилище);
	
	ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанныеФайла);
	
	ТекстОписания = НСтр("ru = 'Ошибка публикации файла.'");
	ВладелецФайлаТекст = НСтр("ru = 'Владелец файла'");
	ФайлТекст = НСтр("ru = 'Файл'"); ;
	ШаблонОписанияОшибки = СтрШаблон("%1%2%3: %4, %5:", ТекстОписания, Символы.ПС, ВладелецФайлаТекст, Строка(Оригинал.Владелец), ФайлТекст);
	
	ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанныеФайла, Оригинал.РасширениеФайла);
	Если ИдентификаторФайла = Неопределено Тогда
		ОписаниеОшибки = СтрШаблон("%1 %2.", ШаблонОписанияОшибки, Оригинал.ИмяФайлаСРасширением);
		ЗаписатьОшибкуВыгрузкиФайла(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеОбъектРезультатСогласования = ОписаниеОбъектРезультатСогласования(ВерсияФормата);
	РезультатыСогласования = Новый Массив;
	Для каждого Подпись Из Подписи Цикл
		
		Если КабинетСотрудника.ЭтоПодписанСервиса(Подпись.Комментарий) Тогда
			Продолжить;
		КонецЕсли;
		
		Подписант = "";
		ИмяПодписанта = "";
		Если ЗначениеЗаполнено(Подпись.УстановившийПодпись) Тогда
			Подписант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подпись.УстановившийПодпись, "ФизическоеЛицо");
			Если ЗначениеЗаполнено(Подписант) И КабинетСотрудника.ФизическоеЛицоПубликуется(Подписант) Тогда
				ИмяПодписанта = Строка(Подписант);
			Иначе
				Подписант = "";
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Подписант) И ЗначениеЗаполнено(Подпись.КомуВыданСертификат) Тогда
			ИмяПодписанта = Подпись.КомуВыданСертификат;
		КонецЕсли;
		
		ДвоичныеДанныеПодпись = ПолучитьИзВременногоХранилища(Подпись.АдресВоВременномХранилище);
		
		РезультатСогласования = ОписаниеОбъекта(ОписаниеОбъектРезультатСогласования);
		РезультатСогласования.Подписант 			= Подписант;
		РезультатСогласования.ИмяПодписанта 		= ИмяПодписанта;
		РезультатСогласования.ИдентификаторДокумента = ИдентификаторДокумента;
		РезультатСогласования.РезультатСогласования = "agreed";
		РезультатСогласования.ЭлектроннаяПодпись 	= Base64Строка(ДвоичныеДанныеПодпись);
		РезультатСогласования.РольПодписанта 		= "employer";
		РезультатСогласования.ВерсияДокумента 		= ВерсияФайла;
		РезультатСогласования.ДатаПодписи			= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(Подпись.ДатаПодписи);
		
		ОбъектРезультатСогласования = ОбъектСервисаПоОписанию(РезультатСогласования, ОписаниеОбъектРезультатСогласования);
		РезультатыСогласования.Добавить(ОбъектРезультатСогласования);
		
	КонецЦикла;
	
	ОбъектИсходныйДокумент = ОбъектСервисаФайл(ИдентификаторФайла, Оригинал.ИмяФайлаБезРасширения, Оригинал.РасширениеФайла, Оригинал.Размер, ВерсияФормата, ВерсияФайла);
	
	ПредставленияДокумента = Новый Массив;
	Для каждого ПредставлениеДокумента Из Представления Цикл
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПредставлениеДокумента.АдресВоВременномХранилище);
		
		ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанныеФайла, ПредставлениеДокумента.РасширениеФайла);
		Если ИдентификаторФайла = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон("%1 %2.", ШаблонОписанияОшибки, ПредставлениеДокумента.ИмяФайлаСРасширением);
			ЗаписатьОшибкуВыгрузкиФайла(ОписаниеОшибки);
			Возврат Результат;
		КонецЕсли;
		
		ОбъектФайл = ОбъектСервисаФайл(ИдентификаторФайла, ПредставлениеДокумента.ИмяФайлаБезРасширения, ПредставлениеДокумента.РасширениеФайла, ПредставлениеДокумента.Размер, ВерсияФормата);
		ПредставленияДокумента.Добавить(ОбъектФайл);
		
	КонецЦикла;
	
	ОписаниеОбъектаЭлектронныйДокумент = ОписаниеОбъектаЭлектронныйДокумент(ВерсияФормата);
	ОписаниеЭлектронныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаЭлектронныйДокумент);
	ОписаниеЭлектронныйДокумент.ИсходныйДокумент = ОбъектИсходныйДокумент;
	Если ПредставленияДокумента.Количество() > 0 Тогда
		ОписаниеЭлектронныйДокумент.ПредставленияДокумента = ПредставленияДокумента;
	КонецЕсли;
	
	Результат.ЭлектронныйДокумент = ОбъектСервисаПоОписанию(ОписаниеЭлектронныйДокумент, ОписаниеОбъектаЭлектронныйДокумент);
	Результат.РезультатыСогласования = РезультатыСогласования;
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектВходящийФайлПоПрисоединенномуФайлу(ПрисоединенныйФайл, ПараметрыОбмена) Экспорт

	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
	Исключение
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанныеФайла, ДанныеФайла.Расширение);
	Если ИдентификаторФайла = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка публикации файла.'");
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеФайла = ОписаниеОбъекта(ОписаниеОбъектаВходящийФайл());
	ОписаниеФайла.НаименованиеФайла 	= ДанныеФайла.ИмяФайла;
	ОписаниеФайла.РасширениеФайла 		= ДанныеФайла.Расширение;
	ОписаниеФайла.РазмерФайла 			= ДанныеФайла.Размер;
	ОписаниеФайла.ИдентификаторФайла 	= ИдентификаторФайла;
	ОбъектФайл = ОбъектСервисаПоОписанию(ОписаниеФайла, ОписаниеОбъектаВходящийФайл());
	
	Возврат ОбъектФайл;

КонецФункции

#Область ВыгрузкаДокументовНаПодпись

Функция РезультатВыгрузкиДокументовНаПодпись(ПараметрыОбмена, ТаблицаДокументовНаПодпись)

	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	Если ТаблицаДокументовНаПодпись.Количество() = 0 Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ИспользоватьФормат303 = КабинетСотрудника.ИспользоватьФормат303();
	ИспользоватьФормат503 = КабинетСотрудника.ИспользоватьФормат503();
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	ПубликоватьДокументыНаПодпись = ИспользоватьФормат303 И ИспользуетсяКадровыйЭДО;
	Если Не ПубликоватьДокументыНаПодпись Тогда
		Для каждого СтрокаТЗ Из ТаблицаДокументовНаПодпись Цикл
			РезультатОбработки.ОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
		КонецЦикла;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	// Массив ссылок на документы КЭДО, по которым
	// не удалось сформировать объект для выгрузки.
	НеОбработанныеДокументы = Новый Массив;
	
	ТаблицаДанных = ДанныеДляВыгрузкиДокументовНаПодпись(ТаблицаДокументовНаПодпись);
	
	// Коллекция документов с результатами согласования, электронной подписью.
	// Ключ - ссылка на Документ,
	// Значение - массив объектов РезультатСогласования.
	ДокументРезультатыСогласования = Новый Соответствие;
	
	// Коллекция документов КЭДО.
	// Ключ - идентификатор документа,
	// Значение - ссылка на ДокументКЭДО.
	ИдентификаторыДокументов = Новый Соответствие;
	
	// Массив объектов документов для публикации.
	ДокументыНаПодписьКПубликации = Новый Массив;
	
	ОписаниеОбъектаДокументНаПодпись = ОписаниеОбъектаДокументНаПодпись(ПараметрыОбмена.ВерсияФормата);
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Ответ = ЭлектронныйДокументРезультатыСогласования(ПараметрыОбмена, СтрокаТЗ.ДанныеЭлектронногоДокумента, СтрокаТЗ.ИдентификаторДокумента);
		
		ОбъектЭлектронныйДокумент 	= Ответ.ЭлектронныйДокумент;
		Если ОбъектЭлектронныйДокумент = Неопределено Тогда
			РезультатОбработки.БылиОшибки = Истина;
			НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТЗ.РасчетныйЛисток Тогда
			РезультатыСогласования = Ответ.РезультатыСогласования;	
			Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
				ДокументРезультатыСогласования.Вставить(СтрокаТЗ.ПубликуемыйДокумент, РезультатыСогласования);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДокументНаПодпись =  ОписаниеОбъекта(ОписаниеОбъектаДокументНаПодпись);
		ОписаниеДокументНаПодпись.ИдентификаторДокумента			= СтрокаТЗ.ИдентификаторДокумента;
		ОписаниеДокументНаПодпись.Организация						= СтрокаТЗ.Организация;
		ОписаниеДокументНаПодпись.ФизическиеЛица					= СтрокаТЗ.ФизическиеЛица;
		ОписаниеДокументНаПодпись.Дата								= СтрокаТЗ.ДатаДокумента;
		ОписаниеДокументНаПодпись.НазваниеДокумента					= СтрокаТЗ.НазваниеДокумента;
		ОписаниеДокументНаПодпись.ЭлектронныйДокумент				= ОбъектЭлектронныйДокумент;
		Если ИспользоватьФормат503 Тогда
			ОписаниеДокументНаПодпись.ВозможноОбновлениеПредставлений = СтрокаТЗ.ВозможноОбновлениеПредставлений;
		КонецЕсли;
		ОбъектДокументНаПодпись = ОбъектСервисаПоОписанию(ОписаниеДокументНаПодпись, ОписаниеОбъектаДокументНаПодпись);
		
		ДокументыНаПодписьКПубликации.Добавить(ОбъектДокументНаПодпись);
		ИдентификаторыДокументов.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ПубликуемыйДокумент);
		
	КонецЦикла;
	
	РесурсСервиса = РесурсДокументыНаПодпись();
	РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыОбмена,
				РесурсСервиса,
				ДокументыНаПодписьКПубликации,
				"ID");
		
	РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	ВыгруженныеДокументы = Новый Соответствие;
	РезультатыСогласованияКПубликации = Новый Массив;
	Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
		ДокументНаПодпись = ИдентификаторыДокументов[ИдентификаторДокумента];
		ВыгруженныеДокументы.Вставить(ДокументНаПодпись, Истина);
		РезультатыСогласования = ДокументРезультатыСогласования[ДокументНаПодпись];
		Если РезультатыСогласования <> Неопределено Тогда
			Для каждого РезультатСогласования Из РезультатыСогласования Цикл
				РезультатыСогласованияКПубликации.Добавить(РезультатСогласования);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
		СтрокаДанных = ТаблицаДанных.Найти(Ошибка.Ключ, "ИдентификаторДокумента");
		РезультатОбработки.НеВыгружено.Добавить(СтрокаДанных.ПубликуемыйДокумент);
		ЗарегистрироватьОшибкуПубликацииОбъекта(СтрокаДанных.ПубликуемыйДокумент, РесурсСервиса, Ошибка.Значение);
	КонецЦикла;
	
	Если РезультатыСогласованияКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсРезультатыСогласования();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
			ПараметрыОбмена,
			РесурсСервиса,
			РезультатыСогласованияКПубликации,
			"documentID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			СтрокаДанных = ТаблицаДанных.Найти(Ошибка.Ключ, "ИдентификаторДокумента");
			РезультатОбработки.НеВыгружено.Добавить(СтрокаДанных.ПубликуемыйДокумент);
			ВыгруженныеДокументы.Удалить(СтрокаДанных.ПубликуемыйДокумент);
			ЗарегистрироватьОшибкуПубликацииОбъекта(СтрокаДанных.ПубликуемыйДокумент, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ВыгруженныеДокументы Цикл
		РезультатОбработки.Выгружено.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
	
	Возврат РезультатОбработки
	
КонецФункции

Функция ДанныеДляВыгрузкиДокументовНаПодпись(ТаблицаИзменений)

	ТаблицаДокументыНаПодпись = Новый ТаблицаЗначений;
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ПубликуемыйДокумент");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ЭлектронныйДокумент");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ИдентификаторДокумента");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ДанныеЭлектронногоДокумента");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("Организация");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ФизическиеЛица");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ДатаДокумента");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("НазваниеДокумента");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("ВозможноОбновлениеПредставлений");
	ТаблицаДокументыНаПодпись.Колонки.Добавить("РасчетныйЛисток", Новый ОписаниеТипов("Булево"));
	
	ДокументыОснования = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "Документ", Истина);
	ДокументыОснованияРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДокументыОснования, "Дата,Представление");
	
	ЭлектронныеДокументы = ТаблицаИзменений.ВыгрузитьКолонку("ЭлектронныйДокумент");
	ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
	
	ПубликуемыеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ПубликуемыйДокумент", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ПубликуемыеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.Организация КАК Организация,
	|	ДокументКадровогоЭДО.ВнешниеПодписанты.(
	|		ФизическоеЛицо КАК ФизическоеЛицо
	|	) КАК ВнешниеПодписанты,
	|	ВЫБОР
	|		КОГДА ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетныйЛисток
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.Ссылка В(&Ссылки)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ПубликуемыеДокументыРеквизиты = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ЗначенияРеквизитов = Новый Структура("Организация,ФизическиеЛица,РасчетныйЛисток");
		ЗначенияРеквизитов.Организация = Выборка.Организация;
		ЗначенияРеквизитов.ФизическиеЛица = Выборка.ВнешниеПодписанты.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		ЗначенияРеквизитов.РасчетныйЛисток = Выборка.РасчетныйЛисток;
		ПубликуемыеДокументыРеквизиты.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		НоваяСтрока = ТаблицаДокументыНаПодпись.Добавить();
		НоваяСтрока.ПубликуемыйДокумент 	= СтрокаТЗ.ПубликуемыйДокумент;
		НоваяСтрока.ЭлектронныйДокумент 	= СтрокаТЗ.ЭлектронныйДокумент;
		НоваяСтрока.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрока.ДанныеЭлектронногоДокумента = ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
		НоваяСтрока.Организация 		= ПубликуемыеДокументыРеквизиты[СтрокаТЗ.ПубликуемыйДокумент].Организация;
		НоваяСтрока.ФизическиеЛица 		= ПубликуемыеДокументыРеквизиты[СтрокаТЗ.ПубликуемыйДокумент].ФизическиеЛица;
		НоваяСтрока.РасчетныйЛисток 	= ПубликуемыеДокументыРеквизиты[СтрокаТЗ.ПубликуемыйДокумент].РасчетныйЛисток;
		НоваяСтрока.ДатаДокумента 		= ДокументыОснованияРеквизиты[СтрокаТЗ.Документ].Дата;
		НазваниеДокумента = "";
		Если ЗначениеЗаполнено(НоваяСтрока.ДанныеЭлектронногоДокумента) Тогда
			НазваниеДокумента = НоваяСтрока.ДанныеЭлектронногоДокумента.Оригинал.ИмяФайлаСРасширением;
		Иначе
			НазваниеДокумента = ДокументыОснованияРеквизиты[СтрокаТЗ.Документ].Представление;
		КонецЕсли;
		НоваяСтрока.НазваниеДокумента 	= НазваниеДокумента;
		НоваяСтрока.ВозможноОбновлениеПредставлений = НоваяСтрока.ДанныеЭлектронногоДокумента <> Неопределено;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументыНаПодпись;

КонецФункции

#КонецОбласти

#Область ВыгрузкаСправокСРаботы

Функция РезультатВыгрузкиСправокСРаботы(ПараметрыОбмена, ТаблицаПоТипуДанных)

	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	
	ИспользоватьФормат303 = КабинетСотрудника.ИспользоватьФормат303();
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	// Массив ссылок на документы КЭДО, по которым
	// не удалось сформировать объект для выгрузки.
	НеОбработанныеДокументы = Новый Массив;
	
	// Массив ссылок на документы КЭДО, по которым
	// заявка отказана, отменяем публикацию таких документов.
	ДокументыОтменитьРегистрацию = Новый Массив;
	
	ТаблицаДанных = ДанныеДляВыгрузкиСправокСРаботы(ТаблицаПоТипуДанных);
	Если ТаблицаДанных.Количество() = 0 Тогда
		РезультатОбработки.БылиОшибки = Истина;
		ОписаниеИзменений = НСтр("ru = 'Справки с места работы'");
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить данные справок'");
		ЗаписатьОшибкуПриВыгрузкеИзменений(ОписаниеИзменений, ОписаниеОшибки);
		Для каждого СтрокаТЗ Из ТаблицаПоТипуДанных Цикл
			НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
		Возврат РезультатОбработки;
	КонецЕсли;
	
	// Коллекция заявок с результатами согласования.
	// Ключ - ИдентификаторДокумента,
	// Значение - массив объектов РезультатСогласования.
	ДокументыРезультатыСогласования = Новый Соответствие;
	
	// Коллекция для получения документа КЭДО.
	// Ключ - идентификатор документа
	// Значение - ссылка на документ КЭДО.
	ИдентификаторыДокументов = Новый Соответствие;
	
	// Массив объектов справка для публикации.
	СправкиКПубликации = Новый Массив;
	
	ОписаниеОбъектаСправкаСРаботы = ОписаниеОбъектаСправкаСРаботы(ПараметрыОбмена.ВерсияФормата);
	ОписаниеОбъектаЭлектронныйДокумент = ОписаниеОбъектаЭлектронныйДокумент(ПараметрыОбмена.ВерсияФормата);
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Если СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
			ДокументыОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
			Продолжить;
		ИначеЕсли СтрокаТЗ.СостояниеЗаявки <> Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
			// Заявка еще не выполнена, пропускаем обработку документа.
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыДокументов.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ПубликуемыйДокумент);
		
		ОписаниеСправки = ОписаниеОбъекта(ОписаниеОбъектаСправкаСРаботы);
		ОписаниеСправки.Заявка 				= СтрокаТЗ.ИдентификаторДокумента;
		ОписаниеСправки.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
		ОписаниеСправки.Организация 		= СтрокаТЗ.Организация;
		ОписаниеСправки.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
		ОписаниеСправки.Комментарий 		= СтрокаТЗ.Комментарий;
		
		Если ИспользоватьФормат303 Тогда
			
			ТребуетсяЭП = (СтрокаТЗ.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
				
			Если ТребуетсяЭП И СтрокаТЗ.ДанныеЭлектронногоДокумента <> Неопределено Тогда
			
				Ответ = ЭлектронныйДокументРезультатыСогласования(ПараметрыОбмена, СтрокаТЗ.ДанныеЭлектронногоДокумента, СтрокаТЗ.ИдентификаторДокумента);
				
				ОбъектЭлектронныйДокумент 	= Ответ.ЭлектронныйДокумент;
				РезультатыСогласования 		= Ответ.РезультатыСогласования;
				Если ОбъектЭлектронныйДокумент = Неопределено Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					Продолжить;
				ИначеЕсли Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
					// нет ЭП с соответствующей ролью подписанта
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					ОписаниеОшибки = НСтр("ru = 'Отсутствует электронная подпись файла.'");
					ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.ЭлектронныйДокумент, ОписаниеОшибки);
					Продолжить;
				КонецЕсли;
				
				ДокументыРезультатыСогласования.Вставить(СтрокаТЗ.ИдентификаторДокумента, РезультатыСогласования);
				
			Иначе
				
				Если Не ЗначениеЗаполнено(СтрокаТЗ.ЭлектронныйДокумент) Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					ОписаниеОшибки = НСтр("ru = 'Нет данных электронного документа.'");
					ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.ПубликуемыйДокумент, ОписаниеОшибки);
					Продолжить;	
				КонецЕсли;
				
				ОбъектФайл = ОбъектФайлПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент, ПараметрыОбмена);
				
				Если ОбъектФайл = Неопределено Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					Продолжить;
				КонецЕсли;
				
				ОписаниеЭлектронныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаЭлектронныйДокумент);
				ОписаниеЭлектронныйДокумент.ИсходныйДокумент = ОбъектФайл;
				ОбъектЭлектронныйДокумент = ОбъектСервисаПоОписанию(ОписаниеЭлектронныйДокумент, ОписаниеОбъектаЭлектронныйДокумент);
				
			КонецЕсли;
			
			ОписаниеСправки.ЭлектронныйДокумент = ОбъектЭлектронныйДокумент;
			
		Иначе
			
			ОбъектВходящийФайл = ОбъектВходящийФайлПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент, ПараметрыОбмена);
			Если ОбъектВходящийФайл = Неопределено Тогда
				РезультатОбработки.БылиОшибки = Истина;
				НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				Продолжить;
			КонецЕсли;
			
			ОписаниеСправки.Вложение = ОбъектВходящийФайл;
			
		КонецЕсли;
		
		ОбъектСправка = ОбъектСервисаПоОписанию(ОписаниеСправки, ОписаниеОбъектаСправкаСРаботы);
		
		СправкиКПубликации.Добавить(ОбъектСправка);
		
	КонецЦикла;
	
	РезультатыСогласованияКПубликации = Новый Массив;
	ВыгруженныеДокументы = Новый Соответствие;
	
	Если СправкиКПубликации.Количество() > 0  Тогда
		
		РесурсСервиса = РесурсСправкиСМестаРаботы();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
			ПараметрыОбмена,
			РесурсСервиса,
			СправкиКПубликации,
			"ID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
			ВыгруженныеДокументы.Вставить(ИдентификаторыДокументов[ИдентификаторДокумента], Истина);
			РезультатыСогласования = ДокументыРезультатыСогласования[ИдентификаторДокумента];
			Если РезультатыСогласования <> Неопределено Тогда
				Для каждого РезультатСогласования Из РезультатыСогласования Цикл
					РезультатыСогласованияКПубликации.Добавить(РезультатСогласования);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			РезультатОбработки.НеВыгружено.Добавить(ИдентификаторыДокументов[Ошибка.Ключ]);
			ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если РезультатыСогласованияКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсРезультатыСогласования();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
			ПараметрыОбмена,
			РесурсСервиса,
			РезультатыСогласованияКПубликации,
			"documentID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			РезультатОбработки.НеВыгружено.Добавить(ИдентификаторыДокументов[Ошибка.Ключ]);
			ВыгруженныеДокументы.Удалить(ИдентификаторыДокументов[Ошибка.Ключ]);
			ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ВыгруженныеДокументы Цикл
		РезультатОбработки.Выгружено.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.ОтменитьРегистрацию, ДокументыОтменитьРегистрацию);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ДанныеДляВыгрузкиСправокСРаботы(ТаблицаИзменений)

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ПубликуемыйДокумент");
	ТаблицаДанных.Колонки.Добавить("ИдентификаторДокумента");
	ТаблицаДанных.Колонки.Добавить("Заявка");
	ТаблицаДанных.Колонки.Добавить("СостояниеЗаявки");
	ТаблицаДанных.Колонки.Добавить("ИдентификаторЗаявки");
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаДанных.Колонки.Добавить("ЭлектронныйДокумент");
	ТаблицаДанных.Колонки.Добавить("ДанныеЭлектронногоДокумента");
	ТаблицаДанных.Колонки.Добавить("ВариантФормированияФайлаОтвета");
	ТаблицаДанных.Колонки.Добавить("Комментарий");
	
	Заявки = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "Документ", Истина);
	ДанныеЗаявок = БизнесПроцессыЗаявокСотрудников.ДанныеЗаявокСправкиСРаботы(Заявки);
	Если ДанныеЗаявок = Неопределено Тогда
		Возврат ТаблицаДанных;
	КонецЕсли;
	
	ЭлектронныеДокументыСправок = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		ЭлектронныеДокументыСправок = ТаблицаИзменений.ВыгрузитьКолонку("ЭлектронныйДокумент");
	Иначе
		Отбор = Новый Структура("ВариантФормированияФайлаОтвета", Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
		НайденныеСтроки = ДанныеЗаявок.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			Если СтрокаТЗ.СостояниеЗаявки <> Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицыИзменений = ТаблицаИзменений.Найти(СтрокаТЗ.Заявка, "Документ");
			Если ЗначениеЗаполнено(СтрокаТаблицыИзменений) Тогда
				ЭлектронныеДокументыСправок.Добавить(СтрокаТаблицыИзменений.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлектронныеДокументы = Новый Массив;
	Для каждого ЭлектронныйДокумент Из ЭлектронныеДокументыСправок Цикл
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			ЭлектронныеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЭлектронныхДокументов = Новый Соответствие;
	Если ЭлектронныеДокументы.Количество() > 0 Тогда
		Попытка
			ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
		Исключение
			Возврат ТаблицаДанных;
		КонецПопытки;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		
		СтрокаЗаявки = ДанныеЗаявок.Найти(СтрокаТЗ.Документ, "Заявка");
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ПубликуемыйДокумент 	= СтрокаТЗ.ПубликуемыйДокумент;
		НоваяСтрока.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрока.Заявка 					= СтрокаТЗ.Документ;
		НоваяСтрока.ЭлектронныйДокумент 	= СтрокаТЗ.ЭлектронныйДокумент;
		НоваяСтрока.ИдентификаторЗаявки 	= СтрокаЗаявки.ИдентификаторЗаявки;
		НоваяСтрока.Организация 			= СтрокаЗаявки.Организация;
		НоваяСтрока.ФизическоеЛицо 			= СтрокаЗаявки.ФизическоеЛицо;
		НоваяСтрока.Комментарий 			= СтрокаЗаявки.Комментарий;
		НоваяСтрока.СостояниеЗаявки 		= СтрокаЗаявки.СостояниеЗаявки;
		НоваяСтрока.ВариантФормированияФайлаОтвета 	= СтрокаЗаявки.ВариантФормированияФайлаОтвета;
		НоваяСтрока.ДанныеЭлектронногоДокумента 	= ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
	
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции

#КонецОбласти

#Область Выгрузка2НФДЛ

Функция РезультатВыгрузки2НДФЛ(ПараметрыОбмена, ТаблицаПоТипуДанных)

	РезультатОбработки = НовыйРезультатВыгрузкиДокументов();
	
	ИспользоватьФормат303 = КабинетСотрудника.ИспользоватьФормат303();
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	
	ТаблицаДанных = ДанныеДляВыгрузки2НДФЛ(ТаблицаПоТипуДанных);
	ТаблицаДанных.Сортировать("ИдентификаторЗаявки");
	
	// Массив ссылок на документы КЭДО, которые не обрабатываем,
	// если ИспользоватьФормат303 = Ложь, снимаем с регистрации изменений
	// после выгрузки данных.
	ДокументыОтменитьРегистрацию = Новый Массив;
	
	// Массив ссылок на документы КЭДО, по которым
	// не удалось сформировать объект для выгрузки.
	НеОбработанныеДокументы = Новый Массив;
	
	// Коллекция с результатами согласования.
	// Ключ - ИдентификаторДокумента
	// Значение - массив объектов РезультатСогласования.
	ДокументРезультатыСогласования = Новый Соответствие;
	
	// Массив объектов справка 2НДФЛ для публикации когда ИспользоватьФормат303 = Истина.
	СправкиКПубликации = Новый Массив;
	
	// Коллекция объектов справка 2НДФЛ для формирования ответа на запрос справок,
	// когда ИспользоватьФормат303 = Ложь.
	// Ключ - ИдентификаторЗаявки
	// Значение - массив объектов справка 2НДФЛ.
	ОбъектыСправкаПоИдентификаторам = Новый Соответствие;
	
	// Коллекция для получения документа КЭДО.
	// Ключ - идентификатор документа
	// Значение - ссылка на документ КЭДО.
	ИдентификаторыДокументов = Новый Соответствие;
	
	// Коллекция для получения документа КЭДО.
	// Ключ - идентификатор документа
	// Значение - ссылка на справку 2НДФЛ.
	ИдентификаторыДокументовСправки = Новый Соответствие;
	
	ОписаниеОбъектаСправка2НДФЛ = ОписаниеОбъектаСправка2НДФЛ(ПараметрыОбмена.ВерсияФормата);
	ОписаниеОбъектаЭлектронныйДокумент = ОписаниеОбъектаЭлектронныйДокумент(ПараметрыОбмена.ВерсияФормата);
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Если СтрокаТЗ.СостояниеЗаявки <> Неопределено Тогда
			Если СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				ДокументыОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				Продолжить;
			ИначеЕсли СтрокаТЗ.СостояниеЗаявки <> Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				// Заявка еще не выполнена, пропускаем обработку документа.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИдентификаторыДокументов.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ПубликуемыйДокумент);
		ИдентификаторыДокументовСправки.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.Справка2НДФЛ);
		
		Если Не ИспользоватьФормат303 И Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЗаявки) Тогда
			ДокументыОтменитьРегистрацию.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
			Продолжить;
		КонецЕсли;
		
		ОписаниеСправка2НДФЛ = ОписаниеОбъекта(ОписаниеОбъектаСправка2НДФЛ);
		ОписаниеСправка2НДФЛ.Справка2НДФЛ 		= СтрокаТЗ.ИдентификаторДокумента;
		ОписаниеСправка2НДФЛ.Организация 		= СтрокаТЗ.Организация;
		ОписаниеСправка2НДФЛ.ФизическоеЛицо 	= СтрокаТЗ.ФизическоеЛицо;
		ОписаниеСправка2НДФЛ.НалоговыйПериод 	= СтрокаТЗ.НалоговыйПериод;
		ОписаниеСправка2НДФЛ.СуммаДохода 		= СтрокаТЗ.СуммаДохода;
		ОписаниеСправка2НДФЛ.СуммаНалога 		= СтрокаТЗ.СуммаНалога;
		ОписаниеСправка2НДФЛ.ДатаСоздания 		= СтрокаТЗ.ДатаСоздания;
		ОписаниеСправка2НДФЛ.Комментарий 		= СтрокаТЗ.Комментарий;
		
		Если ИспользоватьФормат303 Тогда
			
			// Если это справка на основании заявки из сервиса.
			Если ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЗаявки) Тогда
				ОписаниеСправка2НДФЛ.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
			КонецЕсли;
			
			ТребуетсяЭП = СтрокаТЗ.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП;
				
			Если ТребуетсяЭП И СтрокаТЗ.ДанныеЭлектронногоДокумента <> Неопределено Тогда
				
				Ответ = ЭлектронныйДокументРезультатыСогласования(ПараметрыОбмена, СтрокаТЗ.ДанныеЭлектронногоДокумента, СтрокаТЗ.ИдентификаторДокумента);
				
				ОбъектЭлектронныйДокумент 	= Ответ.ЭлектронныйДокумент;
				РезультатыСогласования 		= Ответ.РезультатыСогласования;
				Если ОбъектЭлектронныйДокумент = Неопределено Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					Продолжить;
				ИначеЕсли Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
					// нет ЭП с соответствующей ролью подписанта
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					ОписаниеОшибки = НСтр("ru = 'Отсутствует электронная подпись файла.'");
					ЗаписатьОшибкуВыгрузкиИзменений(СтрокаТЗ.ЭлектронныйДокумент, ОписаниеОшибки);
					Продолжить;
				КонецЕсли;
				
				ДокументРезультатыСогласования.Вставить(СтрокаТЗ.ИдентификаторДокумента, РезультатыСогласования);
				
			Иначе
				
				ОбъектФайл = ОбъектФайлПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент, ПараметрыОбмена);
				
				Если ОбъектФайл = Неопределено Тогда
					РезультатОбработки.БылиОшибки = Истина;
					НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
					Продолжить;
				КонецЕсли;
				
				ОписаниеЭлектронныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаЭлектронныйДокумент);
				ОписаниеЭлектронныйДокумент.ИсходныйДокумент = ОбъектФайл;
				ОбъектЭлектронныйДокумент = ОбъектСервисаПоОписанию(ОписаниеЭлектронныйДокумент, ОписаниеОбъектаЭлектронныйДокумент);
				
			КонецЕсли;
			
			ОписаниеСправка2НДФЛ.ЭлектронныйДокумент = ОбъектЭлектронныйДокумент;
			
			ОбъектСправка2НДФЛ = ОбъектСервисаПоОписанию(ОписаниеСправка2НДФЛ, ОписаниеОбъектаСправка2НДФЛ);
			СправкиКПубликации.Добавить(ОбъектСправка2НДФЛ);
			
		Иначе
			
			ОбъектВходящийФайл = ОбъектВходящийФайлПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент, ПараметрыОбмена);
						
			Если ОбъектВходящийФайл = Неопределено Тогда
				РезультатОбработки.БылиОшибки = Истина;
				НеОбработанныеДокументы.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				Продолжить;
			КонецЕсли;
			
			ОписаниеСправка2НДФЛ.Вложение = ОбъектВходящийФайл;
			
			ОбъектСправка2НДФЛ = ОбъектСервисаПоОписанию(ОписаниеСправка2НДФЛ, ОписаниеОбъектаСправка2НДФЛ);
			
			МассивСправок = ОбъектыСправкаПоИдентификаторам[СтрокаТЗ.ИдентификаторЗаявки];
			Если МассивСправок = Неопределено Тогда
				МассивСправок = Новый Массив;
			КонецЕсли;
			МассивСправок.Добавить(ОбъектСправка2НДФЛ);
			ОбъектыСправкаПоИдентификаторам.Вставить(СтрокаТЗ.ИдентификаторЗаявки, МассивСправок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьФормат303 И СправкиКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсСправки2НДФЛ();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыОбмена,
				РесурсСервиса,
				СправкиКПубликации,
				"ID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		ВыгруженныеДокументы = Новый Соответствие;
		// Добавим в РезультатыСогласованияКПубликации данные по выгруженным справкам.
		РезультатыСогласованияКПубликации = Новый Массив;
		Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
			ВыгруженныеДокументы.Вставить(ИдентификаторыДокументов[ИдентификаторДокумента]);
			РезультатыСогласования = ДокументРезультатыСогласования[ИдентификаторДокумента];
			Если РезультатыСогласования <> Неопределено Тогда
				Для каждого РезультатСогласования Из РезультатыСогласования Цикл
					РезультатыСогласованияКПубликации.Добавить(РезультатСогласования);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			РезультатОбработки.НеВыгружено.Добавить(ИдентификаторыДокументов[Ошибка.Ключ]);
			ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
		Если РезультатыСогласованияКПубликации.Количество() > 0 Тогда
			
			РесурсСервиса = РесурсРезультатыСогласования();
			РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
					ПараметрыОбмена,
					РесурсСервиса,
					РезультатыСогласованияКПубликации,
					"documentID");
			
			РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				РезультатОбработки.НеВыгружено.Добавить(ИдентификаторыДокументов[Ошибка.Ключ]);
				ВыгруженныеДокументы.Удалить(ИдентификаторыДокументов[Ошибка.Ключ]);
				ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из ВыгруженныеДокументы Цикл
			РезультатОбработки.Выгружено.Добавить(ЭлементКоллекции.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ИспользоватьФормат303 И ОбъектыСправкаПоИдентификаторам.Количество() > 0 Тогда
		
		ОписаниеОбъектаОтветНаЗапросСправок2НДФЛ = ОписаниеОбъектаОтветНаЗапросСправок2НДФЛ();
		
		ТаблицаДанных.Индексы.Добавить("ИдентификаторЗаявки");
		Отбор = Новый Структура("ИдентификаторЗаявки");
		
		ОтветыНаЗапросыКПубликации = Новый Массив;
		Для каждого ЭлементКоллекции Из ОбъектыСправкаПоИдентификаторам Цикл
		
			ИдентификаторЗаявки = ЭлементКоллекции.Ключ;
			ОбъектыСправка = ЭлементКоллекции.Значение;
			
			Организация 	= ОбъектыСправка[0].employerID;
			ФизическоеЛицо 	= ОбъектыСправка[0].personID;
			
			ОписаниеОтвет = ОписаниеОбъекта(ОписаниеОбъектаОтветНаЗапросСправок2НДФЛ);
			ОписаниеОтвет.ИдентификаторЗаявки 	= ИдентификаторЗаявки;
			ОписаниеОтвет.Организация 			= Организация;
			ОписаниеОтвет.ФизическоеЛицо 		= ФизическоеЛицо;
			ОписаниеОтвет.Справки2НДФЛ 			= ОбъектыСправка;
			
			ОбъектОтвет = ОбъектСервисаПоОписанию(ОписаниеОтвет, ОписаниеОбъектаОтветНаЗапросСправок2НДФЛ);
			ОтветыНаЗапросыКПубликации.Добавить(ОбъектОтвет);
		
		КонецЦикла;
		
		РесурсСервиса = РесурсОтветыНаЗапросыСправок2НДФЛ(ПараметрыОбмена.ВерсияAPI);
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыОбмена,
				РесурсСервиса,
				ОтветыНаЗапросыКПубликации,
				"requestID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для Каждого ИдентификаторЗаявки Из РезультатВыгрузки.Выгружено Цикл
			Отбор.ИдентификаторЗаявки = ИдентификаторЗаявки;
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				РезультатОбработки.Выгружено.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			// Не найденные заявки с таким идентификатором, регистрируем как успешно выгруженные.
			РегистрироватьКаКВыгружена = (ЗначениеЗаполнено(Ошибка.Значение) И СтрНайти(Ошибка.Значение, "objectNotFound") > 0);
			ИдентификаторЗаявки = Ошибка.Ключ;
			Отбор.ИдентификаторЗаявки = ИдентификаторЗаявки;
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Если РегистрироватьКаКВыгружена Тогда
					РезультатОбработки.Выгружено.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				Иначе	
					РезультатОбработки.НеВыгружено.Добавить(СтрокаТЗ.ПубликуемыйДокумент);
				КонецЕсли;
			КонецЦикла;
			ЗарегистрироватьОшибкуПубликацииОбъекта(СтрокаТЗ.ПубликуемыйДокумент, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.НеВыгружено, НеОбработанныеДокументы);
	РезультатОбработки.ОтменитьРегистрацию = ДокументыОтменитьРегистрацию;
		
	Возврат РезультатОбработки;
	
КонецФункции

Функция ДанныеДляВыгрузки2НДФЛ(ТаблицаИзменений)

	Справки2НДФЛ = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "Документ", Истина);
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	БизнесПроцессыЗаявокСотрудников.СоздатьВТЗаявкиПоСправкам2НДФЛ(МенеджерВТ, Справки2НДФЛ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзменений.ПубликуемыйДокумент КАК ПубликуемыйДокумент,
	|	ТаблицаИзменений.Документ КАК Справка2НДФЛ,
	|	ТаблицаИзменений.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ТаблицаИзменений.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|	&ТаблицаИзменений КАК ТаблицаИзменений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Изменения.Справка2НДФЛ КАК Ссылка
	|ПОМЕСТИТЬ ВТСсылки
	|ИЗ
	|	ВТИзменения КАК Изменения";
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТДанныеСправок2НДФЛДляПубликации(МенеджерВТ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзменений.ПубликуемыйДокумент КАК ПубликуемыйДокумент,
	|	ТаблицаИзменений.Справка2НДФЛ КАК Справка2НДФЛ,
	|	ТаблицаИзменений.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ТаблицаИзменений.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ЕСТЬNULL(Заявки.ИдентификаторЗаявки, """") КАК ИдентификаторЗаявки,
	|	ЕСТЬNULL(Заявки.ОтветПоЗаявке, """") КАК Комментарий,
	|	ЕСТЬNULL(Заявки.Заявка, НЕОПРЕДЕЛЕНО) КАК Заявка,
	|	ЕСТЬNULL(Заявки.ВариантФормированияФайлаОтвета, НЕОПРЕДЕЛЕНО) КАК ВариантФормированияФайлаОтвета,
	|	ЕСТЬNULL(Заявки.СостояниеЗаявки, НЕОПРЕДЕЛЕНО) КАК СостояниеЗаявки,
	|	ДанныеСправок2НДФЛ.Организация КАК Организация,
	|	ДанныеСправок2НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеСправок2НДФЛ.ДатаСоздания КАК ДатаСоздания,
	|	ДанныеСправок2НДФЛ.НалоговыйПериод КАК НалоговыйПериод,
	|	ДанныеСправок2НДФЛ.СуммаДохода КАК СуммаДохода,
	|	ДанныеСправок2НДФЛ.СуммаНалога КАК СуммаНалога
	|ИЗ
	|	ВТИзменения КАК ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиПоСправкам2НДФЛ КАК Заявки
	|		ПО ТаблицаИзменений.Справка2НДФЛ = Заявки.СправкаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСправок2НДФЛДляПубликации КАК ДанныеСправок2НДФЛ
	|		ПО ТаблицаИзменений.Справка2НДФЛ = ДанныеСправок2НДФЛ.Ссылка";
	
	ДанныеДляВыгрузки = Запрос.Выполнить().Выгрузить();
	ДанныеДляВыгрузки.Колонки.Добавить("ДанныеЭлектронногоДокумента");
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		
		ЭлектронныеДокументы = Новый Массив;
		Для каждого СтрокаТЗ Из ДанныеДляВыгрузки Цикл
			Если СтрокаТЗ.СостояниеЗаявки <> Неопределено 
				И СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена
				И ЗначениеЗаполнено(СтрокаТЗ.ЭлектронныйДокумент)Тогда
				ЭлектронныеДокументы.Добавить(СтрокаТЗ.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
		
		Для каждого СтрокаТЗ Из ДанныеДляВыгрузки Цикл
			СтрокаТЗ.ДанныеЭлектронногоДокумента = ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
		КонецЦикла;
		
	Иначе
		
		Отбор = Новый Структура("ВариантФормированияФайлаОтвета", Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
		НайденныеСтроки = ДанныеДляВыгрузки.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ЭлектронныеДокументы = Новый Массив;
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Если СтрокаТЗ.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена 
					И ЗначениеЗаполнено(СтрокаТЗ.ЭлектронныйДокумент)Тогда
					ЭлектронныеДокументы.Добавить(СтрокаТЗ.ЭлектронныйДокумент);
				КонецЕсли;
			КонецЦикла;
			ДанныеЭлектронныхДокументов = КадровыйЭДОВызовСервера.ДанныеФайловПечатныхФорм(ЭлектронныеДокументы);
			
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				СтрокаТЗ.ДанныеЭлектронногоДокумента = ДанныеЭлектронныхДокументов[СтрокаТЗ.ЭлектронныйДокумент];
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПубликацияРасчетныхЛистков

Функция РезультатПубликацииРасчетныхЛистков(ДанныеДляПубликации, ПараметрыПубликации) Экспорт

	Результат = Новый Структура("БылиОшибки,НеОбработаны,КоличествоВыгружено", Ложь, Новый Массив, 0);
	
	ЗаписатьСобытиеНачалоПубликацииРЛ();
	
	КоличествоВыгружено = 0;
	Попытка
		
		ПараметрыОбмена = ПараметрыОбмена(ПараметрыПубликации.ВестиПротокол);
		
		ПроверитьВерсиюФорматаОбмена(ПараметрыОбмена);
		
		Для каждого ЭлементКоллекции Из ДанныеДляПубликации Цикл
			
			ПараметрыПубликации.Месяц = НачалоМесяца(ЭлементКоллекции.Ключ);
			ФизическиеЛицаОрганизаций = ЭлементКоллекции.Значение;
			
			Для каждого ФизическиеЛицаОрганизации Из ФизическиеЛицаОрганизаций Цикл
				
				ПараметрыПубликации.Организация = ФизическиеЛицаОрганизации.Ключ;
				ПараметрыПубликации.СписокФизическихЛиц = ФизическиеЛицаОрганизации.Значение;
				
				Ответ = РезультатВыгрузкиРасчетныхЛистков(ПараметрыОбмена, ПараметрыПубликации);
				Результат.БылиОшибки = Результат.БылиОшибки Или Ответ.БылиОшибки;
				КоличествоВыгружено = КоличествоВыгружено + Ответ.КоличествоВыгружено;
				
				Если ЗначениеЗаполнено(Ответ.НеОбработаны) Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.НеОбработаны, Ответ.НеОбработаны);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла;
		
	Исключение
		Результат.БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ЗаписатьСобытиеОкончаниеПубликацииРЛ(Результат.БылиОшибки, КоличествоВыгружено);
	
	Результат.КоличествоВыгружено = КоличествоВыгружено;
	
	Возврат Результат;

КонецФункции

Функция ПараметрыПубликацииРасчетныхЛистовПоУмолчанию() Экспорт
	
	ПараметрыПубликации = ПараметрыПубликацииРасчетныхЛистов();
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	ПараметрыПубликации.ВариантОтчета = Настройки.ВариантОтчетаРасчетныйЛисток;
	ПараметрыПубликации.ФормироватьРасчетныеЛистыОтдельнымЗапросом = Настройки.ФормироватьРасчетныеЛистыОтдельнымЗапросом;
	Возврат ПараметрыПубликации;
	
КонецФункции

Функция ПараметрыПубликацииРасчетныхЛистов() Экспорт

	ПараметрыПубликации = Новый Структура("
	|Организация,
	|Месяц,
	|ПерваяПоловинаМесяца,
	|СписокФизическихЛиц,
	|ПовторнаяПубликация,
	|ВестиПротокол,
	|ВариантОтчета,
	|ФормироватьРасчетныеЛистыОтдельнымЗапросом");
	
	ПараметрыПубликации.ПовторнаяПубликация 						= Ложь;
	ПараметрыПубликации.ВестиПротокол 								= Ложь;
	ПараметрыПубликации.ПерваяПоловинаМесяца 						= Ложь;
	ПараметрыПубликации.ФормироватьРасчетныеЛистыОтдельнымЗапросом 	= Ложь;
	
	Возврат ПараметрыПубликации;

КонецФункции

Функция РезультатВыгрузкиРасчетныхЛистков(ПараметрыОбмена, ПараметрыВыгрузки) 
	
	// КоличествоВыгружено - количество выгруженных данных,
	// БылиОшибки - признак наличия ошибок при выгрузке,
	// НеОбработаны - Массив - физические лица, по которым нет данных о зарплате.
	РезультатОбработки = Новый Структура("КоличествоВыгружено,БылиОшибки,НеОбработаны", 0, Ложь);
	
	Организация 			= ПараметрыВыгрузки.Организация;
	Месяц 					= НачалоМесяца(ПараметрыВыгрузки.Месяц);
	ПерваяПоловинаМесяца 	= ПараметрыВыгрузки.ПерваяПоловинаМесяца;
	СписокФизическихЛиц 	= ПараметрыВыгрузки.СписокФизическихЛиц;
	Данные = ДанныеРасчетныхЛистов(ПараметрыВыгрузки, ПараметрыОбмена.ВерсияФормата);
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Опубликовано = ОпубликоватьСоставныеЧастиЗарплаты(ПараметрыОбмена, Данные.СоставныеЧастиЗарплаты);
	Если Не Опубликовано Тогда
		РезультатОбработки.БылиОшибки = Истина;
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ПубликоватьДокументыНаПодпись = КабинетСотрудника.ИспользоватьФормат303();
	ИспользоватьФормат503 = КабинетСотрудника.ИспользоватьФормат503();
	
	// Расширение файла расчетного листка.
	РасширениеФайла = "pdf";
	
	// Соответствие с именами файлов расчетных листков
	// Ключ - Физическое лицо
	// Значение - Строка - сформированное имя файла.
	ФизическиеЛицаИменаФайлов = ФизическиеЛицаИменаФайловРЛ(СписокФизическихЛиц, Месяц, ПерваяПоловинаМесяца);
	
	// Соответствие с существующими документами КЭДО
	// Ключ - ФизическоеЛицо,
	// Значение - ДокументКЭДО.
	ДокументыКЭДО = ДокументыКЭДОРасчетныхЛистков(Организация, Месяц, СписокФизическихЛиц, ПерваяПоловинаМесяца);
	
	ДокументыНаПодписьКПубликации 	= Новый Массив;
	РасчетныеЛисткиКПубликации 		= Новый Массив;
	
	ФизическиеЛицаДокументыКЭДО 	= Новый Соответствие;
	ИдентификаторыДокументов 		= Новый Соответствие;
	
	ДокументыКЭДОПрежниеФайлы = Новый Соответствие;
	
	// Ключ - Строка - идентификатор документа КЭДО
	// Значение - Структура - ОбъектИнформацияОЗарплате 
	ИдентификаторДокументаРасчетныйЛисток 	= Новый Соответствие;
	
	НеОбработаны = Новый Массив;
	
	ОписаниеОбъектаЭлектронныйДокумент = ОписаниеОбъектаЭлектронныйДокумент(ПараметрыОбмена.ВерсияФормата);
	ОписаниеОбъектаДокументНаПодпись = ОписаниеОбъектаДокументНаПодпись(ПараметрыОбмена.ВерсияФормата);
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
	
		ОбъектИнформацияОЗарплате = Данные.ИнформацияОЗарплате[ФизическоеЛицо];
		Если ОбъектИнформацияОЗарплате = Неопределено Тогда
			НеОбработаны.Добавить(ФизическоеЛицо);
			Продолжить;
		КонецЕсли;
		
		РасчетныйЛистДокумент = Данные.РасчетныеЛистыДокументы.Получить(ФизическоеЛицо);
		Если РасчетныйЛистДокумент = Неопределено Тогда
			НеОбработаны.Добавить(ФизическоеЛицо);
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ДокументКЭДООбъект 	= Неопределено;
			ДокументКЭДОФайл 	= Неопределено;
			ДокументКЭДОСсылка = ДокументыКЭДО[ФизическоеЛицо];
			Если ДокументКЭДОСсылка <> Неопределено Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ДокументКадровогоЭДО");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументКЭДОСсылка);
				Блокировка.Заблокировать();
				
				ДокументКЭДООбъект = ДокументКЭДОСсылка.ПолучитьОбъект();
				ДокументКЭДОФайл   = ДокументКЭДООбъект.ЭлектронныйДокумент;
				
			Иначе
				
				ДокументКЭДОСсылка = Документы.ДокументКадровогоЭДО.ПолучитьСсылку();
				ДокументКЭДООбъект = НовыйДокументКЭДО(ДокументКЭДОСсылка, Организация, ФизическоеЛицо);
				
			КонецЕсли;
			
			ИмяФайла = ФизическиеЛицаИменаФайлов[ФизическоеЛицо];
			ДанныеФайлаРЛ = ДанныеФайлаРасчетногоЛистка(Организация, ФизическоеЛицо, ДокументКЭДОСсылка, РасчетныйЛистДокумент, ИмяФайла, РасширениеФайла);
			ФайлРасчетногоЛистка = ДанныеФайлаРЛ.ФайлРасчетногоЛистка;
			
			// публикация файла в сервисе
			ИдентификаторФайла = ОпубликоватьПрисоединенныйФайл(ПараметрыОбмена, ФайлРасчетногоЛистка, РасширениеФайла);
			Если ИдентификаторФайла = Неопределено Тогда
				ОтменитьТранзакцию();
				ОписаниеОшибки = НСтр("ru = 'Ошибка публикации файла расчетного листка.'");
				ЗаписатьОшибкуВыгрузкиИзменений(ФизическоеЛицо, ОписаниеОшибки);
				РезультатОбработки.БылиОшибки = Истина;
				Продолжить;
			КонецЕсли;
			
			// запоминаем "старый" файл
			Если ЗначениеЗаполнено(ДокументКЭДОФайл) Тогда
				ФайлыДокумента = Новый Структура("СтарыйФайл,НовыйФайл", ДокументКЭДОФайл, ФайлРасчетногоЛистка);
				ДокументыКЭДОПрежниеФайлы.Вставить(ДокументКЭДОСсылка, ФайлыДокумента);
			КонецЕсли;
			
			// обновим ссылку на файл - ЭлектронныйДокумент
			ДокументКЭДООбъект.ЭлектронныйДокумент = ФайлРасчетногоЛистка;
			ДокументКЭДООбъект.Записать();
			
			ИдентификаторыДокументов.Вставить(ДокументКЭДООбъект.ИдентификаторДокумента, ДокументКЭДОСсылка);
			ФизическиеЛицаДокументыКЭДО.Вставить(ФизическоеЛицо, ДокументКЭДОСсылка);
			
			Если ПубликоватьДокументыНаПодпись Тогда
				
				ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДанныеФайлаРЛ.ДвоичныеДанные);
				ОбъектФайл = ОбъектСервисаФайл(ИдентификаторФайла, ИмяФайла, РасширениеФайла, ДанныеФайлаРЛ.РазмерФайла, ПараметрыОбмена.ВерсияФормата, ВерсияФайла);
				
				ОписаниеЭлектронныйДокумент = ОписаниеОбъекта(ОписаниеОбъектаЭлектронныйДокумент);
				ОписаниеЭлектронныйДокумент.ИсходныйДокумент = ОбъектФайл;
				ОбъектЭлектронныйДокумент = ОбъектСервисаПоОписанию(ОписаниеЭлектронныйДокумент, ОписаниеОбъектаЭлектронныйДокумент);
				
				ОписаниеДокументНаПодпись = ОписаниеОбъекта(ОписаниеОбъектаДокументНаПодпись);
				ОписаниеДокументНаПодпись.ИдентификаторДокумента			= ДокументКЭДООбъект.ИдентификаторДокумента;
				ОписаниеДокументНаПодпись.Организация						= Организация;
				ОписаниеДокументНаПодпись.ФизическиеЛица					= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
				ОписаниеДокументНаПодпись.Дата								= ТекущаяДатаСеанса();
				ОписаниеДокументНаПодпись.НазваниеДокумента					= ИмяФайла;
				ОписаниеДокументНаПодпись.ЭлектронныйДокумент				= ОбъектЭлектронныйДокумент;
				Если ИспользоватьФормат503 Тогда
					ОписаниеДокументНаПодпись.ВозможноОбновлениеПредставлений = Истина;
				КонецЕсли;
				ОбъектДокументНаПодпись = ОбъектСервисаПоОписанию(ОписаниеДокументНаПодпись, ОписаниеОбъектаДокументНаПодпись);
				
				ДокументыНаПодписьКПубликации.Добавить(ОбъектДокументНаПодпись);
				
				// дозаполнение объекта ОбъектИнформацияОЗарплате
				ОписаниеДокументНаПодпись = ОписаниеОбъекта(ОписаниеОбъектаДокументНаПодпись);
				ОписаниеДокументНаПодпись.ИдентификаторДокумента = ДокументКЭДООбъект.ИдентификаторДокумента;
				ОбъектДокументНаПодпись = ОбъектСервисаПоОписанию(ОписаниеДокументНаПодпись, ОписаниеОбъектаДокументНаПодпись);
				ОбъектИнформацияОЗарплате.documentsToBeSigned = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектДокументНаПодпись);
				
				ИдентификаторДокументаРасчетныйЛисток.Вставить(ДокументКЭДООбъект.ИдентификаторДокумента, ОбъектИнформацияОЗарплате);
				
			Иначе
				
				ОбъектФайл = Новый Структура;
				ОбъектФайл.Вставить("fileID", 		ИдентификаторФайла);
				ОбъектФайл.Вставить("name", 		СтрШаблон("%1.%2", ИмяФайла, РасширениеФайла));
				ОбъектФайл.Вставить("extension", 	РасширениеФайла);
				ОбъектИнформацияОЗарплате.Вставить("attachment", ОбъектФайл);
				
				РасчетныеЛисткиКПубликации.Добавить(ОбъектИнформацияОЗарплате);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОписаниеИзменений = НСтр("ru = 'Расчетные листки'");
			ЗаписатьОшибкуПриВыгрузкеИзменений(ОписаниеИзменений, ОписаниеОшибки());
			РезультатОбработки.БылиОшибки = Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатОбработки.НеОбработаны = НеОбработаны;
	
	ОпубликованныеДокументы = Новый Соответствие;
	ОпубликованныеФизическиеЛица = Новый Соответствие;
	
	Если ДокументыНаПодписьКПубликации.Количество() > 0 Тогда
		
		РесурсСервиса = РесурсДокументыНаПодпись();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыОбмена,
				РесурсСервиса,
				ДокументыНаПодписьКПубликации,
				"ID");
		
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		// Добавим в РасчетныеЛисткиКПубликации данные по физическим лицам,
		// для которых выгружены документы на подпись.
		Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
			ОбъектИнформацияОЗарплате = ИдентификаторДокументаРасчетныйЛисток[ИдентификаторДокумента];
			РасчетныеЛисткиКПубликации.Добавить(ОбъектИнформацияОЗарплате);
			ОпубликованныеДокументы.Вставить(ИдентификаторыДокументов[ИдентификаторДокумента], Истина);
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(ИдентификаторыДокументов[Ошибка.Ключ], РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если РасчетныеЛисткиКПубликации.Количество() = 0 Тогда
		РезультатОбработки.КоличествоВыгружено = 0;
	Иначе
		
		РесурсСервиса = РесурсРасчетныеЛисты();
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
				ПараметрыОбмена,
				РесурсСервиса,
				РасчетныеЛисткиКПубликации,
				"personID",
				,
				30);
				
		РезультатОбработки.БылиОшибки = РезультатОбработки.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		РезультатОбработки.КоличествоВыгружено = РезультатВыгрузки.Выгружено.Количество();
		
		Для каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
			ОпубликованныеФизическиеЛица.Вставить(ФизическоеЛицо, Истина);
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаРЛ = Новый ТаблицаЗначений;
	ТаблицаРЛ.Колонки.Добавить("Организация");
	ТаблицаРЛ.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаРЛ.Колонки.Добавить("Месяц");
	ТаблицаРЛ.Колонки.Добавить("ПерваяПоловинаМесяца");
	ТаблицаРЛ.Колонки.Добавить("СостояниеПубликации");
	ТаблицаРЛ.Колонки.Добавить("ДатаПубликации");
	ТаблицаРЛ.Колонки.Добавить("ДокументКадровогоЭДО");
	ТаблицаРЛ.Колонки.Добавить("Ответственный");
	
	ПодписиДокументовКУдалению = Новый ТаблицаЗначений;
	ПодписиДокументовКУдалению.Колонки.Добавить("Объект");
	ПодписиДокументовКУдалению.Колонки.Добавить("ФизическоеЛицо");
	
	ДокументыВозвратФайлов = Новый ТаблицаЗначений;
	ДокументыВозвратФайлов.Колонки.Добавить("ДокументКадровогоЭДО");
	ДокументыВозвратФайлов.Колонки.Добавить("ЭлектронныйДокумент");
	
	ФайлыКУдалению = Новый ТаблицаЗначений;
	ФайлыКУдалению.Колонки.Добавить("Файл");
	
	ДатаПубликации = ТекущаяДатаСеанса();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для каждого ЭлементКоллекции Из ФизическиеЛицаДокументыКЭДО Цикл
	
		ФизическоеЛицо = ЭлементКоллекции.Ключ;
		ДокументКЭДО = ЭлементКоллекции.Значение;
		
		Если ОпубликованныеФизическиеЛица[ФизическоеЛицо] = Неопределено Тогда
			// не удалось опубликовать расчетный листок
			СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.ОшибкаОбработки;
		Иначе
			СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.Опубликован;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРЛ.Добавить();
		НоваяСтрока.Организация 			= Организация;
		НоваяСтрока.ФизическоеЛицо 			= ФизическоеЛицо;
		НоваяСтрока.Месяц 					= Месяц;
		НоваяСтрока.ПерваяПоловинаМесяца 	= ПерваяПоловинаМесяца;
		НоваяСтрока.СостояниеПубликации 	= СостояниеПубликации;
		НоваяСтрока.ДатаПубликации 			= ДатаПубликации;
		НоваяСтрока.ДокументКадровогоЭДО 	= ДокументКЭДО;
		НоваяСтрока.Ответственный 			= ТекущийПользователь;
		
		НоваяСтрока = ПодписиДокументовКУдалению.Добавить();
		НоваяСтрока.Объект 			= ДокументКЭДО;
		НоваяСтрока.ФизическоеЛицо 	= ФизическоеЛицо;
		
		ФайлыДокумента = ДокументыКЭДОПрежниеФайлы[ДокументКЭДО];
		Если ЗначениеЗаполнено(ФайлыДокумента) Тогда
			
			Если ОпубликованныеДокументы[ДокументКЭДО] = Неопределено Тогда
				
				Если ЗначениеЗаполнено(ФайлыДокумента.СтарыйФайл) Тогда
					// документ на подпись не опубликован, возвращаем прежний файл
					НоваяСтрока = ДокументыВозвратФайлов.Добавить();
					НоваяСтрока.ДокументКадровогоЭДО = ДокументКЭДО;
					НоваяСтрока.ЭлектронныйДокумент = ФайлыДокумента.СтарыйФайл;
					
					НоваяСтрока = ФайлыКУдалению.Добавить();
					НоваяСтрока.Файл = ФайлыДокумента.НовыйФайл;
				КонецЕсли;
				
			Иначе
				НоваяСтрока = ФайлыКУдалению.Добавить();
				НоваяСтрока.Файл = ФайлыДокумента.СтарыйФайл;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаРЛ;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Месяц", "Месяц");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПерваяПоловинаМесяца", "ПерваяПоловинаМесяца");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
		ЭлементБлокировки.ИсточникДанных = ПодписиДокументовКУдалению;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Объект");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДокументКадровогоЭДО");
		ЭлементБлокировки.ИсточникДанных = ДокументыВозвратФайлов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ДокументКадровогоЭДО");
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы");
		ЭлементБлокировки.ИсточникДанных = ФайлыКУдалению;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Файл");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаРЛ Цикл
			МенеджерЗаписи = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ПодписиДокументовКУдалению Цикл
			МенеджерЗаписи = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ДокументыВозвратФайлов Цикл
			ДокументОбъект = СтрокаТЗ.ДокументКадровогоЭДО.ПолучитьОбъект();
			ДокументОбъект.ЭлектронныйДокумент = СтрокаТЗ.ЭлектронныйДокумент;
			ДокументОбъект.Записать();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ФайлыКУдалению Цикл
			ФайлОбъект = СтрокаТЗ.Файл.ПолучитьОбъект();
			ФайлОбъект.ДополнительныеСвойства.Вставить("УдалениеПечатныхФорм");
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеИзменений = НСтр("ru = 'Расчетные листки'");
		ЗаписатьОшибкуПриВыгрузкеИзменений(ОписаниеИзменений, ОписаниеОшибки());
		РезультатОбработки.БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОпубликоватьСоставныеЧастиЗарплаты(ПараметрыОбмена, СоставныеЧастиЗарплаты)

	РесурсСервиса = РесурсСоставныеЧастиЗарплаты();
	РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
		ПараметрыОбмена,
		РесурсСервиса,
		СоставныеЧастиЗарплаты,
		"ID");
		
	Если РезультатВыгрузки.БылиОшибки Тогда
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Не РезультатВыгрузки.БылиОшибки;

КонецФункции

Функция ФизическиеЛицаИменаФайловРЛ(СписокФизическихЛиц, Месяц, ПерваяПоловинаМесяца)

	ФизическиеЛицаИменаФайлов = Новый Соответствие;
	
	Если ПерваяПоловинаМесяца Тогда
		ШаблонИмяФайла = НСтр("ru = '%1 Расчетный лист (аванс). %2'");
	Иначе
		ШаблонИмяФайла = НСтр("ru = '%1 Расчетный лист. %2'");
	КонецЕсли;
	ПериодСтрокой = Формат(Месяц, "ДФ='MMMM yyyy'");
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокФизическихЛиц, "Фамилия,Инициалы");
	
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		ФИО = СтрШаблон("%1 %2", РеквизитыОбъектов[ФизическоеЛицо]["Фамилия"], СтрЗаменить(РеквизитыОбъектов[ФизическоеЛицо]["Инициалы"]," ",""));
		ФизическиеЛицаИменаФайлов.Вставить(ФизическоеЛицо, СтрШаблон(ШаблонИмяФайла, ФИО, ПериодСтрокой));
	КонецЦикла;
	
	Возврат ФизическиеЛицаИменаФайлов;

КонецФункции

Функция ДанныеФайлаРасчетногоЛистка(Организация, ФизическоеЛицо, ДокументКЭДОСсылка, РасчетныйЛистДокумент, ИмяФайла, РасширениеФайлаPDF)
	
	// Создаем присоединенный файл расчетного листка
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.ВладелецФайлов 		= ДокументКЭДОСсылка;
	ПараметрыФайла.ИмяБезРасширения 	= ИмяФайла;
	ПараметрыФайла.РасширениеБезТочки 	= РасширениеФайлаPDF;
	ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	ПараметрыФайла.Служебный = Истина;
	
	Поток = Новый ПотокВПамяти();
	РасчетныйЛистДокумент.Записать(Поток, КадровыйЭДОВызовСервера.ТипФайлаЭлектронногоДокумента());
	ДвоичныеДанные =  Поток.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерФайла = ДвоичныеДанные.Размер();
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ФайлРасчетногоЛистка = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
	
	ДанныеПечатнойФормы = КадровыйЭДО.ДанныеПечатнойФормы();
	ДанныеПечатнойФормы.Владелец                   = ДокументКЭДОСсылка;
	ДанныеПечатнойФормы.Организация                = Организация;
	ДанныеПечатнойФормы.ФизическоеЛицо             = ФизическоеЛицо;
	ДанныеПечатнойФормы.ПечатнаяФорма              = РасчетныйЛистДокумент;
	ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = "РасчетныйЛисток";
	ДанныеПечатнойФормы.Название                   = ИмяФайла;
	ДанныеПечатнойФормы.ИмяФайла                   = ИмяФайла;
	ДанныеПечатнойФормы.ФайлОбъекта                = ФайлРасчетногоЛистка;
	РегистрыСведений.ПодписанныеПечатныеФормы.ДобавитьПечатнуюФорму(
			ДанныеПечатнойФормы, РасчетныйЛистДокумент, ТекущаяДатаСеанса());
			
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("ФайлРасчетногоЛистка", 	ФайлРасчетногоЛистка);
	ДанныеФайла.Вставить("ДвоичныеДанные", 			ДвоичныеДанные);
	ДанныеФайла.Вставить("РазмерФайла", 			РазмерФайла);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Получает существующие документы ДокументКадровогоЭДО расчетных листков.
//
// 	Параметры:
// 		Организация - СправочникСсылка.Организации
// 		Период - Дата - первое число месяца, период расчетных листков.
// 		ФизическиеЛица - Массив
// 		ПерваяПоловинаМесяца - Булево
//
// 	Возвращаемое значение:
// 		Соответствие
// 			* Ключ - СправочникСсылка.ФизическиеЛица
// 			* Значение - ДокументСсылка.ДокументКадровогоЭДО
//
Функция ДокументыКЭДОРасчетныхЛистков(Организация, Период, ФизическиеЛица, ПерваяПоловинаМесяца)

	ДокументыКЭДО = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ПерваяПоловинаМесяца", ПерваяПоловинаМесяца);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО,
	|	РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛисткиКабинетСотрудника
	|ГДЕ
	|	РасчетныеЛисткиКабинетСотрудника.Организация = &Организация
	|	И РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо В(&ФизическиеЛица)
	|	И РасчетныеЛисткиКабинетСотрудника.Месяц = &Период
	|	И РасчетныеЛисткиКабинетСотрудника.ПерваяПоловинаМесяца = &ПерваяПоловинаМесяца
	|	И РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО <> ЗНАЧЕНИЕ(Документ.ДокументКадровогоЭДО.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыКЭДО.Вставить(Выборка.ФизическоеЛицо, Выборка.ДокументКадровогоЭДО);
	КонецЦикла;
	
	Возврат ДокументыКЭДО;

КонецФункции

Функция НовыйДокументКЭДО(СсылкаНового, Организация, ФизическоеЛицо)
	
	ОписаниеДокумента = Документы.ДокументКадровогоЭДО.СвойстваДокумента(
		Неопределено, Организация, ФизическоеЛицо,
		СсылкаНового, Перечисления.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток, Перечисления.СодержимоеДокументов.СодержитЗарплату);
		
	ОписаниеДокумента.ДополнительныеСвойства 	= Новый Структура("СсылкаНового", СсылкаНового);
	ОписаниеДокумента.Дата 						= ТекущаяДатаСеанса();
	ОписаниеДокумента.ИдентификаторДокумента 	= Строка(Новый УникальныйИдентификатор);
	
	ДокументОбъект = Документы.ДокументКадровогоЭДО.НовыйДокумент(ОписаниеДокумента);
	
	Возврат ДокументОбъект;

КонецФункции

// Выполняет публикацию присоединенного файла и возвращает идентификатор файла, полученный из сервиса.
// 	Параметры:
// 		ПараметрыОбмена - Структура - параметры подключения
// 		ПрисоединенныйФайл - Ссылка - ссылка на присоединенный файл
// 		Расширение - Строка - расширение файла
//
// 	Возвращаемое значение:
// 		Идентификатор файла - Строка
//
Функция ОпубликоватьПрисоединенныйФайл(ПараметрыОбмена, ПрисоединенныйФайл, Расширение)
	
	ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
	Возврат ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанные, Расширение);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НастройкиФункциональностиСервиса

Процедура ОбновитьНастройкиФункциональностиСервисаПриПодключении() Экспорт

	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	Ответ = РезультатЗапросаВерсииФорматаОбмена(ПараметрыОбмена);
	
	Если Ответ.Использовать = Истина Тогда
		ВерсииФормата = Ответ.ВерсииФормата;
		Если ЗначениеЗаполнено(ВерсииФормата.ВерсияФормата) И ЗначениеЗаполнено(ВерсииФормата.ВерсияAPI) Тогда
			НоваяВерсияФормата 	= ПодобратьВерсию(ВерсииФормата.ВерсияФормата, ВерсииФорматаОбмена());
			НоваяВерсияAPI 		= ПодобратьВерсию(ВерсииФормата.ВерсияAPI, ВерсииAPI());
			Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
			Настройки.ВерсияФормата = НоваяВерсияФормата;
			Настройки.ВерсияAPI 	= НоваяВерсияAPI;
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
			НаборЗаписей.Записать();
		КонецЕсли;
	Иначе
		ВерсияПриложения = Неопределено;
		ИнформацияОПриложении = ЗапросИнформацияОПриложении(ПараметрыОбмена);
		Если ИнформацияОПриложении <> Неопределено Тогда
			ВерсияПриложения = ИнформацияОПриложении.ВерсияПриложения;
		КонецЕсли;
		Если ВерсияПриложения = Неопределено И Не Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить() Тогда
			ВерсияПриложения = КабинетСотрудникаМенеджерСервиса.ВерсияПриложения(ПараметрыОбмена.ВестиПротокол);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВерсияПриложения) Тогда
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюПриложения(ВерсияПриложения);
		КонецЕсли
	КонецЕсли;
	
	ОбновитьНастройкиФункциональностиСервиса();

КонецПроцедуры

Процедура ПроверитьОбновитьНастройкиФункциональностиСервиса(ПараметрыОбмена)

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Настройки.ТребуетсяОбновитьНастройкиФункциональности Тогда
		ОбновитьНастройкиФункциональностиСервиса(ПараметрыОбмена);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьНастройкиФункциональностиСервиса(ПараметрыОбмена = Неопределено) Экспорт

	Если Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		ОбновитьНастройкиФункциональностиСервисаПоВерсииПриложения(ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбмена(Ложь);
	КонецЕсли;
	
	НастройкиФункциональности = КабинетСотрудника.НовыеНастройкиФункциональностиСервиса();
	
	ОбъектСервиса = Новый Соответствие;
	ОписаниеОбъекта = ОписаниеПолейОбъектаИспользуемаяФункциональность(ПараметрыОбмена.ВерсияФормата);
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ОбъектСервиса.Вставить(ЭлементКоллекции.Ключ, НастройкиФункциональности[ЭлементКоллекции.Значение]);
	КонецЦикла;
	
	НастройкиУстановлены = ОпубликоватьНастройкиФункциональностиСервиса(ПараметрыОбмена, ОбъектСервиса);
	Если НастройкиУстановлены Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция НовоеОписаниеНастроекФункциональностиСервиса(ВерсияФормата) Экспорт

	ОписаниеОбъекта = ОписаниеПолейОбъектаИспользуемаяФункциональность(ВерсияФормата);
	
	Описание = Новый Структура;
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		Описание.Вставить(ЭлементКоллекции.Значение, Истина);
	КонецЦикла;
	
	Возврат Описание;

КонецФункции

Функция ОпубликоватьНастройкиФункциональностиСервиса(ПараметрыОбмена, ОбъектСервиса)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОбъектСервиса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = РесурсИспользуемыеФункции();
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "PUT", СтрокаТела));
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#Область НастройкиФункциональностиСервисаПоВерсииПриложения

Процедура ОбновитьНастройкиФункциональностиСервисаПоВерсииПриложения(ПараметрыОбмена)

	Если Не КабинетСотрудника.ИспользоватьФормат301() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбмена(Ложь);
	КонецЕсли;
	
	ТекущиеНастройки = ЗапросТекущиеНастройкиФункциональностиСервиса(ПараметрыОбмена);
	Если Не ЗначениеЗаполнено(ТекущиеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НовыеНастройки = КабинетСотрудника.ДоступнаяФункциональностьСервисаПоВерсииПриложения();
	
	ТребуетсяОбновление = Ложь;
	Для каждого ЭлементКоллекции Из ТекущиеНастройки Цикл
		Если НовыеНастройки[ЭлементКоллекции.Ключ] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементКоллекции.Значение <> НовыеНастройки[ЭлементКоллекции.Ключ] Тогда
			ТребуетсяОбновление = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяОбновление Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеНастройки, НовыеНастройки);
		НастройкиУстановлены = ЗапросУстановитьНастройкиФункциональностиСервиса(ПараметрыОбмена, ТекущиеНастройки);
		Если НастройкиУстановлены Тогда
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Ложь);
		КонецЕсли;
	Иначе
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Ложь);
	КонецЕсли;

КонецПроцедуры

Функция ЗапросТекущиеНастройкиФункциональностиСервиса(ПараметрыОбмена)

	НастройкиФункциональности = Неопределено;
	
	РесурсСервиса = РесурсИспользуемыеФункции();
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "GET"));
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			НастройкиФункциональности = НастройкиФункциональностиСервисаПоОтветуНаЗапрос(ОбъектОтвета);
		Исключение
			КабинетСотрудника.ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Возврат НастройкиФункциональности;

КонецФункции

Функция ЗапросУстановитьНастройкиФункциональностиСервиса(ПараметрыОбмена, Настройки)

	Результат = Новый Структура("СообщениеОбОшибке");
	
	ОбъектСервиса = ОбъектСервисаНастройкиФункциональности(Настройки);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОбъектСервиса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = РесурсИспользуемыеФункции();
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "PUT", СтрокаТела));
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ОбъектСервисаНастройкиФункциональности(НастройкиФункциональности)

	ОбъектСервиса = Новый Соответствие;
	ОписаниеОбъекта = ОписаниеПолейОбъектаИспользуемаяФункциональность("");
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		Если НастройкиФункциональности.Свойство(ЭлементКоллекции.Значение) Тогда
			ОбъектСервиса.Вставить(ЭлементКоллекции.Ключ, НастройкиФункциональности[ЭлементКоллекции.Значение]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектСервиса;

КонецФункции

Функция НастройкиФункциональностиСервисаПоОтветуНаЗапрос(ОбъектСервиса)
	
	ОписаниеОбъекта = ОписаниеПолейОбъектаИспользуемаяФункциональность("");
	Описание = Новый Структура;
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		Если ОбъектСервиса[ЭлементКоллекции.Ключ] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Описание.Вставить(ЭлементКоллекции.Значение, ОбъектСервиса[ЭлементКоллекции.Ключ]);
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция НовоеОписаниеИспользуемыеФункции() Экспорт
	
	ОписаниеОбъекта = ОписаниеПолейОбъектаИспользуемаяФункциональность("");
	
	Описание = Новый Структура;
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		Описание.Вставить(ЭлементКоллекции.Значение, Ложь);
	КонецЦикла;
	
	Возврат Описание;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область НастройкиЗаявокНаОтпуск

Процедура ОпубликоватьНастройкиЗаявокНаОтпуск(ПараметрыОбмена)

	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.НастройкиЗаявокНаОтпуск();
	Если Не Настройки.ОбновитьНастройкиВСервисе Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновлены = ЗапросОбновитьНастройкиЗаявокНаОтпуск(ПараметрыОбмена, Настройки);
	Если НастройкиОбновлены Тогда
		// Проверка, что настройки не изменились за время публикации.
		ТекущиеНастройки = РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.НастройкиЗаявокНаОтпуск();
		Если ОбщегоНазначения.КоллекцииИдентичны(Настройки, ТекущиеНастройки) Тогда
			Настройки.ОбновитьНастройкиВСервисе = Ложь;
			КабинетСотрудника.СохранитьНастройкиЗаявокНаОтпуск(Настройки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ЗапросОбновитьНастройкиЗаявокНаОтпуск(ПараметрыОбмена, Настройки)

	ОбъектСервиса = ОбъектСервисаНастройкиЗаявокНаОтпуск(Настройки, ПараметрыОбмена.ВерсияФормата);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОбъектСервиса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = РесурсНастройкиОтпусков();
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "PUT", СтрокаТела));
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ОбъектСервисаНастройкиЗаявокНаОтпуск(Настройки, ВерсияФормата)

	ОбъектСервиса = Новый Соответствие;
	ОписаниеОбъекта = ОписаниеПолейОбъектаНастройкиЗаявокНаОтпуск(ВерсияФормата);
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ОбъектСервиса.Вставить(ЭлементКоллекции.Ключ, Настройки[ЭлементКоллекции.Значение]);
	КонецЦикла;
	
	Возврат ОбъектСервиса;

КонецФункции

#КонецОбласти

#Область РаботаСКабинетами

Функция ИдентификаторыАктивныхФизическихЛиц() Экспорт

	РесурсСервиса = РесурсФизическиеЛицаАктивные();
	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	Возврат ЗапросИдентификаторыФизическихЛиц(ПараметрыОбмена, РесурсСервиса);

КонецФункции

Функция ДеактивироватьФизическихЛиц(ФизическиеЛица) Экспорт

	РесурсСервиса = РесурсФизическиеЛицаНеактивные();
	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, ФизическиеЛица);
	Возврат Не Результат.БылиОшибки;

КонецФункции

Функция ИдентификаторыОпубликованныхФизическихЛиц(ПараметрыОбмена = Неопределено) Экспорт

	ПубликуемыеФизическиеЛица = Неопределено;
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбмена(Ложь);
	КонецЕсли;
	
	РесурсСервиса = РесурсФизическиеЛицаАктивные();
	Идентификаторы = ЗапросИдентификаторыФизическихЛиц(ПараметрыОбмена, РесурсСервиса);
	Если Идентификаторы = Неопределено Тогда
		Возврат ПубликуемыеФизическиеЛица;
	КонецЕсли;
	
	РесурсСервиса = РесурсФизическиеЛицаНеактивные();
	ИдентификаторыНеактивных = ЗапросИдентификаторыФизическихЛиц(ПараметрыОбмена, РесурсСервиса);
	Если ИдентификаторыНеактивных = Неопределено Тогда
		Возврат ПубликуемыеФизическиеЛица;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Идентификаторы, ИдентификаторыНеактивных);
	
	Возврат Идентификаторы;

КонецФункции

Функция ЗапросИдентификаторыФизическихЛиц(ПараметрыОбмена, РесурсСервиса)
	
	Идентификаторы = Неопределено;
	
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "GET"));
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			Идентификаторы = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			КабинетСотрудника.ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат Идентификаторы;
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеОбсуждений

Функция ОбновитьНастройкиСистемыВзаимодействия(ПользовательСВ, ИдентификаторОбсужденияСВ) Экспорт

	Результат = Новый Структура("СообщениеОбОшибке");
	
	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	ОписаниеПолей = ОписаниеПолейНастройкиСистемыВзаимодействия(ПараметрыОбмена.ВерсияФормата);
	
	ОписаниеОбъекта = НовоеОписаниеОбъекта(ОписаниеПолей);
	ОписаниеОбъекта.ИдентификаторПользователяСВ = Строка(ПользовательСВ.Идентификатор);
	ОписаниеОбъекта.ИмяПользователяСВ 			= ПользовательСВ.Имя;
	ОписаниеОбъекта.ИдентификаторОбсужденияСВ 	= ИдентификаторОбсужденияСВ;
	
	ОбъектСервиса = ОбъектСервисаПоОписаниюПолей(ОписаниеОбъекта, ОписаниеПолей);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОбъектСервиса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = РесурсСистемаВзаимодействияНастройки();
	
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "PUT", СтрокаТела));
	
	Если Ответ = Неопределено Или Ответ.КодСостояния <> 200 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru='Ошибка связи с сервисом 1С:Кабинет сотрудника.'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПриложениеСистемыВзаимодействия() Экспорт

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке", Новый Структура("Идентификатор,Имя"));
		
	РесурсСервиса = РесурсСистемаВзаимодействияПриложение();
	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	ПараметрыЗапроса = ПараметрыЗапроса(РесурсСервиса, "GET");
	ПараметрыЗапроса.РазрешенныйКодОтвета = 404;
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса);
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Описание = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ОписаниеПриложения.Идентификатор = Описание["ID"];
		Результат.ОписаниеПриложения.Имя = Описание["name"];
	ИначеЕсли Ответ <> Неопределено И Ответ.КодСостояния = 404 Тогда
		// приложение еще не подключено к системе взаимодействия
	Иначе
		СообщениеОбОшибке = НСтр("ru='Не удалось получить настройки приложения для совместного использования.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, КабинетСотрудника.ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСЛокальнымСервисом

Функция ИнформацияЛокальногоПриложения() Экспорт

	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	Возврат ЗапросИнформацияОПриложении(ПараметрыОбмена);

КонецФункции

Функция ВерсииФорматаЛокальногоПриложения() Экспорт

	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	Возврат РезультатЗапросаВерсииФорматаОбмена(ПараметрыОбмена);

КонецФункции

Функция УстановитьАдресЛокальногоПриложения(АдресПриложения) Экспорт

	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	
	ОписаниеПолей = ОписаниеПолейНастройкиПриложения(ПараметрыОбмена.ВерсияФормата);
	ОписаниеОбъекта = НовоеОписаниеОбъекта(ОписаниеПолей);
	ОписаниеОбъекта.АдресПриложения = АдресПриложения;
	
	ОбъектСервиса = ОбъектСервисаПоОписаниюПолей(ОписаниеОбъекта, ОписаниеПолей);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОбъектСервиса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = РесурсНастройкиПриложения();
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "PUT", СтрокаТела));
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция УстановитьАдминистратораЛокальногоПриложения(ОписаниеАдминистратора) Экспорт

	Результат = Новый Структура("СсылкаДляАдминистратора,БылиОшибки",,Ложь);
	
	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	
	ОписаниеПолей = ОписаниеВнешнееФизическоеЛицо(ПараметрыОбмена.ВерсияФормата);
	ОписаниеОбъекта = НовоеОписаниеОбъекта(ОписаниеПолей);
	ОписаниеОбъекта.ФизическоеЛицо = ОписаниеАдминистратора.ФизическоеЛицо;
	
	ОбъектСервиса = ОбъектСервисаПоОписаниюПолей(ОписаниеОбъекта, ОписаниеПолей);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОбъектСервиса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	
	РесурсСервиса = РесурсАдминистратор();
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "POST", СтрокаТела));
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			Результат.СсылкаДляАдминистратора = ОбъектОтвета["logonUrl"];
		Исключение
			КабинетСотрудника.ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Результат.БылиОшибки = Истина;
		КонецПопытки;
	Иначе
		Результат.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ВерсионированиеAPI

Процедура ПроверитьВерсиюФорматаОбмена(ПараметрыОбмена)
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	
	Ответ = РезультатЗапросаВерсииФорматаОбмена(ПараметрыОбмена);
	Если Ответ.Использовать = Неопределено Тогда
		// не получен ответ сервера
		Если Не ЗначениеЗаполнено(Настройки.ВерсияAPI) Тогда
			// версии обмена не используются
			ПроверитьВерсиюПриложения(ПараметрыОбмена);
		КонецЕсли;
	ИначеЕсли Ответ.Использовать Тогда  
		Если Не ЗначениеЗаполнено(Ответ.ВерсииФормата) Тогда
			// ошибка получения версий
			Если Не ЗначениеЗаполнено(Настройки.ВерсияAPI) Тогда
				// версии обмена еще не используются, проверим версию приложения
				ПроверитьВерсиюПриложения(ПараметрыОбмена);
			КонецЕсли;
		Иначе
			УстановитьВерсиюФорматаОбмена(ПараметрыОбмена, Ответ.ВерсииФормата, Настройки);
		КонецЕсли;
	Иначе
		// версии обмена не используются
		ПроверитьВерсиюПриложения(ПараметрыОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВерсиюФорматаОбмена(ПараметрыОбмена, НовыеВерсии, ТекущиеВерсии)

	Если НовыеВерсии.ВерсияФормата <> ТекущиеВерсии.ВерсияФормата Тогда
		НоваяВерсия = ПодобратьВерсию(НовыеВерсии.ВерсияФормата, ВерсииФорматаОбмена());
		Если НоваяВерсия <> ТекущиеВерсии.ВерсияФормата Тогда
			ПараметрыОбмена.ВерсияФормата = НоваяВерсия;
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюФормата(НоваяВерсия);
			КабинетСотрудника.ВыполнитьДействияПриПереходеНаВерсиюФормата(ТекущиеВерсии.ВерсияФормата, НоваяВерсия);
		КонецЕсли;
	КонецЕсли;
	
	Если НовыеВерсии.ВерсияAPI <> ТекущиеВерсии.ВерсияAPI Тогда
		НоваяВерсия = ПодобратьВерсию(НовыеВерсии.ВерсияAPI, ВерсииAPI());
		Если НоваяВерсия <> ТекущиеВерсии.ВерсияAPI Тогда
			ПараметрыОбмена.ВерсияAPI = НоваяВерсия;
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюAPI(НоваяВерсия);
			КабинетСотрудника.ВыполнитьДействияПриПереходеНаВерсиюAPI(ТекущиеВерсии.ВерсияAPI, НоваяВерсия);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция РезультатЗапросаВерсииФорматаОбмена(ПараметрыОбмена)

	Результат = Новый Структура("Использовать,ВерсииФормата");
	
	РесурсСервиса = РесурсВерсияAPI();
	Ответ = HTTPОтветСервисаЗапросБезВерсионирования(ПараметрыОбмена, РесурсСервиса, "GET", 404);
	Если Ответ = Неопределено Тогда
		// не удалось получить ответ сервера
	Иначе
		Если Ответ.КодСостояния = 404 Тогда
			Результат.Использовать = Ложь;
		ИначеЕсли Ответ.КодСостояния = 200 Тогда
			Результат.Использовать = Истина;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			Попытка
				ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
				Результат.ВерсииФормата = ОписаниеОбъектаИзОбъектаОтвета(ОбъектОтвета, ОписаниеПолейОбъектаВерсииФормата());
			Исключение
				КабинетСотрудника.ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПодобратьВерсию(ВерсияФормата, ВерсииФормата) Экспорт
	
	ДоступныеВерсии = Новый ТаблицаЗначений;
	ДоступныеВерсии.Колонки.Добавить("Версия");
	Для Каждого Версия Из ВерсииФормата Цикл
		ДоступныеВерсии.Добавить().Версия = Версия;
	КонецЦикла;
	ДоступныеВерсии.Сортировать("Версия Убыв");
	// устанавливаем минимальную версию
	ПодобраннаяВерсия = ДоступныеВерсии[ДоступныеВерсии.Количество()-1].Версия;
	
	Для каждого СтрокаТЗ Из ДоступныеВерсии Цикл
		Если КабинетСотрудника.СравнитьВерсии(ВерсияФормата, СтрокаТЗ.Версия) >= 0 Тогда
			ПодобраннаяВерсия = СтрокаТЗ.Версия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодобраннаяВерсия;
	
КонецФункции

Функция ВерсииФорматаОбмена() Экспорт

	Версии = Новый Массив;
	Версии.Добавить("1.0");
	Версии.Добавить("1.1");
	
	Возврат Версии;

КонецФункции

Функция ВерсииAPI()

	Версии = Новый Массив;
	Версии.Добавить("1.0");
	
	Возврат Версии;

КонецФункции

#КонецОбласти

#Область Прочие

Функция ПроверкаАвторизации() Экспорт

	Результат = Новый Структура("ТокенПолучен,НеактуальныеКлючи",Ложь,Ложь);
	
	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	Ответ = НовыйТокенАутентификации(ПараметрыОбмена);
	
	Результат.ТокенПолучен = ЗначениеЗаполнено(Ответ.Токен);
	Результат.НеактуальныеКлючи = Ответ.НеактуальныеКлючи;
	
	Возврат Результат;

КонецФункции

Процедура ПроверитьДоступностьАдресаПоИмени(ВестиПротокол) Экспорт

	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(НастройкиСервиса.АдресПриложенияПоИмени);
	
	ПараметрыОбмена = НовоеОписаниеПараметрыОбмена();
	ПараметрыОбмена.СтруктураАдреса = СтруктураАдреса;
	ПараметрыОбмена.Соединение 		= НовоеHTTPСоединение(СтруктураАдреса);
	ПараметрыОбмена.ВестиПротокол 	= ВестиПротокол Или Константы.РегистрироватьВЖурналеСобытийЗапросы.Получить();
	
	РесурсСервиса = РесурсПинг();
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "GET"));
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьАдресПриложенияПоИмениДоступен(Истина);
	КонецЕсли;

КонецПроцедуры

Функция ЗапросИнформацияОПриложении(ПараметрыОбмена)

	ИнформацияОПриложении = Неопределено;
	
	РесурсСервиса = РесурсИнформацияОПриложении();
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "GET"));
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			ИнформацияОПриложении = СтруктураИзОбъектаСервиса(ОбъектОтвета, ОписаниеОбъектаИнформацияОПриложении(ПараметрыОбмена.ВерсияФормата));
		Исключение
			КабинетСотрудника.ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИнформацияОПриложении;

КонецФункции

Функция ЗапросСостояниеДоступностиИнформационнойСистемы() Экспорт

	ИСДоступна = Неопределено;
	
	РесурсСервиса = РесурсДоступностьПриложения();
	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "GET"));
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			КабинетСотрудника.ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
			Возврат ИСДоступна;
		КонецПопытки;
		ОписаниеПолей = ОписаниеПолейДоступностьПриложения(ПараметрыОбмена.ВерсияФормата);
		ОписаниеОбъекта = ОписаниеОбъектаИзОбъектаОтвета(ОбъектОтвета, ОписаниеПолей);
		ИСДоступна = (ОписаниеОбъекта.СостояниеДоступности = "granted");
	КонецЕсли;
	
	Возврат ИСДоступна;

КонецФункции

Функция РезультатПубликацииФизическогоЛица(ФизическоеЛицо) Экспорт

	ПараметрыОбмена = ПараметрыОбмена(Ложь);
	РезультатВыгрузки = РезультатВыгрузкиФизическихЛиц(ПараметрыОбмена, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо));
	
	Возврат Не ЗначениеЗаполнено(РезультатВыгрузки.Выгружено);

КонецФункции

Функция ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанные, Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ОписаниеФайла = Новый Структура("ИмяФайла,Расширение",ИмяВременногоФайла,Расширение);
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсФайлы(), "POST",,ОписаниеФайла));
	УдалитьФайлы(ИмяВременногоФайла);
	Если Ответ = Неопределено Или Ответ.КодСостояния >= 300 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	Попытка
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		КабинетСотрудника.ЗаписатьОшибкуЧтенияJSON(Ответ.ПолучитьТелоКакСтроку(), ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектОтвета.Получить("fileID");
	
КонецФункции

Функция РезультатОзнакомленияСРасчетнымЛистком(ПараметрыОбмена, ФизическоеЛицо, Месяц) Экспорт
	
	РесурсСервиса = РесурсОзнакомлениеСРасчетнымЛистком();

	personID = Строка(ФизическоеЛицо.УникальныйИдентификатор());
	РесурсСервиса = СтрЗаменить(РесурсСервиса, "{personID}", personID);
	
	month = Формат(Месяц, "ДФ=yyyy-MM");
	РесурсСервиса = СтрЗаменить(РесурсСервиса, "{month}", month);
	
	Ответ = HTTPОтветСервиса(ПараметрыОбмена, ПараметрыЗапроса(РесурсСервиса, "GET"));
	
	Ознакомлен = Ложь;
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		Ознакомлен = Истина;
	КонецЕсли;
	
	Возврат Ознакомлен;
	
КонецФункции

// Получает хеш по алгоритму SHA256 и преобразовывает в HexСтроку.
//
// Возвращаемое значение:
// 	Строка
//
Функция ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанные)

	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(ДвоичныеДанные);
	
	Возврат ВРег(ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма));

КонецФункции

Процедура СохранитьЭлектроннуюПодписьРезультатаСогласования(ЭлектронныйДокумент, РезультатСогласования, Отпечаток = "")

	СтрокаРольПодписанта = КабинетСотрудника.СтрокаРольПодписантаДляЭП(РезультатСогласования.РольПодписанта);
	Если Не КабинетСотрудника.ЭтоПодписанСервиса(СтрокаРольПодписанта) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Подпись = Base64Значение(РезультатСогласования.ЭлектроннаяПодпись);
	
	Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(ЭлектронныйДокумент);
	ПодписиКУдалению = Новый Массив;
	Для каждого СвойстваПодписи Из Подписи Цикл
		Если СвойстваПодписи.Подпись = Подпись Тогда
			ПодписиКУдалению.Добавить(СвойстваПодписи.ПорядковыйНомер);
		КонецЕсли;
	КонецЦикла;
	Если ПодписиКУдалению.Количество() > 0 Тогда
		ЭлектроннаяПодпись.УдалитьПодпись(ЭлектронныйДокумент, ПодписиКУдалению);
	КонецЕсли;
	
	Сертификат = Неопределено;
	Если ЗначениеЗаполнено(РезультатСогласования.СертификатЭП) Тогда
		Сертификат = Base64Значение(РезультатСогласования.СертификатЭП);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(Сертификат);
		Отпечаток = ПолучитьBase64СтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма);
	КонецЕсли;
	
	СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
	СвойстваПодписи.Вставить("Подпись", 			Подпись);
	СвойстваПодписи.Вставить("Сертификат", 			Сертификат);
	СвойстваПодписи.Вставить("Отпечаток", 			Отпечаток);
	СвойстваПодписи.Вставить("КомуВыданСертификат", РезультатСогласования.ИмяПодписанта);
	СвойстваПодписи.Вставить("Комментарий", 		СтрокаРольПодписанта);
	СвойстваПодписи.Вставить("ДатаПодписи", 		РезультатСогласования.ДатаПодписи);
	
	ЭлектроннаяПодпись.ДобавитьПодпись(ЭлектронныйДокумент, СвойстваПодписи);

КонецПроцедуры

Функция ИмяФайлаБезРасширения(ИмяФайла, Расширение)

	ИмяФайлаБезРасширения = ИмяФайла;
	Если СтрЗаканчиваетсяНа(СокрЛП(ВРег(ИмяФайла)), "." + ВРег(Расширение)) Тогда
		КоличествоСимволов = СтрДлина(ИмяФайла) - СтрДлина(Расширение) - 1;
		ИмяФайлаБезРасширения = Лев(ИмяФайла, КоличествоСимволов);
	КонецЕсли;
	
	Возврат ИмяФайлаБезРасширения;

КонецФункции

Функция ОбъектФайлПоПрисоединенномуФайлу(ПрисоединенныйФайл, ПараметрыОбмена) Экспорт
	
	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
	Исключение
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ИдентификаторФайла = ОпубликоватьДвоичныеДанныеФайла(ПараметрыОбмена, ДвоичныеДанныеФайла, ДанныеФайла.Расширение);
	Если ИдентификаторФайла = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка публикации файла.'");
		ЗаписатьОшибкуВыгрузкиИзменений(ПрисоединенныйФайл, ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ВерсияФайла = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанныеФайла);
	ИмяФайлаБезРасширения = ИмяФайлаБезРасширения(ДанныеФайла.ИмяФайла, ДанныеФайла.Расширение);
	
	Возврат ОбъектСервисаФайл(ИдентификаторФайла, ИмяФайлаБезРасширения, ДанныеФайла.Расширение, ДанныеФайла.Размер, ПараметрыОбмена.ВерсияФормата, ВерсияФайла);

КонецФункции

#Область УстаревшиеПрочие

Процедура ПроверитьВерсиюПриложения(ПараметрыОбмена)

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ПрежняяВерсия = Настройки.ВерсияПриложения;
	НоваяВерсия = Неопределено;
	
	ИнформацияОПриложении = ЗапросИнформацияОПриложении(ПараметрыОбмена);
	Если ИнформацияОПриложении <> Неопределено Тогда
		НоваяВерсия = ИнформацияОПриложении.ВерсияПриложения;
	КонецЕсли;
	
	Если НоваяВерсия = Неопределено И Не Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить() Тогда
		НоваяВерсия = КабинетСотрудникаМенеджерСервиса.ВерсияПриложения(ПараметрыОбмена.ВестиПротокол);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) Тогда
		ПараметрыОбмена.ВерсияПриложения = НоваяВерсия;
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюПриложения(НоваяВерсия);
		КабинетСотрудника.ВыполнитьДействияПриПереходеНаВерсию(ПрежняяВерсия, НоваяВерсия);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПреобразованиеВыгружаемыхОбъектов

Функция МассивИзТаблицы(ТаблицаДанных, ОписаниеПолей) Экспорт
	
	Результат = Новый Массив;
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		Результат.Добавить(СтруктураИзСтрокиТаблицы(СтрокаТаблицыДанных, ОписаниеПолей));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция СтруктураИзСтрокиТаблицы(СтрокаТаблицыДанных, ОписаниеПолей)
	
	Результат = Новый Структура;
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			Значение = СтруктураИзСтрокиТаблицы(СтрокаТаблицыДанных, ОписаниеПоля["ОписаниеПолей"]);
		ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
			Значение = ЗначениеПоИмениПоля(СтрокаТаблицыДанных, ОписаниеПоля["ИмяПоляКонфигурации"]);
			Если ЗначениеЗаполнено(Значение) Тогда
				Значение = МассивИзТаблицы(Значение, ОписаниеПоля["ОписаниеПолей"]);
			КонецЕсли;
		Иначе
			Значение = ЗначениеПоИмениПоля(СтрокаТаблицыДанных, ОписаниеПоля["ИмяПоляКонфигурации"]);
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение)
				Или ТипЗнч(Значение) = Тип("Число") Тогда
			Результат.Вставить(ОписаниеПоля["ИмяПоляСервиса"], Значение);
		ИначеЕсли ОписаниеПоля["ОбязательноеПоле"] Тогда
			Результат.Вставить(ОписаниеПоля["ИмяПоляСервиса"], "");
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ВыбираемыеПоля(СоответствиеПолей)
	
	ВыбираемыеПоля = Новый Массив;
	Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
		Поле = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(Поле) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Поле) = Тип("Соответствие") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыбираемыеПоля, ВыбираемыеПоля(Поле), Истина);
		ИначеЕсли ВыбираемыеПоля.Найти(Поле) = Неопределено Тогда
			ВыбираемыеПоля.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	Возврат ВыбираемыеПоля;
	
КонецФункции

Функция ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей) Экспорт
	
	МассивЭлементов = Новый Массив;
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		МассивЭлементов.Добавить(СтрокаТаблицыДанныхВСтруктуру(СтрокаТаблицыДанных, СоответствиеПолей));
	КонецЦикла;
	Возврат МассивЭлементов;
	
КонецФункции

Функция СтрокаТаблицыДанныхВСтруктуру(СтрокаТаблицыДанных, СоответствиеПолей)
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда
			Значение = СтрокаТаблицыДанныхВСтруктуру(СтрокаТаблицыДанных, КлючИЗначение.Значение);
		Иначе
			Значение = ЗначениеПоИмениПоля(СтрокаТаблицыДанных, КлючИЗначение.Значение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение) Тогда
			Результат.Вставить(КлючИЗначение.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ЗначениеПоИмениПоля(СтрокаТаблицыДанных, Поле)
	
	Если Не ЗначениеЗаполнено(Поле) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВладелецСтроки = СтрокаТаблицыДанных.Владелец();
	Если ВладелецСтроки.Колонки.Найти(Поле) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтрокаТаблицыДанных[Поле];
	
КонецФункции

#КонецОбласти

#КонецОбласти
