#Область ПрограммныйИнтерфейс

Функция РеквизитыМИДол() Экспорт
	
	// Реквизиты получателя единого налогового платежа едины для всех.
	// Поэтому зададим их в явном виде.
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка");
	Реквизиты.Вставить("Код", "9967");
	Реквизиты.Вставить("ИНН", "7727406020");
	Реквизиты.Вставить("КПП", "770801001");
	Реквизиты.Вставить("Наименование",
		НСтр("ru = 'МИ ФНС России по управлению долгом'"));
	Реквизиты.Вставить("ПолноеНаименование",
		НСтр("ru = 'Межрегиональная инспекция Федеральной налоговой службы по управлению долгом'"));
	
	Реквизиты.Вставить("ПлатежныеРеквизиты", ЗначенияРеквизитовЕдиногоНалоговогоСчета());
	
	Реквизиты.ПлатежныеРеквизиты.Вставить("Банк");
	Реквизиты.ПлатежныеРеквизиты.Вставить("БанковскийСчет");
	Реквизиты.ПлатежныеРеквизиты.Вставить("ПолучательПлатежа",
		НСтр("ru = 'УФК по Тульской области (Межрегиональная инспекция Федеральной налоговой службы по управлению долгом)'"));
	
	Возврат Реквизиты;
	
КонецФункции

Функция ЭтоРеквизитыЕдиногоНалоговогоСчета(ПлатежныеРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлатежныеРеквизиты) Или ТипЗнч(ПлатежныеРеквизиты) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЕНС = ЗначенияРеквизитовЕдиногоНалоговогоСчета();
	КлючиДляПроверки = Новый Структура("БИК, РасчетныйСчет, КоррСчет");
	
	Для Каждого КлючИЗначение Из КлючиДляПроверки Цикл
		Если Не ПлатежныеРеквизиты.Свойство(КлючИЗначение.Ключ)
			Или РеквизитыЕНС[КлючИЗначение.Ключ] <> ПлатежныеРеквизиты[КлючИЗначение.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//++ НЕ УТ

Функция ТекстЗапросаВтТипыНалоговВФонды(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяВременнойТаблицы = "ВтТипыНалоговВФонды";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПФРНакопительнаяЧасть) КАК ТипНалога,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная) КАК ВидСтрахования
	|ПОМЕСТИТЬ ВтТипыНалоговВФонды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПФРДополнительныйТарифЛЭ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииЛетчикам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПФРДополнительныйТарифШахтеры),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииШахтерам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПФРПоСуммарномуТарифу),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ФФОМС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ТФОМС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ФСС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ФССНС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗачетАвансаПоЕдиномуНалоговомуСчету(ПараметрыПроведения, МенеджерВременныхТаблиц = Неопределено, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчету(ПараметрыПроведения.ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаОстатковНаЕдиномНалоговомСчете = ТаблицаОстатковНаЕдиномНалоговомСчете(Реквизиты.Организация, Реквизиты.Период);
	
	РаспределитьВозвратыНалоговПоОплатам(ТаблицаОстатковНаЕдиномНалоговомСчете, Параметры.Реквизиты, Движения);
	
	РаспределитьОплатуПоОстаткамРасчетов(ТаблицаОстатковНаЕдиномНалоговомСчете, Параметры.Реквизиты, Движения, Отказ);
	
	ЗачетНалогов = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете.Выгрузить();
	
	Если ЗачетНалогов.Итог("Сумма") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Передача в БЗК
	
	Запрос = Новый Запрос();
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли; 
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("ЗачетНалогов", ЗачетНалогов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Регистратор КАК Ссылка,
	|	Т.Налог КАК ТипНалога,
	|	Т.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	Т.РегистрацияВНалоговомОргане КАК Субконто1,
	|	Т.РегистрацияВНалоговомОргане КАК Субконто2,
	|	Т.РегистрацияВНалоговомОргане КАК Субконто3,
	|	Т.Сумма КАК Сумма
	|ПОМЕСТИТЬ втУплатаНалогов
	|ИЗ
	|	&ЗачетНалогов КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ТипНалога";
	
	Запрос.Выполнить();
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗначенияРеквизитовЕдиногоНалоговогоСчета() Экспорт
	
	// Реквизиты единого налогового счета едины для всех.
	// Поэтому зададим их в явном виде.
	
	Реквизиты = Новый Структура();
	
	Реквизиты.Вставить("БИК",           "017003983");
	Реквизиты.Вставить("РасчетныйСчет", "03100643000000018500");
	Реквизиты.Вставить("КоррСчет",      "40102810445370000059");
	Реквизиты.Вставить("НаименованиеБанка",
		НСтр("ru = 'ОТДЕЛЕНИЕ ТУЛА БАНКА РОССИИ//УФК по Тульской области г. Тула'"));
	Реквизиты.Вставить("ТекстКорреспондента", "");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ОКТМОЕдиногоНалоговогоСчета() Экспорт
	
	Возврат ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
	
КонецФункции

//++ НЕ УТ

// Возвращает дату изменения алгоритма
// 
// Возвращаемое значение:
//	Дата - Дата смены алгоритма
//
Функция ДатаСменыАлгоритмаЗачетаУплат() Экспорт
	
	Возврат Дата(2022,09,09);
	
КонецФункции

// Возвращает версию используемого алгоритма
//
// Параметры:
//	Дата - Дата - Дата проведения зачета.
//	
// Возвращаемое значение:
//	Число - Версия алгоритма
//
Функция ВерсияАлгоритмаЗачетаУплат(Дата) Экспорт
	
	Если Дата <= ДатаСменыАлгоритмаЗачетаУплат() Тогда
		// Зачет с даты самого первого документа оплаты
		Возврат 1;
	Иначе
		// Зачет в обратной последовательности с даты ближайшего документа оплаты
		Возврат 2;
	КонецЕсли;
	
КонецФункции

Функция КППОКТМООрганизацииДляУплатыВБюджет(Знач Организация, ТипНалога, Период) Экспорт
	
	РеквизитыОрганизации = Новый Структура("КПП, ОКТМО");
	
	НалогиУплачиваемыеОтдельно = ПлатежиВБюджет.ТипыНалоговУплачиваемыеОтдельно();
	НалогУплачиваетсяОтдельно  = НалогиУплачиваемыеОтдельно.Найти(ТипНалога) <> Неопределено;
	ЭтоЕНП = ТипНалога = Перечисления.ТипыНалогов.ЕдиныйНалоговыйПлатеж;
	
	Если ЭтоЕНП Или Не НалогУплачиваетсяОтдельно Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, Период);
	РеквизитыОрганизации.КПП    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
	
	Если ЭтоЕНП И ПлатежиВБюджет.ИспользуетсяЕдиныйНалоговыйПлатеж(Организация, Период) Тогда
		РеквизитыОрганизации.ОКТМО = ОКТМОЕдиногоНалоговогоСчета();
	Иначе
		РеквизитыОрганизации.ОКТМО = Справочники.РегистрацииВНалоговомОргане.КодТерритории(
			РегистрацияВНалоговомОргане, "ОКТМО");
	КонецЕсли;
	
	Возврат РеквизитыОрганизации;
	
КонецФункции

// Возвращает таблицу остатков расчетов по единому налоговому счету по правилам НК.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация для получения остатков
//  Дата           - Дата - дата получения остатков.
//  ДокументСсылка - ДокументСсылка - если заполнен - остаток будет получен на момент времени документа
//	
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с платежными документами и суммами на дату
//
Функция ТаблицаОстатковНаЕдиномНалоговомСчете(Организация, Дата, ДокументСсылка = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СуммаОстаток = 0;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПериодОстатков = Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая);
	Иначе
		ПериодОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	КонецЕсли;
	
	Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации",    Организации);
	Запрос.УстановитьПараметр("ПериодОстатков", ПериодОстатков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(РасчетыПоЕдиномуНалоговомуСчетуОстатки.СуммаОстаток) КАК Сумма,
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистратора
	|ИЗ
	|	РегистрНакопления.РасчетыПоЕдиномуНалоговомуСчету.Остатки(&ПериодОстатков, Организация В (&Организации)) КАК РасчетыПоЕдиномуНалоговомуСчетуОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РасчетыПоЕдиномуНалоговомуСчетуОстатки.Организация = ДанныеПервичныхДокументов.Организация
	|			И РасчетыПоЕдиномуНалоговомуСчетуОстатки.ПлатежныйДокумент = ДанныеПервичныхДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоЕдиномуНалоговомуСчетуОстатки.ПлатежныйДокумент,
	|	ДанныеПервичныхДокументов.ДатаРегистратора
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистратора,
	|	ПлатежныйДокумент";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#Область ФормированиеДвиженийПоРегистрам

Процедура СформироватьДвиженияПоНалогамНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	НаборДвижений = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Активность = Истина;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоСанкциямНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	НаборДвижений = Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Активность = Истина;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗарегистрироватьЗачислениеНаЕдиныйНалоговыйСчет(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не ПлатежиВБюджет.ИспользуетсяЕдиныйНалоговыйПлатеж(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	
	СуммаЕдиногоНалоговогоПлатежа = 0;
	СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		Если СтрокаТаблицы.СчетДт = СчетУчета Тогда
			СуммаЕдиногоНалоговогоПлатежа = СуммаЕдиногоНалоговогоПлатежа + СтрокаТаблицы.СуммаРуб;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаЕдиногоНалоговогоПлатежа = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасчетов = Движения.РасчетыПоЕдиномуНалоговомуСчету.Выгрузить();
	НоваяСтрока = ТаблицаРасчетов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
	НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
	НоваяСтрока.Сумма               = СуммаЕдиногоНалоговогоПлатежа;
	НоваяСтрока.ВидДвижения         = ВидДвиженияНакопления.Приход;
	НоваяСтрока.ПлатежныйДокумент   = Реквизиты.Регистратор;
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаРасчетов, Движения, Отказ);
	
КонецПроцедуры

Процедура СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалоги)
		Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНалоги.Свернуть("ПлатежныйДокумент, ВидДвижения", "Сумма");
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	НаборДвижений = Движения.РасчетыПоЕдиномуНалоговомуСчету;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоги Цикл
		НоваяСтрока = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Активность  = Истина;
	КонецЦикла;
	
	НаборДвижений.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

Процедура РаспределениеСуммыОплатыПоСрокам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, СрокиУплаты, НаборДвиженийНалог)
	
	ОтборПоСрокам = Новый Структура("СрокУплаты");
	ОтборПоИзмерениям = Новый Структура("ГоловнаяОрганизация, Организация, РегистрацияВНалоговомОргане, КодПоОКТМО, Налог, КодБК, СчетУчета, СрокУплаты");
	
	Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
		Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
			ОтборПоСрокам.СрокУплаты = СтрокаТаблицы.СрокУплаты;
			ОстаткиПоДате = ОстаткиПоНалогам.Скопировать(ОтборПоСрокам);
			
			СуммаОстаток = ОстаткиПоДате.Итог("Сумма");
			СуммаПогашения = Мин(СтрокаТаблицыПлатежа.Сумма, СуммаОстаток);
			Если СуммаПогашения <> 0 Тогда
				
				Коэффициенты = ОстаткиПоДате.ВыгрузитьКолонку("Сумма");
				РаспределеннаяСумма = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаПогашения, Коэффициенты, 2);
				ОстаткиПоДате.ЗагрузитьКолонку(РаспределеннаяСумма, "Сумма");
				
				Для Каждого СтрокаТаблицыПоДате Из ОстаткиПоДате Цикл
					
					Если СтрокаТаблицыПоДате.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = НаборДвиженийНалог.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПоДате);
					
					ЗаполнитьЗначенияСвойств(ОтборПоИзмерениям, НоваяСтрока);
					СтрокиИсходнойТаблицы = ОстаткиПоНалогам.НайтиСтроки(ОтборПоИзмерениям);
					СтрокиИсходнойТаблицы[0].Сумма = СтрокиИсходнойТаблицы[0].Сумма - НоваяСтрока.Сумма;
					
					НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Расход;
					НоваяСтрока.ПлатежныйДокумент = СтрокаТаблицыПлатежа.ПлатежныйДокумент;
				КонецЦикла;
				
				СтрокаТаблицыПлатежа.Сумма = СтрокаТаблицыПлатежа.Сумма - СуммаПогашения;
				
			КонецЕсли;
			
			Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
				СтрокаТаблицыПлатежа.Сумма = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НаборДвиженийНалог.Записывать = Истина;
	
КонецПроцедуры

Процедура РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийНалог)
	
	ДатаСменыАлгоритмаЗачетаУплат = ДатаСменыАлгоритмаЗачетаУплат();
	ПереходныйПериод              = ВерсияАлгоритмаЗачетаУплат(НачалоМесяца(Реквизиты.Период)) = 1;
	
	ВременнаяТаблицаОстатков = ОстаткиПоНалогам.СкопироватьКолонки();
	ВременнаяТаблицаОплат    = СуммыЕдиногоНалоговогоПлатежа.СкопироватьКолонки();
	
	// Приоритет 1. Погашение недоимки (определяемой однозначно определенной по сроку платежа)
	СрокиУплаты = ОстаткиПоНалогам.Скопировать(Новый Структура("Недоимка", Истина), "СрокУплаты, Недоимка");
	СрокиУплаты.Свернуть("СрокУплаты, Недоимка", );
	СрокиУплаты.Сортировать("СрокУплаты");
	РаспределениеСуммыОплатыПоСрокам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, СрокиУплаты, НаборДвиженийНалог);
	
	// Приоритет 2. Погашение текущей задолженности или выявленной недоимки периода проведения
	ОстаткиПоТекущимНалогам = ОстаткиПоНалогам.Скопировать(Новый Структура("Недоимка", Ложь));
	Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
		// При условии, что есть что распределять
		Если ПереходныйПериод Тогда
			// Сначала обработаем налоги и платежи до даты изменения алгоритма - "по старому"
			ВременнаяТаблицаОстатков.Очистить();
			ВременнаяТаблицаОплат.Очистить();
			Для Каждого СтрокаТаблицыОстатков Из ОстаткиПоТекущимНалогам Цикл
				Если СтрокаТаблицыОстатков.СрокУплаты < ДатаСменыАлгоритмаЗачетаУплат Тогда
					ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОстатков.Добавить(), СтрокаТаблицыОстатков);
				КонецЕсли;
			КонецЦикла;
			Если ВременнаяТаблицаОстатков.Итог("Сумма") > 0 Тогда
				Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
					Если СтрокаТаблицыПлатежа.ДатаРегистратора < ДатаСменыАлгоритмаЗачетаУплат Тогда
						ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОплат.Добавить(), СтрокаТаблицыПлатежа);
					КонецЕсли;
				КонецЦикла;
				СрокиУплаты = ВременнаяТаблицаОстатков.Скопировать(Новый Структура("Недоимка", Ложь), "СрокУплаты, Недоимка");
				СрокиУплаты.Свернуть("СрокУплаты", );
				СрокиУплаты.Сортировать("СрокУплаты");
				РаспределениеСуммыОплатыПоСрокам(Реквизиты, ВременнаяТаблицаОплат, ВременнаяТаблицаОстатков, СрокиУплаты, НаборДвиженийНалог);
				
				// Учтем списанные суммы
				Для Каждого СтрокаТаблицыПлатежа Из ВременнаяТаблицаОплат Цикл
					ТекущаяСтрокаПлатежа = СуммыЕдиногоНалоговогоПлатежа.Найти(СтрокаТаблицыПлатежа.ПлатежныйДокумент, "ПлатежныйДокумент");
					Если ТекущаяСтрокаПлатежа <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаПлатежа, СтрокаТаблицыПлатежа);
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаТаблицыОстатков Из ВременнаяТаблицаОстатков Цикл
					ТекущаяСтрокаОстатков = ОстаткиПоТекущимНалогам.Найти(СтрокаТаблицыОстатков.НомерЗаписи, "НомерЗаписи");
					Если ТекущаяСтрокаОстатков <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаОстатков, СтрокаТаблицыОстатков);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОстаткиПоТекущимНалогам.Итог("Сумма") > 0 И СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
		// При условии, что есть что распределять и погашать
		
		// Принцип следующий:
		//   Перебираем таблицу остатков и ищем в таблице оплат суммы со сроками более ранними чем срок уплаты налога
		//   Если сумма остатка погашена не полностью (оперативная недоимка) переходим к перебору таблицы оплат со сроками более поздними чем срок уплаты налога
		
		// Сначала очистим таблицы от пустых записей, чтобы уменьшить количество итераций
		МассивСтрокКУдалению = ОстаткиПоТекущимНалогам.НайтиСтроки(Новый Структура("Сумма", 0));
		Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
			ОстаткиПоТекущимНалогам.Удалить(СтрокаМассива);
		КонецЦикла;
		МассивСтрокКУдалению = СуммыЕдиногоНалоговогоПлатежа.НайтиСтроки(Новый Структура("Сумма", 0));
		Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
			СуммыЕдиногоНалоговогоПлатежа.Удалить(СтрокаМассива);
		КонецЦикла;
		
		СрокиУплаты = ОстаткиПоТекущимНалогам.Скопировать(Новый Структура("Недоимка", Ложь), "СрокУплаты, Недоимка");
		СрокиУплаты.Свернуть("СрокУплаты", );
		СрокиУплаты.Сортировать("СрокУплаты");
		
		ОтборПоСрокам = Новый Структура("СрокУплаты");
		
		Для Каждого СтрокаТаблицы Из СрокиУплаты Цикл
			
			ОтборПоСрокам.СрокУплаты = СтрокаТаблицы.СрокУплаты;
			ВременнаяТаблицаОстатков = ОстаткиПоТекущимНалогам.Скопировать(ОтборПоСрокам);
			
			ВременнаяТаблицаОплат.Очистить();
			Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
				Если СтрокаТаблицыПлатежа.Сумма > 0 И НачалоДня(СтрокаТаблицыПлатежа.ДатаРегистратора) <= СтрокаТаблицы.СрокУплаты Тогда
					ЗаполнитьЗначенияСвойств(ВременнаяТаблицаОплат.Добавить(), СтрокаТаблицыПлатежа);
				КонецЕсли;
			КонецЦикла;
			ВременнаяТаблицаОплат.Сортировать("ДатаРегистратора Убыв");
			
			// Погасим задолженность уплатами, совершенными до наступления срока платежа
			СрокиУплатыВрем = ВременнаяТаблицаОстатков.Скопировать(, "СрокУплаты");
			СрокиУплатыВрем.Свернуть("СрокУплаты", );
			СрокиУплатыВрем.Сортировать("СрокУплаты");
			РаспределениеСуммыОплатыПоСрокам(Реквизиты, ВременнаяТаблицаОплат, ВременнаяТаблицаОстатков, СрокиУплатыВрем, НаборДвиженийНалог);
			
			// Учтем списанные суммы
			Для Каждого СтрокаТаблицыПлатежа Из ВременнаяТаблицаОплат Цикл
				ТекущаяСтрокаПлатежа = СуммыЕдиногоНалоговогоПлатежа.Найти(СтрокаТаблицыПлатежа.ПлатежныйДокумент, "ПлатежныйДокумент");
				Если ТекущаяСтрокаПлатежа <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ТекущаяСтрокаПлатежа, СтрокаТаблицыПлатежа);
				КонецЕсли;
			КонецЦикла;
			
			// Задолженность не погашена полностью: появилась оперативная недоимка - ее погашают документы уплаты после срока платежа
			Если ВременнаяТаблицаОстатков.Итог("Сумма") > 0 Тогда
				РаспределениеСуммыОплатыПоСрокам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ВременнаяТаблицаОстатков, СрокиУплатыВрем, НаборДвиженийНалог);
			КонецЕсли;
			
			Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
				// Очистим таблицу от пустых записей, чтобы уменьшить количество итераций
				МассивСтрокКУдалению = СуммыЕдиногоНалоговогоПлатежа.НайтиСтроки(Новый Структура("Сумма", 0));
				Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
					СуммыЕдиногоНалоговогоПлатежа.Удалить(СтрокаМассива);
				КонецЦикла;
			Иначе
				// Распределять больше нечего
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьПараметрыЗачетаАвансаПоЕдиномуНалоговомуСчету(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор,"       // <ДокументСсылка.*>
	+ "ВидОперации,"       // <ПеречислениеСсылка.ВидыРегламентныхОпераций>
	+ "ВыдаватьСообщения"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура РаспределитьОплатуПоОстаткамРасчетов(ТаблицаСуммыЕдиногоНалоговогоПлатежа, ТаблицаРеквизиты, Движения, Отказ)
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	// Основные параметры алгоритма
	ДатаСменыАлгоритмаЗачетаУплат            = ДатаСменыАлгоритмаЗачетаУплат();
	ВерсияАлгоритмаЗачетаУплат               = ВерсияАлгоритмаЗачетаУплат(Реквизиты.Период);
	ДействуетНоваяВерсияАлгоритмаЗачетаУплат = ВерсияАлгоритмаЗачетаУплат = 2;
	
	СуммыЕдиногоНалоговогоПлатежа = ТаблицаСуммыЕдиногоНалоговогоПлатежа.Скопировать();
	СуммыЕдиногоНалоговогоПлатежа.Сортировать("ДатаРегистратора Возр");
	
	НаборДвиженийНалог   = Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете;
	НаборДвиженийСанкции = Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	
	Если ЗначениеЗаполнено(Реквизиты.Регистратор) Тогда
		ПериодОстатков = Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая);
	Иначе
		ПериодОстатков = Новый Граница(КонецДня(Реквизиты.Период), ВидГраницы.Включая);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации",                   Организации);
	Запрос.УстановитьПараметр("ПериодОстатков",                ПериодОстатков);
	Запрос.УстановитьПараметр("ПредельныйСрокУплаты",          Реквизиты.Период);
	Запрос.УстановитьПараметр("ДатаСменыАлгоритмаЗачетаУплат", ДатаСменыАлгоритмаЗачетаУплат);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация КАК Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог КАК Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК КАК КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета КАК СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты КАК СрокУплаты,
	|	СУММА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток) КАК Сумма,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ДатаСменыАлгоритмаЗачетаУплат, ДЕНЬ)
	|			ТОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Недоимка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты, МЕСЯЦ) < НАЧАЛОПЕРИОДА(&ПредельныйСрокУплаты, МЕСЯЦ)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
	|ПОМЕСТИТЬ ВТ_ОстаткиПоНалогам
	|ИЗ
	|	РегистрНакопления.РасчетыПоНалогамНаЕдиномНалоговомСчете.Остатки(
	|			&ПериодОстатков,
	|			Организация В (&Организации)
	|				И СрокУплаты <= &ПредельныйСрокУплаты) КАК РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки
	|ГДЕ
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Налог,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СчетУчета,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.СрокУплаты,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодПоОКТМО,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.РегистрацияВНалоговомОргане,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.Организация,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.КодБК,
	|	РасчетыПоНалогамНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиПоНалогам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_ОстаткиПоНалогам.Организация КАК Организация,
	|	ВТ_ОстаткиПоНалогам.Налог КАК Налог,
	|	ВТ_ОстаткиПоНалогам.КодБК КАК КодБК,
	|	ВТ_ОстаткиПоНалогам.СчетУчета КАК СчетУчета,
	|	ВТ_ОстаткиПоНалогам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ОстаткиПоНалогам.КодПоОКТМО КАК КодПоОКТМО,
	|	ВТ_ОстаткиПоНалогам.СрокУплаты КАК СрокУплаты,
	|	ВТ_ОстаткиПоНалогам.Сумма КАК Сумма,
	|	ВТ_ОстаткиПоНалогам.Недоимка КАК Недоимка,
	|	ВТ_ОстаткиПоНалогам.Приоритет КАК Приоритет,
	|	ВТ_ОстаткиПоНалогам.НомерЗаписи КАК НомерЗаписи
	|ИЗ
	|	ВТ_ОстаткиПоНалогам КАК ВТ_ОстаткиПоНалогам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.Организация КАК Организация,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа КАК ВидПлатежа,
	|	СУММА(РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.СуммаОстаток) КАК Сумма,
	|	ВЫБОР
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|			ТОГДА 3
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|			ТОГДА 4
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|			ТОГДА 5
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрНакопления.РасчетыПоСанкциямНаЕдиномНалоговомСчете.Остатки(&ПериодОстатков, Организация В (&Организации)) КАК РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки
	|ГДЕ
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.Организация,
	|	ВЫБОР
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениАкт), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.ПениСам))
	|			ТОГДА 3
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Проценты))
	|			ТОГДА 4
	|		КОГДА РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Штраф))
	|			ТОГДА 5
	|	КОНЕЦ,
	|	РасчетыПоСанкциямНаЕдиномНалоговомСчетеОстатки.ГоловнаяОрганизация";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ОстаткиПоНалогам  = Результат[1].Выгрузить();
	ОстаткиПоСанкциям = Результат[2].Выгрузить();
	
	// Приоритеты 1 и 2. Погашение недоимки и текущих платежей
	ОстаткиПоНалогам.Индексы.Добавить("СрокУплаты");
	
	Если Не ДействуетНоваяВерсияАлгоритмаЗачетаУплат Тогда
		// Приоритеты 1 и 2. Погашение недоимки и текущих платежей
		СрокиУплаты = ОстаткиПоНалогам.Скопировать(, "СрокУплаты");
		СрокиУплаты.Свернуть("СрокУплаты", );
		СрокиУплаты.Сортировать("СрокУплаты");
		РаспределениеСуммыОплатыПоСрокам(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, СрокиУплаты, НаборДвиженийНалог)
	Иначе
		РаспределениеСуммыОплатыПоСрокамИПриоритетамПогашения(Реквизиты, СуммыЕдиногоНалоговогоПлатежа, ОстаткиПоНалогам, НаборДвиженийНалог)
	КонецЕсли;
	
	// Приоритет 3. Погашение пеней
	// Приоритет 4. Погашение процентов
	// Приоритет 5. Погашение штрафов
	Если СуммыЕдиногоНалоговогоПлатежа.Итог("Сумма") > 0 Тогда
		// При условии, что есть что погашать
		Для Каждого СтрокаТаблицы Из ОстаткиПоСанкциям Цикл
			Для Каждого СтрокаТаблицыПлатежа Из СуммыЕдиногоНалоговогоПлатежа Цикл
				Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
					Продолжить;
				КонецЕсли;
				СуммаПогашения = Мин(СтрокаТаблицыПлатежа.Сумма, СтрокаТаблицы.Сумма);
				Если СуммаПогашения <> 0 Тогда
					НоваяСтрока = НаборДвиженийСанкции.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.Сумма             = СуммаПогашения;
					НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Расход;
					НоваяСтрока.ПлатежныйДокумент = СтрокаТаблицыПлатежа.ПлатежныйДокумент;
					
					СтрокаТаблицы.Сумма        = СтрокаТаблицы.Сумма - СуммаПогашения;
					СтрокаТаблицыПлатежа.Сумма = СтрокаТаблицыПлатежа.Сумма - СуммаПогашения;
				КонецЕсли;
				Если СтрокаТаблицыПлатежа.Сумма <= 0 Тогда
					СтрокаТаблицыПлатежа.Сумма = 0;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		НаборДвиженийСанкции.Записывать = Истина;
	КонецЕсли;
	
	ТаблицаНалоги = Движения.РасчетыПоЕдиномуНалоговомуСчету.Выгрузить().СкопироватьКолонки();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДвиженийНалог.Выгрузить(),   ТаблицаНалоги);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДвиженийСанкции.Выгрузить(), ТаблицаНалоги);
	
	СформироватьДвиженияНаЕдиномНалоговомСчете(ТаблицаРеквизиты, ТаблицаНалоги, Движения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Если были возвраты налогов, то перед распределением оплат на налоги и санкции 
// необходимо учесть возвраты и уменьшить доступные суммы для оплат
Процедура РаспределитьВозвратыНалоговПоОплатам(ТаблицаСуммыЕдиногоНалоговогоПлатежа, ТаблицаРеквизиты, Движения)
	
	ОстатокКПогашению = 0;
	ОстатокОплат = 0;
	
	Для каждого СтрокаТЗ Из ТаблицаСуммыЕдиногоНалоговогоПлатежа Цикл
		Если СтрокаТЗ.Сумма > 0 Тогда
			ОстатокОплат = ОстатокОплат + СтрокаТЗ.Сумма;
		Иначе
			ОстатокКПогашению = ОстатокКПогашению + СтрокаТЗ.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если ОстатокКПогашению = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаРаспределения 	= Мин(-ОстатокКПогашению, ОстатокОплат);
	ОстатокКПогашению 	= СуммаРаспределения;
	ОстатокОплат 		= СуммаРаспределения;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Реквизиты.Организация);
	НаборДвижений = Движения.РасчетыПоЕдиномуНалоговомуСчету;
	
	Итератор = ТаблицаСуммыЕдиногоНалоговогоПлатежа.Количество() - 1;
	
	Пока Итератор >= 0 Цикл
	
		СтрокаТЗ = ТаблицаСуммыЕдиногоНалоговогоПлатежа[Итератор];
		
		Если СтрокаТЗ.Сумма > 0 Тогда
			ЭтоОплата = Истина;
			СуммаДокумента = СтрокаТЗ.Сумма;
		Иначе
			ЭтоОплата = Ложь;
			СуммаДокумента = -СтрокаТЗ.Сумма;
		КонецЕсли;
		
		СуммаКОплате = Мин(?(ЭтоОплата,ОстатокОплат, ОстатокКПогашению), СуммаДокумента);
			
		Если СуммаКОплате = 0 Тогда
			Итератор = Итератор - 1;
			Продолжить;
		КонецЕсли;
		
		Если ЭтоОплата Тогда
			ОстатокОплат = ОстатокОплат - СуммаКОплате;
		Иначе
			ОстатокКПогашению = ОстатокКПогашению - СуммаКОплате;
		КонецЕсли;
		
		СтрокаДвижений = НаборДвижений.Добавить();
		СтрокаДвижений.ВидДвижения = ?(ЭтоОплата, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, Реквизиты);
		СтрокаДвижений.ГоловнаяОрганизация = ГоловнаяОрганизация;
		СтрокаДвижений.ПлатежныйДокумент = СтрокаТЗ.ПлатежныйДокумент;
		СтрокаДвижений.Сумма = СуммаКОплате;
		
		Если СуммаКОплате = СуммаДокумента ИЛИ  НЕ ЭтоОплата Тогда
			ТаблицаСуммыЕдиногоНалоговогоПлатежа.Удалить(Итератор)
		Иначе
			СтрокаТЗ.Сумма = СтрокаТЗ.Сумма - СуммаКОплате;
		КонецЕсли;
		Итератор = Итератор - 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТ

#КонецОбласти