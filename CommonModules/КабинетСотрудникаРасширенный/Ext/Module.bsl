#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.15.39";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("14ab3bc1-f294-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ОбновитьПубликуемыеПодразделенияПредприятия";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикуемых подразделений предприятия.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.15.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("352b4407-f724-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ОбновитьПубликациюСотрудников";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикации сотрудников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.16.42";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("b36c70c0-1920-11eb-80e8-4cedfb43b144");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ВыполнитьНачальныйПереносДанныхГрафикаОтпусков";
	Обработчик.Комментарий     = НСтр("ru = 'Начальный перенос данных графика отпусков в ESS.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.7";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("13ae995b-fa23-4aa4-8de9-729416ccc230");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ЗарегистрироватьПубликациюГрафиковРаботы";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация публикации графиков работы.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.34";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("edb665b7-cfd5-43ba-bda8-44e90ae9c7ec");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ЗарегистрироватьПубликациюДанныхГрафиковРаботы";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация публикации данных графиков работы в сервисе 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f84d15a7-bef0-4f31-b525-9b353a8ff6ee");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ОтменитьРегистрациюГруппГрафиковРаботы";
	Обработчик.Комментарий     = НСтр("ru = 'Отмена регистрации групп графиков работы в сервисе 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.21.64";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f9011296-3af9-11eb-80e9-4cedfb43b144");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.НастроитьРегламентноеЗаданиеПроверкаАктуальностиИнформацииОбОтпуске";
	Обработчик.Комментарий     = НСтр("ru = 'Настройка регламентного задания Проверка актуальности информации об отпуске.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.554";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("4dd9c9f2-010b-4379-b523-a4de3dcbffd9");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ЗарегистрироватьПубликациюВидовСправок";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация публикации видов справок.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.634";  
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a8900b29-384d-4854-9387-596136fd6189");
	Обработчик.Процедура       = "КабинетСотрудникаРасширенный.ЗарегистрироватьОбновлениеФункциональностиСервиса";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления функциональности сервиса 1С:Кабинет сотрудника.'");
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияПубликуемыхОбъектов

Процедура ПриЗаписиМестаПозицииШтатногоРасписанияВСтруктуреПредприятия(МенеджерВТ, НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей <> Неопределено Тогда
		Позиции = ОбщегоНазначения.ВыгрузитьКолонку(НаборЗаписей.Выгрузить(), "Позиция");
	ИначеЕсли МенеджерВТ <> Неопределено Тогда
		Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			Возврат;
		КонецЕсли;
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МестаВСтруктуреПредприятия.МестоВСтруктуреПредприятия КАК Подразделение,
		|	МестаВСтруктуреПредприятия.Позиция КАК Позиция
		|ПОМЕСТИТЬ ВТПубликуемыеПодразделенияПозиции
		|ИЗ
		|	ВТМестаВСтруктуреПредприятияПозиций КАК МестаВСтруктуреПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
		|		ПО МестаВСтруктуреПредприятия.Позиция = ПубликуемыеОбъекты.ОбъектПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПодразделений.СтароеМестоВСтруктуреПредприятия КАК Подразделение
		|ПОМЕСТИТЬ ВТПодразделения
		|ИЗ
		|	ВТМестаВСтруктуреПредприятияПозиций КАК ТаблицаПодразделений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
		|		ПО ТаблицаПодразделений.СтароеМестоВСтруктуреПредприятия = ПубликуемыеОбъекты.ОбъектПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПубликуемыеПодразделения.Подразделение КАК Подразделение
		|ИЗ
		|	ВТПубликуемыеПодразделенияПозиции КАК ПубликуемыеПодразделения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
		|		ПО ПубликуемыеПодразделения.Подразделение = ПубликуемыеОбъекты.ОбъектПубликации
		|ГДЕ
		|	ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПубликуемыеПозиции.Позиция КАК Позиция
		|ИЗ
		|	ВТПубликуемыеПодразделенияПозиции КАК ПубликуемыеПозиции";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		КоличествоРезультатов = РезультатЗапроса.ВГраница();
		
		// Новые публикуемые подразделения.
		Подразделения = РезультатЗапроса[КоличествоРезультатов-1].Выгрузить().ВыгрузитьКолонку("Подразделение");
		Если Подразделения.Количество() > 0 Тогда
			
			Подразделения = КабинетСотрудника.РодителиПодразделений(Подразделения);
			
			Для каждого Подразделение Из Подразделения Цикл
				
				МенеджерЗаписи = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ОбъектПубликации = Подразделение;
				МенеджерЗаписи.Записать();
				
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации = Подразделение;
				МенеджерЗаписи.ВерсияДанных 	 = Строка(Новый УникальныйИдентификатор); 
				МенеджерЗаписи.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Позиции в которых поменялось место в структуре предприятия.
		Позиции = РезультатЗапроса[КоличествоРезультатов].Выгрузить().ВыгрузитьКолонку("Позиция");
		Для каждого Позиция Из Позиции Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Позиция;
			МенеджерЗаписи.ВерсияДанных 	 = Строка(Новый УникальныйИдентификатор); 
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		// Ранее публикуемые подразделения, проверяем есть ли у них публикуемые позиции.
		// Получим позиции подразделений.
		МодульОрганизационнаяСтруктура.СоздатьВТПозицииПодразделений(МенеджерВТ, "ВТПодразделения");
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПозицииПодразделений.Подразделение КАК Подразделение
		|ИЗ
		|	ВТПозицииПодразделений КАК ПозицииПодразделений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
		|		ПО ПозицииПодразделений.Позиция = ПубликуемыеОбъекты.ОбъектПубликации
		|ГДЕ
		|	ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL";
		
		Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		Если Подразделения.Количество() > 0 Тогда
			
			Для каждого Подразделение Из Подразделения Цикл
				
				НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ОбъектПубликации.Установить(Подразделение);
				НаборЗаписей.Записать();
				
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации = Подразделение;
				МенеджерЗаписи.ВерсияДанных 	 = Строка(Новый УникальныйИдентификатор); 
				МенеджерЗаписи.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	КабинетСотрудника.ЗаписатьРезультатыПроверкиОбъектов(КабинетСотрудника.РезультатПроверкиПозицийИСотрудников(Позиции));
	
КонецПроцедуры

Процедура ПриЗаписиПозицииРуководителейПодразделений(Подразделения) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК ПредметПубликации
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Подразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО Подразделения.Ссылка = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	Подразделения.Ссылка В ИЕРАРХИИ(&Подразделения)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодразделенияКПубликации = Запрос.Выполнить().Выгрузить();
	
	Если ПодразделенияКПубликации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПодразделенияКПубликации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ПодразделенияКПубликации Цикл
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = СтрокаТЗ.ПредметПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
			
	КонецПопытки;

КонецПроцедуры

Процедура ОбработатьИзменениеГрафиковРаботы(ИзменившиесяДанные) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат301() Тогда
		Возврат;
	КонецЕсли;

	Если ИзменившиесяДанные = Неопределено Или ИзменившиесяДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ИзменившиесяДанные, "Сотрудник", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", Сотрудники);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокСотрудников)
	|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка";
	ТаблицаСотрудников  = Запрос.Выполнить().Выгрузить();
	
	ЗарегистрироватьИзмененияГрафиковРаботы(ТаблицаСотрудников);
	
КонецПроцедуры

Процедура ОбработатьИзмененияПроизводственныхКалендарей(ТаблицаКалендарей) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат301() Тогда
		Возврат;
	КонецЕсли;
	
	КодыКалендарей = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаКалендарей, "КодПроизводственногоКалендаря", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодыКалендарей", КодыКалендарей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТКалендари
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|ГДЕ
	|	ПроизводственныеКалендари.Код В(&КодыКалендарей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКалендари КАК Календари
	|		ПО ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = Календари.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|		ПО ГрафикиРаботыСотрудников.Ссылка = ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ПредметПубликации = Выборка.Ссылка;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		Запись.Записать();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПриЗаписиНастроекРасчетаЗарплаты(СтрокаНабора, СтароеСостояние) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСвойства = "ИспользоватьОплатуКомандировок,ИспользоватьОтгулы,ИспользоватьОтпускаУчебные,ИспользоватьОтпускаБезОплаты,ИспользоватьЕдиновременнуюВыплатуКОтпуску,ИспользоватьМатериальнуюПомощьПриОтпуске";
	МассивСвойств = СтрРазделить(ПроверяемыеСвойства, ",");
	Для каждого Свойство Из МассивСвойств Цикл
		Если СтрокаНабора[Свойство] <> СтароеСостояние[Свойство] Тогда
			УстановитьПривилегированныйРежим(Истина);
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
			УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГрафикиРаботыПоВидамВремениПриЗаписи(ГрафикРаботы, Год) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ГрафикРаботы", ГрафикРаботы);
		ЭлементБлокировки.УстановитьЗначение("Год", Год);
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ГрафикРаботы = ГрафикРаботы;
		Запись.Год = Год;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ПодразделенияОрганизацииРуководителиПриЗаписи(НаборЗаписей) Экспорт

	Если Не (ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника")
		И КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц()) Тогда
		Возврат;
	КонецЕсли;
	
	Подразделения = ОбщегоНазначения.ВыгрузитьКолонку(НаборЗаписей.Выгрузить(), "Подразделение");
	Если Подразделения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК ПредметПубликации
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ПодразделенияОрганизаций.Ссылка = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&Подразделения)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодразделенияКПубликации = Запрос.Выполнить().Выгрузить();
	
	Если ПодразделенияКПубликации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПодразделенияКПубликации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ПодразделенияКПубликации Цикл
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = СтрокаТЗ.ПредметПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
			
	КонецПопытки;

КонецПроцедуры

Процедура ФотографииФизическихЛицПриЗаписи(НаборЗаписей) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(НаборЗаписей.Выгрузить(), "ФизическоеЛицо");
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатПроверки = КабинетСотрудника.РезультатПроверкиФизическихЛицИСотрудников(ФизическиеЛица);
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		Блокировка.Заблокировать();
		
		КабинетСотрудника.ЗаписатьРезультатыПроверкиОбъектов(РезультатПроверки);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

Процедура НастройкиСамообслуживанияСотрудниковПриЗаписи(НовоеСостояние, СтароеСостояние) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСвойства = "ИспользоватьЗапросыСправокСотрудником";
	НовоеЗначение  = НовоеСостояние[ИмяСвойства];
	СтароеЗначение = СтароеСостояние[ИмяСвойства];
	Если НовоеЗначение <> СтароеЗначение Тогда
		Если НовоеЗначение Тогда
			// Включено использование произвольных справок.
			КабинетСотрудника.ЗарегистрироватьПубликациюВидовСправок();
		Иначе
			// Выключено использование произвольных справок.
			ЗарегистрироватьОбновлениеВидовСправок();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СборГрафиковОтпусковПередЗаписью(ДокументОбъект) Экспорт
	
	Если Не КабинетСотрудника.ИспользуетсяВерсияФормата("1.1")
		Или Не Документы.СборГрафиковОтпусков.ЭтоКорневойДокумент(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКонтролируемыхПолей = "Год,СборЗапущен,СборЗавершен,Состояние,ПометкаУдаления";
	Если ДокументОбъект.ЭтоНовый() Тогда
		ПрежниеДанныеОбъекта = Новый Структура(ИменаКонтролируемыхПолей);
	Иначе
		ПрежниеДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Ссылка, ИменаКонтролируемыхПолей);
	КонецЕсли;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПрежниеДанныеПубликуемогоОбъекта", ПрежниеДанныеОбъекта);

КонецПроцедуры

Процедура ПриЗаписиДокументаСборГрафиковОтпусков(ДокументОбъект)
	
	Если Не КабинетСотрудника.ИспользуетсяВерсияФормата("1.1")
		Или Не Документы.СборГрафиковОтпусков.ЭтоКорневойДокумент(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДокументОбъект.СборЗапущен Тогда
		КабинетСотрудника.ЗарегистрироватьИзмененияДляСервиса(ДокументОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция ДоступноИспользованиеСборГрафиковОтпусков() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат КабинетСотрудника.ИспользуетсяВерсияФормата("1.1");

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура регламентного задания ПроверкаАктуальностиИнформацииОбОтпуске
//
Процедура ПроверитьАктуальностьИнформацииОбОтпуске() Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктуальностьИнформацииОбОтпуске.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.АктуальностьИнформацииОбОтпуске КАК АктуальностьИнформацииОбОтпуске
		|ГДЕ
		|	АктуальностьИнформацииОбОтпуске.ДатаАктуальности <= &ТекущаяДата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(Выборка.Сотрудник, Ложь);
		НаборЗаписей = РегистрыСведений.АктуальностьИнформацииОбОтпуске.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске.ИмяМетода);
	
КонецПроцедуры

#Область ОписаниеAPI

Функция РесурсИнформацияОбОтпуске()
	
	Возврат "/vacations/summaries";
	
КонецФункции

Функция РесурсГрафикОтпусков() 
	
	Возврат "/vacations-schedule";
	
КонецФункции

Функция РесурсБудущиеИзмененияОстатковОтпусков()
	
	Возврат "/vacations/unused-days-predicted";
	
КонецФункции

Функция РесурсГрафикиРаботы()
	
	Возврат "/work-schedules";
	
КонецФункции

Функция РесурсПраздничныеДниГрафиковРаботы()
	
	Возврат "/holidays";
	
КонецФункции

Функция РесурсДанныеГрафикаРаботы()

	Возврат "/work-schedules-data";

КонецФункции

Функция РесурсПлановыеУдержания()

	Возврат "/contributions";

КонецФункции

Функция РесурсВидовПредоставляемыхСправок()

	Возврат "/employment-certificates/types";

КонецФункции

#КонецОбласти

#Область ОписанияОбъектов

// Описание объекта - vacationUseInfo.
Функция ОписаниеОбъектаИнформацииОбОтпусках()

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("personID", 			"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"),,Истина));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("daysNotUsed", 			"ОстатокОтпуска", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("leaveEncashmentDays", 	"ДнейКомпенсации", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("minVacationLength", 	"ДопустимаяПродолжительностьОтпуска", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("previousVacation", 	"ИнформацияОПредыдущемОтпуске", Тип("Структура"), ОписаниеОбъектаИнформацииОбОтпуске()));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("nextVacation", 		"ИнформацияОСледующемОтпуске", Тип("Структура"), ОписаниеОбъектаИнформацииОбОтпуске()));

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationInfo.
Функция ОписаниеОбъектаИнформацииОбОтпуске()

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("startDate", 	"ДатаНачала", Тип("Дата"),,Истина));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("endDate", 		"ДатаОкончания", Тип("Дата"),,Истина));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("days", 		"КоличествоДней", Тип("Число"),,Истина));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("description", 	"Комментарий", Тип("Строка")));

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationUnusedDaysPredicted.
Функция ОписаниеОбъектаБудущиеИзмененияОстатковОтпуска()
	
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("personID", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"),,Истина));
	ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("components", "Остатки", Тип("ТаблицаЗначений"), ОписаниеОбъектаСтрокаБудущихИзмененийОстатковОтпуска()));
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание объекта - vacationUnusedDaysPredictedComponent.
Функция ОписаниеОбъектаСтрокаБудущихИзмененийОстатковОтпуска()
	
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("date", "Период", Тип("Дата"),,Истина));
	ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("daysNotUsed", "КоличествоДней", Тип("Число"),,Истина));
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание объекта - vacationsSchedule.
Функция ОписаниеОбъектаГрафикОтпусков(ВерсияФормата)

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("personID", 	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("components", 	"Компоненты", Тип("Структура"), ОписаниеОбъектаЭлементГрафикаОтпусков(ВерсияФормата)));

	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - vacationsScheduleItem.
Функция ОписаниеОбъектаЭлементГрафикаОтпусков(ВерсияФормата)

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("startDate", 	"ДатаНачала", Тип("Дата")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("endDate", 		"ДатаОкончания", Тип("Дата")));

	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - holidays.
Функция ОписаниеОбъектаПраздничныеДниГрафика(ВерсияФормата)
	
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("workScheduleID", 	"ГрафикРаботы", Тип("СправочникСсылка.ГрафикиРаботыСотрудников")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("components", 	"Компоненты", Тип("Структура"), ОписаниеОбъектаГодДатаПраздничныйДень(ВерсияФормата)));

	Возврат ОписаниеОбъекта;

КонецФункции

// Описание объекта - holidaysItem.
Функция ОписаниеОбъектаГодДатаПраздничныйДень(ВерсияФормата)
	
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("year", 	"Год", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("date", 	"Дата", Тип("Дата")));

	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание полей объекта - workSchedule.
Функция ОписаниеПолейГрафиковРаботы(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",		"ГрафикРаботы");
	СоответствиеПолей.Вставить("name",		"Наименование");
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - workScheduleData.
Функция ОписаниеПолейДанныеГрафикаРаботы()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("workScheduleID", 	"ГрафикРаботы");
	СоответствиеПолей.Вставить("date", 				"Дата");
	СоответствиеПолей.Вставить("dayType", 			"ТипДня");
	Возврат СоответствиеПолей;
	
КонецФункции

// Описание полей объекта - certificateFromEmployerType.
Функция ОписаниеПолейВидовПредоставляемыхСправок(ВерсияФормата)

	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	ОписаниеОбъекта = Новый Массив;
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("ID", 			"ВидСправки", Тип("Строка")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("presentation", "Представление", Тип("Строка")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("description", 	"Описание", Тип("Строка")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("inUse", 		"Используется", Тип("Булево")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("order", 		"РеквизитДопУпорядочивания", Тип("Число")));
	ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("sample", 		"Образец", Неопределено, МодульКС.ОписаниеОбъектаФайл(ВерсияФормата)));
	Возврат ОписаниеОбъекта;

КонецФункции

#Область ОписаниеПеречислений

// Описание значений - dayType.
Функция ОписаниеТипДня()

	Описание = Новый Соответствие;
	Описание.Вставить("рабочий",  "work");
	Описание.Вставить("выходной", "rest");
	Описание.Вставить("праздник", "holiday");
	
	Возврат Описание;
	
КонецФункции

Функция ЗначениеРабочийДень()

	Описание = ОписаниеТипДня();
	Возврат Описание["рабочий"];

КонецФункции

Функция ЗначениеВыходнойДень()

	Описание = ОписаниеТипДня();
	Возврат Описание["выходной"];

КонецФункции

#КонецОбласти

// Описание объекта - divisionVacationsSchedule.
Функция ОписаниеОбъектаГрафикОтпусковПодразделения(ВерсияФормата)
	
	ОписаниеОбъекта = Новый Массив;
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.1") Тогда
		// не используется
	Иначе
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("ID", 			"ИдентификаторДокумента", Тип("Строка")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("version", 		"Версия", Тип("Число")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("year", 		"Год", Тип("Число")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("divisionID", 	"Подразделение", ТипПодразделение()));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("status", 		"СостояниеСбораГрафиковОтпусков", Тип("ПеречислениеСсылка.СостоянияСбораГрафиковОтпусков")));
		ОписаниеОбъекта.Добавить(МодульКС.НовоеОписаниеПоля("periods",		"Периоды", Тип("ТаблицаЗначений"), ОписаниеОбъектаПериодГрафикаОтпусков(ВерсияФормата)));
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Описание объекта - vacationsSchedulePeriod.
Функция ОписаниеОбъектаПериодГрафикаОтпусков(ВерсияФормата)
	
	ОписаниеПолей = Новый Массив;
	МодульКС = КабинетСотрудникаМенеджерОбмена;
	
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.1") Тогда
		// не используется
	Иначе
		ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("personID",	"ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
		ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("startDate",	"ДатаНачала", Тип("Дата")));
		ОписаниеПолей.Добавить(МодульКС.НовоеОписаниеПоля("endDate",	"ДатаОкончания", Тип("Дата")));
	КонецЕсли;
	
	Возврат ОписаниеПолей;
	
КонецФункции

// Описание полей объекта - enterpriseVacationsSchedule.
Функция ОписаниеПолейСборГрафиковОтпусков(ВерсияФормата)
	
	СоответствиеПолей = Новый Соответствие;
	Если КабинетСотрудника.ВерсияФорматаМеньшеВерсии(ВерсияФормата, "1.1") Тогда
		// не используется
	Иначе
		СоответствиеПолей.Вставить("ID",		"СборГрафиковОтпусков");
		СоответствиеПолей.Вставить("year", 		"Год");
		СоответствиеПолей.Вставить("status", 	"Состояние");
	КонецЕсли;
	
	Возврат СоответствиеПолей;
	
КонецФункции

#КонецОбласти

#Область РегистрацияПубликуемыхОбъектов

Процедура ОбъектПередЗаписью(Объект) Экспорт

	Если Объект.ЭтоНовый() И ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		Если Объект.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеНастройкиПубликации") Тогда
			Возврат;
		КонецЕсли;
		Объект.ДополнительныеСвойства.Вставить("ОбновитьНастройкуПубликации", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ОбъектПриЗаписи(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		Если Объект.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеНастройкиПубликации") Тогда
			Возврат;
		КонецЕсли;
		ПозицияШтатногоРасписанияПриЗаписи(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ГрафикиРаботыСотрудников") Тогда
		ГрафикиРаботыСотрудниковПриЗаписи(Объект);	
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаСправкаОстаткиОтпусков")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаСправкаСМестаРаботы")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтсутствие")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы")Тогда
		КабинетСотрудника.ПриЗаписиЗаявкиСотрудника(Объект);
	ИначеЕсли ТипЗнч(Объект) = ТипОбъектВидыПредоставляемыхСотрудникамСправок() Тогда
		ВидыПредоставляемыхСотрудникамСправокПриЗаписи(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СборГрафиковОтпусков") Тогда
		ПриЗаписиДокументаСборГрафиковОтпусков(Объект);
	Иначе
		
		Если НЕ КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц()
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			Модуль.ПриЗаписиПубликуемогоОбъекта(Объект);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей) Экспорт

	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ОбновитьПубликациюВСервисе") Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник = НаборЗаписей.Отбор.Сотрудник.Значение;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Сотрудник
	|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка";
	ТаблицаСотрудников  = Запрос.Выполнить().Выгрузить();
	
	КабинетСотрудника.ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников);

КонецПроцедуры

Процедура ПозицияШтатногоРасписанияПриЗаписи(Объект)
	
	Если Объект.ГруппаПозицийПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНастройкуПубликации = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ОбновитьНастройкуПубликации", ОбновитьНастройкуПубликации);
	Если ОбновитьНастройкуПубликации = Неопределено Тогда
		КабинетСотрудника.ПриЗаписиПубликуемогоОбъекта(Объект);
	Иначе
		
		// Запись новой позиции штатного расписания.
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Проверим публикуемость организации и подразделения.
		// Проверяем есть ли еще позиции штатного расписания у подразделения,
		// если нет, то оно новое и потребуется проверка его публикуемости.
		ПроверяемыеОбъекты = Новый Массив;
		ПроверяемыеОбъекты.Добавить(Объект.Владелец);
		ПроверяемыеОбъекты.Добавить(Объект.Подразделение);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила КАК ОбъектПравила
		|ИЗ
		|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликацииКабинетСотрудника
		|ГДЕ
		|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила В(&ПроверяемыеОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтатноеРасписание.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Подразделение = &Подразделение
		|	И ШтатноеРасписание.Ссылка <> &Ссылка
		|	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ОрганизацияПубликуется = Ложь;
		ПодразделениеПубликуется = Ложь;
		Выборка = РезультатЗапроса[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОбъектПравила = Объект.Владелец Тогда
				ОрганизацияПубликуется = Истина;
			ИначеЕсли Выборка.ОбъектПравила = Объект.Подразделение Тогда
				ПодразделениеПубликуется = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// текущая позиция единственная в этом подразделении
		ПодразделениеНовое = РезультатЗапроса[1].Пустой();
		
		РегистрироватьПодразделение = Ложь;
		Если ПодразделениеНовое И Не ПодразделениеПубликуется Тогда
			
			Если ОрганизацияПубликуется Тогда
				РегистрироватьПодразделение = Истина;
				ПодразделениеПубликуется = Истина;
			Иначе
				
				// проверим публикуемсоть подразделения по родителю
				ПодразделениеРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Подразделение, "Родитель");
				Если ЗначениеЗаполнено(ПодразделениеРодитель) Тогда
					Запрос.УстановитьПараметр("ПодразделениеРодитель", ПодразделениеРодитель);
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила КАК ОбъектПравила
					|ИЗ
					|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликацииКабинетСотрудника
					|ГДЕ
					|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила  = &ПодразделениеРодитель";
					РезультатЗапроса = Запрос.Выполнить();
					ПодразделениеПубликуется = Не РезультатЗапроса.Пустой();
					РегистрироватьПодразделение = ПодразделениеПубликуется;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПодразделениеПубликуется Тогда
			
			ПодразделениеПредприятия = МестоПозицийВСтруктуреПредприятия(Объект.Ссылка);
			
			Позиции = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
			РезультатПроверкиПозиций = КабинетСотрудника.РезультатПроверкиПозицийИСотрудников(Позиции);
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаПубликацииКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("ОбъектПравила", Объект.Ссылка);
				Если РегистрироватьПодразделение Тогда
					ЭлементБлокировки.УстановитьЗначение("ОбъектПравила", Объект.Подразделение);
				КонецЕсли;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("ОбъектПубликации", Объект.Ссылка);
				ЭлементБлокировки.УстановитьЗначение("ОбъектПубликации", Объект.Должность);
				Если ЗначениеЗаполнено(ПодразделениеПредприятия) Тогда
					ЭлементБлокировки.УстановитьЗначение("ОбъектПубликации", ПодразделениеПредприятия);
				КонецЕсли;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
				ЭлементБлокировки.ИсточникДанных = РезультатПроверкиПозиций;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", Объект.Ссылка);
				ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", Объект.Должность);
				Если ЗначениеЗаполнено(ПодразделениеПредприятия) Тогда
					ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", ПодразделениеПредприятия);
				КонецЕсли;
				
				Блокировка.Заблокировать();
				
				Если РегистрироватьПодразделение Тогда
					МенеджерЗаписи = РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ОбъектПравила = Объект.Подразделение;
					МенеджерЗаписи.Записать();
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ОбъектПравила = Объект.Ссылка;
				МенеджерЗаписи.Записать();
				
				МенеджерЗаписи = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ОбъектПубликации = Объект.Ссылка;
				МенеджерЗаписи.Записать();
				
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации 	= Объект.Ссылка;
				МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
				
				Если ЗначениеЗаполнено(ПодразделениеПредприятия) Тогда
					
					МенеджерЗаписи = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ОбъектПубликации = ПодразделениеПредприятия;
					МенеджерЗаписи.Записать();
					
					МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ПредметПубликации 	= ПодразделениеПредприятия;
					МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
					МенеджерЗаписи.Записать();
					
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ОбъектПубликации = Объект.Должность;
				МенеджерЗаписи.Записать();
				
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации 	= Объект.Должность;
				МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
				
				КабинетСотрудника.ЗаписатьРезультатыПроверкиОбъектов(РезультатПроверкиПозиций);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияОтпусков(НаборЗаписей) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = НаборЗаписей.Отбор.Найти("Сотрудник");
	Если ЭлементОтбора = Неопределено Или Не ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда 
		Возврат;
	КонецЕсли;
	
	Сотрудник = ЭлементОтбора.Значение;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации = &Сотрудник";
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьМенеджерЗаписи();
		Запись.Сотрудник = Выборка.Сотрудник;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияГрафикаОтпусков(НаборЗаписей) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = НаборЗаписей.Отбор.Найти("Сотрудник");
	Если ЭлементОтбора = Неопределено Или Не ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда 
		Возврат;
	КонецЕсли;
	
	Сотрудник = ЭлементОтбора.Значение;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
		|ГДЕ
		|	ПубликуемыеОбъекты.ОбъектПубликации = &Сотрудник";
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Запись = РегистрыСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков.СоздатьМенеджерЗаписи();
	Запись.Сотрудник = Сотрудник;
	Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	Запись.Записать();
	
КонецПроцедуры

Процедура ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(Сотрудник, ОбновлениеИБ) Экспорт
	
	Если ОбновлениеИБ Тогда
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Сотрудник = Сотрудник;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	Иначе
		Запись = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьМенеджерЗаписи();
		Запись.Сотрудник = Сотрудник;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеПубликуемыхОбъектов(ПубликуемыеОбъекты, ОбновитьВсеЗаписи) Экспорт

	ТекущийГод = Год(ТекущаяДатаСеанса());
	
	НаборЗаписейОтпуск  = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьНаборЗаписей();
	НаборЗаписейГрафики = РегистрыСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков.СоздатьНаборЗаписей();
	НаборЗаписейДанныеГрафиковРаботы = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьНаборЗаписей();
	Если Не ОбновитьВсеЗаписи Тогда
		НаборЗаписейОтпуск.Прочитать();
		НаборЗаписейГрафики.Прочитать();
		НаборЗаписейДанныеГрафиковРаботы.Прочитать();
		ТекущиеЗаписиГрафикиРаботы = НаборЗаписейДанныеГрафиковРаботы.Выгрузить();
	КонецЕсли;
	
	ТекущиеЗаписиОтпуск 		= НаборЗаписейОтпуск.Выгрузить();
	ТекущиеЗаписиОтпуск.Индексы.Добавить("Сотрудник");
	ТекущиеЗаписиГрафики 		= НаборЗаписейГрафики.Выгрузить();
	ТекущиеЗаписиГрафики.Индексы.Добавить("Сотрудник");
	ТекущиеЗаписиГрафикиРаботы 	= НаборЗаписейДанныеГрафиковРаботы.Выгрузить();
	ТекущиеЗаписиГрафикиРаботы.Индексы.Добавить("ГрафикРаботы,Год");
	Отбор = Новый Структура("ГрафикРаботы,Год");
	Отбор.Год = ТекущийГод;
	
	ОбновитьДанныеОтпусков = Ложь;
	ОбновитьДанныеГрафиков = Ложь;
	ОбновитьДанныеГрафиковРаботы = Ложь;
	
	Для каждого ОбъектПубликации Из ПубликуемыеОбъекты Цикл
		Если ТипЗнч(ОбъектПубликации) = Тип("СправочникСсылка.Сотрудники") Тогда
			Если ТекущиеЗаписиОтпуск.Найти(ОбъектПубликации, "Сотрудник") = Неопределено Тогда
				ОбновитьДанныеОтпусков = Истина;
				ЗаписьНабора = НаборЗаписейОтпуск.Добавить();
				ЗаписьНабора.Сотрудник = ОбъектПубликации;
				ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);	
			КонецЕсли;
			Если ТекущиеЗаписиГрафики.Найти(ОбъектПубликации, "Сотрудник") = Неопределено Тогда
				ОбновитьДанныеГрафиков = Истина;
				ЗаписьНабора = НаборЗаписейГрафики.Добавить();
				ЗаписьНабора.Сотрудник = ОбъектПубликации;
				ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектПубликации) = Тип("СправочникСсылка.ГрафикиРаботыСотрудников") Тогда
			Отбор.ГрафикРаботы = ОбъектПубликации;
			Если ТекущиеЗаписиГрафикиРаботы.НайтиСтроки(Отбор).Количество() = 0 Тогда
				ОбновитьДанныеГрафиковРаботы = Истина;
				ЗаписьНабора = НаборЗаписейДанныеГрафиковРаботы.Добавить();
				ЗаписьНабора.ГрафикРаботы = ОбъектПубликации;
				ЗаписьНабора.Год = ТекущийГод;
				ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновитьВсеЗаписи Или ОбновитьДанныеОтпусков Тогда
		НаборЗаписейОтпуск.Записать();
	КонецЕсли;
	Если ОбновитьВсеЗаписи Или ОбновитьДанныеГрафиков Тогда
		НаборЗаписейГрафики.Записать();
	КонецЕсли;
	Если ОбновитьВсеЗаписи Или ОбновитьДанныеГрафиковРаботы Тогда
		НаборЗаписейДанныеГрафиковРаботы.Записать();
	КонецЕсли;
	
	ЗарегистрироватьОбновлениеДанныхГрафиковРаботы();
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияГрафиковРаботы(ТаблицаСотрудников) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса());
	ТаблицаСотрудников.ЗаполнитьЗначения(ДатаАктуальности, "ДатаНачала");
	
	ОписаниеФильтра = 
		ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
			ТаблицаСотрудников, 
			"Сотрудник");
			
	ГрафикиРаботыСотрудников = 
		ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраПериоды(
			"ГрафикРаботыСотрудников",
			Новый МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра);
			
	СотрудникГрафик = Новый ТаблицаЗначений;
	СотрудникГрафик.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникГрафик.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
			
	БудущиеСобытия = Новый ТаблицаЗначений;
	БудущиеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаТЗ Из ГрафикиРаботыСотрудников Цикл
		Если СтрокаТЗ.НачалоПериода > ДатаАктуальности Тогда
			НоваяСтрока = БудущиеСобытия.Добавить();
			НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
			НоваяСтрока.ДатаСобытия = СтрокаТЗ.НачалоПериода;
		Иначе
			НоваяСтрока = СотрудникГрафик.Добавить();
			НоваяСтрока.Сотрудник 		= СтрокаТЗ.Сотрудник;
			НоваяСтрока.ГрафикРаботы 	= СтрокаТЗ.ГрафикРаботы;
		КонецЕсли;
	КонецЦикла;
	
	ИзмененияДляПубликации = Новый ТаблицаЗначений;
	ИзмененияДляПубликации.Колонки.Добавить("ПредметПубликации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникГрафик", СотрудникГрафик);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникГрафик.Сотрудник КАК Сотрудник,
	|	СотрудникГрафик.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТСотрудникГрафик
	|ИЗ
	|	&СотрудникГрафик КАК СотрудникГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникГрафик.Сотрудник КАК ПредметПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникГрафик КАК СотрудникГрафик
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = СотрудникГрафик.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = ИзмененияДляСервиса.ПредметПубликации
	|ГДЕ
	|	ИзмененияДляСервиса.БылаОшибкаПриПубликации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СотрудникГрафик.ГрафикРаботы КАК ГрафикРаботы
	|	ИЗ
	|		РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникГрафик КАК СотрудникГрафик
	|			ПО ПубликуемыеОбъекты.ОбъектПубликации = СотрудникГрафик.Сотрудник) КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ГрафикиРаботы.ГрафикРаботы = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется ЕСТЬ NULL";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ИзмененияДляПубликации.Добавить(), Выборка);
	КонецЦикла;
	
	ТаблицаГрафиков = РезультатЗапроса[2].Выгрузить();
	Для каждого СтрокаТЗ Из ТаблицаГрафиков Цикл
		НоваяСтрока = ИзмененияДляПубликации.Добавить();
		НоваяСтрока.ПредметПубликации = СтрокаТЗ.ГрафикРаботы;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаГрафиков;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ГрафикРаботы");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДляПубликации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов");
		ЭлементБлокировки.ИсточникДанных = БудущиеСобытия;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаГрафиков Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.ГрафикРаботы;
			Запись.Записать();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ИзмененияДляПубликации Цикл
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = СтрокаТЗ.ПредметПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		Отбор = Новый Структура("Сотрудник");
		Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
			НаборЗаписей.Очистить();
			Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
			НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТЗ.Сотрудник);
			НаборЗаписей.Отбор.Событие.Установить(Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.ГрафикРаботы);
			НайденныеСтроки = БудущиеСобытия.НайтиСтроки(Отбор);
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
				НоваяЗапись.Событие = Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.ГрафикРаботы;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Процедура ПлановыеУдержанияПередЗаписью(НаборЗаписей) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.Организация КАК Организация,
	|	ПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыеУдержания.Удержание КАК Удержание
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
	|ГДЕ
	|	ПлановыеУдержания.Регистратор = &Регистратор";
	ПрежниеЗначения = Запрос.Выполнить().Выгрузить();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПрежниеЗначенияОбновленияПубликацииУдержаний", ПрежниеЗначения);

КонецПроцедуры

Процедура ПлановыеУдержанияПриЗаписи(НаборЗаписей) Экспорт

	ПлановыеУдержания = НаборЗаписей.Выгрузить(,"Организация,ФизическоеЛицо,Удержание");
	
	ПрежниеЗначения = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ПрежниеЗначенияОбновленияПубликацииУдержаний", ПрежниеЗначения);
	Если ПрежниеЗначения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПрежниеЗначения, ПлановыеУдержания);
		ПлановыеУдержания.Свернуть("Организация,ФизическоеЛицо,Удержание");
	КонецЕсли;
	
	Если ПлановыеУдержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПлановыеУдержания", ПлановыеУдержания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.Организация КАК Организация,
	|	ПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыеУдержания.Удержание КАК Удержание
	|ПОМЕСТИТЬ ВТПлановыеУдержания
	|ИЗ
	|	&ПлановыеУдержания КАК ПлановыеУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеУдержания.Организация КАК Организация,
	|	ПлановыеУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.КатегорияУдержания КАК КатегорияУдержания
	|ИЗ
	|	ВТПлановыеУдержания КАК ПлановыеУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО ПлановыеУдержания.Удержание = Удержания.Ссылка
	|			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО ПлановыеУдержания.ФизическоеЛицо = ПубликуемыеФизическиеЛица.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ПлановыеУдержания.Организация = ПубликуемыеОбъекты.ОбъектПубликации";
	
	ДанныеДляРегистрации = Запрос.Выполнить().Выгрузить();
	
	Если ДанныеДляРегистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ДанныеДляРегистрации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КатегорияУдержания", "КатегорияУдержания");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ДанныеДляРегистрации Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Организация 		= СтрокаТЗ.Организация;
			МенеджерЗаписи.ФизическоеЛицо 	= СтрокаТЗ.ФизическоеЛицо;
			МенеджерЗаписи.КатегорияУдержания = СтрокаТЗ.КатегорияУдержания;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеДанныхГрафиковРаботы() Экспорт

	ТекущийГод = Год(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийГод", ТекущийГод);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Ссылка
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы,
	|	&ТекущийГод КАК Год
	|ИЗ
	|	ВТГрафики КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК ИзмененияДанныхГрафика
	|		ПО ГрафикиРаботы.Ссылка = ИзмененияДанныхГрафика.ГрафикРаботы
	|			И (ИзмененияДанныхГрафика.Год = &ТекущийГод)
	|ГДЕ
	|	ИзмененияДанныхГрафика.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрафикРаботы", "ГрафикРаботы");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Год", "Год");
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ГрафикРаботы = Выборка.ГрафикРаботы;
			Запись.Год = Выборка.Год;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция ЗарегистрироватьИзмененияПлановыхУдержаний() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолучения.КадровыеДанные = "Организация";
	ДанныеДляРегистрации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
	ДанныеДляРегистрации.Свернуть("Организация,ФизическоеЛицо");
	ДанныеДляРегистрации.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	ДанныеДляРегистрации.ЗаполнитьЗначения(Перечисления.КатегорииУдержаний.ДСВ,"КатегорияУдержания");
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ДанныеДляРегистрации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КатегорияУдержания", "КатегорияУдержания");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ДанныеДляРегистрации Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Организация 		= СтрокаТЗ.Организация;
			МенеджерЗаписи.ФизическоеЛицо 	= СтрокаТЗ.ФизическоеЛицо;
			МенеджерЗаписи.КатегорияУдержания = СтрокаТЗ.КатегорияУдержания;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
		
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;

КонецФункции

Процедура ЗарегистрироватьОбновлениеГрафиковРаботы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГрафикиРаботы
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|ГДЕ
	|	НЕ ГрафикиРаботыСотрудников.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТГрафикиРаботы КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ГрафикиРаботы.Ссылка = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = Выборка.Ссылка;
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Изменения.ПредметПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|	И Изменения.БылаОшибкаПриПубликации ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Изменения.ПредметПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И Изменения.БылаОшибкаПриПубликации ЕСТЬ NULL";
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = Выборка.Ссылка;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ГрафикиРаботыСотрудниковПриЗаписи(Объект)
	
	Если Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат301() Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ПрежниеДанныеПубликуемогоОбъекта", ЗначенияКонтролируемыхРеквизитов);
	Если Не КабинетСотрудника.КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикРаботы", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = &ГрафикРаботы";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Объект.ПометкаУдаления Тогда
		Если Не РезультатЗапроса.Пустой() Тогда
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = Объект.Ссылка;
			Запись.Удалить();
		КонецЕсли;
	Иначе
		Если РезультатЗапроса.Пустой() Тогда
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = Объект.Ссылка;
			Запись.Записать();
		КонецЕсли;
		Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ПредметПубликации = Объект.Ссылка;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		Запись.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ВидыПредоставляемыхСотрудникамСправокПриЗаписи(Объект)

	Если Не КабинетСотрудника.ИспользоватьФормат50375() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = &Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Или Объект.ПометкаУдаления Или Объект.ВАрхиве Тогда
		Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ОбъектПубликации 	= Объект.Ссылка;
		Запись.УсловноПубликуется 	= Объект.ПометкаУдаления Или Объект.ВАрхиве;
		Запись.Записать();
	КонецЕсли;
	Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
	Запись.ПредметПубликации = Объект.Ссылка;
	Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	Запись.Записать();

КонецПроцедуры

Функция ТипыОбъектовДляРучнойРегистрации() Экспорт
	
	ПубликоватьСтруктуруЮридическихЛиц = КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц();
	ТипСтруктураПредприятия = ТипСтруктураПредприятия();
	
	ТипыОбъектов = Новый Массив;
	Для Каждого ТипОбъекта Из Метаданные.ОпределяемыеТипы.ПредметПубликацииКабинетСотрудника.Тип.Типы() Цикл
		
		Если ТипОбъекта = Тип("БизнесПроцессСсылка.УдалитьЗаявкаКабинетСотрудника") Тогда
			Продолжить;
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПодразделенияОрганизаций") И Не ПубликоватьСтруктуруЮридическихЛиц Тогда
			Продолжить;
		ИначеЕсли ТипОбъекта = ТипСтруктураПредприятия И ПубликоватьСтруктуруЮридическихЛиц Тогда
			Продолжить;
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ШтатноеРасписание") И ПолучитьФункциональнуюОпцию("НеИспользоватьШтатноеРасписание") Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыОбъектов.Добавить(ТипОбъекта);
		
	КонецЦикла;
	
	Возврат ТипыОбъектов;
	
КонецФункции

#КонецОбласти

#Область Публикация

Процедура ОпубликоватьЗарегистрированныеИзменения(ПараметрыОбмена, ТаблицаИзменений, Результат) Экспорт
	
	Если КабинетСотрудника.ИспользоватьФормат301() И Не ПараметрыОбмена.ОбновлениеПубликации Тогда
		// Графики работы не публикуются при обновлении публикации.
		Отбор = Новый Структура("ТипДанных", Тип("СправочникСсылка.ГрафикиРаботыСотрудников"));
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиГрафиковРаботы(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если КабинетСотрудника.ИспользоватьФормат50375() Тогда
		Отбор = Новый Структура("ТипДанных", ТипСсылкаВидыПредоставляемыхСотрудникамСправок());
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиВидовПредоставляемыхСправок(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если КабинетСотрудника.ИспользуетсяВерсияФормата("1.1") Тогда
		Отбор = Новый Структура("ТипДанных", Тип("ДокументСсылка.СборГрафиковОтпусков"));
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиСборГрафиковОтпусков(ПараметрыОбмена, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

Функция РезультатВыгрузкиГрафиковРаботы(ПараметрыОбмена, МассивОтбора)
	
	Результат = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	
	ВерсияФормата = ПараметрыОбмена.ВерсияФормата;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОтбора", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы,
	|	ГрафикиРаботы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Ссылка В(&МассивОтбора)";
	ДанныеГрафиковРаботы = Запрос.Выполнить().Выгрузить();
	
	РесурсСервиса = РесурсГрафикиРаботы();
	СоответствиеПолей = ОписаниеПолейГрафиковРаботы(ВерсияФормата);
	Данные = КабинетСотрудникаМенеджерОбмена.ТаблицаДанныхВМассив(ДанныеГрафиковРаботы, СоответствиеПолей);
	РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
	Результат.БылиОшибки = РезультатВыгрузки.БылиОшибки;
	
	// праздничные дни
	Если РезультатВыгрузки.Выгружено.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивОтбора", РезультатВыгрузки.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикиРаботы.Ссылка КАК Ссылка,
		|	ГрафикиРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.Ссылка В(&МассивОтбора)";
		ДанныеГрафиковРаботы = Запрос.Выполнить().Выгрузить();
		
		ПроизводственныеКалендари = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеГрафиковРаботы, "ПроизводственныйКалендарь", Истина);
		
		Запрос.УстановитьПараметр("ПроизводственныеКалендари", ПроизводственныеКалендари);
		Запрос.УстановитьПараметр("НачальныйГод", Год(ТекущаяДатаСеанса()) - 1);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ДанныеПроизводственногоКалендаря.Год КАК Год,
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь В(&ПроизводственныеКалендари)
		|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|	И ДанныеПроизводственногоКалендаря.Год >= &НачальныйГод
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизводственныйКалендарь,
		|	Год,
		|	Дата";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ОписаниеОбъектаПраздничныеДниГрафика = ОписаниеОбъектаПраздничныеДниГрафика(ВерсияФормата);
		ОписаниеОбъектаПраздничныйДень = ОписаниеОбъектаГодДатаПраздничныйДень(ВерсияФормата);
		
		ДанныеГрафиков = Новый Массив;
		Пока Выборка.СледующийПоЗначениюПоля("ПроизводственныйКалендарь") Цикл
			Компоненты = Новый Массив;
			Пока Выборка.Следующий() Цикл
				ОписаниеПраздничныйДень = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаПраздничныйДень);
				ОписаниеПраздничныйДень.Год 	= Выборка.Год;
				ОписаниеПраздничныйДень.Дата 	= Выборка.Дата;
				ОбъектПраздничныйДень = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ОписаниеПраздничныйДень, ОписаниеОбъектаПраздничныйДень);
				Компоненты.Добавить(ОбъектПраздничныйДень);
			КонецЦикла;
			Отбор = Новый Структура("ПроизводственныйКалендарь", Выборка.ПроизводственныйКалендарь);
			НайденныеСтроки = ДанныеГрафиковРаботы.НайтиСтроки(Отбор);
			Для Каждого СтрокаГрафика Из НайденныеСтроки Цикл
				ОписаниеПраздничныеДниГрафика = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаПраздничныеДниГрафика);
				ОписаниеПраздничныеДниГрафика.ГрафикРаботы = СтрокаГрафика.Ссылка;
				ОписаниеПраздничныеДниГрафика.Компоненты = Компоненты;
				ОбъектПраздничныеДниГрафика = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ОписаниеПраздничныеДниГрафика, ОписаниеОбъектаПраздничныеДниГрафика);
				ДанныеГрафиков.Добавить(ОбъектПраздничныеДниГрафика);
			КонецЦикла;
		КонецЦикла;
		
		РесурсСервиса = РесурсПраздничныеДниГрафиковРаботы();
		РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, ДанныеГрафиков, "workScheduleID", ,5);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
		
	КонецЕсли;
	
	Результат.Выгружено = РезультатВыгрузки.Выгружено;
	
	Возврат Результат;
	
КонецФункции

Процедура ОпубликоватьПрочиеИзменения(ПараметрыОбмена, БылиОшибки) Экспорт
	
	ОпубликоватьПраваНаОтпуск(ПараметрыОбмена, БылиОшибки);
	ОпубликоватьИзмененияГрафикаОтпусков(ПараметрыОбмена, БылиОшибки);
	ОпубликоватьДанныеГрафиковРаботы(ПараметрыОбмена, БылиОшибки);
	ОпубликоватьИзмененияПлановыхУдержаний(ПараметрыОбмена, БылиОшибки);
	
КонецПроцедуры

Процедура ОпубликоватьПраваНаОтпуск(ПараметрыОбмена, БылиОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ПраваНаОтпуск.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется,
	|	ПраваНаОтпуск.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск КАК ПраваНаОтпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ПраваНаОтпуск.Сотрудник = ПубликуемыеОбъекты.ОбъектПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО ПраваНаОтпуск.Сотрудник.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	
	Отбор = Новый Структура("Публикуется");
	Отбор.Публикуется = Истина;
	
	ТаблицаИзменений = РезультатЗапроса.Выгрузить();
	ТаблицаИзменений.Индексы.Добавить("Публикуется");
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		
		Сотрудники = ТаблицаДляВыгрузки.ВыгрузитьКолонку("Сотрудник");
		Данные = ОстаткиОтпусков.СведенияОбОтпускахДляПубликацииВСервисе(Сотрудники, НачалоДня(ТекущаяДатаСеанса()));
		
		ОписаниеОбъектаИнформацииОбОтпусках = ОписаниеОбъектаИнформацииОбОтпусках();
		ОписаниеОбъектаИнформацииОбОтпуске = ОписаниеОбъектаИнформацииОбОтпуске();
		ИнформацияОбИспользованииОтпуска = Новый Массив;
		Для каждого СтрокаТЗ Из Данные.ИнформацияОбИспользованииОтпуска Цикл
		
			ИнформацияОбОтпуске = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаИнформацииОбОтпусках);
			ЗаполнитьЗначенияСвойств(ИнформацияОбОтпуске, СтрокаТЗ, "ФизическоеЛицо, ОстатокОтпуска, ДнейКомпенсации, ДопустимаяПродолжительностьОтпуска");
			
			Если ЗначениеЗаполнено(СтрокаТЗ.ДатаНачалаПредыдущегоОтпуска) И ЗначениеЗаполнено(СтрокаТЗ.ДатаОкончанияПредыдущегоОтпуска) Тогда
				ИнформацияОПредыдущемОтпуске = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаИнформацииОбОтпуске);
				ИнформацияОПредыдущемОтпуске.ДатаНачала = СтрокаТЗ.ДатаНачалаПредыдущегоОтпуска;
				ИнформацияОПредыдущемОтпуске.ДатаОкончания = СтрокаТЗ.ДатаОкончанияПредыдущегоОтпуска;
				ИнформацияОПредыдущемОтпуске.КоличествоДней = СтрокаТЗ.КоличествоДнейПредыдущегоОтпуска;
				ОбъектИнформацияОПредыдущемОтпуске = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ИнформацияОПредыдущемОтпуске, ОписаниеОбъектаИнформацииОбОтпуске);
				ИнформацияОбОтпуске.ИнформацияОПредыдущемОтпуске = ОбъектИнформацияОПредыдущемОтпуске;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЗ.ДатаНачалаСледующегоОтпуска) И ЗначениеЗаполнено(СтрокаТЗ.ДатаОкончанияСледующегоОтпуска) Тогда
				ИнформацияОСледующемОтпуске  = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаИнформацииОбОтпуске);
				ИнформацияОСледующемОтпуске.ДатаНачала = СтрокаТЗ.ДатаНачалаСледующегоОтпуска;
				ИнформацияОСледующемОтпуске.ДатаОкончания = СтрокаТЗ.ДатаОкончанияСледующегоОтпуска;
				ИнформацияОСледующемОтпуске.КоличествоДней = СтрокаТЗ.КоличествоДнейСледующегоОтпуска;
				ОбъектИнформацияОСледующемОтпуске = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ИнформацияОСледующемОтпуске, ОписаниеОбъектаИнформацииОбОтпуске);
				ИнформацияОбОтпуске.ИнформацияОСледующемОтпуске = ОбъектИнформацияОСледующемОтпуске;
			КонецЕсли;
			
			ОбъектИнформацияОбОтпуске = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ИнформацияОбОтпуске, ОписаниеОбъектаИнформацииОбОтпусках);
			ИнформацияОбИспользованииОтпуска.Добавить(ОбъектИнформацияОбОтпуске);
		
		КонецЦикла;
		
		РезультатВыгрузки = РезультатВыгрузкиИнформацииОбОтпусках(ПараметрыОбмена, ИнформацияОбИспользованииОтпуска);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		ОбновитьДанныеОбАктуальностиИнформацииОбОтпуске(Сотрудники,
			РезультатВыгрузки.Выгружено,
			Данные.ИнформацияОбИспользованииОтпуска,
			Данные.БудущиеПериоды);
		
		ПрогнозируемыеНеиспользованныеДниОтпуска = КабинетСотрудникаМенеджерОбмена.МассивИзТаблицы(Данные.ПрогнозируемыеНеиспользованныеДниОтпуска, ОписаниеОбъектаБудущиеИзмененияОстатковОтпуска());
		РезультатВыгрузки = РезультатВыгрузкиОстатковОтпусковБудущихПериодов(ПараметрыОбмена, ПрогнозируемыеНеиспользованныеДниОтпуска);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
	КонецЕсли;
	
	ОтменитьРегистрациюСотрудникиДляОбновленияПубликацииПравНаОтпуск(ТаблицаИзменений, Результат);
	БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
	
КонецПроцедуры

Функция РезультатВыгрузкиИнформацииОбОтпусках(ПараметрыОбмена, Данные)
	
	РесурсСервиса = РесурсИнформацияОбОтпуске();
	Результат = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "personID");
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиОстатковОтпусковБудущихПериодов(ПараметрыОбмена, Данные)
	
	РесурсСервиса = РесурсБудущиеИзмененияОстатковОтпусков();
	Результат = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "personID",,30);
	Возврат Результат;
	
КонецФункции

Процедура ОпубликоватьИзмененияГрафикаОтпусков(ПараметрыОбмена, БылиОшибки)
	
	Если Не КабинетСотрудника.ИспользоватьФормат202() Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияФормата = ПараметрыОбмена.ВерсияФормата;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбновленияГрафикаОтпусков.Сотрудник КАК Сотрудник,
	|	ОбновленияГрафикаОтпусков.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОбновленияГрафикаОтпусков.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ПОМЕСТИТЬ ВТОбновленияГрафикаОтпусков
	|ИЗ
	|	РегистрСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков КАК ОбновленияГрафикаОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ОбновленияГрафикаОтпусков.Сотрудник = ПубликуемыеОбъекты.ОбъектПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО ОбновленияГрафикаОтпусков.Сотрудник.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбновленияГрафикаОтпусков.Сотрудник КАК Сотрудник,
	|	ОбновленияГрафикаОтпусков.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТОбновленияГрафикаОтпусков КАК ОбновленияГрафикаОтпусков";
	ИзмененияГрафика = Запрос.Выполнить().Выгрузить();
	
	Если ИзмененияГрафика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновленияГрафикаОтпусков.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОтборГрафиковОтпусков
	|ИЗ
	|	ВТОбновленияГрафикаОтпусков КАК ОбновленияГрафикаОтпусков
	|ГДЕ
	|	ОбновленияГрафикаОтпусков.Публикуется";
	Запрос.Выполнить();
	
	ОстаткиОтпусков.СоздатьВТГрафикОтпусковДляЛичныхКабинетов(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ГрафикОтпусков.ДатаНачала КАК ДатаНачала,
	|	ГрафикОтпусков.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТГрафикОтпусков КАК ГрафикОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	ДатаНачала";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ДанныеГрафиков = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		Компоненты = Новый Массив;
		ЭлементГрафика = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ДатаНачала) И ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				Если ЭлементГрафика <> Неопределено 
					И Выборка.ДатаНачала = ЭлементГрафика.ДатаОкончания + 86400 Тогда
					ЭлементГрафика.ДатаОкончания = Выборка.ДатаОкончания;
					Продолжить;
				КонецЕсли;
				ЭлементГрафика = Новый Структура("ДатаНачала, ДатаОкончания", Выборка.ДатаНачала, Выборка.ДатаОкончания);
				Компоненты.Добавить(ЭлементГрафика);
			КонецЕсли;
		КонецЦикла;
		Если Компоненты.Количество() > 0 Тогда
			ДанныеГрафиков.Вставить(Выборка.ФизическоеЛицо, Компоненты);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОбъектаГрафикОтпусков = ОписаниеОбъектаГрафикОтпусков(ВерсияФормата);
	ОписаниеОбъектаЭлементГрафикаОтпусков = ОписаниеОбъектаЭлементГрафикаОтпусков(ВерсияФормата);
	ДанныеГрафиковОтпусков = Новый Массив;
	Для каждого ЭлементКоллекции Из ДанныеГрафиков Цикл
		ОписаниеГрафикОтпусков = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаГрафикОтпусков);
		ОписаниеГрафикОтпусков.ФизическоеЛицо = ЭлементКоллекции.Ключ;
		Компоненты = Новый Массив;
		Для каждого ЭлементГрафикаОтпусков Из ЭлементКоллекции.Значение Цикл
			ОписаниеЭлементГрафикаОтпусков = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаЭлементГрафикаОтпусков);
			ОписаниеЭлементГрафикаОтпусков.ДатаНачала 		= ЭлементГрафикаОтпусков.ДатаНачала;
			ОписаниеЭлементГрафикаОтпусков.ДатаОкончания 	= ЭлементГрафикаОтпусков.ДатаОкончания;
			ОбъектЭлементГрафикаОтпусков = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ОписаниеЭлементГрафикаОтпусков, ОписаниеОбъектаЭлементГрафикаОтпусков);
			Компоненты.Добавить(ОбъектЭлементГрафикаОтпусков);
		КонецЦикла;
		ОписаниеГрафикОтпусков.Компоненты = Компоненты;
		ОбъектГрафикОтпусков = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ОписаниеГрафикОтпусков, ОписаниеОбъектаГрафикОтпусков);
		ДанныеГрафиковОтпусков.Добавить(ОбъектГрафикОтпусков);
	КонецЦикла;
	
	Результат = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(
		ПараметрыОбмена,
		РесурсГрафикОтпусков(),
		ДанныеГрафиковОтпусков,
		"personID", ,30);
	БылиОшибки = ?(Результат.БылиОшибки, Истина, БылиОшибки);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ИзмененияГрафика;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
		Блокировка.Заблокировать();
		Для Каждого ИзменениеГрафика Из ИзмененияГрафика Цикл
			Если Результат.НеВыгружено[ИзменениеГрафика.ФизическоеЛицо] <> Неопределено Тогда 
				МенеджерЗаписи = РегистрыСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Сотрудник = ИзменениеГрафика.Сотрудник;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
				МенеджерЗаписи.ОписаниеОшибки = Результат.НеВыгружено[ИзменениеГрафика.ФизическоеЛицо];
				МенеджерЗаписи.Записать();
				Продолжить;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(ИзменениеГрафика.Сотрудник);
			НаборЗаписей.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
		БылиОшибки = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОпубликоватьДанныеГрафиковРаботы(ПараметрыОбмена, БылиОшибки)
	
	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбмена.ОбновлениеПубликации Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	ИзмененияДанныхГрафика.ГрафикРаботы КАК ГрафикРаботы,
	|	ИзмененияДанныхГрафика.Год КАК Год,
	|	ИзмененияДанныхГрафика.ВерсияДанных КАК ВерсияДанных,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, ИзмененияДанныхГрафика.Год - 1), ГОД) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, ИзмененияДанныхГрафика.Год - 1), ГОД) КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъектыКабинетСотрудника.УсловноПубликуется ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК ИзмененияДанныхГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|		ПО ИзмененияДанныхГрафика.ГрафикРаботы = ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Графики.ГрафикРаботы КАК ГрафикРаботы,
	|	Графики.Год КАК Год,
	|	Графики.ВерсияДанных КАК ВерсияДанных,
	|	Графики.ДатаНачала КАК ДатаНачала,
	|	Графики.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТГрафикиОтбор
	|ИЗ
	|	ВТГрафики КАК Графики
	|ГДЕ
	|	Графики.Публикуется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Графики.ГрафикРаботы КАК ГрафикРаботы,
	|	Графики.Год КАК Год,
	|	Графики.ВерсияДанных КАК ВерсияДанных,
	|	Графики.Публикуется КАК Публикуется
	|ИЗ
	|	ВТГрафики КАК Графики";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыгруженныеДанные = Новый ТаблицаЗначений;
	ВыгруженныеДанные.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ВыгруженныеДанные.Колонки.Добавить("Год", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	ВыгруженныеДанные.Колонки.Добавить("БылаОшибкаПриПубликации", Новый ОписаниеТипов("Булево"));
	ВыгруженныеДанные.Колонки.Добавить("ВерсияДанных", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	
	ДанныеГрафиков = УчетРабочегоВремениРасширенный.ДанныеГрафиковДляСервисаКабинетСотрудника(Запрос.МенеджерВременныхТаблиц);
	ДанныеГрафиков.Колонки.Добавить("ТипДня");
	ЗначениеРабочийДень = ЗначениеРабочийДень();
	ЗначениеВыходнойДень = ЗначениеВыходнойДень();
	Для каждого СтрокаТЗ Из ДанныеГрафиков Цикл
		СтрокаТЗ.ТипДня = ?(СтрокаТЗ.Выходной, ЗначениеВыходнойДень, ЗначениеРабочийДень); 
	КонецЦикла;
	ДанныеГрафиков.Индексы.Добавить("ГрафикРаботы, Год");
	Отбор = Новый Структура("ГрафикРаботы, Год");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Публикуется Тогда
			НоваяСтрока = ВыгруженныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ДанныеГрафика = ДанныеГрафиков.НайтиСтроки(Отбор);
		
		СоответствиеПолей = ОписаниеПолейДанныеГрафикаРаботы();
		Данные = КабинетСотрудникаМенеджерОбмена.ТаблицаДанныхВМассив(ДанныеГрафика, СоответствиеПолей);
		
		РесурсСервиса = РесурсДанныеГрафикаРаботы();
		РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "workScheduleID");
		
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		НоваяСтрока = ВыгруженныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.БылаОшибкаПриПубликации = РезультатВыгрузки.БылиОшибки;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ВыгруженныеДанные;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрафикРаботы", "ГрафикРаботы");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Год", "Год");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВыгруженныеДанные", ВыгруженныеДанные);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ГрафикРаботы КАК ГрафикРаботы,
		|	ТаблицаИзменений.Год КАК Год,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
		|	ТаблицаИзменений.БылаОшибкаПриПубликации КАК БылаОшибкаПриПубликации
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ВыгруженныеДанные КАК ТаблицаИзменений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ГрафикРаботы КАК ГрафикРаботы,
		|	ОтменитьИзменения.Год КАК Год,
		|	ОтменитьИзменения.БылаОшибкаПриПубликации КАК БылаОшибкаПриПубликации
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК Изменения
		|		ПО ОтменитьИзменения.ГрафикРаботы = Изменения.ГрафикРаботы
		|			И ОтменитьИзменения.Год = Изменения.Год
		|			И ОтменитьИзменения.ВерсияДанных = Изменения.ВерсияДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ГрафикРаботы = Выборка.ГрафикРаботы;
			МенеджерЗаписи.Год = Выборка.Год;
			Если Выборка.БылаОшибкаПриПубликации Тогда
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
				МенеджерЗаписи.Записать();
			Иначе
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
		БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьДанныеОбАктуальностиИнформацииОбОтпуске(Сотрудники, ФизическиеЛица, ИнформацияОбОтпусках, БудущиеПериоды)
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ДатыОстатков = Новый Соответствие;
	
	Для Каждого ДанныеСотрудника Из БудущиеПериоды Цикл
		Если ДанныеСотрудника.Период <= ТекущаяДата Тогда 
			Продолжить;
		КонецЕсли;
		ДатаОстатка = ДатыОстатков[ДанныеСотрудника.Сотрудник];
		Если ДатаОстатка <> Неопределено И ДатаОстатка <= ДанныеСотрудника.Период Тогда 
			Продолжить;
		КонецЕсли;
		ДатыОстатков.Вставить(ДанныеСотрудника.Сотрудник, ДанныеСотрудника.Период);
	КонецЦикла;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	СотрудникиФизическихЛиц = Новый Соответствие;
	Для Каждого КлючИЗначение Из ФизическиеЛицаСотрудников Цикл 
		СписокСотрудников = СотрудникиФизическихЛиц[КлючИЗначение.Значение];
		Если СписокСотрудников = Неопределено Тогда 
			СписокСотрудников = Новый Массив;
		КонецЕсли;
		СписокСотрудников.Добавить(КлючИЗначение.Ключ);
		СотрудникиФизическихЛиц.Вставить(КлючИЗначение.Значение, СписокСотрудников);
	КонецЦикла;
	
	Для Каждого ИнформацияОбОтпуске Из ИнформацияОбОтпусках Цикл 
		Если ФизическиеЛица.Найти(ИнформацияОбОтпуске.ФизическоеЛицо) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокСотрудников = СотрудникиФизическихЛиц[ИнформацияОбОтпуске.ФизическоеЛицо];
		Если СписокСотрудников = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Сотрудник Из СписокСотрудников Цикл 
			ДатаАктуальности = ИнформацияОбОтпуске.ДатаНачалаСледующегоОтпуска;
			ДатаОстатка = ДатыОстатков[Сотрудник];
			Если ДатаОстатка <> Неопределено Тогда
				ДатаАктуальности = ?(ЗначениеЗаполнено(ДатаАктуальности), 
					Мин(ДатаАктуальности, КонецДня(ДатаОстатка) + 1), КонецДня(ДатаОстатка) + 1);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда 
				Продолжить;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.АктуальностьИнформацииОбОтпуске.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Сотрудник = Сотрудник;
			НоваяЗапись.ДатаАктуальности = ДатаАктуальности;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьРегистрациюСотрудникиДляОбновленияПубликацииПравНаОтпуск(ТаблицаИзменений, Результат)
	
	Если ТаблицаИзменений.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
			Запрос.УстановитьПараметр("Выгружено", Результат.Выгружено);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаИзменений.Сотрудник КАК Сотрудник,
			|	ТаблицаИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
			|	ТаблицаИзменений.Публикуется КАК Публикуется
			|ПОМЕСТИТЬ ВТОтменитьИзменения
			|ИЗ
			|	&ТаблицаИзменений КАК ТаблицаИзменений
			|ГДЕ
			|	(ТаблицаИзменений.ФизическоеЛицо В (&Выгружено)
			|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтменитьИзменения.Сотрудник КАК Сотрудник
			|ИЗ
			|	ВТОтменитьИзменения КАК ОтменитьИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск КАК Сотрудники
			|		ПО ОтменитьИзменения.Сотрудник = Сотрудники.Сотрудник";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Сотрудник = Выборка.Сотрудник;
				МенеджерЗаписи.Удалить();
			КонецЦикла;
			
			Если Результат.БылиОшибки Тогда
				Для Каждого Ошибка Из Результат.НеВыгружено Цикл
					МенеджерЗаписи = РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Сотрудник = Ошибка.Ключ;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
					МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
					МенеджерЗаписи.Записать();
				КонецЦикла;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
			Результат.БылиОшибки = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпубликоватьИзмененияПлановыхУдержаний(ПараметрыОбмена, БылиОшибки)

	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИспользуемаяФункциональность = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	Если Не НастройкиИспользуемаяФункциональность.ЗаявленияНаДСВ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.Организация КАК Организация,
	|	Изменения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Изменения.КатегорияУдержания КАК КатегорияУдержания,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ИЗ
	|	РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО Изменения.ФизическоеЛицо = ПубликуемыеФизическиеЛица.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО Изменения.Организация = ПубликуемыеОбъекты.ОбъектПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО Изменения.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияФормата = ПараметрыОбмена.ВерсияФормата;
	
	ТаблицаВсехИзменений = РезультатЗапроса.Выгрузить();
	ТаблицаВсехИзменений.Индексы.Добавить("Публикуется");
	ТаблицаПубликуемыхИзменений = ТаблицаВсехИзменений.Скопировать(Новый Структура("Публикуется", Истина));
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПубликуемыхИзменений, "Организация", Истина);
	ТаблицаПубликуемыхИзменений.Индексы.Добавить("Организация");
	Отбор = Новый Структура("Организация");
	ДатаАктуальности = ТекущаяДатаСеанса();
	
	СвойстваУдержаний = Новый Соответствие;
	
	ТаблицаРезультатВыгрузки = Новый ТаблицаЗначений;
	ТаблицаРезультатВыгрузки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРезультатВыгрузки.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаРезультатВыгрузки.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	ТаблицаРезультатВыгрузки.Колонки.Добавить("Выгружено", Новый ОписаниеТипов("Булево"));
	
	ОписаниеОбъектаПлановоеУдержание = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъектаПлановоеУдержание(ВерсияФормата);
	ОписаниеОбъектаПлановыеУдержания = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъектаПлановыеУдержания(ВерсияФормата);
	
	Для каждого Организация Из Организации Цикл
	
		Отбор.Организация = Организация;
		ИзмененияПоОрганизации = ТаблицаПубликуемыхИзменений.Скопировать(Отбор, "Организация,ФизическоеЛицо,КатегорияУдержания");
		ФизическиеЛица = ИзмененияПоОрганизации.ВыгрузитьКолонку("ФизическоеЛицо");
		
		ПлановыеУдержания = ПлановыеУдержанияФизическихЛиц(ИзмененияПоОрганизации, ДатаАктуальности);
		Если ПлановыеУдержания.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПлановыеУдержания.Индексы.Добавить("ФизическоеЛицо");
		ОтборФизическихЛиц = Новый Структура("ФизическоеЛицо");
		
		Удержания = ОбщегоНазначения.ВыгрузитьКолонку(ПлановыеУдержания, "Удержание", Истина);
		ЗаполнитьСведенияОбУдержаниях(Удержания, СвойстваУдержаний);
		
		ДанныеПлановыхУдержаний = Новый Массив;
		
		Для каждого СтрокаТЗ Из ПлановыеУдержания Цикл
			
			ПлановыеУдержанияФизическогоЛица = Новый Массив;
			
			ОтборФизическихЛиц.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			НайденныеСтроки = ПлановыеУдержания.НайтиСтроки(ОтборФизическихЛиц);
			Для каждого СтрокаПоФизическомуЛицу Из НайденныеСтроки Цикл
				
				СтрокаПлановоеУдержание = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаПлановоеУдержание);
				Если ЗначениеЗаполнено(СтрокаПоФизическомуЛицу.ДатаОкончания) Тогда
					СтрокаПлановоеУдержание.ДатаОкончания 			= СтрокаПоФизическомуЛицу.ДатаОкончания;
				КонецЕсли;
				СтрокаПлановоеУдержание.ПредставлениеУдержания 	= СвойстваУдержаний[СтрокаПоФизическомуЛицу.Удержание].Представление;
				
				ОбъектСтрокаПлановоеУдержание = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(СтрокаПлановоеУдержание, ОписаниеОбъектаПлановоеУдержание);
				ПлановыеУдержанияФизическогоЛица.Добавить(ОбъектСтрокаПлановоеУдержание);
				
			КонецЦикла;
			
			СтрокаПлановыеУдержания = КабинетСотрудникаМенеджерОбмена.ОписаниеОбъекта(ОписаниеОбъектаПлановыеУдержания);
			СтрокаПлановыеУдержания.Организация 		= Организация;
			СтрокаПлановыеУдержания.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
			СтрокаПлановыеУдержания.ПлановыеУдержания 	= ПлановыеУдержанияФизическогоЛица;
			
			ОбъектСтрокаПлановыеУдержания = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(СтрокаПлановыеУдержания, ОписаниеОбъектаПлановыеУдержания);
			ДанныеПлановыхУдержаний.Добавить(ОбъектСтрокаПлановыеУдержания);
		
		КонецЦикла;
		
		РесурсСервиса = РесурсПлановыеУдержания();
		РезультатВыгрузки = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, ДанныеПлановыхУдержаний, "personID", ,30);
		
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
			НоваяСтрока = ТаблицаРезультатВыгрузки.Добавить();
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			НоваяСтрока.КатегорияУдержания = Перечисления.КатегорииУдержаний.ДСВ;
			НоваяСтрока.Выгружено = Истина;
		КонецЦикла;
		
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			КабинетСотрудникаМенеджерОбмена.ЗарегистрироватьОшибкуПубликацииОбъекта(Ошибка.Ключ, РесурсСервиса, Ошибка.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаРезультатВыгрузки.Индексы.Добавить("Организация,ФизическоеЛицо,КатегорияУдержания");
	Отбор = Новый Структура("Организация,ФизическоеЛицо,КатегорияУдержания");
	ТаблицаВсехИзменений.Колонки.Добавить("Выгружено", Новый ОписаниеТипов("Булево"));
	Для каждого СтрокаТЗ Из ТаблицаВсехИзменений Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		НайденныеСтроки = ТаблицаРезультатВыгрузки.НайтиСтроки(Отбор);
		СтрокаТЗ.Выгружено = (НайденныеСтроки.Количество() > 0);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаВсехИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КатегорияУдержания", "КатегорияУдержания");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаВсехИзменений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.Организация КАК Организация,
		|	ТаблицаИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаИзменений.КатегорияУдержания КАК КатегорияУдержания,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
		|	ТаблицаИзменений.Публикуется КАК Публикуется,
		|	ТаблицаИзменений.Выгружено КАК Выгружено
		|ПОМЕСТИТЬ ВТИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Изменения.Организация КАК Организация,
		|	Изменения.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Изменения.КатегорияУдержания КАК КатегорияУдержания
		|ИЗ
		|	ВТИзменения КАК Изменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника КАК ИзмененияПлановыхУдержаний
		|		ПО Изменения.Организация = ИзмененияПлановыхУдержаний.Организация
		|			И Изменения.ФизическоеЛицо = ИзмененияПлановыхУдержаний.ФизическоеЛицо
		|			И Изменения.КатегорияУдержания = ИзмененияПлановыхУдержаний.КатегорияУдержания
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ Изменения.Публикуется
		|				ТОГДА ИСТИНА
		|			КОГДА Изменения.ВерсияДанных = ИзмененияПлановыхУдержаний.ВерсияДанных
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Организация 			= Выборка.Организация;
			МенеджерЗаписи.ФизическоеЛицо 		= Выборка.ФизическоеЛицо;
			МенеджерЗаписи.КатегорияУдержания 	= Выборка.КатегорияУдержания;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
		БылиОшибки = Истина;
	КонецПопытки;

КонецПроцедуры

Функция ПлановыеУдержанияФизическихЛиц(ИсходныеДанные, ДатаАктуальности)

	ПлановыеУдержания = Новый ТаблицаЗначений;
	ПлановыеУдержания.Колонки.Добавить("Организация");
	ПлановыеУдержания.Колонки.Добавить("ФизическоеЛицо");
	ПлановыеУдержания.Колонки.Добавить("Удержание");
	ПлановыеУдержания.Колонки.Добавить("ДатаОкончания");
	ПлановыеУдержания.Колонки.Добавить("Процент");
	ПлановыеУдержания.Колонки.Добавить("Сумма");
	
	ИсходныеДанные.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.ЗаполнитьЗначения(ДатаАктуальности,"Период");
	
	ДействующиеПлановыеУдержания = РасчетЗарплатыРасширенный.ДействующиеПлановыеУдержания(ИсходныеДанные);
	
	Если ДействующиеПлановыеУдержания.Количество() > 0 Тогда
		
		ОбрабатываемыеУдержания = Новый Соответствие;
		
		КатегорииУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(ИсходныеДанные, "КатегорияУдержания", Истина);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КатегорииУдержаний", КатегорииУдержаний);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.Ссылка КАК Ссылка,
		|	Удержания.КатегорияУдержания КАК КатегорияУдержания
		|ИЗ
		|	ПланВидовРасчета.Удержания КАК Удержания
		|ГДЕ
		|	Удержания.КатегорияУдержания В(&КатегорииУдержаний)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбрабатываемыеУдержания.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ДействующиеПлановыеУдержания Цикл
			Если ОбрабатываемыеУдержания[СтрокаТЗ.Удержание] <> Неопределено Тогда
				НоваяСтрока = ПлановыеУдержания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПлановыеУдержания;

КонецФункции

Процедура ЗаполнитьСведенияОбУдержаниях(Удержания, СвойстваУдержаний)

	УдержанияДляОбработки = Новый Массив;
	
	Для каждого Удержание Из Удержания Цикл
		Если СвойстваУдержаний[Удержание] = Неопределено Тогда
			УдержанияДляОбработки.Добавить(Удержание);
		КонецЕсли;
	КонецЦикла;
	
	Если УдержанияДляОбработки.Количество()>0 Тогда
		РеквизитыУдержаний = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(УдержанияДляОбработки, "Наименование,КраткоеНаименование");
		Для каждого Удержание Из УдержанияДляОбработки Цикл
		
			СвойстваУдержания = Новый Структура("Представление");
			
			ПредставлениеУдержания = РеквизитыУдержаний[Удержание].КраткоеНаименование;
			Если ПустаяСтрока(ПредставлениеУдержания) Тогда
				ПредставлениеУдержания = РеквизитыУдержаний[Удержание].Наименование;
			КонецЕсли;
			СвойстваУдержания.Представление = ПредставлениеУдержания;
			
			СвойстваУдержаний.Вставить(Удержание, СвойстваУдержания);
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция РезультатВыгрузкиВидовПредоставляемыхСправок(ПараметрыОбмена, МассивОтбора)
	
	Результат = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	
	ДанныеВидовСправок = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		ДанныеВидовСправок = МодульСамообслуживаниеСотрудников.ДанныеВидовСправокПредоставляемыхСотрудникам(МассивОтбора);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеВидовСправок) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если настройка выключена, публикуем все виды справок как не используемые.
	ВидыСправокПубликуются = ИспользоватьПубликациюВидовСправок();
	
	ДанныеВидовСправок.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ДанныеВидовСправок.Колонки.Добавить("Образец");
	Данные = Новый Массив;
	Для каждого СтрокаТЗ Из ДанныеВидовСправок Цикл
		Если ПустаяСтрока(СтрокаТЗ.Представление) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЗ.Представление = Лев(СтрокаТЗ.Представление, 30);
		СтрокаТЗ.Используется = ВидыСправокПубликуются И Не СтрокаТЗ.ВАрхиве И Не СтрокаТЗ.ПометкаУдаления;
		Если СтрокаТЗ.Используется И ЗначениеЗаполнено(СтрокаТЗ.Шаблон) Тогда
			СтрокаТЗ.Образец = КабинетСотрудникаМенеджерОбмена.ОбъектФайлПоПрисоединенномуФайлу(СтрокаТЗ.Шаблон, ПараметрыОбмена);
		КонецЕсли;
		ОбъектВидСправки = КабинетСотрудникаМенеджерОбмена.ОбъектСервисаПоОписанию(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ), ОписаниеПолейВидовПредоставляемыхСправок(ПараметрыОбмена.ВерсияФормата));
		Данные.Добавить(ОбъектВидСправки);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РесурсСервиса = РесурсВидовПредоставляемыхСправок();
	Результат = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID");
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСборГрафиковОтпусков(ПараметрыОбмена, МассивОтбора)

	Результат = КабинетСотрудникаМенеджерОбмена.НовыйРезультатВыгрузки();
	
	ДанныеДокументов = СборГрафиковОтпусков.ДанныеСборовГрафиковОтпусковДляСервисаКабинетСотрудника(МассивОтбора);
	Данные = КабинетСотрудникаМенеджерОбмена.ТаблицаДанныхВМассив(ДанныеДокументов, ОписаниеПолейСборГрафиковОтпусков(ПараметрыОбмена.ВерсияФормата));
	
	РесурсСервиса = КабинетСотрудникаМенеджерОбмена.РесурсДанныеСбораГрафиковОтпусковПредприятия(ПараметрыОбмена.ВерсияAPI);
	Результат = КабинетСотрудникаМенеджерОбмена.РезультатВыгрузкиКоллекцииВСервис(ПараметрыОбмена, РесурсСервиса, Данные, "ID");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПолучениеДанных

Функция ТипыОбрабатываемыхЗаявок() Экспорт

	ТипыЗаявок = Новый Массив;
	Для каждого ТипЗаявки Из Перечисления.ТипыЗаявокКабинетСотрудника Цикл
		ТипыЗаявок.Добавить(ТипЗаявки);
	КонецЦикла;
	
	Возврат ТипыЗаявок;

КонецФункции

Функция ФотографииФизическихЛиц(СписокФизическихЛиц) Экспорт
	
	Результат = Новый Соответствие;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ФотографииФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФотографииФизическихЛиц.Фотография КАК Фотография
	|ИЗ
	|	РегистрСведений.ФотографииФизическихЛиц КАК ФотографииФизическихЛиц
	|ГДЕ
	|	ФотографииФизическихЛиц.ФизическоеЛицо В (&СписокФизическихЛиц)");
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.ФизическоеЛицо, Выборка.Фотография);
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция ДанныеШтатногоРасписания(ОтборПозиций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПозиций", ОтборПозиций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	ШтатноеРасписание.Наименование КАК Наименование,
	|	ШтатноеРасписание.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&ОтборПозиций)";
	ДанныеШтатногоРасписания = Запрос.Выполнить().Выгрузить();
	
	Если КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		
		СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц = МодульОрганизационнаяСтруктура.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц();
		КонецЕсли;
		
		Если Не СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц Тогда
			Шаблон = "%1 /%2/";
			Для каждого СтрокаТЗ Из ДанныеШтатногоРасписания Цикл
				СтрокаТЗ.Наименование = СтрШаблон(Шаблон, Строка(СтрокаТЗ.Должность), Строка(СтрокаТЗ.Подразделение));
			КонецЦикла;
		КонецЕсли;
		
		ДанныеШтатногоРасписания.Колонки.Подразделение.Имя = "МестоВСтруктуреПредприятия";
		
	Иначе
		
		ДанныеШтатногоРасписания.Колонки.Добавить("МестоВСтруктуреПредприятия");
		
		СтруктураПредприятия = МестаПозицийВСтруктуреПредприятия(ДанныеШтатногоРасписания.ВыгрузитьКолонку("ПозицияШтатногоРасписания"));
		ПодразделенияПозиций = Новый Соответствие;
		Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
			ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ДанныеШтатногоРасписания Цикл
			СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[СтрокаТЗ.ПозицияШтатногоРасписания];
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеШтатногоРасписания;
	
КонецФункции

Функция ДанныеСтруктурыПредприятия(Список) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Список", Список);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК СтруктураПредприятия,
	|	СтруктураПредприятия.Код КАК Код,
	|	СтруктураПредприятия.Наименование КАК Наименование,
	|	СтруктураПредприятия.Родитель КАК Родитель,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицоРуководителя,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ЕСТЬNULL(СтруктураПредприятия.Источник.РеквизитДопУпорядочиванияИерархического, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Порядок,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.Организации
	|			ТОГДА СтруктураПредприятия.Источник
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА СтруктураПредприятия.Источник.Владелец
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&Список)";
	ТаблицаСтруктурыПредприятия = Запрос.Выполнить().Выгрузить();
	Если Не ЗначениеЗаполнено(ТаблицаСтруктурыПредприятия) Тогда
		Возврат ТаблицаСтруктурыПредприятия;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО ФизическиеЛица.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	РуководителиОрганизаций = Новый Соответствие;
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСтруктурыПредприятия, "Организация", Истина);
	Для Каждого Организация Из Организации Цикл
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		ОтветственныеЛица = ПодписиДокументов.ОтветственныеЛицаОрганизации(Организация, "Руководитель", ТекущаяДатаСеанса());
		Если ПубликуемыеФизическиеЛица[ОтветственныеЛица.Руководитель] <> Неопределено Тогда
			РуководителиОрганизаций.Вставить(Организация, ОтветственныеЛица.Руководитель);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеРуководителей = Новый Соответствие;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
		ОписанияРуководителей = Модуль.ДанныеРуководителей(Список, Истина);
		Для каждого ЭлементКоллекции Из ОписанияРуководителей Цикл
			ДанныеРуководителей.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.ФизическоеЛицо);
		КонецЦикла;
	Иначе
		КабинетСотрудникаРасширенныйПереопределяемый.ЗаполнитьДанныеРуководителей(ДанныеРуководителей, Список);
	КонецЕсли;
	
	ПорядокОрганизаций = КабинетСотрудникаМенеджерОбмена.ПорядокОрганизаций();
	Для Каждого СтрокаТаблицы Из ТаблицаСтруктурыПредприятия Цикл
		ПорядокОрганизации = ПорядокОрганизаций[СтрокаТаблицы.Организация];
		ПорядокПодразделения = СтрокаТаблицы.Порядок;
		Если ЗначениеЗаполнено(ПорядокОрганизации) Тогда
			СтрокаТаблицы.Порядок = ПорядокОрганизации + ПорядокПодразделения;
		КонецЕсли;
		СтрокаТаблицы.ФизическоеЛицоРуководителя = ДанныеРуководителей[СтрокаТаблицы.СтруктураПредприятия];
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицоРуководителя) Или ПубликуемыеФизическиеЛица[СтрокаТаблицы.ФизическоеЛицоРуководителя] = Неопределено Тогда
			СтрокаТаблицы.ФизическоеЛицоРуководителя = РуководителиОрганизаций[СтрокаТаблицы.Организация];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСтруктурыПредприятия;
	
КонецФункции

Функция КадровыеДанныеОбновляемыхСотрудников(МенеджерВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадровыеДанные.Организация КАК Организация,
	|	КадровыеДанные.Подразделение КАК Подразделение,
	|	КадровыеДанные.Должность КАК Должность
	|ИЗ
	|	ВТКадровыеДанные КАК КадровыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
	|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность
	|ГДЕ
	|	ШтатноеРасписание.Ссылка ЕСТЬ NULL
	|	И КадровыеДанные.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И КадровыеДанные.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)";
	НетПозицийШР = Запрос.Выполнить().Выгрузить();
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(НетПозицийШР, "Организация", Истина);
	Для каждого Организация Из Организации Цикл
		УправлениеШтатнымРасписанием.СоздатьПозицииОрганизации(Организация);
	КонецЦикла; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанные.Сотрудник КАК Сотрудник,
	|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
	|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы,
	|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
	|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
	|	КадровыеДанные.Организация КАК Организация,
	|	КадровыеДанные.Подразделение КАК Подразделение,
	|	КадровыеДанные.Должность КАК Должность
	|ИЗ
	|	ВТКадровыеДанные КАК КадровыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
	|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
	ДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	ПроверитьДополнитьПозицииВПравилах(НетПозицийШР, ДанныеСотрудников);
	
	Возврат ДанныеСотрудников;
	
КонецФункции

Процедура ПроверитьДополнитьПозицииВПравилах(НетПозицийШР, ДанныеСотрудников)

	Если НетПозицийШР.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПозиции = ДанныеСотрудников.СкопироватьКолонки();
	ПроверяемыеОбъекты = Новый Массив;
	Отбор = Новый Структура("Подразделение,Должность");
	Для каждого СтрокаТЗ Из НетПозицийШР Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		НайденныеСтроки = ДанныеСотрудников.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого СтрокаСотрудника Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(НовыеПозиции.Добавить(), СтрокаСотрудника);
			КонецЦикла;
			ПроверяемыеОбъекты.Добавить(НайденныеСтроки[0].Организация);
			ПроверяемыеОбъекты.Добавить(НайденныеСтроки[0].Подразделение);
		КонецЕсли;
	КонецЦикла;
	
	НовыеПозиции.Свернуть("Организация,ДолжностьПоШтатномуРасписанию,Подразделение",);
	ДополнитьПозицииВПравилах(ПроверяемыеОбъекты, НовыеПозиции);
	
КонецПроцедуры

Процедура ДополнитьПозицииВПравилах(ПроверяемыеОбъекты, НовыеПозиции)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила КАК ОбъектПравила
	|ИЗ
	|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликацииКабинетСотрудника
	|ГДЕ
	|	ПравилаПубликацииКабинетСотрудника.ОбъектПравила В(&ПроверяемыеОбъекты)";
	Выборка = Запрос.Выполнить().Выбрать();
	ОбъектыПравил = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ОбъектыПравил.Вставить(Выборка.ОбъектПравила, Истина);
	КонецЦикла;
	
	ТаблицаПозиций = Новый ТаблицаЗначений;
	ТаблицаПозиций.Колонки.Добавить("ДолжностьПоШтатномуРасписанию");
	Для каждого СтрокаПозиции Из НовыеПозиции Цикл
		Если ОбъектыПравил[СтрокаПозиции.Организация] <> Неопределено Тогда
			НоваяСтрока = ТаблицаПозиций.Добавить();
			НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаПозиции.ДолжностьПоШтатномуРасписанию;
		ИначеЕсли ОбъектыПравил[СтрокаПозиции.Подразделение] <> Неопределено Тогда
			НоваяСтрока = ТаблицаПозиций.Добавить();
			НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаПозиции.ДолжностьПоШтатномуРасписанию;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаПозиций.Количество() > 0  Тогда
		
		ПубликуемыеПодразделенияПредприятия = ПубликуемаяСтруктураПредприятия(ТаблицаПозиций.ВыгрузитьКолонку("ДолжностьПоШтатномуРасписанию"));
		
		ТаблицаИзменений = Новый ТаблицаЗначений;
		ТаблицаИзменений.Колонки.Добавить("ПредметПубликации");
		Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
			НоваяСтрока = ТаблицаИзменений.Добавить();
			НоваяСтрока.ПредметПубликации = СтрокаТЗ.ДолжностьПоШтатномуРасписанию;
		КонецЦикла;
		
		Для каждого Подразделение Из ПубликуемыеПодразделенияПредприятия Цикл
			НоваяСтрока = ТаблицаИзменений.Добавить();
			НоваяСтрока.ПредметПубликации = Подразделение;
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаПубликацииКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = ТаблицаПозиций;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПравила", "ДолжностьПоШтатномуРасписанию");
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
			
			Блокировка.Заблокировать();
			
			Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
				
				МенеджерЗаписи = РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ОбъектПравила = СтрокаТЗ.ДолжностьПоШтатномуРасписанию;
				МенеджерЗаписи.Записать();
				
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации 	= СтрокаТЗ.ДолжностьПоШтатномуРасписанию;
				МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
				
			КонецЦикла;
			
			Для каждого Подразделение Из ПубликуемыеПодразделенияПредприятия Цикл
				
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации 	= Подразделение;
				МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Функция МестаПозицийВСтруктуреПредприятия(Позиции)
	
	СтруктураПредприятия = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = Модуль.МестаПозицийВСтруктуреПредприятия(Позиции);
	КонецЕсли;
	Возврат СтруктураПредприятия;

КонецФункции

Функция ДанныеСотрудниковДляПубликации(ПараметрыОбмена, МассивОтбора) Экспорт
	
	ВедетсяШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ПубликоватьСтруктуруЮридическихЛиц = КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц();
	
	ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,Должность,ДатаПриема,
	|РабочееМестоПериодРегистрации,ВидЗанятости,ТарифнаяСтавка,ПоказательТарифнойСтавки,ВидСобытия,ГрафикРаботы";
	Если ВедетсяШтатноеРасписание Тогда
		Если ПубликоватьСтруктуруЮридическихЛиц Тогда
			ВыбираемыеПоля = ВыбираемыеПоля + ",ДолжностьПоШтатномуРасписанию,Подразделение";
		Иначе
			ВыбираемыеПоля = ВыбираемыеПоля + ",ДолжностьПоШтатномуРасписанию,МестоВСтруктуреПредприятия";
		КонецЕсли;
	Иначе
		ВыбираемыеПоля = ВыбираемыеПоля + ",Подразделение";
	КонецЕсли;
	
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивОтбора, ВыбираемыеПоля, ТекущаяДатаСеанса());
	ТаблицаДанных.Колонки.ПоказательТарифнойСтавки.Имя = "Показатель";
	ТаблицаДанных.Колонки.Добавить("ПоказательТарифнойСтавки");
	
	Если ВедетсяШтатноеРасписание И ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТаблицаДанных.Колонки.Подразделение.Имя = "МестоВСтруктуреПредприятия";
	КонецЕсли;
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "Показатель", Истина);
	ПоказателиКВыгрузке = Новый Массив;
	Для каждого Показатель Из Показатели Цикл
		Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда
			ПоказателиКВыгрузке.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	ПоказательПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПоказателиКВыгрузке,"КраткоеНаименование");
	
	ПозицииСотрудников = Новый Соответствие;
	ПодразделенияПозиций = Новый Соответствие;
	Если Не ВедетсяШтатноеРасписание Тогда
		
		ТаблицаДанных.Колонки.Добавить("ДолжностьПоШтатномуРасписанию");
		ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
		|	КадровыеДанные.Подразделение КАК Подразделение
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
			ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
			ПодразделенияПозиций.Вставить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию, СтрокаТЗ.Подразделение);
		КонецЦикла;
		
		Если Не ПубликоватьСтруктуруЮридическихЛиц Тогда
			Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
			СтруктураПредприятия = МестаПозицийВСтруктуреПредприятия(Позиции);
			Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
				ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		ПоказательТарифнойСтавки = ПоказательПредставление[СтрокаТЗ.Показатель];
		СтрокаТЗ.ПоказательТарифнойСтавки = ?(ПоказательТарифнойСтавки = Неопределено,"",ПоказательТарифнойСтавки);
		Если Не ВедетсяШтатноеРасписание Тогда
			СтрокаТЗ.ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
			СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[СтрокаТЗ.ДолжностьПоШтатномуРасписанию];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция РуководителиПодразделенийОрганизаций(Подразделения) Экспорт

	Возврат РуководителиПодразделенийОрганизации.ДанныеРуководителей(Подразделения, Истина);

КонецФункции

#КонецОбласти

#Область НастройкиФункциональностиСервиса

Процедура ЗаполнитьНастройкиФункциональностиСервиса(НастройкиФункциональности, ВерсияФормата) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиФункциональности.Командировка 		= Настройки.ИспользоватьОплатуКомандировок;
	НастройкиФункциональности.Отгул 			= Настройки.ИспользоватьОтгулы;
	НастройкиФункциональности.УчебныйОтпуск 	= Настройки.ИспользоватьОтпускаУчебные;
	НастройкиФункциональности.ОтпускБезОплаты 	= Настройки.ИспользоватьОтпускаБезОплаты;
	НастройкиФункциональности.ЕдиновременнаяВыплатаКОтпуску = Настройки.ИспользоватьЕдиновременнуюВыплатуКОтпуску;
	НастройкиФункциональности.МатериальнаяПомощьКОтпуску 	= Настройки.ИспользоватьМатериальнуюПомощьПриОтпуске;
	
	Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	НастройкиФункциональности.ЗаявленияНаДСВ 			= Настройки.ЗаявленияНаДСВ;
	НастройкиФункциональности.СпособРасчетаДСВПроцентом = Настройки.СпособРасчетаДСВПроцентом;
	НастройкиФункциональности.СпособРасчетаДСВСуммой 	= Настройки.СпособРасчетаДСВСуммой;
	НастройкиФункциональности.СпособРасчетаДСВПроцентомНеБолееСуммы = Настройки.СпособРасчетаДСВПроцентомНеБолееСуммы;
	НастройкиФункциональности.ЗаявленияНаКомпенсациюОтпуска 		= Не Настройки.КомпенсацияОтпускаНедоступна;
	
КонецПроцедуры

Функция ДоступнаяФункциональностьСервисаПоВерсииПриложения() Экспорт

	ИспользуемыеФункции = КабинетСотрудникаМенеджерОбмена.НовоеОписаниеИспользуемыеФункции();
	Для каждого ЭлементКоллекции Из ИспользуемыеФункции Цикл
		ИспользуемыеФункции[ЭлементКоллекции.Ключ] = Истина;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИспользуемыеФункции.Командировка 		= НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок;
	ИспользуемыеФункции.Отгул 				= НастройкиРасчетаЗарплаты.ИспользоватьОтгулы;
	ИспользуемыеФункции.УчебныйОтпуск 		= НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные;
	ИспользуемыеФункции.ОтпускБезОплаты 	= НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты;
	
	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		ИспользуемыеФункции.ЗаявленияНаДСВ = Ложь;
		ИспользуемыеФункции.СпособРасчетаДСВПроцентом = Ложь;
		ИспользуемыеФункции.СпособРасчетаДСВСуммой = Ложь;
		ИспользуемыеФункции.СпособРасчетаДСВПроцентомНеБолееСуммы = Ложь;
		ИспользуемыеФункции.ЗаявленияНаКомпенсациюОтпуска = Ложь;
	Иначе
		НастройкиИспользуемаяФункциональность = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
		ИспользуемыеФункции.ЗаявленияНаДСВ = НастройкиИспользуемаяФункциональность.ЗаявленияНаДСВ;
		ИспользуемыеФункции.СпособРасчетаДСВПроцентом = НастройкиИспользуемаяФункциональность.СпособРасчетаДСВПроцентом;
		ИспользуемыеФункции.СпособРасчетаДСВСуммой = НастройкиИспользуемаяФункциональность.СпособРасчетаДСВСуммой;
		ИспользуемыеФункции.СпособРасчетаДСВПроцентомНеБолееСуммы = НастройкиИспользуемаяФункциональность.СпособРасчетаДСВПроцентомНеБолееСуммы;
		Если КабинетСотрудника.ИспользоватьФормат503() Тогда
			ИспользуемыеФункции.ЗаявленияНаКомпенсациюОтпуска = Не НастройкиИспользуемаяФункциональность.КомпенсацияОтпускаНедоступна;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИспользуемыеФункции;

КонецФункции

#КонецОбласти

#Область Прочие

Процедура СоздатьВТШтатноеРасписание(МенеджерВТ, ИспользоватьШтатноеРасписание) Экспорт
	
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Ссылка <> &УправленческаяОрганизация";
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организации", Организации);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Ссылка КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Подразделение КАК Подразделение,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	ШтатноеРасписание.Утверждена КАК Утверждена,
	|	ШтатноеРасписание.ДатаУтверждения КАК ДатаУтверждения,
	|	ШтатноеРасписание.Закрыта КАК Закрыта,
	|	ШтатноеРасписание.ДатаЗакрытия КАК ДатаЗакрытия
	|ПОМЕСТИТЬ ВТШтатноеРасписание
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Владелец В(&Организации)
	|	И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
	
	Если ИспользоватьШтатноеРасписание Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	Иначе
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ВТШтатноеРасписание", "ВТШтатноеРасписаниеИсходное");
		Запрос.Выполнить();
		
		Для каждого Организация Из Организации Цикл
			УправлениеШтатнымРасписанием.СоздатьПозицииОрганизации(Организация);
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		// новые позиции
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Организация КАК Организация,
		|	ШтатноеРасписание.Подразделение КАК Подразделение,
		|	ШтатноеРасписание.ПозицияШтатногоРасписания КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТШтатноеРасписание КАК ШтатноеРасписание
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтатноеРасписаниеИсходное КАК ШтатноеРасписаниеИсходное
		|		ПО ШтатноеРасписание.ПозицияШтатногоРасписания = ШтатноеРасписаниеИсходное.ПозицияШтатногоРасписания
		|ГДЕ
		|	ШтатноеРасписаниеИсходное.ПозицияШтатногоРасписания ЕСТЬ NULL";
		НовыеПозиции = Запрос.Выполнить().Выгрузить();
		
		Если НовыеПозиции.Количество()> 0 Тогда
			ПроверяемыеОбъекты = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеОбъекты, НовыеПозиции.ВыгрузитьКолонку("Организация"), Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеОбъекты, НовыеПозиции.ВыгрузитьКолонку("Подразделение"), Истина);
			ДополнитьПозицииВПравилах(ПроверяемыеОбъекты, НовыеПозиции);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДанныеПриОтключенииСервиса() Экспорт

	РегистрыСведений.АктуальностьИнформацииОбОтпуске.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьНаборЗаписей().Записать();
	
КонецПроцедуры

Процедура ОчиститьДанныеПриПриОбновленииПубликации() Экспорт

	РегистрыСведений.АктуальностьИнформацииОбОтпуске.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияПлановыхУдержанийДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск.СоздатьНаборЗаписей().Записать();
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьЗначенияСвойств(НастройкиПрограммы, НастройкиРасчетаЗарплаты);

КонецПроцедуры

Процедура ДобавитьЭлементБлокировкиСотрудникиДляОбновленияПубликацииПравНаОтпуск(Блокировка, ПространствоБлокировки) Экспорт

	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск");
	Если ТипЗнч(ПространствоБлокировки) =  Тип("ТаблицаЗначений") Тогда
		ЭлементБлокировки.ИсточникДанных = ПространствоБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
	Иначе
		ЭлементБлокировки.УстановитьЗначение("Сотрудник", ПространствоБлокировки);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьЭлементыБлокировкиОбновлениеНастройкиПубликации(Блокировка) Экспорт

	Блокировка.Добавить("РегистрСведений.АктуальностьИнформацииОбОтпуске");
	Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск");
	Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков");
	Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");

КонецПроцедуры

Процедура ДобавитьЭлементыБлокировкиПриОбновленииПубликации(Блокировка) Экспорт

	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликацииПравНаОтпуск");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

КонецПроцедуры

Процедура ОбновитьСтруктуруПредприятия() Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктураСобытия");
		Модуль.ОбновитьСтруктуруПредприятия(Ложь);
	КонецЕсли;

КонецПроцедуры

Функция НоваяПубликуемаяСтруктураПредприятияПозиций(Позиции) Экспорт

	ПодразделенияПредприятия = ПубликуемаяСтруктураПредприятия(Позиции);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодразделенияПредприятия", ПодразделенияПредприятия);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В(&ПодразделенияПредприятия)";
	НовыеПодразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПредприятия, НовыеПодразделения);

КонецФункции

Функция ПубликуемаяСтруктураПредприятия(Позиции) Экспорт
	
	ПодразделенияПредприятия = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = Модуль.МестаПозицийВСтруктуреПредприятия(Позиции);
		ПодразделенияПредприятия = ОбщегоНазначения.ВыгрузитьКолонку(СтруктураПредприятия,"Подразделение",Истина);
	КонецЕсли;
	
	Если ПодразделенияПредприятия.Количество() > 0 Тогда
		Для Сч = 0 По ПодразделенияПредприятия.ВГраница() Цикл
			Если Не ЗначениеЗаполнено(ПодразделенияПредприятия[Сч]) Тогда
				ПодразделенияПредприятия.Удалить(Сч);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПодразделенияПредприятия = КабинетСотрудника.РодителиПодразделений(ПодразделенияПредприятия);
	КонецЕсли;
	
	Возврат ПодразделенияПредприятия;
	
КонецФункции

Функция ИменаКонтролируемыхПолей(Объект) Экспорт
	
	ИменаКонтролируемыхПолей = "";
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ШтатноеРасписание") Тогда
		ИменаКонтролируемыхПолей = "Владелец,Подразделение,Должность,Наименование,ПометкаУдаления";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ГрафикиРаботыСотрудников") Тогда
		ИменаКонтролируемыхПолей = "Наименование,ПометкаУдаления";
	ИначеЕсли ТипЗнч(Объект) = ТипОбъектВидыПредоставляемыхСотрудникамСправок() Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
			МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			ИменаКонтролируемыхПолей = МодульСамообслуживаниеСотрудников.ИменаКонтролируемыхПолейПредоставляемыхСотрудникамСправок(Объект);
		КонецЕсли;
	Иначе
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			ИменаКонтролируемыхПолей = Модуль.ИменаКонтролируемыхПолейКабинетСотрудника(Объект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИменаКонтролируемыхПолей;
	
КонецФункции

Функция МестоПозицийВСтруктуреПредприятия(ПозицияШР)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат Модуль.МестоПозицииВСтруктуреПредприятия(ПозицияШР);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ПодразделениеВСтруктуреПредприятия(Подразделение) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат Модуль.ПодразделениеВСтруктуреПредприятия(Подразделение.Ссылка);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ТипШтатноеРасписание() Экспорт

	Возврат Тип("СправочникСсылка.ШтатноеРасписание");

КонецФункции

Функция ТипГрафикРаботы() Экспорт

	Возврат Тип("СправочникСсылка.ГрафикиРаботыСотрудников");

КонецФункции

Функция ТипСтруктураПредприятия() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат МодульОрганизационнаяСтруктура.ТипСтруктураПредприятия();
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Процедура ОчиститьДанныеОбАктуальностиИнформацииОбОтпускеНепубликуемыхСотрудников(СотрудникиКПубликации) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиКПубликации", СотрудникиКПубликации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктуальностьИнформацииОбОтпуске.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.АктуальностьИнформацииОбОтпуске КАК АктуальностьИнформацииОбОтпуске
	|ГДЕ
	|	НЕ АктуальностьИнформацииОбОтпуске.Сотрудник В (&СотрудникиКПубликации)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.АктуальностьИнформацииОбОтпуске.СоздатьМенеджерЗаписи();
		Запись.Сотрудник = Выборка.Сотрудник;
		Запись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция ТипОбъектВидыПредоставляемыхСотрудникамСправок()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Возврат МодульСамообслуживаниеСотрудников.ТипОбъектВидыПредоставляемыхСотрудникамСправок();
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ТипСсылкаВидыПредоставляемыхСотрудникамСправок() Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Возврат МодульСамообслуживаниеСотрудников.ТипСсылкаВидыПредоставляемыхСотрудникамСправок();
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция СсылкаВидыПредоставляемыхСотрудникамСправок(Идентификатор) Экспорт

	Ссылка = Неопределено;
	Если ЗначениеЗаполнено(Идентификатор) И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		СправочникМенеджер =  МодульСамообслуживаниеСотрудников.СправочникМенеджерВидыПредоставляемыхСотрудникамСправок();
		Ссылка = СправочникМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ВидыПредоставляемыхСотрудникамСправок() Экспорт

	ВидыСправок = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Возврат МодульСамообслуживаниеСотрудников.ВидыПредоставляемыхСотрудникамСправок();
	КонецЕсли;
	
	Возврат ВидыСправок;

КонецФункции

Функция ИспользоватьПубликациюВидовСправок() Экспорт

	ИмяОпции = "ИспользоватьЗапросыСправокСотрудником";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	Использовать = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	
	Возврат Использовать;

КонецФункции

Процедура ЗарегистрироватьОбновлениеВидовСправок()

	ТипСсылка = ТипСсылкаВидыПредоставляемыхСотрудникамСправок();
	Если ТипСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ВидСправки
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	&Условие";
	
	ИмяТаблицы = Метаданные.НайтиПоТипу(ТипСсылка).ПолноеИмя();
	Условие = СтрШаблон("%1 %2","ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА", ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Условие", Условие);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ВидСправки");
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = Выборка.ВидСправки;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

Функция ТипПодразделение()
	
	Если КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат Тип("СправочникСсылка.ПодразделенияОрганизаций");
	Иначе
		Возврат КабинетСотрудникаВнутренний.ТипСтруктураПредприятия();
	КонецЕсли;
	
КонецФункции

Процедура ВключитьСборГрафиковОтпусков() Экспорт

	Если КабинетСотрудника.ИспользуетсяВерсияФормата("1.1") Тогда
		СборГрафиковОтпусков.УстановитьЗначениеИспользоватьСборГрафиковОтпусков(Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ОбновитьПубликуемыеПодразделенияПредприятия(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.СтруктураПредприятия";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПодразделенияПредприятия = КабинетСотрудника.РодителиПодразделений(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектПубликации"));
	ПодразделенияДляПубликации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПредприятия, РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектПубликации"));
	Если ПодразделенияДляПубликации.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	Для каждого ПодразделениеПредприятия Из ПодразделенияДляПубликации Цикл
	
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника", "ОбъектПубликации", ПодразделениеПредприятия) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПубликации.Установить(ПодразделениеПредприятия);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ОбъектПубликации = ПодразделениеПредприятия;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ОбновитьПубликациюСотрудников(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Изменения.ПредметПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И Изменения.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИзмененияДляСервисаКабинетСотрудника", "ПредметПубликации", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(Выборка.Ссылка);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ПредметПубликации = Выборка.Ссылка;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура НастроитьРегламентноеЗаданиеПроверкаАктуальностиИнформацииОбОтпуске(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", "ПроверкаАктуальностиИнформацииОбОтпуске");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Не ЗначениеЗаполнено(Задания) Или Задания[0].Использование Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Метаданные.РегламентныеЗадания.ПроверкаАктуальностиИнформацииОбОтпуске);
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура ВыполнитьНачальныйПереносДанныхГрафикаОтпусков(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков КАК СотрудникиДляОбновленияПубликацииГрафикаОтпусков
		|		ПО ПубликуемыеОбъекты.ОбъектПубликации = СотрудникиДляОбновленияПубликацииГрафикаОтпусков.Сотрудник
		|ГДЕ
		|	СотрудникиДляОбновленияПубликацииГрафикаОтпусков.Сотрудник ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков", "Сотрудник", Выборка.Сотрудник) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликацииГрафикаОтпусков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Сотрудник = Выборка.Сотрудник;
		НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);
	
КонецПроцедуры

Процедура ЗарегистрироватьПубликациюГрафиковРаботы(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат301() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГрафикиРаботы
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|ГДЕ
	|	НЕ ГрафикиРаботыСотрудников.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТГрафикиРаботы КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ГрафикиРаботы.Ссылка = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбработкаВыполнена = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника", "ОбъектПубликации", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПубликации.Установить(Выборка.Ссылка);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ОбъектПубликации = Выборка.Ссылка;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Изменения.ПредметПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|	И Изменения.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИзмененияДляСервисаКабинетСотрудника", "ПредметПубликации", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(Выборка.Ссылка);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ПредметПубликации = Выборка.Ссылка;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК Изменения
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Изменения.ПредметПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И Изменения.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИзмененияДляСервисаКабинетСотрудника", "ПредметПубликации", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(Выборка.Ссылка);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ПредметПубликации = Выборка.Ссылка;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);
	
КонецПроцедуры

Процедура ЗарегистрироватьПубликациюДанныхГрафиковРаботы(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не КабинетСотрудника.ИспользоватьФормат303() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ТекущийГод = Год(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийГод", ТекущийГод);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Ссылка
	|ПОМЕСТИТЬ ВТГрафики
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы,
	|	&ТекущийГод КАК Год
	|ИЗ
	|	ВТГрафики КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника КАК ИзмененияДанныхГрафика
	|		ПО ГрафикиРаботы.Ссылка = ИзмененияДанныхГрафика.ГрафикРаботы
	|			И (ИзмененияДанныхГрафика.Год = &ТекущийГод)
	|ГДЕ
	|	ИзмененияДанныхГрафика.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИзмененияДанныхГрафикаКабинетСотрудника", "ГрафикРаботы", Выборка.ГрафикРаботы) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДанныхГрафикаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(Выборка.ГрафикРаботы);
		НаборЗаписей.Отбор.Год.Установить(Выборка.Год);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ГрафикРаботы 	= Выборка.ГрафикРаботы;
		ЗаписьНабора.Год 			= Выборка.Год;
		ЗаписьНабора.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ОтменитьРегистрациюГруппГрафиковРаботы(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.ГрафикиРаботыСотрудников
	|	И ПубликуемыеОбъекты.ОбъектПубликации.ЭтоГруппа";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника", "ОбъектПубликации", Выборка.Ссылка) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПубликации.Установить(Выборка.Ссылка);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	

КонецПроцедуры

Процедура ЗарегистрироватьПубликациюВидовСправок(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ИспользоватьПубликациюВидовСправок()
		Или Не КабинетСотрудника.ИспользоватьФормат50375() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = КабинетСотрудника.ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеФункциональностиСервиса(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
		ОбработкаВыполнена = Ложь;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
		ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

#КонецОбласти

Функция ЗагрузитьГрафикиОтпусков(ПараметрыОбмена, ПолученныеИзменения, РезультатОбработки, ВерсияИзменений) Экспорт

	Если Не КабинетСотрудника.ИспользуетсяВерсияФормата("1.1") Тогда
		Возврат ВерсияИзменений;
	КонецЕсли;
	
	ТаблицаГрафиковОтпусков = Новый ТаблицаЗначений;
	ТаблицаГрафиковОтпусков.Колонки.Добавить("Объект");
	ТаблицаГрафиковОтпусков.Колонки.Добавить("ВерсияИзменений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаГрафиковОтпусков.Колонки.Добавить("ИдентификаторДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		
	МассивОбъектов = ПолученныеИзменения["divisionVacationsScheduleRequests"];
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ТаблицаОбъектов = КабинетСотрудникаМенеджерОбмена.ТаблицаИзМассиваОбъектов(МассивОбъектов, ОписаниеОбъектаГрафикОтпусковПодразделения(ПараметрыОбмена.ВерсияФормата));
		ЗаполнитьТаблицуГрафиковОтпусков(ТаблицаГрафиковОтпусков, ТаблицаОбъектов);
	КонецЕсли;
	
	Если ТаблицаГрафиковОтпусков.Количество() = 0 Тогда
		Возврат ВерсияИзменений;
	КонецЕсли;
	
	Идентификаторы = ТаблицаГрафиковОтпусков.ВыгрузитьКолонку("ИдентификаторДокумента");
	ИдентификаторыДокументы = СборГрафиковОтпусков.ДокументыПоИдентификаторам(Идентификаторы);
	
	Для каждого СтрокаТЗ Из ТаблицаГрафиковОтпусков Цикл
		
		ГрафикОтпусков = СтрокаТЗ.Объект;
		
		ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		
		Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ОписаниеДокумента = СборГрафиковОтпусков.ОписаниеДокумента();
			ОписаниеДокумента.Год 			= ГрафикОтпусков.Год;
			ОписаниеДокумента.Подразделение = ГрафикОтпусков.Подразделение;
			ОписаниеДокумента.ИдентификаторКабинетСотрудника = ГрафикОтпусков.ИдентификаторДокумента;
			ОписаниеДокумента.СостояниеСбораГрафиковОтпусков = ГрафикОтпусков.СостояниеСбораГрафиковОтпусков;
			Для каждого ЗаписьПериода Из ГрафикОтпусков.Периоды Цикл
				НоваяСтрока = ОписаниеДокумента.Периоды.Добавить();
				НоваяСтрока.ФизическоеЛицо 	= ЗаписьПериода.ФизическоеЛицо;
				НоваяСтрока.ДатаНачала 		= ЗаписьПериода.ДатаНачала;
				НоваяСтрока.ДатаОкончания 	= ЗаписьПериода.ДатаОкончания;
			КонецЦикла;
			
			СборГрафиковОтпусков.ОбработатьНовыйГрафикПодразделения(ОписаниеДокумента, ИдентификаторыДокументы);
			
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ТипИзменений = НСтр("ru = 'Изменения сбора графиков отпусков (по подразделениям)'");
			КабинетСотрудникаМенеджерОбмена.ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки());
			КабинетСотрудникаМенеджерОбмена.ЗарегистрироватьНезагруженныйИдентификатор(ИдентификаторДокумента, Перечисления.ТипыОбъектовКабинетСотрудника.СборГрафиковОтпусков);
		КонецПопытки;
	
	КонецЦикла;
		
	РезультатОбработки.КоличествоОбъектов = РезультатОбработки.КоличествоОбъектов + ТаблицаГрафиковОтпусков.Количество();
	
	Возврат ВерсияИзменений;

КонецФункции

Процедура ЗаполнитьТаблицуГрафиковОтпусков(ТаблицаДанных, ТаблицаОбъектов)
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Объект 			= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ);
		НоваяСтрока.ВерсияИзменений = СтрокаТЗ.Версия;
		НоваяСтрока.ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
	КонецЦикла;

КонецПроцедуры

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;

	Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.СостоянияСбораГрафиковОтпусков") Тогда
		Результат = СостоянияСбораГрафиковОтпусков(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СостоянияСбораГрафиковОтпусков(Состояние)

	Результат = Неопределено;
	
	Если Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Черновик Тогда
		Результат = "draft";
	ИначеЕсли Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Отказано Тогда
		Результат = "denied";
	ИначеЕсли Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Утверждено Тогда
		Результат = "approved";
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗначениеИзЗначенияПоляСервиса(ЗначениеПоляСервиса, ИмяПоля) Экспорт

	Значение = ЗначениеПоляСервиса;
	Если ИмяПоля = "СостояниеСбораГрафиковОтпусков" Тогда
		Значение = СостояниеСбораГрафиковОтпусковСервиса(Значение);
	КонецЕсли;
	
	Возврат Значение;

КонецФункции

Функция СостояниеСбораГрафиковОтпусковСервиса(Состояние)

	Результат = Неопределено;
	Если Состояние = "draft" Тогда
		Результат = Перечисления.СостоянияСбораГрафиковОтпусков.Черновик;
	ИначеЕсли Состояние = "denied" Тогда
		Результат = Перечисления.СостоянияСбораГрафиковОтпусков.Отказано;
	ИначеЕсли Состояние = "approved" Тогда
		Результат = Перечисления.СостоянияСбораГрафиковОтпусков.Утверждено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти







