#Область ПрограммныйИнтерфейс

// Выполняет обмен с сервером СЭДО ФСС из фонового задания.
Процедура ВыполнитьОбменСФСС() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменСФСС);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Организации = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
	Если Организации.Количество() = 0 Тогда
		ОтключитьОбменСФСС();
		Возврат;
	КонецЕсли;
	
	КлючКоличествоОшибокСоединения = "КоличествоОшибокСоединения";
	КоличествоОшибокСоединения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъектаОбщихНастроек(),
		КлючКоличествоОшибокСоединения,
		0);
	
	БылиОшибки = Ложь;
	БылиОшибкиСоединения = Ложь;
	Для каждого Организация Из Организации Цикл
		
		РегистрационныйНомерФСС = РегистрационныйНомерФССОрганизации(Организация);
		Если ПустаяСтрока(РегистрационныйНомерФСС) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = МетаданныеВходящихСообщенийСЭДОФСС(Организация);
		
		Если НЕ Результат.Выполнено Тогда
			Шаблон = НСтр("ru='При получении данных СЭДО ФСС по организации %1 произошла ошибка: %2.'");
			Шаблон = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(Шаблон, Истина);
			ОписаниеОшибки = СтрШаблон(Шаблон, Организация, Результат.ОписаниеОшибки);
			ЗаписатьСобытиеВЖурнал(УровеньЖурналаРегистрации.Ошибка, ОписаниеОшибки);
			БылиОшибкиСоединения = Результат.ОшибкаСоединения;
			БылиОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ОдинРазВСутки = Ложь;
	МаксимальноеКоличествоОшибокСоединенияПодряд = 3;
	Если БылиОшибкиСоединения Тогда
		КоличествоОшибокСоединения = КоличествоОшибокСоединения + 1;
		Если КоличествоОшибокСоединения >= МаксимальноеКоличествоОшибокСоединенияПодряд Тогда
			// Если были ошибки подключения и они повторялись три и более раз подряд,
			// то меняем расписание рег.задания.
			ОдинРазВСутки = Истина;
		КонецЕсли;
	Иначе
		КоличествоОшибокСоединения = 0;
	КонецЕсли;
	
	Если ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации) Тогда
		ВключитьОбменСФСС(ОдинРазВСутки);
	Иначе
		ОтключитьОбменСФСС();
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъектаОбщихНастроек(),
		КлючКоличествоОшибокСоединения,
		КоличествоОшибокСоединения);
		
	Если БылиОшибки Тогда
		ОписаниеОшибки = НСтр("ru='При получении данных СЭДО ФСС происходили ошибки. Подробную информацию об ошибках см. в технологическом журнале.'");
		ОписаниеОшибки = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ОписаниеОшибки, Истина);
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает признак необходимости запуска регламентного задания обмена
// по заданной организации.
// см.также ЭлектронныйДокументооборотСФССПереопределяемый.ПроверитьНеобходимостьЗапускаРегламентногоЗадания
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой нужно проверить необходимость запуска.
// Возвращаемое значение:
//   Булево - Истина, если для организации требуется запуск рег.задания.
Функция ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации) Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации);
	
КонецФункции

// Получает метаданные входящих сообщений на сервере СЭДО ФСС и возвращает список входящих.
// Параметры:
//   Организация - организация, для которой нужно получить входящие.
//   ДатаСообщений - дата, на которую нужно получить список входящих.
// Возвращаемое значение:
//   Результат             - Структура:
//     * Выполнено         - Булево - признак успешного выполнения операции.
//     * ОписаниеОшибки    - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//     * ДанныеСообщений   - Структура - структура с полями:
//         * Идентификатор          - Строка - идентификатор сообщения.
//         * Тип                    - Число  - тип сообщения согласно спецификации.
//         * Получатель             - Строка - идентификатор получателя.
//         * ТребуетсяПодтверждение - Булево - требуется подтверждение о прочтении сообщения.
//         * Новое                  - Булево - признак того, что это новое сообщение, данные которого ещё не были загружены.
//
Функция МетаданныеВходящихСообщенийСЭДОФСС(Организация, ДатаСообщений = Неопределено) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДОСервер.МетаданныеВходящихСообщенийСЭДОФСС(Организация, ДатаСообщений);
	
	Возврат Результат;
	
КонецФункции

// Включает регламентное задание обмена с сервером СЭДО ФСС.
Процедура ВключитьОбменСФСС(ОдинРазВСутки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоСекундВЧасе = 3600;
	Если ОдинРазВСутки Тогда
		ПериодПовтораВТечениеДня = 0;
	Иначе
		ПериодПовтораВТечениеДня = 4 * КоличествоСекундВЧасе;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() > 0 Тогда
		ПараметрыЗадания = Задания[0];
		Если ПараметрыЗадания.Использование Тогда
			Если ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня <> ПериодПовтораВТечениеДня Тогда
				ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
				НовыеПараметры = Новый Структура;
				НовыеПараметры.Вставить("Расписание", ПараметрыЗадания.Расписание);
				НовыеПараметры.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
				НовыеПараметры.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
				РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыЗадания.УникальныйИдентификатор, НовыеПараметры);
			КонецЕсли;
			Возврат;
		Иначе
			ОтключитьОбменСФСС();
		КонецЕсли;
	КонецЕсли;
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
	Расписание.ПериодПовтораДней 		= 1;

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбменСФСС);
	ПараметрыЗадания.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("Наименование",
		ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(НСтр("ru='Обмен с ФСС'"), Истина));
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Отключает регламентное задание обмена с сервером СЭДО ФСС.
Процедура ОтключитьОбменСФСС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Ключ", ИдентификаторРегламентногоЗадания());
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого Задание Из НайденныеЗадания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменСФСС;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие - 
//    * Ключ - псевдоним метода, например ОчиститьОбластьДанных.
//    * Значение - имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных.
//        В качестве значения можно указать Неопределено, в этом случае считается что имя 
//        совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменСФСС.ИмяМетода);
	
КонецПроцедуры

// Возвращает массив новых сообщений СЭДО ФСС.
// Параметры:
//   Отбор - Структура - параметры отбора сообщений.
//     * Организация - СправочникСсылка.Организации, Массив - организация(и) для отбора по организациям.
//     * Тип - Число, Массив - тип(ы) сообщения(ий) для отбора по типу. Необязательный.
//     * ТребуетсяПодтверждение - Булево - признак отбора сообщений требующих подтверждение. Необязательный.
// Возвращаемое значение:
//   Таблица значений с колонками:
//     * Идентификатор - Строка - идентификатор сообщения.
//     * Организация - СправочникСсылка.Организации - организация сообщения.
//     * Тип - Число - тип сообщения.
Функция НовыеСообщенияСЭДОФСС(Знач Отбор = Неопределено) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
		Организации = СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
		Отбор.Вставить("Организация", Организации);
	КонецЕсли;
	
	Организация = Отбор.Организация;
	Результат = КонтекстЭДОСервер.НовыеСообщенияСЭДОФСС(Организация, Отбор);
	
	Возврат Результат;
	
КонецФункции

Функция ПриПолученииСпискаНовыхСообщенийСЭДО(Организация, ДанныеСообщений) Экспорт
	
	Обработанные = Новый Массив;
	ЭлектронныйДокументооборотСФССПереопределяемый.
		ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Организация, ДанныеСообщений, Обработанные);
	Возврат Обработанные;
	
КонецФункции

Функция ПриПолученииСодержимогоСообщенияСЭДО(Организация, ДанныеСообщения) Экспорт
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Обработано", Ложь);
	РезультатОбработки.Вставить("ОшибкаОбработки", Ложь);
	РезультатОбработки.Вставить("ОписаниеОшибки", "");
	
	ТипСообщенияОшибкиЛогическогоКонтроля = "14";
	ТипСообщенийОтветаНаПодтверждениеОПолучении = "11";
	ТипСообщенийПодтвержденияОПолучении = "6";
	ТипСообщенийРезультПодпискиСтрахователя = "12";
	ТипСообщенийОтветСтрахователяНаЗапросКП = "313";
	ТипСообщенийОтветСтрахователяНаЗапросВП = "314";
	ТипыСообщенийСДОФССДоходнаяЧасть = ПолучитьТипыСообщенийСДОФССДоходнаяЧасть();
	Если ДанныеСообщения.Тип = ТипСообщенияОшибкиЛогическогоКонтроля Тогда
		
		// Сообщение об ошибке логического контроля.
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
		ДанныеОшибки = КонтекстЭДО.
			ДанныеОшибокЛогическогоКонтроляСЭДОФСС(Организация, ДанныеСообщения);
		Если НЕ ДанныеОшибки.ИсходноеСообщениеНайдено Тогда
			// Не нашли исходное сообщение.
			РезультатОбработки.ОшибкаОбработки = Истина;
			Шаблон = НСтр("ru='Для сообщения %1 с типом %2 не найдены данные исходящего сообщения:'");
			ОписаниеОшибки = СтрШаблон(Шаблон, ДанныеСообщения.Идентификатор, ДанныеСообщения.Тип);
			РезультатОбработки.ОписаниеОшибки = ОписаниеОшибки + Символы.ПС
				+ ДанныеОшибки.ОшибкаПоиска;
			Возврат РезультатОбработки;
		КонецЕсли;
		
		Если ДанныеОшибки.ДанныеИсходногоСообщения.Тип = ТипСообщенийПодтвержденияОПолучении Тогда
			// Это ошибка лог.контроля сообщения подтверждения о получении.
			КонтекстЭДО.ОбработатьОшибкуЛогическогоКонтроляПодтвержденияОПолучении(ДанныеОшибки);
			РезультатОбработки.Обработано = Истина;
		ИначеЕсли ДанныеОшибки.ДанныеИсходногоСообщения.Тип = ТипСообщенийОтветСтрахователяНаЗапросКП
			ИЛИ ДанныеОшибки.ДанныеИсходногоСообщения.Тип = ТипСообщенийОтветСтрахователяНаЗапросВП Тогда
			// Это ошибка лог.контроля сообщения ответа на запрос документов.
			КонтекстЭДО.ОбработатьОшибкуЛогическогоКонтроляОтветаНаЗапросДокументов(ДанныеОшибки);
			РезультатОбработки.Обработано = Истина;
		Иначе
			// Вызываем переопределяемый метод.
			ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибокЛогическогоКонтроляСЭДО(
				Организация,
				ДанныеОшибки.ДанныеИсходногоСообщения,
				ДанныеОшибки.ОшибкиКонтроля,
				РезультатОбработки);
		КонецЕсли;
			
	ИначеЕсли ДанныеСообщения.Тип = ТипСообщенийОтветаНаПодтверждениеОПолучении Тогда
		
		// Ответ на подтверждение о получении.
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		РезультатРазбора = КонтекстЭДО.РазобратьОтветНаПодтверждениеОПОлучении(Организация, ДанныеСообщения);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеПолученияОтветаНаПодтверждениеОПрочтении(Организация, РезультатРазбора.РезультатыПодтверждений, РезультатОбработки);
		
	ИначеЕсли ДанныеСообщения.Тип = ТипСообщенийРезультПодпискиСтрахователя Тогда
		
		// Результат подписки страхователя на оповещения по ЭЛН.
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КонтекстЭДО.РазобратьРезультатПодпискиСтрахователя(Организация, ДанныеСообщения);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
			
	ИначеЕсли НЕ ТипыСообщенийСДОФССДоходнаяЧасть.Найти(ДанныеСообщения.Тип) = Неопределено Тогда
		
		// Входящие сообщения СЭДО ФСС.
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		КонтекстЭДО.ПослеРасшифровкиВходящиеСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		
	Иначе
		
		// Вызываем переопределяемый метод.
		ЭлектронныйДокументооборотСФССПереопределяемый.
			ПослеРасшифровкиСообщенияСЭДО(Организация, ДанныеСообщения, РезультатОбработки);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РегистрационныйНомерФССОрганизации(Организация) Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СвойстваОрганизации = КонтекстЭДО.СвойстваОрганизацииДляОбмена(Организация);

	Возврат СвойстваОрганизации.РегистрационныйНомерФСС;
	
КонецФункции

// Возвращает массив организация, у которых активирован обмен с ФСС в настройках.
// Возвращаемое значение:
//   Массив - массив ссылок типа СправочникСсылка.Организации.
//
Функция ОрганизацииИспользующиеОбменФСС() Экспорт
	
	Возврат СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
КонецФункции

// Возвращает данные входящего сообщения по идентификатору.
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой нужно получить входящие.
//   Идентификатор - Строка - идентификатор сообщения.
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с данными сообщения, колонки:
//     *Идентификатор - Строка - идентификатор сообщения.
//     *Организация - СправочникСсылка.Организации - организация получатель.
//     *Тип - Строка - тип сообщения.
//     *Получетель - Строка - регистрационный номер ФСС получателя.
//     *ТребуетсяПодтверждение - Булево - Истина, если требуется подтверждение о получении.
//     *Содержимое - ХранилищеЗначения - хранилище значений с данными сообщения.
//     *Новое - Булево - Истина, если содержимое сообщения не получено.
//     *Дата - Дата - дата сообщения.
//     *ДатаЗагрузки - Дата - дата получения содержимого сообщения.
//     *ДатаОтправкиПодтверждения - Дата - дата отправки подтверждения о получении.
//     *ДатаПолученияИзвещенияОПолученииПодтверждения - Дата - дата получения извещения о получении подтверждения.
//     *ДатаПолученияОшибкиПодтверждения - Дата - дата получении ошибки подтверждения.
//     *ДатаСоздания - Дата - дата создания записи в регистре.
//     *ОшибкаОбработкиСообщения - Дата - дата обработки сообщения.
//     *ОшибкаПодтверждения - Строка - текст ошибки подтверждения о получении.
//     *ПодтверждениеОтправлено - Булево - Истина, если подтверждения о получении отправлено.
//     *СрокДействия - Дата - срок действия сообщения.
//
Функция ДанныеВходящегоСообщенияСЭДОФСС(Организация, Идентификатор) Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("Идентификатор", Идентификатор);
	
	Возврат КонтекстЭДО.СообщенияСЭДОФСС(Отбор);
	
КонецФункции

// Возвращает данные входящего сообщения по идентификатору.
// Параметры:
//   ТипСообщения                 - Число     - тип сообщения СЭДО из спецификации типов документов,
//   СодержимоеИлиАдресСообщения  - Строка    - текст выгрузки сообщения СЭДО по спецификации типов документов или
//                                - Строка    - адрес во временном хранилище, по которому содержится строка или двоичные
//                                              данные в кодировке utf-8 текста выгрузки сообщения СЭДО по спецификации
//                                              типов документов
//   Организация                  - СправочникСсылка.Организации - организация отправитель,
//   ОписаниеОшибки               - Строка    - шаблон текста сообщения, возвращаемого в ключе "ОписаниеОшибки"
//                                              результата оповещения обратного вызова при неудаче отправки,
//                                              с подстановкой текста ошибки вместо %1, например:
//                                              НСтр("ru = 'Не удалось подписать организацию на оповещения об изменении состояний ЭЛН сотрудников.'") + Символы.ПС + "%1",
//   РегистрационныйНомерФСС      - Строка    - регистрационный номер ФСС (дополнительный код ФСС в случае филиала),
//                                              при пустом значении подставляется здесь из организации.
//   ТипВзаимодействия            - Число     - для МЧД задать 3.
//   СвойстваДляОбмена            - Структура - при значении Неопределено заполняется автоматически, при типе
//                                              взаимодействия 3 (МЧД) можно передать структуру с реквизитами
//                                              "ОГРН", "ИНН", "КПП", "СНИЛС"
// Возвращаемое значение:
//   Структура - переданные параметры отправки сообщения (незаполненные могут вычисляться) для передачи в процедуру
//               "ЭлектронныйДокументооборотСФССКлиент.ОтправитьСообщениеСЭДО", параметр "ПараметрыСообщения".
//
Функция ПараметрыОтправитьСообщениеСЭДО(
		ТипСообщения = 0,
		СодержимоеИлиАдресСообщения = "",
		Организация = Неопределено,
		ОписаниеОшибки = "",
		РегистрационныйНомерФСС = "",
		ТипВзаимодействия = Неопределено,
		СвойстваДляОбмена = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипСообщения", 					ТипСообщения);
	Результат.Вставить("СодержимоеИлиАдресСообщения", 	СодержимоеИлиАдресСообщения);
	Результат.Вставить("Организация", 					Организация);
	Результат.Вставить("ОписаниеОшибки", 				ОписаниеОшибки);
	Результат.Вставить("РегистрационныйНомерФСС", 		РегистрационныйНомерФСС);
	Результат.Вставить("ТипВзаимодействия", 			ТипВзаимодействия);
	Результат.Вставить("СвойстваДляОбмена", 			СвойстваДляОбмена);
	
	Если НЕ ЗначениеЗаполнено(Результат.РегистрационныйНомерФСС) И Результат.СвойстваДляОбмена <> Неопределено
		И Результат.СвойстваДляОбмена.Свойство("РегистрационныйНомерФСС") Тогда
		
		Результат.РегистрационныйНомерФСС = Результат.СвойстваДляОбмена.РегистрационныйНомерФСС;
	КонецЕсли;
	
	Если Результат.ТипВзаимодействия = Неопределено Тогда
		Результат.ТипВзаимодействия = ДокументооборотСФССКлиентСервер.ТипВзаимодействияСЭДО(ТипСообщения);
	КонецЕсли;
	ЭтоТипВзаимодействияОрганизацияСЭДО = (Результат.ТипВзаимодействия =
		ДокументооборотСФССКлиентСервер.ТипВзаимодействияОрганизацияСЭДО());
	
	Если ЗначениеЗаполнено(Результат.Организация) И (НЕ ЗначениеЗаполнено(Результат.РегистрационныйНомерФСС)
		ИЛИ ЭтоТипВзаимодействияОрганизацияСЭДО И Результат.СвойстваДляОбмена = Неопределено) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		ПолучитьОГРН 			= ЭтоТипВзаимодействияОрганизацияСЭДО;
		ПолучитьИННКППиСНИЛС 	= ЭтоТипВзаимодействияОрганизацияСЭДО;
		Результат.СвойстваДляОбмена = КонтекстЭДО.СвойстваОрганизацииДляОбмена(
			Результат.Организация,,
			ПолучитьОГРН,,
			ПолучитьИННКППиСНИЛС);
		УстановитьПривилегированныйРежим(Ложь);
		Результат.РегистрационныйНомерФСС = ?(ЗначениеЗаполнено(Результат.СвойстваДляОбмена.РегистрационныйНомерФСС),
			СокрЛП(Результат.СвойстваДляОбмена.РегистрационныйНомерФСС), Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает флаг использования тестового сервера при обмене данными ЭЛН и по СЭДО.
// Параметры:
//   Организация - СправочникСсылка.Организации
// Возвращаемое значение:
//   Булево - флаг использования тестового сервера при обмене данными ЭЛН и по СЭДО
//
Функция ТестовыйРежим(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбменаФСС.ТестовыйСерверФССЭЛН КАК ТестовыйСерверФССЭЛН
		|ИЗ
		|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|ГДЕ
		|	НастройкиОбменаФСС.Организация = &ОрганизацияСсылка
		|	И (НастройкиОбменаФСС.Пользователь ЕСТЬ NULL
		|	ИЛИ НастройкиОбменаФСС.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))");
	
	Запрос.УстановитьПараметр("ОрганизацияСсылка", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Выборка.ТестовыйСерверФССЭЛН;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру параметров, необходимых для создания информационной панели в объектах ЗУП
// 
// Возвращаемое значение:
//  Структура - Параметры, необходимые для создания информационной панели в объектах ЗУП
//
Функция ПараметрыИнформационнойПанелиБРО() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	// Если форма вызывается из формы списка без отбора по организации,
	// или в форме нет организации, то оставьте равным Неопределено
	ДополнительныеПараметры.Вставить("Организация", Неопределено);
	// Группа, в которой надо разместить элементы информационной панели
	ДополнительныеПараметры.Вставить("Группа", Неопределено);
	ДополнительныеПараметры.Вставить("Форма", Неопределено);
	// Указывает на то, относится ли объект к СЭДО или нет
	// В зависимости от этого текст на панели будет меняться
	ДополнительныеПараметры.Вставить("ЭтоСЭДО", Ложь);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Перерисовывает и при необходимости создает элементы информационной панели БРО в объектах ЗУП
//
// Параметры:
//  ПараметрыОтображения - Структура - Параметры, необходимые для создания информационной панели в объектах ЗУП
//                         Шаблон для описания параметров возвращает метод ПараметрыИнформационнойПанелиБРО()
// 
Процедура ОбновитьИнформационнуюПанельБРО(ПараметрыОтображения) Экспорт
	
	ДокументооборотСКО.ОбновитьИнформационнуюПанельБРО(
		ПараметрыОтображения,
		Перечисления.ТарифыОператораЭДО.КадровыеРешения);

КонецПроцедуры

Функция ВидыДокументовСЭДОФССДоходнаяЧасть() Экспорт
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ВидыДокументов = КонтекстЭДО.ПолучитьВидыДокументовСЭДОФССДоходнаяЧасть();
	
	Возврат ВидыДокументов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторРегламентногоЗадания()
	
	Возврат "ОбменСФСС";
	
КонецФункции

Функция СписокДопустимыхОрганизацийВОбъектахОбменаФСС()
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(НСтр("ru = 'Автоматический обмен с СЭДО ФСС'"), Истина);
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурнал(Уровень, ТекстСобытия, Данные = Неопределено)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), Уровень, , Данные, ТекстСобытия);
	
КонецПроцедуры

Функция КлючОбъектаОбщихНастроек()
	
	Возврат "ЭлектронныйДокументооборотСФСС";
	
КонецФункции

Функция ПолучитьТипыСообщенийСДОФССДоходнаяЧасть()
	
	Результат = Новый Массив;
	
	// типы сообщений с 300 по 319 СЭДО ФСС
	Для К = 300 по 312 Цикл
		ТипСообщения = Строка(К);
		Результат.Добавить(ТипСообщения);
	КонецЦикла;
	
	Результат.Добавить(Строка(315));
	Результат.Добавить(Строка(316));
	Результат.Добавить(Строка(318));
	Результат.Добавить(Строка(319));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоличествоОтветовНаТребованияСФР(Ссылки, ТолькоОтправленные = Ложь) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьКоличествоОтветовНаТребованияСФР(Ссылки, ТолькоОтправленные);
	
КонецФункции

Функция ТребующиеСкорогоПодтвержденияСФР(Организация = Неопределено, Все = Ложь) Экспорт
	
	Сегодня = ТекущаяДатаСеанса();
	
	Таблица = ТребующиеПодтвержденияСФР(Организация);
	
	Требования = Новый Массив;
	Для каждого Строка Из Таблица Цикл
		РазностьДней = ТребованияФНС.РазностьДнейИсправленная(Строка, Сегодня);
		ЭтоНужныйДокумент = РазностьДней <= 2 И РазностьДней >-60 И НЕ Все ИЛИ Все;
		
		Если ЭтоНужныйДокумент Тогда
			Требования.Добавить(Строка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат Требования;
	
КонецФункции

Функция ТребующиеПодтвержденияСФР(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящийДокументСЭДОФСС.Ссылка КАК Ссылка,
	|	ВходящийДокументСЭДОФСС.МаксимальнаяДатаПодтверждения КАК ПодтвердитьДо,
	|	ВходящийДокументСЭДОФСС.Организация КАК Организация
	|ИЗ
	|	Документ.ВходящийДокументСЭДОФСС КАК ВходящийДокументСЭДОФСС
	|ГДЕ
	|	ВходящийДокументСЭДОФСС.ДатаОтправкиПодтверждения = ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА НЕ ВходящийДокументСЭДОФСС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИНАЧЕ ВходящийДокументСЭДОФСС.Организация = &Организация
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Организация", 
		?(Организация = Неопределено, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), Организация));
		
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Функция ТребующиеСкорогоОтветаСФР(Организация = Неопределено) Экспорт
	
	Сегодня = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящийДокументСЭДОФСС.Ссылка КАК Ссылка,
	|	ВходящийДокументСЭДОФСС.МаксимальнаяДатаОтправкиОтвета КАК ОтветитьДо,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтветаИзмененная
	|ИЗ
	|	Документ.ВходящийДокументСЭДОФСС КАК ВходящийДокументСЭДОФСС
	|ГДЕ
	|	ВходящийДокументСЭДОФСС.ДатаОтправкиОтветаНаЗапрос = ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА НЕ ВходящийДокументСЭДОФСС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИНАЧЕ ВходящийДокументСЭДОФСС.Организация = &Организация
	|		КОНЕЦ
	|	И (ВходящийДокументСЭДОФСС.ТипСообщения = ""303""
	|			ИЛИ ВходящийДокументСЭДОФСС.ТипСообщения = ""308"")";
	
	Запрос.УстановитьПараметр("Организация", 
		?(Организация = Неопределено, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Требования = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ДатаОтветаИзмененная) Тогда
			ДатаОтвета = Выборка.ДатаОтветаИзмененная;
		Иначе
			ДатаОтвета = Выборка.ОтветитьДо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаОтвета) Тогда
			Продолжить;
		КонецЕсли;
	
		РазностьДней = ТребованияФНС.РазностьДатПоКалендарю(Сегодня, ДатаОтвета).Дельта;
		Если РазностьДней <= 2 И РазностьДней >-60 Тогда
			Требования.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Требования;
	
КонецФункции

#КонецОбласти