#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.165";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.206";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("bf0e44ef-e92b-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ИнициализироватьРолиИсполнителейЗадач";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление ролей исполнителей задач.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.15.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("5295d003-f66e-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьПубликациюПравНаВычеты";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикации прав на вычеты.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.16.9";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.16.42";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a518af76-0896-11eb-8108-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника";
	Обработчик.Комментарий     = НСтр("ru = 'Настройка регламентного задания Проверка состояния сервиса ""1С:Кабинет сотрудника"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.85";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.УстановитьВерсияИзмененийКабинетСотрудника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.7";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f0f899de-ffd3-4f35-8dda-017425bd0e67");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеНастроекСервиса";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление настроек сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.32";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("1a994315-b6ba-4fad-857b-c43cb900ddaf");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеНастроекСервисаВерсии303";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление настроек сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("67b20450-fb55-4d6f-bcc0-c64cf907b467");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьПубликациюПотерянныхОбъектов";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикации объектов сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a6ae4155-996e-40bb-b4ee-7854d960aba3");
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьСобытиеСотрудникиДляОбновленияПубликуемыхОбъектов";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение события в ""Сотрудники для обновления публикуемых объектов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.91";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ec985970-fd7d-4382-ba93-be8ae07623de");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьФункциональностьСервисаПриИспользованииКЭДО";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление используемой функциональности сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.21.63";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("92fc10bf-5ec9-422c-b73e-75f148786586");
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьСодержимоеДокументаКЭДОРасчетныхЛистков";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по расчетным листкам.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.22.21";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("4a4010a6-0de3-47c1-9395-856281e05ae1");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьПроверкуОзнакомленияСРасчетнымиЛистками";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация проверки ознакомления с расчетными листками.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.57";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("96515a13-fec5-405f-9da2-fefeb3aa0db5");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеУволенныхСотрудников";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация проверки уволенных сотрудников сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия		   = "3.1.23.152";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура	   = "КабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.157";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьОбъектыСОшибкамиЗаполнения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.157";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("e08e7076-ac33-4ee7-8731-9c0d13d00ecc");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьПроверкуПубликуемыхОбъектов";
	Обработчик.Комментарий     = НСтр("ru = 'Проверка заполнения данных физических лиц, публикуемых в сервисе.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.634";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("c843cd59-a9cd-4677-b342-69f8bb754f07");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеФункциональностиСервиса";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления функциональности сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.635";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9b76b382-ba92-4154-8b2a-7bc684798633");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбработчикОбновленияФизическихЛиц";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления физических лиц в сервисе 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.637";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.ПроверитьВерсиюФормата";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.750";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("dd585e79-82f5-4402-b08d-d4393a1c2710");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеУровеньДоступаКИ";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления уровней доступа к контактной информации в сервисе 1С:Кабинет сотрудника.'");
	
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеДоступностиДанных

Функция ДоступноИзменениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

Функция ДоступноЧтениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетныеЛисткиКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ФизическиеЛицаКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника
	|РегистрСведений.РасчетныеЛисткиКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.РасчетныеЛисткиКабинетСотрудника.Чтение.Организации
	|РегистрСведений.ФизическиеЛицаКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.Чтение.ГруппыФизическихЛиц";
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработатьНовыеОбсужденияКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуютсяОбсужденияКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	КабинетСотрудникаВнутренний.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбработатьНовыеОбсужденияКабинетСотрудника.Имя);
	
	КабинетСотрудникаВнутренний.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбработатьНовыеОбсужденияКабинетСотрудника.ИмяМетода);
	
	КабинетСотрудникаВнутренний.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		
		Если Не Форма.Параметры.Свойство("ПодписаниеПечатныхФорм") Тогда
			
			ИмяКоманды = ИмяКомандыПодписатьФормыПечатьДокументов();
			
			КомандаФормы = КомандаПодписатьФормыПечатьДокументов(Форма);
			Если КомандаФормы = Неопределено Тогда
				
				СвойстваКоманды = СвойстваКомандыПередачиВКабинетСотрудника();
				
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
				КомандаФормы.Заголовок = СвойстваКоманды.Заголовок;
				КомандаФормы.Подсказка = СвойстваКоманды.Подсказка;
				КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
				КомандаФормы.Картинка = СвойстваКоманды.Картинка;
				
				КнопкаФормы = КадровыйЭДО.РазместитьКомандуНаФормеПечатьДокументов(Форма, КомандаФормы);
				Если КнопкаФормы <> Неопределено Тогда
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды = КомандаФормы.Имя;
					КнопкаФормы.ТолькоВоВсехДействиях = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваКомандыПередачиВКабинетСотрудника() Экспорт
	Возврат Новый Структура("Заголовок,Подсказка,Картинка",
		НСтр("ru = 'Передать в ""1С:Кабинет сотрудника""'"),
		НСтр("ru = 'Подписать и передать в ""1С:Кабинет сотрудника""'"),
		БиблиотекаКартинок.СервисКабинетСотрудника);
КонецФункции

Функция ИмяКомандыПодписатьФормыПечатьДокументов()
	Возврат "ПередатьПодписанныеPDFВСервисКабинетСотрудника";
КонецФункции

Функция КомандаПодписатьФормыПечатьДокументов(Форма) Экспорт
	Возврат Форма.Команды.Найти(ИмяКомандыПодписатьФормыПечатьДокументов());
КонецФункции

// Устанавливает значение для ФО ПоказыватьПриглашениеКабинетСотрудника
//	Параметры:
//		ВыполняетсяНачальнаяНастройка - Булево;
//		ИспользуетсяСервисКабинетСотрудника - Булево.
Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника(Знач ВыполняетсяНачальнаяНастройка = Неопределено,
																   Знач ИспользуетсяСервисКабинетСотрудника = Неопределено) Экспорт
															   
	Если ВыполняетсяНачальнаяНастройка = Неопределено Тогда 
		 Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
			 Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
			 ВыполняетсяНачальнаяНастройка = Модуль.ВыполняетсяНачальнаяНастройкаПрограммы();
		 Иначе
			 ВыполняетсяНачальнаяНастройка = Ложь;
		 КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяСервисКабинетСотрудника = ?(ИспользуетсяСервисКабинетСотрудника <> Неопределено, ИспользуетсяСервисКабинетСотрудника,
																								 ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника"));
	ПоказыватьПриглашениеКабинетаСотрудника = НЕ (ВыполняетсяНачальнаяНастройка ИЛИ ИспользуетсяСервисКабинетСотрудника);
	
	Если ПоказыватьПриглашениеКабинетаСотрудника <> Константы.ПоказыватьПриглашениеКабинетСотрудника.Получить() Тогда
		Константы.ПоказыватьПриглашениеКабинетСотрудника.Установить(ПоказыватьПриглашениеКабинетаСотрудника);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение для ФО ПоказыватьПриглашениеКабинетСотрудника для базовой версии
//
Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии() Экспорт

	Если ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации() Тогда
		УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение настройки ИспользуетсяКадровыйЭДО.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ИспользуетсяКадровыйЭДО() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");

КонецФункции

// Возвращает значение настройки интеграции с сервисом - ПубликоватьСтруктуруЮридическихЛиц.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ПубликоватьСтруктуруЮридическихЛиц() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Настройки.ПубликоватьСтруктуруЮридическихЛиц;

КонецФункции

#Область РегистрацияПубликуемыхОбъектов

Процедура ПриЗаписиПубликуемогоОбъекта(Объект) Экспорт
	
	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ПрежниеДанныеПубликуемогоОбъекта", ЗначенияКонтролируемыхРеквизитов);
	Если Не КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектПубликации", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = &ОбъектПубликации";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗарегистрироватьИзмененияДляСервиса(Объект.Ссылка)
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей);

КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей);

КонецПроцедуры

Процедура ПриЗаписиЗаявкиСотрудника(Объект) Экспорт
	
	Если Не Объект.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(Объект.Ссылка);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ПредметПубликации 	= Объект.Ссылка;
		ЗаписьНабора.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ИмущественныеВычетыНДФЛПередЗаписью(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ИмущественныеВычетыНДФЛ.Регистратор = &Регистратор";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	НаборЗаписей.ДополнительныеСвойства.Вставить("ФизическиеЛицаОбновленияПубликацииВычетов", СписокФизическихЛиц);

КонецПроцедуры

Процедура ИмущественныеВычетыНДФЛПриЗаписи(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизическихЛиц = НаборЗаписей.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	СписокФизическихЛицПередЗаписью = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ФизическиеЛицаОбновленияПубликацииВычетов", СписокФизическихЛицПередЗаписью);
	Если СписокФизическихЛицПередЗаписью <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФизическихЛиц, СписокФизическихЛицПередЗаписью ,Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновленияПубликации
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновленияПубликации.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И ФизическиеЛицаДляОбновленияПубликации.БылаОшибкаПриПубликации ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
				МенеджерЗаписи.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПлановыеУдержанияПередЗаписью(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ПлановыеУдержанияПередЗаписью(НаборЗаписей);

КонецПроцедуры

Процедура ПлановыеУдержанияПриЗаписи(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ПлановыеУдержанияПриЗаписи(НаборЗаписей);
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеВычетов(СписокФизическихЛиц) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновленияПубликации
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновленияПубликации.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И ФизическиеЛицаДляОбновленияПубликации.БылаОшибкаПриПубликации ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
				МенеджерЗаписи.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьИзменениеКадровойИстории(ИзменившиесяДанные) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;

	Если ИзменившиесяДанные = Неопределено Или ИзменившиесяДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокСотрудников = ИзменившиесяДанные.ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокСотрудников)
	|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка";
	ТаблицаСотрудников  = Запрос.Выполнить().Выгрузить();
	
	ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников);
	
КонецПроцедуры

Процедура ФизическиеЛицаПрисоединенныеККЭДОПередЗаписью(НаборЗаписей) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО")
		Или Не ИспользоватьФормат503() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", НаборЗаписей.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаПрисоединенныеККЭДО КАК Таблица
	|ГДЕ
	|	Таблица.ФизическоеЛицо В(&ФизическиеЛица)";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	НаборЗаписей.ДополнительныеСвойства.Вставить("ФизическиеЛицаОбновленияИспользованияКЭДО", СписокФизическихЛиц);

КонецПроцедуры

Процедура ФизическиеЛицаПрисоединенныеККЭДОПриЗаписи(НаборЗаписей) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО")
		Или Не ИспользоватьФормат503() Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизическихЛиц = НаборЗаписей.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	СписокФизическихЛицПередЗаписью = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ФизическиеЛицаОбновленияИспользованияКЭДО", СписокФизическихЛицПередЗаписью);
	Если СписокФизическихЛицПередЗаписью <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФизическихЛиц, СписокФизическихЛицПередЗаписью ,Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо В(&СписокФизическихЛиц)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ФизическоеЛицо");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации 	= Выборка.ФизическоеЛицо;
				МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ФайлРасчетногоЛисткаОпубликован(ДокументКадровогоЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументКадровогоЭДО", ДокументКадровогоЭДО);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетныеЛисткиКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛисткиКабинетСотрудника
		|ГДЕ
		|	РасчетныеЛисткиКабинетСотрудника.ДокументКадровогоЭДО = &ДокументКадровогоЭДО";
	
	Возврат Не Запрос.Выполнить().Пустой()
	
КонецФункции

// Возвращает таблицу с данными публикуемых физических лиц.
//
// 	Возвращаемое значение:
// 		ТаблицаЗначений
// 			* ФизическоеЛицо
// 			* Организация
//
Функция ПубликуемыеФизическиеЛицаОрганизации() Экспорт
	
	ФизическиеЛицаОрганизация = Новый ТаблицаЗначений;
	ФизическиеЛицаОрганизация.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФизическиеЛицаОрганизация.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	НЕ ПубликуемыеОбъекты.УсловноПубликуется
	|	И ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.Сотрудники";
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат ФизическиеЛицаОрганизация;
	КонецЕсли;
	
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ДатаАктуальности = ТекущаяДатаСеанса();
	
	Если ИспользоватьКадровыйУчет Тогда
		ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,ВидСобытия";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, ВыбираемыеПоля, ДатаАктуальности);
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда
				ЗаполнитьЗначенияСвойств(ФизическиеЛицаОрганизация.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВыбираемыеПоля = "Сотрудник,ФизическоеЛицо,Организация,ДатаПриема,ДатаУвольнения";
		ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, ВыбираемыеПоля, ДатаАктуальности);
		ТаблицаДанных.Колонки.Добавить("ВидСобытия");
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) И СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) И СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
				ЗаполнитьЗначенияСвойств(ФизическиеЛицаОрганизация.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ФизическиеЛицаОрганизация.Свернуть("ФизическоеЛицо,Организация");
	
	Возврат ФизическиеЛицаОрганизация;
	
КонецФункции

// Возвращает текущую версию формата обмена.
//
// 	Возвращаемое значение:
// 		Строка - строка формата х.х
//
Функция ВерсияФормата() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Настройки.ВерсияФормата;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПубликацияОтветственногоЛица

Процедура ОпубликоватьОтветственноеЛицоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СообщениеОбОшибке");
	
	БылиОшибки = ЗарегистрироватьОпубликоватьОтветственного(Параметры.Ответственный);
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = НСтр("ru='Не удалось опубликовать ответственное лицо.'");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ЗарегистрироватьОпубликоватьОтветственного(Ответственный) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// Регистрируем ответственного к публикации.
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", Ответственный);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Ответственный);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ФизическоеЛицо = Ответственный;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат КабинетСотрудникаМенеджерОбмена.РезультатПубликацииФизическогоЛица(Ответственный);

КонецФункции

#КонецОбласти

#Область РаботаСКлючамиПриложения

Функция ЕстьКлючиПриложения() Экспорт
	
	Возврат (КлючиПриложенияИзБезопасногоХранилища() <> Неопределено);
	
КонецФункции

Функция КлючиПриложенияИзБезопасногоХранилища() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Приложение.Ключи",
		"ИдентификаторКлиента,СекретКлиента");
	УстановитьПривилегированныйРежим(Ложь);

	Если ДанныеВБезопасномХранилище.ИдентификаторКлиента <> Неопределено
		И ДанныеВБезопасномХранилище.СекретКлиента <> Неопределено Тогда
		Возврат Новый Структура(
			"ИдентификаторКлиента,СекретКлиента",
			ДанныеВБезопасномХранилище.ИдентификаторКлиента,
			ДанныеВБезопасномХранилище.СекретКлиента);
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции

Функция КлючиПриложенияАктуальные() Экспорт

	Ответ = КабинетСотрудникаМенеджерОбмена.ПроверкаАвторизации();
	Если Ответ.НеактуальныеКлючи Тогда
		// ключи не актуальны, удаляем токен, если он сохранен
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Токен");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	Возврат Не Ответ.НеактуальныеКлючи;

КонецФункции

Процедура СохранитьКлючиПриложенияВБезопасномХранилище(ИдентификаторКлиента, СекретКлиента) Экспорт

	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Ключи",ИдентификаторКлиента, "ИдентификаторКлиента");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Ключи",СекретКлиента, "СекретКлиента");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПравиламиПубликации

Процедура ЗаполнитьДеревоНастроекПубликации(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("РезультатЗапроса,ИспользоватьШтатноеРасписание,ДанныеДоступны");
	
	ИспользоватьШтатноеРасписание = Ложь;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	УстановитьПривилегированныйРежим(Истина);
	КабинетСотрудникаВнутренний.СоздатьВТШтатноеРасписание(МенеджерВТ, ИспользоватьШтатноеРасписание);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.ИспользоватьШтатноеРасписание = ИспользоватьШтатноеРасписание;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Организация КАК Организация,
	|	ШтатноеРасписание.Подразделение КАК Подразделение,
	|	ШтатноеРасписание.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	НЕ ШтатноеРасписание.Утверждена КАК НеУтверждена,
	|	ШтатноеРасписание.ДатаУтверждения КАК ДатаУтверждения,
	|	ШтатноеРасписание.Закрыта КАК Закрыта,
	|	ШтатноеРасписание.ДатаЗакрытия КАК ДатаЗакрытия,
	|	ШтатноеРасписание.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ПорядокПодразделений,
	|	ШтатноеРасписание.Должность.РеквизитДопУпорядочивания КАК ПорядокДолжностей,
	|	ВЫБОР
	|		КОГДА ПравилаПубликации.ОбъектПравила ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Публиковать
	|ИЗ
	|	ВТШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|		ПО ШтатноеРасписание.ПозицияШтатногоРасписания = ПравилаПубликации.ОбъектПравила
	|			И (ПравилаПубликации.ОбъектПравила ССЫЛКА Справочник.ШтатноеРасписание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШтатноеРасписание.Организация.Наименование,
	|	ШтатноеРасписание.Подразделение.РеквизитДопУпорядочиванияИерархического,
	|	ШтатноеРасписание.Должность.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	Организация,
	|	Подразделение ИЕРАРХИЯ";
	Если Не ИспользоватьШтатноеРасписание Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ШтатноеРасписание.Утверждена", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.ДатаУтверждения", """");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.Закрыта", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.ДатаЗакрытия", """");
	КонецЕсли;
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Результат.ДанныеДоступны = Истина;
		Результат.РезультатЗапроса = РезультатЗапроса;
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Настройка публикации. Пользователю недоступны организации и/или позиции штатного расписания.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖРНарушениеПравДоступа(),
			УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		Результат.ДанныеДоступны = Ложь;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура СохранитьНастройкиПубликацииВФоне(Параметры, АдресХранилища) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписей = РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Параметры.НовыеНастройки);
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Истина);
		Если НаборЗаписей.Количество() > 0 Тогда
			ОбновитьПубликациюОбъектовПоНовымПравилам();
		Иначе
			ОбработатьОчисткуПравилПубликации();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение(НСтр("ru = 'При записи правил публикации произошла ошибка.'")
			+ Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьПубликациюОбъектовПоНовымПравилам()
	
	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	
	Если Не ПубликоватьСтруктуруЮридическихЛиц() Тогда
		КабинетСотрудникаВнутренний.ОбновитьСтруктуруПредприятия();
	КонецЕсли;
	
	// Получим публикуемые позиции штатного расписания.
	ПозицияЕстьВПравилах = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПубликации.ОбъектПравила КАК Позиция
	|ИЗ
	|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|ГДЕ
	|	ПравилаПубликации.ОбъектПравила ССЫЛКА Справочник.ШтатноеРасписание";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПозицияЕстьВПравилах.Вставить(Выборка.Позиция, Истина);
	КонецЦикла;
	
	// Получим публикуемых физических лиц.
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	// Текущие публикуемые сотрудники
	ФизическиеЛицаУсловноПубликуемыхСотрудников = Новый Соответствие;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаУсловноПубликуемыхСотрудников.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ТипГрафикРаботы = КабинетСотрудникаВнутренний.ТипГрафикРаботы();
	
	// РабочиеМеста - сведения о рабочих местах физических лиц на дату актуальности,
	// включая уволенных.
	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	РабочиеМеста.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	РабочиеМеста.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	РабочиеМеста.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	РабочиеМеста.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипГрафикРаботы)));
	
	// БудущиеКадровыеСобытия - даты будущих кадровых событий обрабатываемых сотрудников.
	БудущиеКадровыеСобытия = Новый ТаблицаЗначений;
	БудущиеКадровыеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеКадровыеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Если ИспользоватьКадровыйУчет Тогда
		
		// Будущие кадровые события.
		ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
		ПараметрыПолученияРабочихМест.ВключаяУволенныхНаНачалоПериода = Истина;
		ПараметрыПолученияРабочихМест.НачалоПериода = ДатаАктуальности;
		КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, Ложь, ПараметрыПолученияРабочихМест);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМеста.Период КАК ДатаСобытия,
		|	РабочиеМеста.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|ГДЕ
		|	РабочиеМеста.Период > &ДатаАктуальности";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(БудущиеКадровыеСобытия.Добавить(), Выборка);
		КонецЦикла;
		
		// Заполняем таблицу РабочиеМеста.
		// Получим все рабочие места физических лиц на дату актуальности, включая уволенных.
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Организация,РабочееМестоПериодРегистрации,ВидСобытия";
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",Подразделение,Должность";
		КонецЕсли;
		Если ТипГрафикРаботы <> Неопределено Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ГрафикРаботы";
		КонецЕсли;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		
		КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		// Заполним ДолжностьПоШтатномуРасписанию в таблице КадровыеДанныеСотрудников,
		// если не ведется штатное расписание.
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Если ТипГрафикРаботы = Неопределено Тогда
				КадровыеДанныеСотрудников.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
			|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
			|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			НоваяСтрока = РабочиеМеста.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ДатаСобытия = СтрокаТЗ.РабочееМестоПериодРегистрации;
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) Тогда
				Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
				Иначе
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
				КонецЕсли;
			Иначе
				Если СтрокаТЗ.ДатаУвольнения = ДатаАктуальности Тогда
						
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаУвольнения + 86400;
					
				ИначеЕсли СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
					
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаУвольнения + 86400;
					
				Иначе //СтрокаТЗ.ДатаУвольнения > ДатаАктуальности
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаУвольнения + 86400;
					
					Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
						НоваяСтрока = РабочиеМеста.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
						НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
					Иначе
						НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаПриема;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СотрудникиКУдалению = Новый Массив;
	
	ПубликацияФизическихЛиц = Новый ТаблицаЗначений;
	ПубликацияФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПубликацияФизическихЛиц.Колонки.Добавить("ОкончаниеПубликации", Новый ОписаниеТипов("Дата"));
	
	ПубликацияСотрудников = Новый ТаблицаЗначений;
	ПубликацияСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПубликацияСотрудников.Колонки.Добавить("УсловноПубликуется", Новый ОписаниеТипов("Булево"));
	ПубликацияСотрудников.Колонки.Добавить("Уволен", Новый ОписаниеТипов("Булево"));
	ПубликацияСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПубликацияСотрудников.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	ПозицииПубликуемыхСотрудников = Новый Массив;
	
	РабочиеМеста.Индексы.Добавить("ФизическоеЛицо");
	ОтборПоФизическимЛицам = Новый Структура("ФизическоеЛицо");
	РабочиеМестаФизическогоЛица = РабочиеМеста.СкопироватьКолонки();
	СписокГрафиков = Новый Массив;
	
	СтарыйАлгоритм = Не ИспользоватьФормат30396();
	
	ФизическиеЛица =  ОбщегоНазначения.ВыгрузитьКолонку(РабочиеМеста, "ФизическоеЛицо", Истина);
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		
		// Состояние публикации физического лица, до изменения правил публикации.
		ФизическоеЛицоПубликуется = (ПубликуемыеФизическиеЛица[ФизическоеЛицо] <> Неопределено);
		
		РабочиеМестаФизическогоЛица.Очистить();
		ОтборПоФизическимЛицам.ФизическоеЛицо = ФизическоеЛицо;
		РабочиеМестаСотрудников = РабочиеМеста.НайтиСтроки(ОтборПоФизическимЛицам);
		
		ЕстьПубликуемоеРабочееМесто = Ложь;
		
		Если СтарыйАлгоритм Тогда
			
			Для каждого ДанныеСотрудника Из РабочиеМестаСотрудников Цикл
				
				Если ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
					
					Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
						ЕстьПубликуемоеРабочееМесто = Истина;
						ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьПубликуемоеРабочееМесто Тогда
				НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
					ЗаполнитьЗначенияСвойств(ПубликацияСотрудников.Добавить(), СтрокаТЗ);
					Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
						СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Для каждого ДанныеСотрудника Из РабочиеМестаСотрудников Цикл
				
				Если Не ЗначениеЗаполнено(ДанныеСотрудника.ВидСобытия) Тогда
					
					Если ФизическоеЛицоПубликуется Тогда
						СотрудникиКУдалению.Добавить(ДанныеСотрудника.Сотрудник);
					КонецЕсли;
					
				ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
					
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					
				ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда	
					
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
						ЕстьПубликуемоеРабочееМесто = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьПубликуемоеРабочееМесто Тогда
				НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
					НоваяСтрока = ПубликацияСотрудников.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
					ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
					Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
						СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ФизическоеЛицоПубликуется Тогда
					Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
						// Регистрируем сотрудников к публикации для обновления сведений о рабочих местах,
						// т.к. текущее состояние физического лица - публикуется.
						НоваяСтрока = ПубликацияСотрудников.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.УсловноПубликуется = Истина;
						НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
						ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
					КонецЦикла;
				ИначеЕсли ФизическиеЛицаУсловноПубликуемыхСотрудников[ФизическоеЛицо] <> Неопределено Тогда
					// текущие условно публикуемые сотрудники, добавим их позиции
					Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
						ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
						Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
							СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если ЗначениеЗаполнено(НастройкиСервиса.Ответственный) Тогда
		СтрокаТЗ = ПубликацияФизическихЛиц.Найти(НастройкиСервиса.Ответственный, "ФизическоеЛицо");
		// ответственный за сервис всегда публикуется
		Если СтрокаТЗ = Неопределено Тогда
			НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
			НоваяСтрока.ФизическоеЛицо = НастройкиСервиса.Ответственный;
		КонецЕсли;
	КонецЕсли;
	
	// получим ссылки на объекты публикуемых позиций
	Для каждого ЭлементКоллекции Из ПозицияЕстьВПравилах Цикл
		ПозицииПубликуемыхСотрудников.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	ПрочиеОбъектыКПубликации = ОбъектыПозицийШтатногоРасписанияПоСсылкам(ПозицииПубликуемыхСотрудников, Ложь);
	
	СписокГрафиков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокГрафиков);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрочиеОбъектыКПубликации, СписокГрафиков);
	
	// Определим физических лиц для регистрации изменений.
	// Регистрируем изменения по физическим лицам
	// - новые публикуемые физические лица
	// - публикуемые физические лица уже зарегистрированные как изменения.
	// Регистрируем изменения для обновления вычетов
	// - новые публикуемые физические лица
	// - публикуемые физические лица по которым уже зарегистрировано обновление вычетов.
	Запрос.УстановитьПараметр("ФизическиеЛицаКПубликации", ПубликацияФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.ОкончаниеПубликации КАК ОкончаниеПубликации
	|ПОМЕСТИТЬ ВТФизическиеЛицаКПубликации
	|ИЗ
	|	&ФизическиеЛицаКПубликации КАК ФизическиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТНовыеФизическиеЛицаКПубликации
	|ИЗ
	|	ВТФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
	|		ПО ФизическиеЛицаКПубликации.ФизическоеЛицо = ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо
	|			И ФизическиеЛицаКПубликации.ОкончаниеПубликации = ФизическиеЛицаКабинетСотрудника.ОкончаниеПубликации
	|ГДЕ
	|	ФизическиеЛицаКабинетСотрудника.ОкончаниеПубликации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТНовыеФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|		ПО ФизическиеЛицаКПубликации.ФизическоеЛицо = ИзмененияДляСервиса.ПредметПубликации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТНовыеФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛицаКПубликации.ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛицаКПубликации КАК ФизическиеЛицаКПубликации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ОбновлениеВычетов
	|		ПО ФизическиеЛицаКПубликации.ФизическоеЛицо = ОбновлениеВычетов.ФизическоеЛицо";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ИзмененияФизическиеЛица = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	ИзмененияВычеты = РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	// Сотрудники для регистрации изменений
	// - новые публикуемые сотрудники
	// - сотрудники, уже зарегистрированные как изменения.
	// Публикуемые сотрудники
	// - все сотрудники публикуемые по новым правилам
	// - сотрудники не публикуемые по новым правилам, но уже зарегистрированные как публикуемые с признаком УсловноПубликуется.
	Запрос.УстановитьПараметр("СотрудникиКПубликации", ПубликацияСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.УсловноПубликуется КАК УсловноПубликуется,
	|	Сотрудники.Уволен КАК Уволен
	|ПОМЕСТИТЬ ВТСотрудникиКПубликации
	|ИЗ
	|	&СотрудникиКПубликации КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиКПубликации.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТСотрудникиКПубликации КАК СотрудникиКПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО СотрудникиКПубликации.Сотрудник = ПубликуемыеОбъекты.ОбъектПубликации
	|			И СотрудникиКПубликации.УсловноПубликуется = ПубликуемыеОбъекты.УсловноПубликуется
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененияДляСервиса.ПредметПубликации
	|ИЗ
	|	РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|ГДЕ
	|	ИзмененияДляСервиса.ПредметПубликации ССЫЛКА Справочник.Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник,
	|	ПубликуемыеОбъекты.УсловноПубликуется КАК УсловноПубликуется,
	|	ЛОЖЬ КАК Уволен
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиКПубликации КАК СотрудникиКПубликации
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = СотрудникиКПубликации.Сотрудник
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется
	|	И ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И СотрудникиКПубликации.УсловноПубликуется ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиКПубликации.Сотрудник,
	|	СотрудникиКПубликации.УсловноПубликуется,
	|	СотрудникиКПубликации.Уволен
	|ИЗ
	|	ВТСотрудникиКПубликации КАК СотрудникиКПубликации";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ИзмененияСотрудники = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Сотрудник");
	ПубликуемыеСотрудники = РезультатЗапроса[2].Выгрузить();
	
	// Прочие объекты для регистрации изменений
	// - новые публикуемые объекты.
	Запрос.УстановитьПараметр("ОбъектыКПубликации", ПрочиеОбъектыКПубликации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В (&ОбъектыКПубликации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияДляСервиса.ПредметПубликации КАК ПредметПубликации
	|ИЗ
	|	РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|ГДЕ
	|	ИзмененияДляСервиса.ПредметПубликации В(&ОбъектыКПубликации)";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТекущиеПубликуемыеОбъекты = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	НовыеПубликуемыеОбъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрочиеОбъектыКПубликации, ТекущиеПубликуемыеОбъекты);
	ИзмененияПубликуемыеОбъекты = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ПредметПубликации");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененияПубликуемыеОбъекты, НовыеПубликуемыеОбъекты, Истина);
	
	ПубликацияСотрудников.Индексы.Добавить("Уволен,УсловноПубликуется");
	Отбор = Новый Структура("Уволен,УсловноПубликуется", Ложь, Ложь);
	ФизическиеЛицаОрганизации = ПубликацияСотрудников.Скопировать(Отбор);
	ФизическиеЛицаОрганизации.Свернуть("Организация,ФизическоеЛицо");
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		Блокировка.Добавить("РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника");
		Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
		Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов");
		КабинетСотрудникаВнутренний.ДобавитьЭлементыБлокировкиОбновлениеНастройкиПубликации(Блокировка);
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого ПубликуемыйОбъект Из ПрочиеОбъектыКПубликации Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПубликации = ПубликуемыйОбъект;
		КонецЦикла;
		СотрудникиДляОбновлениеПрочихОбъектов = Новый Массив;
		Для каждого СтрокаТЗ Из ПубликуемыеСотрудники Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПубликации = СтрокаТЗ.Сотрудник;
			НоваяЗапись.УсловноПубликуется = СтрокаТЗ.УсловноПубликуется;
			Если Не СтрокаТЗ.УсловноПубликуется И Не СтрокаТЗ.Уволен Тогда
				СотрудникиДляОбновлениеПрочихОбъектов.Добавить(СтрокаТЗ.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого ПредметПубликации Из ИзмененияФизическиеЛица Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = ПредметПубликации;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		Для каждого ПредметПубликации Из ИзмененияСотрудники Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = ПредметПубликации;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		Для каждого ПредметПубликации Из ИзмененияПубликуемыеОбъекты Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = ПредметПубликации;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого Сотрудник Из СотрудникиКУдалению Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектДляУдаления = Сотрудник;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ПубликацияФизическихЛиц Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			НоваяЗапись.ОкончаниеПубликации = СтрокаТЗ.ОкончаниеПубликации;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		Для каждого ФизическоеЛицо Из ИзмененияВычеты Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из БудущиеКадровыеСобытия Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Сотрудник = СтрокаТЗ.Сотрудник;
			НоваяЗапись.ДатаСобытия = СтрокаТЗ.ДатаСобытия;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеПубликуемыхОбъектов(СотрудникиДляОбновлениеПрочихОбъектов, Ложь);
		КабинетСотрудникаВнутренний.ОчиститьДанныеОбАктуальностиИнформацииОбОтпускеНепубликуемыхСотрудников(СотрудникиДляОбновлениеПрочихОбъектов);
		КадровыйЭДО.СформироватьСогласияНаПрисоединениеККЭДО(ФизическиеЛицаОрганизации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		ВызватьИсключение;
		
	КонецПопытки;
	
	Попытка
		ПроверитьЗаполнениеВсехПубликуемыхОбъектов(РабочиеМеста);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьОчисткуПравилПубликации()

	Если Не ИспользоватьФормат30396() Тогда
		РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	// РабочиеМеста - сведения о рабочих местах физических лиц на дату актуальности,
	// включая уволенных.
	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	
	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	
	Если ИспользоватьКадровыйУчет Тогда
		
		// Заполняем таблицу РабочиеМеста.
		// Получим все рабочие места физических лиц на дату актуальности, включая уволенных.
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = "ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = "Подразделение,Должность";
		КонецЕсли;
		ПараметрыПолучения.СписокФизическихЛиц 	= ФизическиеЛица;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		
		КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		// Заполним ДолжностьПоШтатномуРасписанию в таблице КадровыеДанныеСотрудников,
		// если не ведется штатное расписание.
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.СписокФизическихЛиц 	= ФизическиеЛица;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) Тогда
				Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				КонецЕсли;
			Иначе
				Если СтрокаТЗ.ДатаУвольнения = ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(РабочиеМеста, "ДолжностьПоШтатномуРасписанию", Истина);
	ПрочиеОбъектыКПубликации = ОбъектыПозицийШтатногоРасписанияПоСсылкам(Позиции, Ложь);
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(РабочиеМеста, "Сотрудник", Истина);
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов");
		КабинетСотрудникаВнутренний.ДобавитьЭлементыБлокировкиОбновлениеНастройкиПубликации(Блокировка);
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого ПубликуемыйОбъект Из ПрочиеОбъектыКПубликации Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПубликации = ПубликуемыйОбъект;
			НоваяЗапись.УсловноПубликуется = Истина;
		КонецЦикла;
		Для каждого Сотрудник Из Сотрудники Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПубликации = Сотрудник;
			НоваяЗапись.УсловноПубликуется = Истина;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого Сотрудник Из Сотрудники Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = Сотрудник;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		Для каждого ПредметПубликации Из ПрочиеОбъектыКПубликации Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = ПредметПубликации;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		Если ЗначениеЗаполнено(НастройкиСервиса.Ответственный) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПредметПубликации = НастройкиСервиса.Ответственный;
			НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		НаборЗаписей.Записать();
		
		Если ЗначениеЗаполнено(НастройкиСервиса.Ответственный) Тогда
			НаборЗаписей = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ФизическоеЛицо = НастройкиСервиса.Ответственный;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей().Записать();
		
		КабинетСотрудникаВнутренний.ОчиститьДанныеПриПриОбновленииПубликации();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Процедура ОтложенноеОбновлениеСписковПубликуемыхОбъектов(БылиОшибки) Экспорт
	
	ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ДатаСобытия <= &ДатаАктуальности";
	РезультатаЗапроса = Запрос.Выполнить();
	Если РезультатаЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСотрудников  = РезультатаЗапроса.Выгрузить();
	
	Отбор = Новый Структура("Событие");
	Отбор.Событие = Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные;
	Попытка
		ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников.Скопировать(Отбор));
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Отбор.Событие = Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.ГрафикРаботы;
	Попытка
		КабинетСотрудникаВнутренний.ЗарегистрироватьИзмененияГрафиковРаботы(ТаблицаСотрудников.Скопировать(Отбор));
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников) Экспорт

	// требуется привилегированный режим, т.к. получаются сведения всех рабочих мест физических лиц
	УстановитьПривилегированныйРежим(Истина);
	
	СписокСотрудников = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	ОбрабатываемыеСотрудники = Новый Соответствие;
	Для каждого Сотрудник Из СписокСотрудников Цикл
		ОбрабатываемыеСотрудники.Вставить(Сотрудник, Истина);
	КонецЦикла;
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "ФизическоеЛицо", Истина);
	
	// Получим публикуемых физических лиц.
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
	|ГДЕ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо В(&ФизическиеЛица)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	ДатаПроверкиПубликуемости = НачалоДня(ТекущаяДатаСеанса()) - Настройки.ДнейСохраненияПубликации * 86400;
	ТипГрафикРаботы = КабинетСотрудникаВнутренний.ТипГрафикРаботы();
	
	// РабочиеМеста - сведения о рабочих местах физических лиц на дату актуальности,
	// включая уволенных.
	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	РабочиеМеста.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	РабочиеМеста.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	РабочиеМеста.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	РабочиеМеста.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипГрафикРаботы)));
	
	// БудущиеКадровыеСобытия - даты будущих кадровых событий обрабатываемых сотрудников.
	БудущиеКадровыеСобытия = Новый ТаблицаЗначений;
	БудущиеКадровыеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеКадровыеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновляемыеПозиции = Новый Массив;
	
	// Заполняем таблицы РабочиеМеста, БудущиеКадровыеСобытия.
	Если ИспользоватьКадровыйУчет Тогда
		
		// Будущие кадровые события.
		ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
		ПараметрыПолученияРабочихМест.ВключаяУволенныхНаНачалоПериода = Истина;
		ПараметрыПолученияРабочихМест.НачалоПериода 	= ДатаАктуальности;
		ПараметрыПолученияРабочихМест.СписокСотрудников = СписокСотрудников;
		КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, Ложь, ПараметрыПолученияРабочихМест);
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМеста.Период КАК ДатаСобытия,
		|	РабочиеМеста.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|ГДЕ
		|	РабочиеМеста.Период > &ДатаАктуальности";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(БудущиеКадровыеСобытия.Добавить(), Выборка);
		КонецЦикла;
		
		Если ВедетсяШтатноеРасписание Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(РабочиеМеста.ПериодЗаписи, СЕКУНДА, -1) КАК ДатаСобытия,
			|	РабочиеМеста.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудники
			|ИЗ
			|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
			|ГДЕ
			|	РабочиеМеста.Период <= &ДатаАктуальности";
			Запрос.Выполнить();
			
			ОписательТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников("ВТСотрудники", "Сотрудник", "ДатаСобытия");
			ЗапросКД = КадровыйУчет.ЗапросВТКадровыеДанныеСотрудников(Ложь, ОписательТаблицыОтборов, "ДолжностьПоШтатномуРасписанию",,Ложь);
			ЗапросКД.МенеджерВременныхТаблиц = МенеджерВТ;
			ЗапросКД.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадровыеДанные.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.ДолжностьПоШтатномуРасписанию) Тогда
					ОбновляемыеПозиции.Добавить(Выборка.ДолжностьПоШтатномуРасписанию);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполняем таблицу РабочиеМеста.
		// Получим все рабочие места физических лиц на дату актуальности, включая уволенных.
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Организация,РабочееМестоПериодРегистрации,ВидСобытия";
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",Подразделение,Должность";
		КонецЕсли;
		Если ТипГрафикРаботы <> Неопределено Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ГрафикРаботы";
		КонецЕсли;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.СписокФизическихЛиц 	= СписокФизическихЛиц;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		
		КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		// Заполним ДолжностьПоШтатномуРасписанию в таблице КадровыеДанныеСотрудников,
		// если не ведется штатное расписание.
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Если ТипГрафикРаботы = Неопределено Тогда
				КадровыеДанныеСотрудников.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
			|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные";
			Запрос.Выполнить();
			КадровыеДанныеСотрудников = КабинетСотрудникаВнутренний.КадровыеДанныеОбновляемыхСотрудников(МенеджерВТ);
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			НоваяСтрока = РабочиеМеста.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ДатаСобытия = СтрокаТЗ.РабочееМестоПериодРегистрации;
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.СписокФизическихЛиц 	= СписокФизическихЛиц;
		
		КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Организация КАК Организация,
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ПустаяСсылка) КАК ВидСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК РабочееМестоПериодРегистрации,
		|	"""" КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные";
		Запрос.Выполнить();
		КадровыеДанныеСотрудников = КабинетСотрудникаВнутренний.КадровыеДанныеОбновляемыхСотрудников(МенеджерВТ);
		
		Отбор = Новый Структура("Сотрудник");
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
			ДанныеСотрудника = КадровыеДанные.НайтиСтроки(Отбор);
			ДатаПриема = ДанныеСотрудника[0].ДатаПриема;
			ДатаУвольнения = ДанныеСотрудника[0].ДатаУвольнения;
			
			Если Не ЗначениеЗаполнено(ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДатаУвольнения) Тогда
				
				Если ДатаПриема <= ДатаАктуальности Тогда
					
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = ДатаПриема;
					
				ИначеЕсли ОбрабатываемыеСотрудники[СтрокаТЗ.Сотрудник] <> Неопределено Тогда
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = ДатаПриема;
					
				КонецЕсли;
				
			Иначе
				
				Если ДатаУвольнения = ДатаАктуальности Тогда
						
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = ДатаПриема;
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = ДатаУвольнения + 86400;
					
				ИначеЕсли ДатаУвольнения < ДатаАктуальности Тогда
					
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
					НоваяСтрока.ДатаСобытия = ДатаУвольнения + 86400;
					
				Иначе //ДатаУвольнения > ДатаАктуальности
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = ДатаУвольнения + 86400;
					
					Если ДатаПриема <= ДатаАктуальности Тогда
						
						НоваяСтрока = РабочиеМеста.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
						НоваяСтрока.ДатаСобытия = ДатаПриема;
						
					ИначеЕсли ОбрабатываемыеСотрудники[СтрокаТЗ.Сотрудник] <> Неопределено Тогда
						
						НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ДатаСобытия = ДатаПриема;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим публикуемые позиции штатного расписания.
	ПозицияЕстьВПравилах = Новый Соответствие;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПубликации.ОбъектПравила КАК Позиция
	|ИЗ
	|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|ГДЕ
	|	ПравилаПубликации.ОбъектПравила ССЫЛКА Справочник.ШтатноеРасписание";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПозицияЕстьВПравилах.Вставить(Выборка.Позиция, Истина);
	КонецЦикла;
	
	РабочиеМеста.Индексы.Добавить("ФизическоеЛицо");
	ТаблицаСотрудников.Индексы.Добавить("ФизическоеЛицо");
	ОтборПоФизическимЛицам = Новый Структура("ФизическоеЛицо");
	
	ФизическиеЛицаСотрудники = Новый Соответствие;
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		
		Сотрудники = Новый Массив;
		ОтборПоФизическимЛицам.ФизическоеЛицо = ФизическоеЛицо;
		
		НайденныеСтроки = ТаблицаСотрудников.НайтиСтроки(ОтборПоФизическимЛицам);
		Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
			Сотрудники.Добавить(СтрокаТЗ.Сотрудник);
		КонецЦикла;
		НайденныеСтроки = РабочиеМеста.НайтиСтроки(ОтборПоФизическимЛицам);
		Для каждого СтрокаТЗ Из РабочиеМеста Цикл
			Если Сотрудники.Найти(СтрокаТЗ.Сотрудник) = Неопределено Тогда
				Сотрудники.Добавить(СтрокаТЗ.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		ФизическиеЛицаСотрудники.Вставить(ФизическоеЛицо, Сотрудники);
		
	КонецЦикла;
	
	СотрудникиКУдалению = Новый ТаблицаЗначений;
	СотрудникиКУдалению.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиКУдалению.Колонки.Добавить("Добавить", Новый ОписаниеТипов("Булево"));
	
	ПубликацияФизическихЛиц = Новый ТаблицаЗначений;
	ПубликацияФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПубликацияФизическихЛиц.Колонки.Добавить("Публикуется", Новый ОписаниеТипов("Булево"));
	ПубликацияФизическихЛиц.Колонки.Добавить("ОкончаниеПубликации", Новый ОписаниеТипов("Дата"));
	
	ПубликацияСотрудников = Новый ТаблицаЗначений;
	ПубликацияСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПубликацияСотрудников.Колонки.Добавить("УсловноПубликуется", Новый ОписаниеТипов("Булево"));
	ПубликацияСотрудников.Колонки.Добавить("Уволен", Новый ОписаниеТипов("Булево"));
	ПубликацияСотрудников.Колонки.Добавить("ОтменитьПубликацию", Новый ОписаниеТипов("Булево"));
	ПубликацияСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПубликацияСотрудников.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	ПозицииПубликуемыхСотрудников = Новый Массив;
	СписокГрафиков = Новый Массив;
	РабочиеМестаФизическогоЛица = РабочиеМеста.СкопироватьКолонки();
	ОтборПоСотрудникам = Новый Структура("Сотрудник");
	
	УдалятьНеПубликуемых = Не ИспользоватьФормат30396();
	
	// Обработка данных
	Для каждого ЭлементКоллекции Из ФизическиеЛицаСотрудники Цикл
		
		ФизическоеЛицо = ЭлементКоллекции.Ключ;
		Сотрудники = ЭлементКоллекции.Значение;
		
		ФизическоеЛицоПубликуется = ПубликуемыеФизическиеЛица[ФизическоеЛицо] <> Неопределено;
		РабочиеМестаФизическогоЛица.Очистить();
		
		ОкончаниеПубликации = Дата(1,1,1);
		ЕстьПубликуемоеРабочееМесто = Ложь;
		
		Для каждого Сотрудник Из Сотрудники Цикл
			
			ОтборПоСотрудникам.Сотрудник = Сотрудник;
			ДанныеСотрудника = РабочиеМеста.Найти(Сотрудник, "Сотрудник");
			
			Если ДанныеСотрудника = Неопределено Или Не ЗначениеЗаполнено(ДанныеСотрудника.ВидСобытия) Тогда
				
				Если ФизическоеЛицоПубликуется Тогда
					НоваяСтрока = СотрудникиКУдалению.Добавить();
					НоваяСтрока.Сотрудник = Сотрудник;
					НоваяСтрока.Добавить = Истина;
				КонецЕсли;
				
			ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				
				Если УдалятьНеПубликуемых Тогда
					Если ФизическоеЛицоПубликуется Тогда
						НоваяСтрока = СотрудникиКУдалению.Добавить();
						НоваяСтрока.Сотрудник = Сотрудник;
						НоваяСтрока.Добавить = Истина;
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					Если ФизическоеЛицоПубликуется И ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
						// Увольнение публикуемого физического лица с публикуемой позиции,
						// запомним самую позднюю дату увольнения сотрудника этого физического лица,
						// при условии, что уволен "недавно".
						ДатаСобытия = ДанныеСотрудника.ДатаСобытия;
						Если ДатаСобытия > ДатаПроверкиПубликуемости Тогда
							ОкончаниеПубликации = ?(ОкончаниеПубликации < ДатаСобытия, ДатаСобытия, ОкончаниеПубликации);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
				
				ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
				Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
					ЕстьПубликуемоеРабочееМесто = Истина;
				ИначеЕсли ФизическоеЛицоПубликуется И Не УдалятьНеПубликуемых Тогда
					// Перевод публикуемого физического лица на не публикуемую позиции,
					// запомним самую позднюю дату сотрудника этого физического лица.
					ДатаСобытия = ДанныеСотрудника.ДатаСобытия;
					Если ДатаСобытия > ДатаПроверкиПубликуемости Тогда
						ОкончаниеПубликации = ?(ОкончаниеПубликации < ДатаСобытия, ДатаСобытия, ОкончаниеПубликации);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
				Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
				Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда	
				
				ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
				Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
					ЕстьПубликуемоеРабочееМесто = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьПубликуемоеРабочееМесто Тогда
			
			НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			НоваяСтрока.Публикуется = Истина;
			
			Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
				Если УдалятьНеПубликуемых Тогда
					Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
						Продолжить;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ПубликацияСотрудников.Добавить(), СтрокаТЗ);
				Иначе
					НоваяСтрока = ПубликацияСотрудников.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
					ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
					СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			// нет публикуемых рабочих мест, проверим увольнение или перевод с публикуемой позиции
			Если ЗначениеЗаполнено(ОкончаниеПубликации) Тогда
				
				НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				НоваяСтрока.Публикуется = Истина;
				НоваяСтрока.ОкончаниеПубликации = ОкончаниеПубликации;
				Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
					НоваяСтрока = ПубликацияСотрудников.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
					ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
					Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
						СписокГрафиков.Добавить(СтрокаТЗ.ГрафикРаботы);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				Если ФизическоеЛицоПубликуется Тогда
					
					НоваяСтрока = ПубликацияФизическихЛиц.Добавить();
					НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
					НоваяСтрока.Публикуется = Ложь;
					
					Если УдалятьНеПубликуемых Тогда
						Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
							НоваяСтрока = ПубликацияСотрудников.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
							НоваяСтрока.ОтменитьПубликацию = Истина;
						КонецЦикла;
					Иначе	
						Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
							// Регистрируем сотрудников к публикации для обновления сведений о рабочих местах,
							// т.к. текущее состояние физического лица - публикуется.
							НоваяСтрока = ПубликацияСотрудников.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
							НоваяСтрока.УсловноПубликуется = Истина;
							ПозицииПубликуемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если ЗначениеЗаполнено(НастройкиСервиса.Ответственный) Тогда
		СтрокаТЗ = ПубликацияФизическихЛиц.Найти(НастройкиСервиса.Ответственный, "ФизическоеЛицо");
		Если СтрокаТЗ <> Неопределено Тогда
			// ответственный за сервис всегда публикуется
			СтрокаТЗ.Публикуется = Истина;
			СтрокаТЗ.ОкончаниеПубликации = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
	Если СотрудникиКУдалению.Количество() = 0
		И ПубликацияФизическихЛиц.Количество() = 0
		И ПубликацияСотрудников.Количество() = 0
		И БудущиеКадровыеСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПубликуемыеСотрудники = ПубликацияСотрудников.ВыгрузитьКолонку("Сотрудник");
	Запрос.УстановитьПараметр("ПубликуемыеСотрудники", ПубликуемыеСотрудники);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыДляУдаления.ОбъектДляУдаления КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника КАК ОбъектыДляУдаления
	|ГДЕ
	|	ОбъектыДляУдаления.ОбъектДляУдаления В(&ПубликуемыеСотрудники)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СотрудникиКУдалению.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.Добавить = Ложь;
	КонецЦикла;
	
	// получим ссылки на объекты публикуемых позиций
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПозицииПубликуемыхСотрудников, ОбновляемыеПозиции);
	ПрочиеОбъектыКПубликации = ОбъектыПозицийШтатногоРасписанияПоСсылкам(ПозицииПубликуемыхСотрудников, Истина);
	
	// получим список графиков работы, которые еще не публикуются
	ПубликуемыеГрафикиРаботы = ПубликуемыеГрафикиРаботы(СписокГрафиков);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрочиеОбъектыКПубликации, ПубликуемыеГрафикиРаботы);
	
	// Проверка заполнения объектов.
	ФизическиеЛицаКПубликации = ПубликацияФизическихЛиц.Скопировать(Новый Структура("Публикуется", Истина)).ВыгрузитьКолонку("ФизическоеЛицо");
	РезультатПроверкиПубликуемыхОбъектов = РезультатПроверкиПубликуемыхОбъектов(ФизическиеЛицаКПубликации, ПозицииПубликуемыхСотрудников, РабочиеМеста);
	
	// Подготовка таблиц с данными для блокировки объектов перед записью.
	ПубликуемыеОбъектыБлокировка = Новый ТаблицаЗначений;
	ПубликуемыеОбъектыБлокировка.Колонки.Добавить("ОбъектПубликации");
	
	ИзмененияДляСервисаБлокировка = Новый ТаблицаЗначений;
	ИзмененияДляСервисаБлокировка.Колонки.Добавить("ПредметПубликации");
	
	ПубликацииПравНаОтпускБлокировка = Новый ТаблицаЗначений;
	ПубликацииПравНаОтпускБлокировка.Колонки.Добавить("Сотрудник");
	
	Для каждого ЭлементКоллекции Из ПрочиеОбъектыКПубликации Цикл
		НоваяСтрока = ПубликуемыеОбъектыБлокировка.Добавить();
		НоваяСтрока.ОбъектПубликации = ЭлементКоллекции;
		НоваяСтрока = ИзмененияДляСервисаБлокировка.Добавить();
		НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ПубликацияСотрудников Цикл
		НоваяСтрока = ПубликуемыеОбъектыБлокировка.Добавить();
		НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
		НоваяСтрока = ИзмененияДляСервисаБлокировка.Добавить();
		НоваяСтрока.ПредметПубликации = СтрокаТЗ.Сотрудник;
		Если Не СтрокаТЗ.ОтменитьПубликацию И Не СтрокаТЗ.Уволен И Не СтрокаТЗ.УсловноПубликуется Тогда 
			НоваяСтрока = ПубликацииПравНаОтпускБлокировка.Добавить();
			НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ПубликацияФизическихЛиц Цикл
		НоваяСтрока = ИзмененияДляСервисаБлокировка.Добавить();
		НоваяСтрока.ПредметПубликации = СтрокаТЗ.ФизическоеЛицо;
	КонецЦикла;
	
	ФизическиеЛицаОрганизации = Новый ТаблицаЗначений;
	ФизическиеЛицаОрганизации.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФизическиеЛицаОрганизации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПубликуемыеОбъектыБлокировка;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДляСервисаБлокировка;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = СотрудникиКУдалению;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектДляУдаления", "Сотрудник");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПубликацияФизическихЛиц;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
		ЭлементБлокировки.ИсточникДанных = ПубликацияФизическихЛиц;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатПроверкиПубликуемыхОбъектов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов");
		ЭлементБлокировки.ИсточникДанных = ТаблицаСотрудников;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник", "Сотрудник");
		
		КабинетСотрудникаВнутренний.ДобавитьЭлементБлокировкиСотрудникиДляОбновленияПубликацииПравНаОтпуск(Блокировка, ПубликацииПравНаОтпускБлокировка);
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из СотрудникиКУдалению Цикл
			Запись = РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектДляУдаления = СтрокаТЗ.Сотрудник;
			Если СтрокаТЗ.Добавить Тогда
				Запись.Записать();
			Иначе
				Запись.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ОбъектПубликации Из ПрочиеОбъектыКПубликации Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ОбъектПубликации;
			Запись.Записать();
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = ОбъектПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ПубликацияСотрудников Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.Сотрудник;
			Если СтрокаТЗ.ОтменитьПубликацию Тогда
				Запись.Удалить();
			Иначе
				Запись.УсловноПубликуется = СтрокаТЗ.УсловноПубликуется;
				Запись.Записать();
			КонецЕсли;
			Если Не СтрокаТЗ.ОтменитьПубликацию Тогда
				Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				Запись.ПредметПубликации = СтрокаТЗ.Сотрудник;
				Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				Запись.Записать();
			КонецЕсли;
			Если Не СтрокаТЗ.ОтменитьПубликацию И Не СтрокаТЗ.Уволен И Не СтрокаТЗ.УсловноПубликуется Тогда
				КабинетСотрудникаВнутренний.ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(СтрокаТЗ.Сотрудник, Ложь);
				ЗаполнитьЗначенияСвойств(ФизическиеЛицаОрганизации.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ПубликацияФизическихЛиц Цикл
			Запись = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			Если СтрокаТЗ.Публикуется Тогда
				Запись.ОкончаниеПубликации = СтрокаТЗ.ОкончаниеПубликации;
				Запись.Записать();
			Иначе
				Запись.Удалить()
			КонецЕсли;
			Если СтрокаТЗ.Публикуется Тогда
				Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				Запись.ПредметПубликации = СтрокаТЗ.ФизическоеЛицо;
				Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				Запись.Записать();
				Запись = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
				Запись.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
				Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				Запись.Записать();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьРезультатыПроверкиОбъектов(РезультатПроверкиПубликуемыхОбъектов);
		
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		Отбор = Новый Структура("Сотрудник");
		Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
			НаборЗаписей.Очистить();
			Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
			НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТЗ.Сотрудник);
			НаборЗаписей.Отбор.Событие.Установить(Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные);
			НайденныеСтроки = БудущиеКадровыеСобытия.НайтиСтроки(Отбор);
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
				НоваяЗапись.Событие = Перечисления.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ФизическиеЛицаОрганизации.Свернуть("Организация,ФизическоеЛицо");
		КадровыйЭДО.СформироватьСогласияНаПрисоединениеККЭДО(ФизическиеЛицаОрганизации);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Функция ОбъектыПозицийШтатногоРасписанияПоСсылкам(Позиции, ТолькоНеПубликуемые)

	ОбъектыПозиций = Новый Массив;
	
	Если Позиции.Количество() = 0 Тогда
		Возврат ОбъектыПозиций;
	КонецЕсли;
	
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
	
	Позиции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Позиции);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, Позиции);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Должность КАК Должность
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций, "Организация", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, Организации);
	ГоловныеОрганизации = Новый Массив;
	Для каждого Организация Из Организации Цикл
		ГоловныеОрганизации.Добавить(ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, ГоловныеОрганизации, Истина);
	
	Должности = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций, "Должность", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, Должности, Истина);
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Подразделения = ПубликуемыеПодразделенияОрганизаций(Позиции);
	Иначе
		Подразделения = КабинетСотрудникаВнутренний.ПубликуемаяСтруктураПредприятия(Позиции);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПозиций, Подразделения);
	
	Если ТолькоНеПубликуемые Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыПозиций", ОбъектыПозиций);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
		|ГДЕ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации В(&ОбъектыПозиций)";
		ТекущиеПубликуемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
		ПубликуемыеОбъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбъектыПозиций, ТекущиеПубликуемыеОбъекты);
		// добавим подразделения, они всегда обновляются
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПубликуемыеОбъекты, Подразделения);
		
		Возврат ПубликуемыеОбъекты;
		
	Иначе
		
		Возврат ОбъектыПозиций;
		
	КонецЕсли;

КонецФункции 

Функция ПубликуемыеПодразделенияОрганизаций(Позиции)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтатноеРасписание.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Если Подразделения.Количество() > 0 Тогда
		Подразделения = РодителиПодразделений(Подразделения);
	КонецЕсли;
	
	Возврат Подразделения;

КонецФункции

Функция ПубликуемыеГрафикиРаботы(СписокГрафиков)
	
	Если СписокГрафиков.Количество() = 0 Тогда
		Возврат СписокГрафиков;
	КонецЕсли;

	СписокГрафиков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокГрафиков);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикиРаботы", СписокГрафиков);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации В(&ГрафикиРаботы)";
	ТекущиеПубликуемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокГрафиков, ТекущиеПубликуемыеОбъекты);

КонецФункции

#КонецОбласти

#Область РегистрацияПубликуемыхОбъектов

Процедура ОбъектПередЗаписью(Объект) Экспорт

	ИменаКонтролируемыхПолей = ИменаКонтролируемыхПолей(Объект);
	Если Объект.ЭтоНовый() Тогда
		ПрежниеДанныеОбъекта = Новый Структура(ИменаКонтролируемыхПолей);
	Иначе
		ПрежниеДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, ИменаКонтролируемыхПолей);
	КонецЕсли;
	Объект.ДополнительныеСвойства.Вставить("ПрежниеДанныеПубликуемогоОбъекта", ПрежниеДанныеОбъекта);
	
	КабинетСотрудникаВнутренний.ОбъектПередЗаписью(Объект);
	
КонецПроцедуры

Процедура ОбъектПриЗаписи(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ПриЗаписиФизическогоЛица(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		Если ПубликоватьСтруктуруЮридическихЛиц() Тогда
			ПриЗаписиПубликуемогоОбъекта(Объект);
		Иначе
			ПриЗаписиПодразделенияОрганизации(Объект);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Организации")
		Или ТипЗнч(Объект) = Тип("СправочникОбъект.Должности") Тогда
		ПриЗаписиПубликуемогоОбъекта(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаИзменитьЛичныеДанные")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаНалоговыйВычет")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтпуск")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаСправка2НДФЛ")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтсутствиеПоБолезни") Тогда
		ПриЗаписиЗаявкиСотрудника(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("КонстантаМенеджерЗначения.ИспользоватьЭлектронныеПодписи") Тогда
		ОбработатьИзменениеНастройкиИспользоватьЭлектронныеПодписи(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты") Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если Объект.Ссылка = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись() Тогда
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ДокументКадровогоЭДО") Тогда
		ПриЗаписиДокументаКЭДО(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СогласиеНаПрисоединениеККЭДО") Тогда
		ПриЗаписиДокументаСогласиеНаПрисоединениеККЭДО(Объект);
	Иначе
		КабинетСотрудникаВнутренний.ОбъектПриЗаписи(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиДокументаКЭДО(ДокументОбъект)
	
	Если ДокументОбъект.ПометкаУдаления И ИспользоватьФормат401() Тогда
		
		НеОбрабатывать = ДокументОбъект.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника
			Или ДокументОбъект.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток 
			Или ДокументОбъект.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.СправкаСотруднику
			Или ТипЗнч(ДокументОбъект.ОснованиеДокумента)= Тип("ДокументСсылка.СправкаНДФЛ")
			Или ТипЗнч(ДокументОбъект.ОснованиеДокумента)= БизнесПроцессыЗаявокСотрудников.ТипЗаявкаСотрудникаСправкаСМестаРаботы()
			Или Не КадровыйЭДО.ЭтоТипОбъектаСПечатнымиФормами(ТипЗнч(ДокументОбъект.ОснованиеДокумента));
			
		Если НеОбрабатывать Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыКУдалениюКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ДокументОбъект.ИдентификаторДокумента);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ДокументыКУдалениюКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ДокументОбъект.ИдентификаторДокумента);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ИдентификаторДокумента = ДокументОбъект.ИдентификаторДокумента;
			ЗаписьНабора.ТипОбъекта = Перечисления.ТипыОбъектовКабинетСотрудника.ДокументНаПодпись;
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(ДокументОбъект.ИдентификаторДокумента, ОписаниеОшибки());
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		РегистрироватьИзменения = Неопределено;
		ДокументОбъект.ДополнительныеСвойства.Свойство("РегистрироватьИзмененияКабинетСотрудника", РегистрироватьИзменения);
		Если РегистрироватьИзменения <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.ВнешниеПодписанты, "ФизическоеЛицо");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
		|ГДЕ
		|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо В(&ФизическиеЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
		|ГДЕ
		|	ПубликуемыеОбъекты.ОбъектПубликации = &Организация";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Если Не РезультатЗапроса[0].Пустой() И Не РезультатЗапроса[1].Пустой() Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("ПубликуемыйДокумент", ДокументОбъект.Ссылка);
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПубликуемыйДокумент.Установить(ДокументОбъект.Ссылка);
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ПубликуемыйДокумент = ДокументОбъект.Ссылка;
				ЗаписьНабора.ВерсияДанных  = Строка(Новый УникальныйИдентификатор);
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ЗаписатьОшибкуРегистрацииИзменений(ДокументОбъект.Ссылка, ОписаниеОшибки());
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиФизическогоЛица(ФизическоеЛицо)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
	|ГДЕ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо = &ФизическоеЛицо";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		РезультатПроверки = РезультатПроверкиФизическихЛицИСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо.Ссылка));
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", ФизическоеЛицо.Ссылка);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
			
			ВыполняетсяБлокировка = Истина;
			Блокировка.Заблокировать();
			ВыполняетсяБлокировка = Ложь;
			
			НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПредметПубликации.Установить(ФизическоеЛицо.Ссылка);
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ПредметПубликации 	= ФизическоеЛицо.Ссылка;
			ЗаписьНабора.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
			
			НаборЗаписей.Записать();
			
			ЗаписатьРезультатыПроверкиОбъектов(РезультатПроверки);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Если ВыполняетсяБлокировка Тогда
				ЗаписьЖурналаРегистрации(ИмяСобытияОшибкаБлокировки(), УровеньЖурналаРегистрации.Ошибка, , ФизическоеЛицо.Ссылка, "РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
			Иначе
				ЗаписатьОшибкуРегистрацииИзменений(ФизическоеЛицо.Ссылка, ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиПодразделенияОрганизации(Подразделение)
	
	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Подразделение.ДополнительныеСвойства.Свойство("ПрежниеДанныеПубликуемогоОбъекта", ЗначенияКонтролируемыхРеквизитов);
	Если Не КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеПредприятия = КабинетСотрудникаВнутренний.ПодразделениеВСтруктуреПредприятия(Подразделение);
	Если ЗначениеЗаполнено(ПодразделениеПредприятия) Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектПубликации", ПодразделениеПредприятия.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
		|ГДЕ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = &ОбъектПубликации";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗарегистрироватьИзмененияДляСервиса(Выборка.ОбъектПубликации);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИменаКонтролируемыхПолей(Объект)
	
	ИменаКонтролируемыхПолей = "";
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Должности") Тогда
		ИменаКонтролируемыхПолей = "Наименование";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Организации") Тогда
		ИменаКонтролируемыхПолей = "Наименование,ИНН,ГоловнаяОрганизация,ОбособленноеПодразделение";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		Если ПубликоватьСтруктуруЮридическихЛиц() Тогда
			ИменаКонтролируемыхПолей = "Наименование,Код,Родитель,РеквизитДопУпорядочиванияИерархического";
		Иначе
			ИменаКонтролируемыхПолей = "РеквизитДопУпорядочиванияИерархического";
		КонецЕсли;
	Иначе
		ИменаКонтролируемыхПолей = КабинетСотрудникаВнутренний.ИменаКонтролируемыхПолей(Объект);
	КонецЕсли;
	
	Возврат ИменаКонтролируемыхПолей;

КонецФункции

Функция КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Объект) Экспорт

	Если ЗначенияКонтролируемыхРеквизитов = Неопределено Тогда
		Возврат Истина;
	Иначе
		Для каждого ЭлементКоллекции Из ЗначенияКонтролируемыхРеквизитов Цикл
			Если Объект[ЭлементКоллекции.Ключ] <> ЭлементКоллекции.Значение Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ЗарегистрироватьДокументыНаПодпись() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданияКИсполнению = РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыКОбработке(
		Ложь, Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокФайлов = ЗаданияКИсполнению.Получить(Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
	Если СписокФайлов <> Неопределено Тогда
		ЗарегистрироватьИзмененияДокументовКадровогоЭДО(СписокФайлов)
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДокументовКадровогоЭДО(СписокФайлов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФайлов", СписокФайлов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ЭлектронныйДокумент В(&СписокФайлов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбработанныеФайлы = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПубликуемыйДокумент", "Ссылка");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбработанныеФайлы.Добавить(Выборка.ЭлектронныйДокумент);
				НаборЗаписей = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПубликуемыйДокумент.Установить(Выборка.Ссылка);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ПубликуемыйДокумент = Выборка.Ссылка;
				НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				НаборЗаписей.Записать();
			КонецЦикла;
			
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.УдалитьФайлыИзОбработки(
							ОбработанныеФайлы,
							Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(Выборка.Ссылка, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДляСервиса(ПредметПубликации) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", ПредметПубликации);
		
		ВыполняетсяБлокировка = Истина;
		Блокировка.Заблокировать();
		ВыполняетсяБлокировка = Ложь;
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(ПредметПубликации);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ПредметПубликации 	= ПредметПубликации;
		ЗаписьНабора.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Если ВыполняетсяБлокировка Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияОшибкаБлокировки(), УровеньЖурналаРегистрации.Ошибка, , ПредметПубликации, "РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		Иначе
			ЗаписатьОшибкуРегистрацииИзменений(ПредметПубликации, ОписаниеОшибки());
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

Процедура РегистрацияПовторнойПубликацииДокументовКЭДО(ИдентификаторыДокументов) Экспорт
	
	Если Не ИспользоватьФормат503() Или Не ЗначениеЗаполнено(ИдентификаторыДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДокументовДляСервисаКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПубликуемыйДокумент", "Ссылка");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПубликуемыйДокумент.Установить(Выборка.Ссылка);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ПубликуемыйДокумент = Выборка.Ссылка;
				НоваяЗапись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				НаборЗаписей.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(Выборка.Ссылка, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрацияИзмененийПередОбновлениемПубликации(БылиОшибки) Экспорт

	ОтложенноеОбновлениеСписковПубликуемыхОбъектов(БылиОшибки);
	
	// Регистрация всех публикуемых объектов как изменения для публикации.
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		КабинетСотрудникаВнутренний.ДобавитьЭлементыБлокировкиПриОбновленииПубликации(Блокировка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
		ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты";
		ПрочиеПубликуемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
		
		НаборЗаписейИзменения = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписейВычеты    = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		Для каждого ОбъектПубликации Из ФизическиеЛица Цикл
			ЗаписьНабора = НаборЗаписейИзменения.Добавить();
			ЗаписьНабора.ПредметПубликации = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			ЗаписьНабора = НаборЗаписейВычеты.Добавить();
			ЗаписьНабора.ФизическоеЛицо = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		
		Для каждого ОбъектПубликации Из ПрочиеПубликуемыеОбъекты Цикл
			ЗаписьНабора = НаборЗаписейИзменения.Добавить();
			ЗаписьНабора.ПредметПубликации = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		
		НаборЗаписейИзменения.Записать();
		НаборЗаписейВычеты.Записать();
		
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеПубликуемыхОбъектов(ПрочиеПубликуемыеОбъекты, Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Процедура ЗарегистрироватьОбъектДляУдаленияИзСервиса(ОбъектДляУдаления) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ОбъектДляУдаления", ОбъектДляУдаления);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", ОбъектДляУдаления);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектДляУдаления.Установить(ОбъектДляУдаления);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ОбъектДляУдаления = ОбъектДляУдаления;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметПубликации.Установить(ОбъектДляУдаления);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибкуРегистрацииИзменений(ОбъектДляУдаления, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписиДокументаСогласиеНаПрисоединениеККЭДО(ДокументОбъект)
	
	Если ДокументОбъект.ПометкаУдаления Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		Попытка
			
			ИдентификаторДокумента = Строка(ДокументОбъект.Ссылка.УникальныйИдентификатор());
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыКУдалениюКабинетСотрудника");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ИдентификаторДокумента);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ДокументыКУдалениюКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ИдентификаторДокумента = ИдентификаторДокумента;
			ЗаписьНабора.ТипОбъекта = Перечисления.ТипыОбъектовКабинетСотрудника.СогласиеНаПрисоединениеККЭДО;
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(ДокументОбъект.Ссылка, ОписаниеОшибки());
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияПубликуемыхОбъектов

Функция МобильныйТелефонУказанСОшибкой(ТелефонСтрокой)
	
	РазрешенныеСимволы = "- ()+0123456789";
	ТелефонЦифры = "";
	Для Сч=1 По СтрДлина(ТелефонСтрокой) Цикл
		ОчереднойСимвол = Сред(ТелефонСтрокой, Сч, 1);
		Если СтрНайти(РазрешенныеСимволы, ) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		ТелефонЦифры = ТелефонЦифры + ОчереднойСимвол;
	КонецЦикла;
	
	Если Лев(ТелефонСтрокой, 1) = "+" Тогда
		// код страны должен начинаться цифрой и не равен нулю
		Если СтрНайти("123456789", Сред(ТелефонСтрокой, 2, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(ТелефонЦифры) < 10 Или СтрДлина(ТелефонСтрокой) > 20 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция АдресЭлектроннойПочтыУказанСОшибкой(АдресЭлектроннойПочты)

	АдресСоответствуетТребованиям = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты);
	Если АдресСоответствуетТребованиям Тогда
		// дополнительна проверка
		Позиция = СтрНайти(АдресЭлектроннойПочты,"@");
		ЛокальноеИмя = Лев(АдресЭлектроннойПочты, Позиция - 1);
		Символ = ".";
		АдресСоответствуетТребованиям = Не ((Лев(ЛокальноеИмя,1) = Символ) Или (Прав(ЛокальноеИмя,1) = Символ));
	КонецЕсли;
	
	Возврат Не АдресСоответствуетТребованиям;

КонецФункции

Функция ОбъектыБезОшибокЗаполнения(ОбъектыДляПроверки) Экспорт

	Результат = Новый Массив;
	
	Если ОбъектыДляПроверки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектыДляПроверки", ОбъектыДляПроверки);
	
	Если ТипЗнч(ОбъектыДляПроверки[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК Таблица
		|		ПО ФизическиеЛица.Ссылка = Таблица.ОбъектПубликации
		|			И (Таблица.БлокирующаяОшибка)
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ОбъектыДляПроверки)
		|	И Таблица.БлокирующаяОшибка ЕСТЬ NULL";
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	ИначеЕсли ТипЗнч(ОбъектыДляПроверки[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК Таблица
		|		ПО Сотрудники.Ссылка = Таблица.ОбъектПубликации
		|			И (Таблица.БлокирующаяОшибка)
		|ГДЕ
		|	Сотрудники.Ссылка В(&ОбъектыДляПроверки)
		|	И Таблица.БлокирующаяОшибка ЕСТЬ NULL";
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	ИначеЕсли ТипЗнч(ОбъектыДляПроверки[0]) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Позиции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК Позиции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК Таблица
		|		ПО Позиции.Ссылка = Таблица.ОбъектПубликации
		|			И (Таблица.БлокирующаяОшибка)
		|ГДЕ
		|	Позиции.Ссылка В(&ОбъектыДляПроверки)
		|	И Таблица.БлокирующаяОшибка ЕСТЬ NULL";
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		Результат = ОбъектыДляПроверки;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ПроверитьЗаполнениеПубликуемыхОбъектовФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	// РабочиеМеста - сведения о рабочих местах физических лиц на дату актуальности,
	// включая уволенных.
	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	ДатаАктуальности = ТекущаяДатаСеанса();
	
	Если ИспользоватьКадровыйУчет Тогда
		
		// Заполняем таблицу РабочиеМеста.
		// Получим все рабочие места физических лиц на дату актуальности, включая уволенных.
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "РабочееМестоПериодРегистрации,ВидСобытия";
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",Организация,Подразделение,Должность";
		КонецЕсли;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		ПараметрыПолучения.СписокФизическихЛиц = СписокФизическихЛиц;
		
		КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		// Заполним ДолжностьПоШтатномуРасписанию в таблице КадровыеДанныеСотрудников,
		// если не ведется штатное расписание.
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			НоваяСтрока = РабочиеМеста.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.СписокФизическихЛиц 	= СписокФизическихЛиц;
		КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) Тогда
				Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				КонецЕсли;
			Иначе
				Если СтрокаТЗ.ДатаУвольнения = ДатаАктуальности Тогда
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				Иначе //СтрокаТЗ.ДатаУвольнения > ДатаАктуальности
					Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
						НоваяСтрока = РабочиеМеста.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьЗаполнениеВсехПубликуемыхОбъектов(РабочиеМеста);

КонецПроцедуры

Процедура ПроверитьЗаполнениеВсехПубликуемыхОбъектов(РабочиеМестаСотрудников)

	// Проверка физических лиц.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
	МассивФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	РезультатыПроверки = РезультатыПроверкиФизическихЛиц(МассивФизическихЛиц);
	
	// Проверка позиций штатного расписания.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.ШтатноеРасписание";
	Позиции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	РезультатыПроверкиПозиций = РезультатыПроверкиПозицийШтатногоРасписания(Позиции);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатыПроверки, РезультатыПроверкиПозиций, Истина);
	
	// Проверка сотрудников
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка";
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	РабочиеМестаСотрудников.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
	
		ЕстьОшибка = Ложь;
		ОписаниеОшибки = "";
		
		РезультатПроверки = РезультатыПроверки[СтрокаТЗ.ФизическоеЛицо];
		ФизическоеЛицо = Неопределено;
		Если РезультатПроверки <> Неопределено И РезультатПроверки.БлокирующаяОшибка Тогда
			ЕстьОшибка = Истина;
			ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			ОписаниеОшибки = ОписаниеОшибкиФизическоеЛицо();
		КонецЕсли;
		
		Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
		НайденныеСтроки = РабочиеМестаСотрудников.НайтиСтроки(Отбор);
		ЕстьОшибкаПозиции = Ложь;
		Позиция = Неопределено;
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			ПозицияСотрудника = НайденныеСтроки[0].ДолжностьПоШтатномуРасписанию;
			РезультатПроверки = РезультатыПроверки[ПозицияСотрудника];
			ЕстьОшибкаПозиции = (РезультатПроверки <> Неопределено И РезультатПроверки.БлокирующаяОшибка);
			Если ЕстьОшибкаПозиции Тогда
				Описание = ОписаниеОшибкиПозиция();
				ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), Описание, СтрШаблон("%1%2%3", ОписаниеОшибки, Символы.ПС, Описание));
				Позиция = ПозицияСотрудника;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОшибка Или ЕстьОшибкаПозиции Тогда
			РезультатПроверки = НовыйРезультатПроверки();
			РезультатПроверки.БлокирующаяОшибка = Истина;
			РезультатПроверки.Позиция 			= Позиция;
			РезультатПроверки.ФизическоеЛицо 	= ФизическоеЛицо;
			РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибки;
			РезультатыПроверки.Вставить(СтрокаТЗ.Сотрудник, РезультатПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохранение результатов проверки.
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого ЭлементКоллекции Из РезультатыПроверки Цикл
			РезультатПроверки = ЭлементКоллекции.Значение;
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ОбъектПубликации 			= ЭлементКоллекции.Ключ;
			НоваяЗапись.БлокирующаяОшибка 			= РезультатПроверки.БлокирующаяОшибка;
			НоваяЗапись.Позиция 					= РезультатПроверки.Позиция;
			НоваяЗапись.ФизическоеЛицо 				= РезультатПроверки.ФизическоеЛицо;
			НоваяЗапись.ОписаниеБлокирующейОшибки 	= РезультатПроверки.ОписаниеБлокирующейОшибки;
			НоваяЗапись.ОписаниеОшибки 				= РезультатПроверки.ОписаниеОшибки;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Функция РезультатПроверкиПубликуемыхОбъектов(ФизическиеЛица, Позиции, РабочиеМестаСотрудников)
	
	ТаблицаРезультатов = НоваяТаблицаРезультатыПроверкиЗаполенения();
	
	РезультатыПроверки = РезультатыПроверкиФизическихЛиц(ФизическиеЛица);
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		РезультатПроверки = РезультатыПроверки[ФизическоеЛицо];
		Если РезультатПроверки = Неопределено Тогда
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = ФизическоеЛицо;
		Иначе
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = ФизическоеЛицо;
			НоваяСтрока.РезультатПроверки = РезультатПроверки;
		КонецЕсли;
	КонецЦикла;
	
	РезультатыПроверкиПозиций = РезультатыПроверкиПозицийШтатногоРасписания(Позиции);
	Для каждого Позиция Из Позиции Цикл
		РезультатПроверки = РезультатыПроверкиПозиций[Позиция];
		Если РезультатПроверки = Неопределено Тогда
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = Позиция;
		Иначе
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = Позиция;
			НоваяСтрока.РезультатПроверки = РезультатПроверки;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатыПроверки, РезультатыПроверкиПозиций, Истина);
	Сотрудники = РабочиеМестаСотрудников.ВыгрузитьКолонку("Сотрудник");
	
	// Проверка сотрудников
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В(&Сотрудники)";
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	РабочиеМестаСотрудников.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
	
		ЕстьОшибка = Ложь;
		ОписаниеОшибки = "";
		
		РезультатПроверки = РезультатыПроверки[СтрокаТЗ.ФизическоеЛицо];
		ФизическоеЛицо = Неопределено;
		Если РезультатПроверки <> Неопределено И РезультатПроверки.БлокирующаяОшибка Тогда
			ЕстьОшибка = Истина;
			ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			ОписаниеОшибки = ОписаниеОшибкиФизическоеЛицо();
		КонецЕсли;
		
		Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
		НайденныеСтроки = РабочиеМестаСотрудников.НайтиСтроки(Отбор);
		ЕстьОшибкаПозиции = Ложь;
		Позиция = Неопределено;
		Если НайденныеСтроки <> Неопределено Тогда
			ПозицияСотрудника = НайденныеСтроки[0].ДолжностьПоШтатномуРасписанию;
			РезультатПроверки = РезультатыПроверки[ПозицияСотрудника];
			ЕстьОшибкаПозиции = (РезультатПроверки <> Неопределено И РезультатПроверки.БлокирующаяОшибка);
			Если ЕстьОшибкаПозиции Тогда
				Описание = ОписаниеОшибкиПозиция();
				ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), Описание, СтрШаблон("%1%2%3", ОписаниеОшибки, Символы.ПС, Описание));
				Позиция = ПозицияСотрудника;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОшибка Или ЕстьОшибкаПозиции Тогда
			РезультатПроверки = НовыйРезультатПроверки();
			РезультатПроверки.БлокирующаяОшибка = Истина;
			РезультатПроверки.Позиция 			= Позиция;
			РезультатПроверки.ФизическоеЛицо 	= ФизическоеЛицо;
			РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибки;
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
			НоваяСтрока.РезультатПроверки = РезультатПроверки;
		Иначе
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатов;
	
КонецФункции

Функция РезультатПроверкиФизическихЛицИСотрудников(МассивФизическихЛиц) Экспорт
	
	ТаблицаРезультатов = НоваяТаблицаРезультатыПроверкиЗаполенения();
	
	Если МассивФизическихЛиц.Количество() = 0 Тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТПубликуемыеСотрудники
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПубликуемыеОбъекты.ОбъектПубликации = Сотрудники.Ссылка
	|			И (Сотрудники.ФизическоеЛицо В (&ФизическиеЛица))
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.ОбъектПубликации В(&ФизическиеЛица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК Сотрудник,
	|	ОшибкиЗаполнения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОшибкиЗаполнения.Позиция КАК Позиция
	|ИЗ
	|	РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПубликуемыеСотрудники КАК ПубликуемыеСотрудники
	|		ПО ОшибкиЗаполнения.ОбъектПубликации = ПубликуемыеСотрудники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПубликуемыеСотрудники.Сотрудник КАК Сотрудник,
	|	ПубликуемыеСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТПубликуемыеСотрудники КАК ПубликуемыеСотрудники";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[1].Выбрать();
	ТекущиеОшибки = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ТекущиеОшибки.Вставить(Выборка.ОбъектПубликации, Истина);
	КонецЦикла;
	
	ТекущиеОшибкиСотрудники = РезультатЗапроса[2].Выгрузить();
	ТекущиеОшибкиСотрудники.Индексы.Добавить("ФизическоеЛицо");
	
	ПубликуемыеСотрудники = РезультатЗапроса[3].Выгрузить();
	ПубликуемыеСотрудники.Индексы.Добавить("ФизическоеЛицо");
	Отбор = Новый Структура("ФизическоеЛицо");
	
	СотрудникТекущиеОшибки = Новый Соответствие;
	Для каждого СтрокаТЗ Из ТекущиеОшибкиСотрудники Цикл
		СотрудникТекущиеОшибки.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ);
	КонецЦикла;
	
	РезультатыПроверки = РезультатыПроверкиФизическихЛиц(МассивФизическихЛиц);
	Для каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл
		
		ЕстьБлокирующаяОшибка = Ложь;
		РезультатПроверки = РезультатыПроверки[ФизическоеЛицо];
		Если РезультатПроверки <> Неопределено Тогда
			ЕстьБлокирующаяОшибка = РезультатПроверки.БлокирующаяОшибка;
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = ФизическоеЛицо;
			НоваяСтрока.РезультатПроверки = РезультатПроверки;
		ИначеЕсли ТекущиеОшибки[ФизическоеЛицо] <> Неопределено Тогда
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = ФизическоеЛицо;
		КонецЕсли;
		
		Отбор.ФизическоеЛицо = ФизическоеЛицо;
		СотрудникиФизическогоЛица = ПубликуемыеСотрудники.НайтиСтроки(Отбор);
		ТекущиеОшибкиСотрудник = ТекущиеОшибкиСотрудники.НайтиСтроки(Отбор);
		Если ЕстьБлокирующаяОшибка Тогда
			Для каждого СтрокаТЗ Из СотрудникиФизическогоЛица Цикл
				ТекущиеОшибкиСотрудника = СотрудникТекущиеОшибки[СтрокаТЗ.Сотрудник];
				Если ТекущиеОшибкиСотрудника = Неопределено Тогда
					РезультатПроверки = НовыйРезультатПроверки();
					РезультатПроверки.БлокирующаяОшибка = Истина;
					РезультатПроверки.ФизическоеЛицо 	= ФизическоеЛицо;
					РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибкиФизическоеЛицо();
					НоваяСтрока = ТаблицаРезультатов.Добавить();
					НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
					НоваяСтрока.РезультатПроверки = РезультатПроверки;
				Иначе
					Если ЗначениеЗаполнено(ТекущиеОшибкиСотрудника.ФизическоеЛицо) Тогда
						// ошибка уже зарегистрирована
						Продолжить;
					Иначе
						ОписаниеОшибки = СтрШаблон("%1%2%3", ОписаниеОшибкиФизическоеЛицо(), Символы.ПС, ОписаниеОшибкиПозиция());
						РезультатПроверки = НовыйРезультатПроверки();
						РезультатПроверки.БлокирующаяОшибка 		= Истина;
						РезультатПроверки.ФизическоеЛицо 			= ФизическоеЛицо;
						РезультатПроверки.Позиция 					= ТекущиеОшибкиСотрудника.Позиция;
						РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибки;
						НоваяСтрока = ТаблицаРезультатов.Добавить();
						НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
						НоваяСтрока.РезультатПроверки = РезультатПроверки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// нет ошибок заполнения
			Для каждого СтрокаТЗ Из ТекущиеОшибкиСотрудник Цикл
				Если ЗначениеЗаполнено(СтрокаТЗ.Позиция) Тогда
					// Перезапишем данные если была ошибка по физическому лицу.
					Если ЗначениеЗаполнено(СтрокаТЗ.ФизическоеЛицо) Тогда
						РезультатПроверки = НовыйРезультатПроверки();
						РезультатПроверки.БлокирующаяОшибка 		= Истина;
						РезультатПроверки.Позиция 					= СтрокаТЗ.Позиция;
						РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибкиПозиция();
						НоваяСтрока = ТаблицаРезультатов.Добавить();
						НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
						НоваяСтрока.РезультатПроверки = РезультатПроверки;
					КонецЕсли;
				Иначе
					НоваяСтрока = ТаблицаРезультатов.Добавить();
					НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатов;
	
КонецФункции

Функция РезультатПроверкиПозицийИСотрудников(Позиции) Экспорт

	ТаблицаРезультатов = НоваяТаблицаРезультатыПроверкиЗаполенения();
	
	Если Позиции.Количество() = 0 Тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.ОбъектПубликации В(&Позиции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК Сотрудник,
	|	ОшибкиЗаполнения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОшибкиЗаполнения.Позиция КАК Позиция
	|ИЗ
	|	РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.Позиция В(&Позиции)";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[0].Выбрать();
	ТекущиеОшибки = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ТекущиеОшибки.Вставить(Выборка.ОбъектПубликации, Истина);
	КонецЦикла;
	
	ТекущиеОшибкиСотрудники = РезультатЗапроса[1].Выгрузить();
	ТекущиеОшибкиСотрудники.Индексы.Добавить("Позиция");
	Отбор = Новый Структура("Позиция");
	
	РезультатыПроверки = РезультатыПроверкиПозицийШтатногоРасписания(Позиции);
	Для каждого Позиция Из Позиции Цикл
		
		НетОшибки = Истина;
		
		РезультатПроверки = РезультатыПроверки[Позиция];
		Если РезультатПроверки <> Неопределено Тогда
			НетОшибки = Ложь;
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = Позиция;
			НоваяСтрока.РезультатПроверки = РезультатПроверки;
		ИначеЕсли ТекущиеОшибки[Позиция] <> Неопределено Тогда
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОбъектПубликации = Позиция;
		КонецЕсли;
		
		Если НетОшибки Тогда
			Отбор.Позиция = Позиция;
			НайденныеСтроки = ТекущиеОшибкиСотрудники.НайтиСтроки(Отбор);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(СтрокаТЗ.ФизическоеЛицо) Тогда
					РезультатПроверки = НовыйРезультатПроверки();
					РезультатПроверки.БлокирующаяОшибка = Истина;
					РезультатПроверки.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
					РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибкиФизическоеЛицо();
					НоваяСтрока = ТаблицаРезультатов.Добавить();
					НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
					НоваяСтрока.РезультатПроверки = РезультатПроверки;
				Иначе
					НоваяСтрока = ТаблицаРезультатов.Добавить();
					НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатов;

КонецФункции

Функция РезультатыПроверкиФизическихЛиц(ФизическиеЛица)

	РезультатыПроверки = Новый Соответствие;
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат РезультатыПроверки;
	КонецЕсли;
	
	ПроверяемыеДанные = "Пол,Фамилия,ТелефонРабочийПредставление";
	УстановитьПривилегированныйРежим(Истина);
	ДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, ФизическиеЛица, ПроверяемыеДанные);
	КонтактнаяИнформация = КонтактнаяИнформацияФизическихЛиц(ФизическиеЛица);
	Фотографии = КабинетСотрудникаВнутренний.ФотографииФизическихЛиц(ФизическиеЛица);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПроверятьФотографии = ЗначениеЗаполнено(Фотографии);
	
	Для каждого СтрокаТЗ Из ДанныеФизическихЛиц Цикл
		
		ЕстьОшибки = Ложь;
		РезультатПроверки = НовыйРезультатПроверки();
		
		// проверка блокирующих ошибок
		ОписаниеОшибки = "";
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Пол) Тогда
			ОписаниеОшибки = НСтр("ru = 'Не указан пол'");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Фамилия) Тогда
			Описание = НСтр("ru = 'Не указана фамилия'");
			ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), Описание, СтрШаблон("%1%2%3", ОписаниеОшибки, Символы.ПС, Описание));
		КонецЕсли;
		
		ТелефонМобильный = КонтактнаяИнформация.МобильныеТелефоны[СтрокаТЗ.ФизическоеЛицо];
		АдресПочты = КонтактнаяИнформация.АдресаПочты[СтрокаТЗ.ФизическоеЛицо];
		Если Не ЗначениеЗаполнено(ТелефонМобильный) И Не ЗначениеЗаполнено(АдресПочты) Тогда
			Описание = НСтр("ru = 'Необходимо указать мобильный телефон или адрес электронной почты'");
			ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), Описание, СтрШаблон("%1%2%3", ОписаниеОшибки, Символы.ПС, Описание));
		Иначе
			Если ЗначениеЗаполнено(ТелефонМобильный) И МобильныйТелефонУказанСОшибкой(ТелефонМобильный) Тогда
				Описание = НСтр("ru = 'Мобильный телефон указан некорректно'");
				ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), Описание, СтрШаблон("%1%2%3", ОписаниеОшибки, Символы.ПС, Описание));
			КонецЕсли;
			Если ЗначениеЗаполнено(АдресПочты) И АдресЭлектроннойПочтыУказанСОшибкой(АдресПочты) Тогда
				Описание = НСтр("ru = 'Адрес электронной почты указан некорректно'");
				ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), Описание, СтрШаблон("%1%2%3", ОписаниеОшибки, Символы.ПС, Описание));
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			РезультатПроверки.БлокирующаяОшибка = Истина;
			РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибки;
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		// проверка не блокирующих ошибок
		ОписаниеОшибки = "";
		Если ЗначениеЗаполнено(СтрокаТЗ.ТелефонРабочийПредставление) И СтрДлина(СтрокаТЗ.ТелефонРабочийПредставление) > 40 Тогда
			ОписаниеОшибки = НСтр("ru = 'Рабочий телефон указан некорректно'");
		КонецЕсли;
		
		Если ПроверятьФотографии Тогда
			ХранилищеВложения = Фотографии[СтрокаТЗ.ФизическоеЛицо];
			Если ЗначениеЗаполнено(ХранилищеВложения) Тогда
				Фотография = ХранилищеВложения.Получить();
				Если ТипЗнч(Фотография) = Тип("ДвоичныеДанные") Тогда
					Если Не РазмерФайлаСоответсвуетТребованиям(Фотография) Тогда
						Описание = НСтр("ru = 'Размер фотографии превышает 5Мб'");
						ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), Описание, СтрШаблон("%1%2%3", ОписаниеОшибки, Символы.ПС, Описание));
					КонецЕсли;
					Если РасширениеФотографии(Фотография) = Неопределено Тогда
						Описание = НСтр("ru = 'Неизвестный формат картинки фотографии'");
						ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), Описание, СтрШаблон("%1%2%3", ОписаниеОшибки, Символы.ПС, Описание));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			РезультатПроверки.ОписаниеОшибки = ОписаниеОшибки;
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			РезультатыПроверки.Вставить(СтрокаТЗ.ФизическоеЛицо, РезультатПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроверки;

КонецФункции

Функция РезультатыПроверкиПозицийШтатногоРасписания(Позиции)

	РезультатыПроверки = Новый Соответствие;
	Если Позиции.Количество() = 0 Тогда
		Возврат РезультатыПроверки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДанных = КабинетСотрудникаВнутренний.ДанныеШтатногоРасписания(Позиции);
	УстановитьПривилегированныйРежим(Ложь);
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.МестоВСтруктуреПредприятия) Тогда
			РезультатПроверки = НовыйРезультатПроверки();
			РезультатПроверки.БлокирующаяОшибка = Истина;
			РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибкиМестоВСтруктуреПредприятия();
			РезультатыПроверки.Вставить(СтрокаТЗ.ПозицияШтатногоРасписания, РезультатПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатыПроверки;

КонецФункции

Процедура ЗарегистрироватьПозицииСОшибкамиЗаполнения(Позиции) Экспорт
	
	Если Позиции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК Позиция
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОбъектыСОшибками
	|		ПО ШтатноеРасписание.Ссылка = ОбъектыСОшибками.ОбъектПубликации
	|			И (ОбъектыСОшибками.БлокирующаяОшибка)
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)
	|	И ОбъектыСОшибками.БлокирующаяОшибка ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыПроверки = НоваяТаблицаРезультатыПроверкиЗаполенения();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РезультатПроверки = НовыйРезультатПроверки();
		РезультатПроверки.БлокирующаяОшибка = Истина;
		РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибкиМестоВСтруктуреПредприятия();
		НоваяСтрока = РезультатыПроверки.Добавить();
		НоваяСтрока.ОбъектПубликации = Выборка.Позиция;
		НоваяСтрока.РезультатПроверки = РезультатПроверки;
	КонецЦикла;
	
	// Сохранение результатов проверки.
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатыПроверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		Блокировка.Заблокировать();
		
		ЗаписатьРезультатыПроверкиОбъектов(РезультатыПроверки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьСотрудниковПозииСОшибкамиЗаполнения(СотрудникиПозиции) Экспорт

	Если СотрудникиПозиции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиПозиции", СотрудникиПозиции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиПозиции.Сотрудник КАК Сотрудник,
	|	СотрудникиПозиции.Позиция КАК Позиция
	|ПОМЕСТИТЬ ВТСотрудникиПозиции
	|ИЗ
	|	&СотрудникиПозиции КАК СотрудникиПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиПозиции.Сотрудник КАК Сотрудник,
	|	СотрудникиПозиции.Позиция КАК Позиция,
	|	ОбъектыСОшибками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОбъектыСОшибками.Позиция КАК ПозицияОшибки,
	|	НЕ ОбъектыСОшибками.БлокирующаяОшибка ЕСТЬ NULL КАК ОшибкаЗарегистрирована
	|ИЗ
	|	ВТСотрудникиПозиции КАК СотрудникиПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОбъектыСОшибками
	|		ПО СотрудникиПозиции.Сотрудник = ОбъектыСОшибками.ОбъектПубликации";
	ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
	
	РезультатыПроверки = НоваяТаблицаРезультатыПроверкиЗаполенения();
	Для каждого СтрокаТЗ Из ТаблицаОшибок Цикл
		Если СтрокаТЗ.ОшибкаЗарегистрирована И СтрокаТЗ.Позиция = СтрокаТЗ.ПозицияОшибки Тогда
			Продолжить;
		Иначе
			РезультатПроверки = НовыйРезультатПроверки();
			РезультатПроверки.БлокирующаяОшибка = Истина;
			РезультатПроверки.Позиция 			= СтрокаТЗ.Позиция;
			РезультатПроверки.ФизическоеЛицо 	= СтрокаТЗ.ФизическоеЛицо;
			Если ЗначениеЗаполнено(СтрокаТЗ.ФизическоеЛицо) Тогда
				ОписаниеОшибки = СтрШаблон("%1%2%3", ОписаниеОшибкиФизическоеЛицо(), Символы.ПС, ОписаниеОшибкиПозиция());
			Иначе
				ОписаниеОшибки = ОписаниеОшибкиПозиция();
			КонецЕсли;
			РезультатПроверки.ОписаниеБлокирующейОшибки = ОписаниеОшибки;
			НоваяСтрока = РезультатыПроверки.Добавить();
			НоваяСтрока.ОбъектПубликации = СтрокаТЗ.Сотрудник;
			НоваяСтрока.РезультатПроверки = РезультатПроверки;
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатыПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сохранение результатов проверки.
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатыПроверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		Блокировка.Заблокировать();
		
		ЗаписатьРезультатыПроверкиОбъектов(РезультатыПроверки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьРезультатыПроверкиОбъектов(РезультатыПроверки) Экспорт

	Для каждого СтрокаТЗ Из РезультатыПроверки Цикл
		ОбъектПубликации = СтрокаТЗ.ОбъектПубликации;
		РезультатПроверки = СтрокаТЗ.РезультатПроверки;
		МенеджерЗаписи = РегистрыСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьМенеджерЗаписи();
		Если Не ЗначениеЗаполнено(РезультатПроверки) Тогда
			МенеджерЗаписи.ОбъектПубликации = ОбъектПубликации;
			МенеджерЗаписи.Удалить();
		Иначе
			МенеджерЗаписи.ОбъектПубликации 			= ОбъектПубликации;
			МенеджерЗаписи.БлокирующаяОшибка 			= РезультатПроверки.БлокирующаяОшибка;
			МенеджерЗаписи.Позиция 						= РезультатПроверки.Позиция;
			МенеджерЗаписи.ФизическоеЛицо 				= РезультатПроверки.ФизическоеЛицо;
			МенеджерЗаписи.ОписаниеБлокирующейОшибки 	= РезультатПроверки.ОписаниеБлокирующейОшибки;
			МенеджерЗаписи.ОписаниеОшибки 				= РезультатПроверки.ОписаниеОшибки;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция НоваяТаблицаРезультатыПроверкиЗаполенения()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ОбъектПубликации");
	Таблица.Колонки.Добавить("РезультатПроверки");
	
	Возврат Таблица;

КонецФункции

Функция НовыйРезультатПроверки()

	РезультатПроверки = Новый Структура("
	|БлокирующаяОшибка,
	|Позиция,
	|ФизическоеЛицо,
	|ОписаниеБлокирующейОшибки,
	|ОписаниеОшибки");
	
	РезультатПроверки.БлокирующаяОшибка = Ложь;
	
	Возврат РезультатПроверки;

КонецФункции

Функция ОписаниеОшибкиФизическоеЛицо()

	Возврат НСтр("ru = 'Есть ошибки заполнения физического лица'");

КонецФункции

Функция ОписаниеОшибкиПозиция()

	Возврат НСтр("ru = 'Есть ошибки заполнения позиции штатного расписания'");

КонецФункции

Функция ОписаниеОшибкиМестоВСтруктуреПредприятия()

	Возврат НСтр("ru = 'Не указано место в структуре предприятия'");

КонецФункции

#КонецОбласти

#Область ОбслуживаниеОбменаССервисом

// Процедура регламентного задания ОбменССервисомКабинетСотрудника
//
Процедура ОбменССервисомКабинетСотрудника() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника);
	Если ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияПубликации()) Тогда
		Возврат;
	КонецЕсли;
	
	Если СервисЗаблокирован() Тогда
		// Сервис заблокирован.
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не Настройки.ВыполнятьРегламентноеЗадание Тогда
		// Реализации паузы первого запуска регламентного задания.
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.ВключитьВыполнениеРегламентногоЗадания();
		Возврат;
	КонецЕсли;
	
	БылиОшибки = КабинетСотрудникаМенеджерОбмена.РезультатВыполненияОбмена(Ложь);
	
	Если БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Обмен данными с сервисом 1С:Кабинет сотрудника завершен с ошибками.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбменССервисомФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки", Ложь);
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал обмен.
	УстановитьПривилегированныйРежим(Истина);
	
	Результат.БылиОшибки = КабинетСотрудникаМенеджерОбмена.РезультатВыполненияОбмена(Параметры.ПодготовитьДанныеДляТехПоддержки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОбновлениеПубликацииФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки,ДатаНачала,ДатаОкончания", Ложь);
	Результат.ДатаНачала = ТекущаяДатаСеанса();
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал публикацию.
	УстановитьПривилегированныйРежим(Истина);
	
	БылиОшибки = КабинетСотрудникаМенеджерОбмена.РезультатОбновленияПубликацииОбъектов(Параметры.ПодготовитьДанныеДляТехПоддержки, Истина);
	
	Результат.БылиОшибки = БылиОшибки;
	Результат.ДатаОкончания = ТекущаяДатаСеанса();
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция КлючФоновогоЗаданияПубликации() Экспорт

	Возврат "ПубликацияВСервисе";

КонецФункции

Функция ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗадания)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ",      КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Возврат (АктивныеФоновыеЗадания.Количество() > 0);
	
КонецФункции

#КонецОбласти

#Область ПубликацияРасчетныхЛистков

// Публикация расчетных листков из формы публикации.
Процедура ОпубликоватьРасчетныеЛистыВФоне(Параметры, АдресХранилища) Экспорт
	
	// Параметры ПодготовитьДанныеДляТехПоддержки, ДатаНачала, ДатаОкончания
	// используются для получения списка событий журнала регистрации при подготовке
	// данных для техподдержки.
	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки,ДатаНачала,ДатаОкончания,НеОбработаны,КоличествоВыгружено", Ложь);
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	Результат.ДатаНачала = ТекущаяДатаСеанса();
	
	ФизическиеЛицаОрганизации = Новый Соответствие;
	ФизическиеЛицаОрганизации.Вставить(Параметры.Организация, Параметры.СписокФизическихЛиц);
	
	ДанныеДляПубликации = Новый Соответствие;
	ДанныеДляПубликации.Вставить(Параметры.МесяцРасчетныхЛистов, ФизическиеЛицаОрганизации);
	
	ПараметрыПубликации = КабинетСотрудникаМенеджерОбмена.ПараметрыПубликацииРасчетныхЛистов();
	ПараметрыПубликации.ВестиПротокол 								= Параметры.ПодготовитьДанныеДляТехПоддержки;
	ПараметрыПубликации.ПовторнаяПубликация 						= Параметры.ПовторнаяПубликация;
	ПараметрыПубликации.ПерваяПоловинаМесяца 						= Параметры.ПерваяПоловинаМесяца;
	ПараметрыПубликации.ВариантОтчета 								= Параметры.ВариантОтчета;
	ПараметрыПубликации.ФормироватьРасчетныеЛистыОтдельнымЗапросом 	= Параметры.ФормироватьРасчетныеЛистыОтдельнымЗапросом;
	
	УстановитьПривилегированныйРежим(Истина);
	Ответ = КабинетСотрудникаМенеджерОбмена.РезультатПубликацииРасчетныхЛистков(ДанныеДляПубликации, ПараметрыПубликации);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.ДатаОкончания = ТекущаяДатаСеанса();
	Результат.БылиОшибки = Ответ.БылиОшибки;
	Результат.НеОбработаны = Ответ.НеОбработаны;
	Результат.КоличествоВыгружено = Ответ.КоличествоВыгружено;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Публикация расчетных листков из формы интеграции с сервисом.
Процедура ОпубликоватьРасчетныеЛистыЗаМесяцВФоне(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("БылиОшибки", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО ФизическиеЛица.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
			
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(ПараметрыПроцедуры.Месяц);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(ПараметрыПроцедуры.Месяц);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Организация КАК Организация
	|ИЗ
	|	ВТСотрудникиОрганизации КАК Сотрудники
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо";
	РезультатЗапроса = Запрос.Выполнить();
	
	ФизическиеЛицаОрганизации = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Организация = Выборка.Организация;
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ФизическиеЛицаОрганизации.Вставить(Организация, СписокФизическихЛиц);
		
	КонецЦикла;
	
	ДанныеДляПубликации = Новый Соответствие;
	ДанныеДляПубликации.Вставить(ПараметрыПроцедуры.Месяц, ФизическиеЛицаОрганизации);
	
	Ответ = КабинетСотрудникаМенеджерОбмена.РезультатПубликацииРасчетныхЛистков(
		ДанныеДляПубликации, КабинетСотрудникаМенеджерОбмена.ПараметрыПубликацииРасчетныхЛистовПоУмолчанию());
	Результат.БылиОшибки = Ответ.БылиОшибки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Публикация расчетных листков после подключения к сервису.
Процедура ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков)

	Если ПериодыРасчетныхЛистков.Количество() = 0 Тогда
		Возврат
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиКПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|				И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|		ПО ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКПубликации") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляПубликации = Новый Соответствие;
	Для каждого МесяцПубликации Из ПериодыРасчетныхЛистков Цикл
		ФизическиеЛицаОрганизации = ФизическиеЛицаОрганизаций(МесяцПубликации, Запрос.МенеджерВременныхТаблиц);
		ДанныеДляПубликации.Вставить(НачалоМесяца(МесяцПубликации), ФизическиеЛицаОрганизации);
	КонецЦикла;
	
	КабинетСотрудникаМенеджерОбмена.РезультатПубликацииРасчетныхЛистков(
		ДанныеДляПубликации, КабинетСотрудникаМенеджерОбмена.ПараметрыПубликацииРасчетныхЛистовПоУмолчанию());

КонецПроцедуры

Функция ФизическиеЛицаОрганизаций(Месяц, МенеджерВременныхТаблиц)
	
	ФизическиеЛицаПоОрганизациям = Новый Соответствие;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(Месяц);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(Месяц);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Организация КАК Организация,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиКПубликации КАК ПубликуемыеСотрудники
	|		ПО СотрудникиОрганизации.ФизическоеЛицо = ПубликуемыеСотрудники.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО СотрудникиОрганизации.Организация = ПубликуемыеОбъекты.ОбъектПубликации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() > 0 Тогда
			ФизическиеЛицаПоОрганизациям.Вставить(Выборка.Организация, СписокФизическихЛиц);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	Запрос.Выполнить();
	
	Возврат ФизическиеЛицаПоОрганизациям;
	
КонецФункции

#КонецОбласти

#Область ПроверкаСостоянияСервиса

// Процедура регламентного задания ПроверкаСостоянияСервисаКабинетСотрудника
Процедура ПроверкаСостоянияСервиса() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	
	ИСДоступна = КабинетСотрудникаМенеджерОбмена.ЗапросСостояниеДоступностиИнформационнойСистемы();
	Если ИСДоступна = Неопределено Тогда
		// Не удалось получить информацию о состоянии ИС.
		Возврат;
	КонецЕсли;
	
	СервисЗаблокирован = Не ИСДоступна;
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьСостояниеБлокировкиСервиса(СервисЗаблокирован);

КонецПроцедуры

Функция СервисЗаблокирован() Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Возврат Настройки.СервисЗаблокирован;

КонецФункции

#КонецОбласти

#Область РаботаСЛокальнымСервисом

Процедура ПодключениеКСервисуЛокальноФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СсылкаДляАдминистратора,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ВерсияПриложения = "";
	ИдентификаторПриложения = "";
	ВерсияФормата = "";
	ВерсияAPI = "";
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.АдресПриложения 		= Параметры.АдресПриложения;
	Настройки.ТребуетсяОбновитьНастройкиФункциональности 	= Истина;
	НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьКлючиПриложенияВБезопасномХранилище(Параметры.ИдентификаторКлиента, Параметры.СекретКлиента);
	УстановитьПривилегированныйРежим(Ложь);
	
	ШаблонСообщения = НСтр("ru='Подключение недоступно. Указаны неверные настройки подключения или недоступно приложение по адресу ""%1"". Обратитесь к вашему администратору.'");
	ТекстСообщенияОбОшибке = СтрШаблон(ШаблонСообщения, Параметры.АдресПриложения);
	
	// Проверка правильности ввода данных настройки сервиса.
	Ответ = КабинетСотрудникаМенеджерОбмена.ПроверкаАвторизации();
	Если Не Ответ.ТокенПолучен Тогда
		Результат.СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Отказ = Истина
	КонецЕсли;
	
	// Версия и идентификатор приложения.
	Если Не Отказ Тогда
		
		Ответ = КабинетСотрудникаМенеджерОбмена.ИнформацияЛокальногоПриложения();
		Если Ответ = Неопределено Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		Иначе
			ВерсияПриложения = Ответ.ВерсияПриложения;
			ИдентификаторПриложения = Ответ.ИдентификаторПриложения;
			Если Не ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
				СообщениеОбОшибке = НСтр("ru='Подключение недоступно. Приложение еще не зарегистрировано, обратитесь к вашему администратору.'");
				Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Версии формата и API.
	Если Не Отказ Тогда
		Ответ = КабинетСотрудникаМенеджерОбмена.ВерсииФорматаЛокальногоПриложения();
		Если Ответ.Использовать = Истина Тогда
			ВерсияФормата 	= Ответ.ВерсииФормата.ВерсияФормата;
			ВерсияAPI 		= Ответ.ВерсииФормата.ВерсияAPI;
		КонецЕсли;
	КонецЕсли;
	
	// Установка адреса приложения.
	Если Не Отказ Тогда
		
		Если Не КабинетСотрудникаМенеджерОбмена.УстановитьАдресЛокальногоПриложения(Параметры.АдресПриложения) Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Публикация ответственного.
	Если Не Отказ Тогда
		БылиОшибки = ЗарегистрироватьОпубликоватьОтветственного(Параметры.Ответственный);
		Если БылиОшибки Тогда
			Результат.СообщениеОбОшибке = НСтр("ru='Не удалось опубликовать ответственное лицо.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Установка администратора.
	Если Не Отказ Тогда
		
		Ответ = КабинетСотрудникаМенеджерОбмена.УстановитьАдминистратораЛокальногоПриложения(Параметры.ОписаниеАдминистратора);
		Если Ответ.БылиОшибки Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		Иначе
			Результат.СсылкаДляАдминистратора = Ответ.СсылкаДляАдминистратора;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Ключи");
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Токен");
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Настройки.ИдентификаторПриложения 	= ИдентификаторПриложения;
		Настройки.Идентификатор 			= "local";
		Настройки.Ответственный 			= Параметры.Ответственный;
		Если ЗначениеЗаполнено(ВерсияФормата) И ЗначениеЗаполнено(ВерсияAPI) Тогда
			Настройки.ВерсияФормата = ВерсияФормата;
			Настройки.ВерсияAPI 	= ВерсияAPI;
		Иначе
			Настройки.ВерсияПриложения = ВерсияПриложения;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
		НаборЗаписей.Записать();
		
		КабинетСотрудникаМенеджерОбмена.ОбновитьНастройкиФункциональностиСервиса();
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ОбновлениеОтветственногоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("НовыйОтветственный,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ТекстСообщенияОбОшибке = НСтр("ru='Не удалось изменить ответственное лицо.'");
	СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
	
	БылиОшибки = ЗарегистрироватьОпубликоватьОтветственного(Параметры.Ответственный);
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Ответ = КабинетСотрудникаМенеджерОбмена.УстановитьАдминистратораЛокальногоПриложения(Параметры.ОписаниеАдминистратора);
		Если Ответ.БылиОшибки Тогда
			Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Иначе
			Результат.НовыйОтветственный = Параметры.Ответственный;
			Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
			Настройки.Ответственный = Параметры.Ответственный;
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеПодключенияОтключенияСервиса

Процедура ВыполнитьПубликациюПослеПодключенияКСервисуВФоне(ПериодыРасчетныхЛистков) Экспорт
	
	Попытка
		КабинетСотрудникаМенеджерОбмена.РезультатОбновленияПубликацииОбъектов(Ложь, Ложь);
		Если ПериодыРасчетныхЛистков.Количество() > 0 Тогда
			ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры

Процедура ВключитьНастройкиПрограммыПослеПодключенияСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	КонецЕсли;
	Попытка
		БизнесПроцессыЗаявокСотрудников.ИнициализироватьРолиИсполнителей();
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось инициализировать роли исполнителей задач'");
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = НСтр(
		"ru = '%1
		|
		|%2'");
		Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	КонецПопытки;
	
	Если Не ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Попытка
			КабинетСотрудникаВнутренний.ОбновитьСтруктуруПредприятия();
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось обновить структуру предприятия'");
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = НСтр(
			"ru = '%1
			|
			|%2'");
			Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецПопытки;
	КонецЕсли;
		
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Попытка
		БизнесПроцессыЗаявокСотрудников.НачальноеЗаполнениеИсполнителейЗадач(ТекущийПользователь);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить начальное заполнение исполнителей задач'");
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = НСтр(
		"ru = '%1
		|
		|%2'");
		Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	КонецПопытки;
	
	Если ИспользоватьФормат303() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если КабинетСотрудникаВнутренний.ИспользоватьПубликациюВидовСправок() И ИспользоватьФормат50375() Тогда
		ЗарегистрироватьПубликациюВидовСправок();
	КонецЕсли;
	
	Если ИспользуетсяВерсияФормата("1.0") Тогда
		БизнесПроцессыЗаявокСотрудников.ОбработатьПереходНаВерсиюФормата_1_0();
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ВключитьСборГрафиковОтпусков();
	
КонецПроцедуры

Процедура ОчиститьДанныеПриОтключенииСервиса() Экспорт
	
	Константы.ВерсияИзмененийКабинетСотрудника.Установить(0);
	Константы.ИспользуютсяОбсужденияКабинетСотрудника.Установить(Ложь);
	Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Ложь);
	Константы.РегистрироватьВЖурналеСобытийЗапросы.Установить(Ложь);
	Константы.СервисКабинетСотрудникаВЛокальнойСети.Установить(Ложь);
	
	РегистрыСведений.ДокументыКУдалениюКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИдентификаторыНезагруженныхОбъектовКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДокументовДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.НеобработанныеРезультатыСогласованияКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.РезультатОбменаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	
	Справочники.ПравилаСогласованияЗаявокКабинетСотрудника.УдалитьВсеПравила();
	
	КабинетСотрудникаВнутренний.ОчиститьДанныеПриОтключенииСервиса();
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеФункциональностиПоВерсииСервиса

// Сравнивает текущую версию сервиса с переданным значением.
//
// Параметры:
// 	ПроверяемаяВерсия - Строка - сравниваемая версия.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ВерсияПриложенияМеньшеВерсии(ПроверяемаяВерсия)

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияПриложения) Тогда
		Возврат Истина;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Настройки.ВерсияПриложения, ПроверяемаяВерсия) < 0;
	КонецЕсли;

КонецФункции

Функция ИспользоватьФормат202() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("2.0.2.1");

КонецФункции

Функция ИспользоватьФормат301() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.1.1");

КонецФункции

Функция ИспользоватьФормат302() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.2.19");

КонецФункции

Функция ИспользоватьФормат303() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.3.1");

КонецФункции

Функция ИспользоватьФормат30396() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.3.96");

КонецФункции

Функция ИспользоватьФормат401() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("4.0.1.31");

КонецФункции

Функция ИспользоватьФормат503() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.3.1");

КонецФункции

Функция ИспользоватьФормат50366() Экспорт
	
	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.3.66");
	
КонецФункции

Функция ИспользоватьРасширениеФайлаВЗаголовке() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.2.1");

КонецФункции

Функция ПовторнаяЗагрузкаОбъектовДоступна() Экспорт
	
	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.2.72");

КонецФункции

Функция ИспользоватьФормат502() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.2.1");

КонецФункции

Функция ИспользоватьФормат50375() Экспорт
	
	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.3.75");
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЖурналаРегистрации

Функция ВыгрузкаЖурналаРегистрацииФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ВыгрузитьЖурналРегистрации(ИмяВременногоФайла, Параметры.ОтборЖурналаРегистрации);
	
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	Архив = Новый ЗаписьZipФайла(ИмяФайлаАрхива,,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	Архив.Добавить(ИмяВременногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
	Архив.Записать();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаАрхива);
	
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ИмяФайлаАрхива);
	
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища)
	

КонецФункции

Функция ОтборЖурналаРегистрацииДляВыгрузки(ИменаСобытий, ОтборПоДатам = Неопределено) Экспорт
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Событие", ИменаСобытий);
	
	СмещениеВремениСервера = СмещениеВремениСервера();
	Если Не ЗначениеЗаполнено(ОтборПоДатам) Тогда
		РезультатОбмена = РегистрыСведений.РезультатОбменаКабинетСотрудника.РезультатОбмена();
		ОтборДатаНачала 	= РезультатОбмена.ДатаНачала + СмещениеВремениСервера;
		ОтборДатаОкончания 	= РезультатОбмена.ДатаОкончания + СмещениеВремениСервера;
	Иначе
		ОтборДатаНачала 	= ОтборПоДатам.ДатаНачала + СмещениеВремениСервера;
		ОтборДатаОкончания 	= ОтборПоДатам.ДатаОкончания + СмещениеВремениСервера;
	КонецЕсли;
	ОтборДатаОкончания = ОтборДатаОкончания + 1;
	
	Отбор.Вставить("ДатаНачала", ОтборДатаНачала);
	Отбор.Вставить("ДатаОкончания", ОтборДатаОкончания);
	
	Возврат Отбор;

КонецФункции

Функция СмещениеВремениСервера()
	
	СмещениеВремениСервера = ТекущаяДата() - ТекущаяДатаСеанса();
	Если СмещениеВремениСервера >= -1 И СмещениеВремениСервера <= 1 Тогда
		СмещениеВремениСервера = 0;
	КонецЕсли;
	Возврат СмещениеВремениСервера;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбменаКабинетСотрудника

Процедура ВыполнитьОбработчикиОбмена(ПараметрыОбмена) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработчикиОбменаКабинетСотрудника.Обработчик КАК Обработчик,
	|	ОбработчикиОбменаКабинетСотрудника.НомерИтерации КАК НомерИтерации,
	|	ОбработчикиОбменаКабинетСотрудника.ДатаРегистрации КАК ДатаРегистрации,
	|	ОбработчикиОбменаКабинетСотрудника.ДатаВыполнения КАК ДатаВыполнения
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбменаКабинетСотрудника
	|ГДЕ
	|	НЕ ОбработчикиОбменаКабинетСотрудника.Выполнено";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Обработчик = "РегистрацияВыполненныхНеопубликованныхЗаявок" Тогда
			ОтключитьОбработчикОбмена("РегистрацияВыполненныхНеопубликованныхЗаявок")
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний() Тогда
			Если КабинетСотрудникаВнутренний.ЗарегистрироватьИзмененияПлановыхУдержаний() Тогда
				ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний());
			КонецЕсли;
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновитьПубликациюПотерянныхОбъектов() Тогда
			Если ЗарегистрироватьПубликациюПотерянныхОбъектов() Тогда
				ОтключитьОбработчикОбмена(ИмяОбработчикаОбновитьПубликациюПотерянныхОбъектов());
			КонецЕсли;
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками() Тогда
			Если Выборка.НомерИтерации > 10 Тогда
				ОтключитьОбработчикОбмена(ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками());
			ИначеЕсли Выборка.ДатаВыполнения < НачалоДня(ТекущаяДатаСеанса()) Тогда
				ПроверкаОзнакомленияСРасчетнымиЛистками(Выборка.НомерИтерации, Выборка.ДатаРегистрации, ПараметрыОбмена);
			КонецЕсли;
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеУволенныхСотрудников() Тогда
			ЗарегистрироватьПубликациюУволенныхСотрудников();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаПроверкаПубликуемыхОбъектов() Тогда
			ВыполнитьОбработчикПроверкаПубликуемыхОбъектов();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок() Тогда
			ЗарегистрироватьПубликациюВидовСправок();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеФизическихЛиц() Тогда
			ЗарегистрироватьОбновлениеФизическихЛиц();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьИзмененияПлановыхУдержаний() Экспорт

	Возврат "ЗарегистрироватьИзмененияПлановыхУдержаний";

КонецФункции

Функция ИмяОбработчикаОбновитьПубликациюПотерянныхОбъектов()

	Возврат "ОбновитьПубликациюПотерянныхОбъектов";

КонецФункции

Функция ЗарегистрироватьПубликациюПотерянныхОбъектов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ОкончаниеПубликации = ДАТАВРЕМЯ(1, 1, 1)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ФизическиеЛица = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	ОбъектыКПубликации = ПотерянныеОбъектыСервиса(ФизическиеЛица);
	
	Если ОбъектыКПубликации.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("ЭтоСотрудник", Истина);
	ТаблицаСотрудников = ОбъектыКПубликации.Скопировать(Отбор);
	ТаблицаСотрудников.Колонки.ПубликуемыйОбъект.Имя = "Сотрудник";
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ОбъектыКПубликации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ПубликуемыйОбъект");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ОбъектыКПубликации;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПубликуемыйОбъект");
		
		КабинетСотрудникаВнутренний.ДобавитьЭлементБлокировкиСотрудникиДляОбновленияПубликацииПравНаОтпуск(Блокировка, ТаблицаСотрудников);
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ОбъектыКПубликации Цикл
			
			ЗаписьНабора = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаписьНабора.ОбъектПубликации = СтрокаТЗ.ПубликуемыйОбъект;
			ЗаписьНабора.Записать();
			
			ЗаписьНабора = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаписьНабора.ПредметПубликации = СтрокаТЗ.ПубликуемыйОбъект;
			ЗаписьНабора.Записать();
			
			Если ТипЗнч(СтрокаТЗ.ПубликуемыйОбъект) = Тип("СправочникСсылка.Сотрудники") Тогда
				КабинетСотрудникаВнутренний.ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(СтрокаТЗ.ПубликуемыйОбъект, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

Функция ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками()

	Возврат "ПроверкаОзнакомленияСРасчетнымиЛистками";

КонецФункции

Процедура ЗарегистрироватьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками()

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик 		= ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками(); 
	МенеджерЗаписи.Выполнено 		= Ложь;
	МенеджерЗаписи.НомерИтерации 	= 1;
	МенеджерЗаписи.ДатаРегистрации 	= ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ОбновитьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками(НомерИтерации)

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками();
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.НомерИтерации 	= НомерИтерации;
	МенеджерЗаписи.ДатаВыполнения 	= ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ИмяОбработчикаОбновлениеУволенныхСотрудников()

	Возврат "ОбновлениеУволенныхСотрудников";

КонецФункции

Процедура ЗарегистрироватьПубликациюУволенныхСотрудников()

	ОпубликованныеФизическиеЛица = ОпубликованныеФизическиеЛица();
	Если ОпубликованныеФизическиеЛица = Неопределено Тогда
		// не удалось получить данные
		Возврат;
	ИначеЕсли ОпубликованныеФизическиеЛица.Количество() = 0 Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеУволенныхСотрудников());
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ОпубликованныеФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО ФизическиеЛица.Ссылка = ПубликуемыеФизическиеЛица.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
	|	И ПубликуемыеФизическиеЛица.ОкончаниеПубликации ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО Сотрудники.Ссылка = ПубликуемыеОбъекты.ОбъектПубликации
	
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноПубликуется ЕСТЬ NULL
	|	И Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеУволенныхСотрудников());
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "Ссылка");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "Ссылка");
		
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = Выборка.Ссылка;
			Запись.УсловноПубликуется = Истина;
			Запись.Записать();
			
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = Выборка.Ссылка;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
				
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеУволенныхСотрудников());
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

#Область ОзнакомлениеСРасчетнымиЛистками

Процедура ПроверкаОзнакомленияСРасчетнымиЛистками(НомерИтерации, ДатаРегистрации, ПараметрыОбмена)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	Запрос.УстановитьПараметр("ДатаПубликации", ДатаРегистрации + 86400);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетныеЛистки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеЛистки.Месяц КАК Месяц
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛистки
	|ГДЕ
	|	РасчетныеЛистки.СостояниеПубликации = ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.Опубликован)
	|	И РасчетныеЛистки.ДатаПубликации < &ДатаПубликации
	|	И РасчетныеЛистки.НомерИтерации < &НомерИтерации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновитьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками(НомерИтерации+1);
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаРезультатов.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаРезультатов.Колонки.Добавить("Ознакомлен", Новый ОписаниеТипов("Булево"));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		
		ТаблицаРезультатов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Ознакомлен = КабинетСотрудникаМенеджерОбмена.РезультатОзнакомленияСРасчетнымЛистком(ПараметрыОбмена, Выборка.ФизическоеЛицо, Выборка.Месяц);
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Ознакомлен = Ознакомлен;
		КонецЦикла;
		
		ЗарегистрироватьОзнакомлениеСРасчетнымиЛистками(ТаблицаРезультатов, НомерИтерации);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗарегистрироватьОзнакомлениеСРасчетнымиЛистками(ТаблицаРезультатов, НомерИтерации)
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыОбработки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РезультатыОбработки.Месяц КАК Месяц,
	|	РезультатыОбработки.Ознакомлен КАК Ознакомлен
	|ПОМЕСТИТЬ ВТРезультатОбработки
	|ИЗ
	|	&ТаблицаРезультатов КАК РезультатыОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеЛистки.Организация КАК Организация,
	|	РасчетныеЛистки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеЛистки.Месяц КАК Месяц,
	|	РасчетныеЛистки.ПерваяПоловинаМесяца КАК ПерваяПоловинаМесяца,
	|	РасчетныеЛистки.ДатаПубликации КАК ДатаПубликации,
	|	РасчетныеЛистки.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА РезультатыОбработки.Ознакомлен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился)
	|		КОГДА ПубликуемыеФизическиеЛица.ОкончаниеПубликации ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.ОпубликованНеПроверятьОзнакомление)
	|		ИНАЧЕ РасчетныеЛистки.СостояниеПубликации
	|	КОНЕЦ КАК СостояниеПубликации,
	|	РасчетныеЛистки.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО,
	|	РезультатыОбработки.Ознакомлен КАК Ознакомлен
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛистки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРезультатОбработки КАК РезультатыОбработки
	|		ПО РасчетныеЛистки.ФизическоеЛицо = РезультатыОбработки.ФизическоеЛицо
	|			И РасчетныеЛистки.Месяц = РезультатыОбработки.Месяц
	|			И (НЕ РасчетныеЛистки.СостояниеПубликации В (ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился), ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.ОпубликованНеПроверятьОзнакомление)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО РасчетныеЛистки.ФизическоеЛицо = ПубликуемыеФизическиеЛица.ФизическоеЛицо";
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Месяц", "Месяц");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПерваяПоловинаМесяца", "ПерваяПоловинаМесяца");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "ДокументКадровогоЭДО");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.НомерИтерации = НомерИтерации;
			Запись.Записать();
			
			Если Выборка.Ознакомлен И ЗначениеЗаполнено(Выборка.ДокументКадровогоЭДО) Тогда
				Запись = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
				Запись.Объект 			= Выборка.ДокументКадровогоЭДО;
				Запись.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр(
		"ru = 'Проверка ознакомления с расчетными листками
		|Описание ошибки:
		|%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Функция ИмяОбработчикаПроверкаПубликуемыхОбъектов()

	Возврат "ПроверкаПубликуемыхОбъектов";

КонецФункции

Процедура ВыполнитьОбработчикПроверкаПубликуемыхОбъектов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	РезультатПроверки = РезультатПроверкиФизическихЛицИСотрудников(ФизическиеЛица);
		
	ОбработкаВыполнена = Истина;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		Блокировка.Заблокировать();
		
		ЗаписатьРезультатыПроверкиОбъектов(РезультатПроверки);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ОбработкаВыполнена = Ложь;
	КонецПопытки;
	
	Если Не ОбработкаВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.ШтатноеРасписание";
	Позиции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
	РезультатПроверки = РезультатПроверкиПозицийИСотрудников(Позиции);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		Блокировка.Заблокировать();
		
		ЗаписатьРезультатыПроверкиОбъектов(РезультатПроверки);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ОбработкаВыполнена = Ложь;
	КонецПопытки;
	
	Если ОбработкаВыполнена Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаПроверкаПубликуемыхОбъектов());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьОбработчикОбмена(ИмяОбработчика)

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик = ИмяОбработчика;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Выполнено = Истина;
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикОбмена(ИмяОбработчика)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаписьНабора.Обработчик = ИмяОбработчика; 
	ЗаписьНабора.Выполнено = Ложь;
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок() Экспорт

	Возврат "ЗарегистрироватьПубликациюВидовСправок";

КонецФункции

Процедура ЗарегистрироватьПубликациюВидовСправок() Экспорт

	ВидыСправок = КабинетСотрудникаВнутренний.ВидыПредоставляемыхСотрудникамСправок();
	
	Если Не ЗначениеЗаполнено(ВидыСправок) Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		Возврат;
	КонецЕсли;
	
	ТаблицаВидовСправок = Новый ТаблицаЗначений;
	ТаблицаВидовСправок.Колонки.Добавить("ВидСправки");
	Для каждого ВидСправки Из ВидыСправок Цикл
		НоваяСтрока = ТаблицаВидовСправок.Добавить();
		НоваяСтрока.ВидСправки = ВидСправки;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаВидовСправок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ВидСправки");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаВидовСправок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ВидСправки");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаВидовСправок Цикл
		
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.ВидСправки;
			Запись.Записать();
			
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = СтрокаТЗ.ВидСправки;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
				
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

Функция ИмяОбработчикаОбновлениеФизическихЛиц()

	Возврат "ЗарегистрироватьОбновлениеФизическихЛиц";

КонецФункции

Процедура ЗарегистрироватьОбновлениеФизическихЛиц()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ФизическиеЛица;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ФизическоеЛицо");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ФизическиеЛица Цикл
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = СтрокаТЗ.ФизическоеЛицо;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеФизическихЛиц());
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область РаботаСКабинетами

Процедура ОтключитьКабинетыНепубликуемыхСотрудниковФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СообщениеОбОшибке");
	
	Ответ = ОтключитьКабинетыНепубликуемыхСотрудников();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ОтключитьКабинетыНепубликуемыхСотрудников()

	// Привилегированный режим устанавливается для обработки всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал отключение кабинетов.
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("СообщениеОбОшибке");
	
	Идентификаторы = КабинетСотрудникаМенеджерОбмена.ИдентификаторыАктивныхФизическихЛиц();
	Если Идентификаторы = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Ошибка получения данных из сервиса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФизическихЛиц.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	Для каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаФизическихЛиц.Добавить();
		НоваяСтрока.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		НоваяСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ТаблицаФизическихЛиц КАК ФизическиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Идентификатор КАК Идентификатор
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО ФизическиеЛица.ФизическоеЛицо = ПубликуемыеФизическиеЛица.ФизическоеЛицо
	|ГДЕ
	|	ПубликуемыеФизическиеЛица.ОкончаниеПубликации ЕСТЬ NULL";
	НепубликуемыеФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	Если НепубликуемыеФизическиеЛица.Количество() > 0 Тогда
		Если Не КабинетСотрудникаМенеджерОбмена.ДеактивироватьФизическихЛиц(НепубликуемыеФизическиеЛица) Тогда
			СообщениеОбОшибке = НСтр("ru='Ошибка получения данных из сервиса.'");
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпубликованныеФизическиеЛица()

	Идентификаторы = КабинетСотрудникаМенеджерОбмена.ИдентификаторыОпубликованныхФизическихЛиц();
	Если Идентификаторы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокФизическихЛицПоИдентификаторам(Идентификаторы);

КонецФункции

Функция СписокФизическихЛицПоИдентификаторам(Идентификаторы)

	СписокФизическихЛиц = Новый Массив;
	Для каждого Идентификатор Из Идентификаторы Цикл
		СписокФизическихЛиц.Добавить(Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	КонецЦикла;
	
	Возврат СписокФизическихЛиц;

КонецФункции

#КонецОбласти

#Область ЖурналаРегистрации

#Область ИменаСобытийЖурналаРегистрации

Функция НазваниеГруппыСобытийЖР()
	
	Возврат НСтр("ru = '1С:Кабинет сотрудника'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияПротоколЗапрос() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Протокол запрос'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПротоколОтвет() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Протокол ответ'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияМенеджера() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Менеджер сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияОтключениеСервиса() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Отключение сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияЖРАутентификации() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияЖРНарушениеПравДоступа() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Нарушение прав доступа'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияОшибкаБлокировки() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Ошибка блокировки'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияОбсуждения() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Обсуждения'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияПрочиеСобытия() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Прочие события'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция СобытияЖРОбмен() Экспорт

	ИменаСобытий = Новый Массив;
	ИменаСобытий.Добавить(НазваниеГруппыСобытийЖР());
	ИменаСобытий.Добавить(ИмяСобытияПротоколЗапрос());
	ИменаСобытий.Добавить(ИмяСобытияПротоколОтвет());
	ИменаСобытий.Добавить(ИмяСобытияМенеджера());
	ИменаСобытий.Добавить(ИмяСобытияЖРАутентификации());
	ИменаСобытий.Добавить(ИмяСобытияПрочиеСобытия());
	ИменаСобытий.Добавить(ИмяСобытияОшибкаБлокировки());
	
	Возврат ИменаСобытий;
	
КонецФункции

Функция СобытияЖРПубликацияРЛ() Экспорт

	ИменаСобытий = Новый Массив;
	ИменаСобытий.Добавить(НазваниеГруппыСобытийЖР());
	ИменаСобытий.Добавить(ИмяСобытияПротоколЗапрос());
	ИменаСобытий.Добавить(ИмяСобытияПротоколОтвет());
	ИменаСобытий.Добавить(ИмяСобытияМенеджера());
	ИменаСобытий.Добавить(ИмяСобытияЖРАутентификации());
	ИменаСобытий.Добавить(ИмяСобытияПрочиеСобытия());
	ИменаСобытий.Добавить(ИмяСобытияОшибкаБлокировки());
	
	Возврат ИменаСобытий;
	
КонецФункции

Функция ВсеСобытияЖР() Экспорт

	ИменаСобытий = Новый Массив;
	ИменаСобытий.Добавить(НазваниеГруппыСобытийЖР());
	ИменаСобытий.Добавить(ИмяСобытияПротоколЗапрос());
	ИменаСобытий.Добавить(ИмяСобытияПротоколОтвет());
	ИменаСобытий.Добавить(ИмяСобытияМенеджера());
	ИменаСобытий.Добавить(ИмяСобытияОтключениеСервиса());
	ИменаСобытий.Добавить(ИмяСобытияЖРАутентификации());
	ИменаСобытий.Добавить(ИмяСобытияЖРНарушениеПравДоступа());
	ИменаСобытий.Добавить(ИмяСобытияОшибкаБлокировки());
	ИменаСобытий.Добавить(ИмяСобытияОбсуждения());
	ИменаСобытий.Добавить(ИмяСобытияПрочиеСобытия());
	
	// Устаревшие имена событий.
	ИменаСобытий.Добавить(ИмяСобытияЖРПолучениеИзменений());
	ИменаСобытий.Добавить(ИмяСобытияЖРПередачаИзменений());
	ИменаСобытий.Добавить(ИмяСобытияЖРУдалениеДанных());
	ИменаСобытий.Добавить(ИмяСобытияЖРРегистрацияИзменений());
	ИменаСобытий.Добавить(ИмяСобытияЖРПубликацияРасчетныхЛистов());
	ИменаСобытий.Добавить(ИмяСобытияЖРСостояниеСервиса());
	ИменаСобытий.Добавить(ИмяСобытияЖРПроверкаИспользуемойФункциональности());
	ИменаСобытий.Добавить(ИмяСобытияПодключениеСервиса());
	
	Возврат ИменаСобытий;

КонецФункции

#Область УстаревшиеИменаСобытий

Функция ИмяСобытияЖРПолучениеИзменений()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Получение изменений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРПередачаИзменений()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Публикация изменений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРУдалениеДанных()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Удаление данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРРегистрацияИзменений()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Регистрация изменений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРПубликацияРасчетныхЛистов()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Публикация расчетных листов'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРСостояниеСервиса()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Проверка состояния сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРПроверкаИспользуемойФункциональности()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Проверка используемой функциональности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияПодключениеСервиса()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Подключение сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

Процедура ЗаписатьОшибкуРегистрацииИзменений(ДанныеСсылка, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при регистрации изменений %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДанныеСсылка), ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,, ДанныеСсылка, ТекстОшибки);
	
КонецПроцедуры

Функция ПодробностиВЖурналеРегистрации() Экспорт

	Возврат НСтр("ru = 'Подробности см. в журнале регистрации.'");

КонецФункции

Процедура ЗаписатьОшибкуЧтенияJSON(ОтветСтрока, ОписаниеОшибки) Экспорт

	ШаблонОписания = НСтр(
	"ru = 'Ошибка чтения JSON:
	|Описание ошибки:
	|%1
	|Строка JSON:
	|%2'");
	
	ОтветСтрокаПустой = НСтр("ru = '<пустая строка>'");
	ОтветСтрока = ?(Не ЗначениеЗаполнено(ОтветСтрока), ОтветСтрокаПустой, ОтветСтрока);
	Комментарий = СтрШаблон(ШаблонОписания, ОписаниеОшибки, ОтветСтрока);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ИнициализироватьРолиИсполнителейЗадач(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьБизнесПроцессыИЗадачи.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	РолиИсполнителей = Новый Массив;
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РолиИсполнителей", РолиИсполнителей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиИсполнителей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Ссылка В(&РолиИсполнителей)
	|	И (НЕ РолиИсполнителей.ИспользуетсяСОбъектамиАдресации
	|			ИЛИ НЕ РолиИсполнителей.ИспользуетсяБезОбъектовАдресации
	|			ИЛИ РолиИсполнителей.ТипыОсновногоОбъектаАдресации <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации))";
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.РолиИсполнителей", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		РольИсполнителя = Выборка.Ссылка.ПолучитьОбъект();
		РольИсполнителя.ИспользуетсяСОбъектамиАдресации 	= Истина;
		РольИсполнителя.ИспользуетсяБезОбъектовАдресации 	= Истина;
		РольИсполнителя.ТипыОсновногоОбъектаАдресации 		= ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РольИсполнителя);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПубликациюПравНаВычеты(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновления
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновления.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛицаДляОбновления.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", "ПроверкаСостоянияСервисаКабинетСотрудника");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Не ЗначениеЗаполнено(Задания) Или Задания[0].Использование Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура УстановитьВерсияИзмененийКабинетСотрудника() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(УдалитьВерсииЗаявокКабинетСотрудника.ВерсияИзменений) КАК ВерсияИзменений
	|ИЗ
	|	РегистрСведений.УдалитьВерсииЗаявокКабинетСотрудника КАК УдалитьВерсииЗаявокКабинетСотрудника";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Константы.ВерсияИзмененийКабинетСотрудника.Получить() <> Выборка.ВерсияИзменений Тогда
			Константы.ВерсияИзмененийКабинетСотрудника.Установить(Выборка.ВерсияИзменений);
		КонецЕсли;
		РегистрыСведений.УдалитьВерсииЗаявокКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеНастроекСервиса(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат301() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеНастроекСервисаВерсии303(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат301() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Получить() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Константа.КонтролироватьОзнакомлениеСРасчетнымиЛистками", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			МенеджерКонстанты = Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.СоздатьМенеджерЗначения();
			МенеджерКонстанты.Значение = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ОбновитьПубликациюПотерянныхОбъектов(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат30396() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ОкончаниеПубликации = ДАТАВРЕМЯ(1, 1, 1)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ФизическиеЛица = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	ОбъектыКПубликации = ПотерянныеОбъектыСервиса(ФизическиеЛица);
	
	Если ОбъектыКПубликации.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Для каждого СтрокаТЗ Из ОбъектыКПубликации Цикл
		
		ВыполняетсяБлокировка = Ложь;
		
		НачатьТранзакцию();
		Попытка
			
			Если ПараметрыОбновления <> Неопределено Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("ОбъектПубликации", СтрокаТЗ.ПубликуемыйОбъект);
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
				ЭлементБлокировки.УстановитьЗначение("ПредметПубликации", СтрокаТЗ.ПубликуемыйОбъект);
				Если ТипЗнч(СтрокаТЗ.ПубликуемыйОбъект) = Тип("СправочникСсылка.Сотрудники") Тогда
					КабинетСотрудникаВнутренний.ДобавитьЭлементБлокировкиСотрудникиДляОбновленияПубликацииПравНаОтпуск(Блокировка, СтрокаТЗ.ПубликуемыйОбъект);
				КонецЕсли;
				
				ВыполняетсяБлокировка = Истина;
				Блокировка.Заблокировать();
				ВыполняетсяБлокировка = Ложь;
				
			КонецЕсли;
				
			НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектПубликации.Установить(СтрокаТЗ.ПубликуемыйОбъект);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ОбъектПубликации = СтрокаТЗ.ПубликуемыйОбъект;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПредметПубликации.Установить(СтрокаТЗ.ПубликуемыйОбъект);
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.ПредметПубликации = СтрокаТЗ.ПубликуемыйОбъект;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			Если ТипЗнч(СтрокаТЗ.ПубликуемыйОбъект) = Тип("СправочникСсылка.Сотрудники") Тогда
				КабинетСотрудникаВнутренний.ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(СтрокаТЗ.ПубликуемыйОбъект, Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Если ВыполняетсяБлокировка Тогда
				ОбработкаЗавершена = Ложь;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Предупреждение, , "РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника", "ОбъектПубликации");
			Иначе
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗаполнитьСобытиеСотрудникиДляОбновленияПубликуемыхОбъектов(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДляОбновления.Сотрудник КАК Сотрудник,
	|	СотрудникиДляОбновления.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА СотрудникиДляОбновления.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные)
	|		ИНАЧЕ СотрудникиДляОбновления.Событие
	|	КОНЕЦ КАК Событие
	|ИЗ
	|	РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СотрудникиДляОбновления.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления
	|		ГДЕ
	|			СотрудникиДляОбновления.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.ПустаяСсылка)) КАК Сотрудники
	|		ПО СотрудникиДляОбновления.Сотрудник = Сотрудники.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов", "Сотрудник", Выборка.Сотрудник) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		
		Пока Выборка.Следующий() Цикл
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Сотрудник 		= Выборка.Сотрудник;
			ЗаписьНабора.ДатаСобытия 	= Выборка.ДатаСобытия;
			ЗаписьНабора.Событие 		= Выборка.Событие;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ОбновитьФункциональностьСервисаПриИспользованииКЭДО(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Настройки.ТребуетсяОбновитьНастройкиФункциональности Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаЗавершена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаЗавершена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗаполнитьСодержимоеДокументаКЭДОРасчетныхЛистков(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.СодержимоеДокумента = ЗНАЧЕНИЕ(Перечисление.СодержимоеДокументов.ПустаяСсылка)
	|	И ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументКадровогоЭДО.Дата УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ДокументКадровогоЭДО", "Ссылка", Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СодержимоеДокумента = Перечисления.СодержимоеДокументов.СодержитЗарплату;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьПроверкуОзнакомленияСРасчетнымиЛистками(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат502() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
		
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		ЗаписьНабора.НомерИтерации = 1;
		ЗаписьНабора.ДатаРегистрации = ТекущаяДатаСеанса();
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура УстановитьТребуетсяОбновитьНастройкиФункциональности() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеУволенныхСотрудников(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не ИспользоватьФормат503() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;

	ИмяОбработчика = ИмяОбработчикаОбновлениеУволенныхСотрудников();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗаполнитьОбъектыСОшибкамиЗаполнения() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК ОбъектПубликации,
	|	ОшибкиЗаполнения.ОписаниеОшибки КАК ОписаниеОшибки
	|ИЗ
	|	РегистрСведений.УдалитьОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.ОбъектПубликации ССЫЛКА Справочник.ФизическиеЛица";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПубликации.Установить(Выборка.ОбъектПубликации);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектПубликации 	= Выборка.ОбъектПубликации;
		НоваяЗапись.БлокирующаяОшибка 	= Истина;
		НоваяЗапись.ОписаниеБлокирующейОшибки = Выборка.ОписаниеОшибки;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
	РегистрыСведений.УдалитьОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьНаборЗаписей().Записать();

КонецПроцедуры

Процедура ЗарегистрироватьПроверкуПубликуемыхОбъектов(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбработчикаПроверкаПубликуемыхОбъектов();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеФункциональностиСервиса(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не КабинетСотрудника.ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
		ОбработкаВыполнена = Ложь;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
		ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикОбновленияФизическихЛиц(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбработчикаОбновлениеФизическихЛиц();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеУровеньДоступаКИ(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ОбновитьУровеньДоступаКИ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
		ОбработкаВыполнена = Ложь;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
		ЗаписьНабора.ОбновитьУровеньДоступаКИ = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ПроверитьВерсиюФормата() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ВерсииФорматаОбмена = КабинетСотрудникаМенеджерОбмена.ВерсииФорматаОбмена();
	НоваяВерсия = КабинетСотрудникаМенеджерОбмена.ПодобратьВерсию(Настройки.ВерсияФормата, ВерсииФорматаОбмена);
	Если НоваяВерсия <> Настройки.ВерсияФормата Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюФормата(НоваяВерсия);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СохранениеНастроек

Процедура СохранитьНовыеВидыКонтактнойИнформацииФизическихЛиц(ВидКИМобильныйТелефон, ВидКИАдресЭлектроннойПочты, СообщениеОбОшибке) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица";
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиИнтеграцииКабинетСотрудника");
		Если ТаблицаДанных.Количество() > 0 Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = ТаблицаДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ФизическоеЛицо");
		КонецЕсли;
		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СохранитьНовыеВидыКонтактнойИнформации(ВидКИМобильныйТелефон, ВидКИАдресЭлектроннойПочты);
		
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = СтрокаТЗ.ФизическоеЛицо;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		Если ТаблицаДанных.Количество() > 0 Тогда
			РезультатПроверки = РезультатПроверкиФизическихЛицИСотрудников(ТаблицаДанных.ВыгрузитьКолонку("ФизическоеЛицо"));
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
			Блокировка.Заблокировать();
			ЗаписатьРезультатыПроверкиОбъектов(РезультатПроверки);
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось изменить виды контактной информации. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

Процедура СохранитьИзменениеПубликуемойСтруктурыКомпании(ПубликоватьСтруктуруЮридическихЛиц, СообщениеОбОшибке) Экспорт

	Если ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации,
	|	ТИПЗНАЧЕНИЯ(ПубликуемыеОбъекты.ОбъектПубликации) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты";
	ПубликуемыеОбъекты = Запрос.Выполнить().Выгрузить();
	
	ТипыДанных = КабинетСотрудникаМенеджерОбмена.ТипыПубликуемыхДанных();
	
	ПубликуемыеОбъекты.Индексы.Добавить("ТипДанных");
	Отбор = Новый Структура("ТипДанных");
	
	Отбор.ТипДанных = ТипыДанных["ШтатноеРасписание"];
	Позиции = ПубликуемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("ОбъектПубликации");
	
	Отбор.ТипДанных = ТипыДанных["Сотрудники"];
	Сотрудники = ПубликуемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("ОбъектПубликации");
	
	Отбор.ТипДанных = ТипыДанных["Организации"];
	Организации = ПубликуемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("ОбъектПубликации");
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		НовыеПодразделения = ПубликуемыеПодразделенияОрганизаций(Позиции);
		Отбор.ТипДанных = ТипыДанных["СтруктураПредприятия"];
	Иначе
		НовыеПодразделения = КабинетСотрудникаВнутренний.ПубликуемаяСтруктураПредприятия(Позиции);
		Отбор.ТипДанных = ТипыДанных["ПодразделенияОрганизаций"];
	КонецЕсли;
	СтарыеПодразделения = ПубликуемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("ОбъектПубликации");
	
	// Подготовка таблиц с данными для блокировки объектов перед записью.
	ПубликуемыеОбъектыБлокировка = Новый ТаблицаЗначений;
	ПубликуемыеОбъектыБлокировка.Колонки.Добавить("ОбъектПубликации");
	
	ИзмененияДляСервиса = Новый ТаблицаЗначений;
	ИзмененияДляСервиса.Колонки.Добавить("ПредметПубликации");
	
	Для каждого ЭлементКоллекции Из НовыеПодразделения Цикл
		НоваяСтрока = ПубликуемыеОбъектыБлокировка.Добавить();
		НоваяСтрока.ОбъектПубликации = ЭлементКоллекции;
		НоваяСтрока = ИзмененияДляСервиса.Добавить();
		НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СтарыеПодразделения Цикл
		НоваяСтрока = ПубликуемыеОбъектыБлокировка.Добавить();
		НоваяСтрока.ОбъектПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из Позиции Цикл
		НоваяСтрока = ИзмененияДляСервиса.Добавить();
		НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из Сотрудники Цикл
		НоваяСтрока = ИзмененияДляСервиса.Добавить();
		НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
	КонецЦикла;
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Для каждого ЭлементКоллекции Из Организации Цикл
			НоваяСтрока = ИзмененияДляСервиса.Добавить();
			НоваяСтрока.ПредметПубликации = ЭлементКоллекции;
		КонецЦикла;
	КонецЕсли;
	
	СервисПодключен = Константы.ИспользуетсяСервисКабинетСотрудника.Получить();
	
	Если СервисПодключен Тогда
		РолиИсполнителейЗадач = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗадач();
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РолиИсполнителейЗадач", РолиИсполнителейЗадач);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Ссылка В(&РолиИсполнителейЗадач)";
		РезультатЗапросаРоли = Запрос.Выполнить();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		Если СервисПодключен Тогда
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РолиИсполнителей");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапросаРоли;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		КонецЕсли;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиИнтеграцииКабинетСотрудника");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ПубликуемыеОбъектыБлокировка;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДляСервиса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		
		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.СохранитьЗначениеПубликоватьСтруктуруЮридическихЛиц(ПубликоватьСтруктуруЮридическихЛиц);
		
		Для каждого ЭлементКоллекции Из НовыеПодразделения Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ЭлементКоллекции;
			Запись.Записать();
		КонецЦикла;
		
		Для каждого ЭлементКоллекции Из СтарыеПодразделения Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ЭлементКоллекции;
			Запись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ИзмененияДляСервиса Цикл
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = СтрокаТЗ.ПредметПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		Если СервисПодключен Тогда
			Выборка = РезультатЗапросаРоли.Выбрать();
			Пока Выборка.Следующий() Цикл
				РольОбъект = Выборка.Ссылка.ПолучитьОбъект();
				РольОбъект.ИспользуетсяБезОбъектовАдресации = Ложь;
				РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
				Если ПубликоватьСтруктуруЮридическихЛиц Тогда
					РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ПодразделенияОрганизаций;
				Иначе
					РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.СтруктураПредприятия;
				КонецЕсли;
				РольОбъект.Записать();
			КонецЦикла;
		КонецЕсли;
		
		РезультатПроверки = РезультатПроверкиПозицийИСотрудников(Позиции);
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектПубликации", "ОбъектПубликации");
		Блокировка.Заблокировать();
		ЗаписатьРезультатыПроверкиОбъектов(РезультатПроверки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось изменить вид публикуемой структуры. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
		
КонецПроцедуры

Процедура СохранитьНастройкиИспользуемаяФункциональностьСервиса(НастройкиФункциональность, СообщениеОбОшибке = Неопределено) Экспорт

	ТекущиеНастройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	ОбновитьУровеньДоступаКИ = (ТекущиеНастройки.УровеньДоступаКИ <> НастройкиФункциональность.УровеньДоступаКИ);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиСервисаКабинетСотрудника");
		Блокировка.Заблокировать();
		
		РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.СохранитьНовыеНастройки(НастройкиФункциональность);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		Если ОбновитьУровеньДоступаКИ Тогда
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьОбновитьУровеньДоступаКИ(Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

Процедура СохранитьНастройкиЗаявокНаОтпуск(НастройкиЗаявокНаОтпуск, СообщениеОбОшибке = Неопределено) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиЗаявленийНаОтпускКабинетСотрудника.СохранитьНовыеНастройки(НастройкиЗаявокНаОтпуск);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.'");;
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСменыВерсий

Процедура ВыполнитьДействияПриПереходеНаВерсию(ПрежняяВерсия, НоваяВерсия) Экспорт

	Если ПрежняяВерсия = НоваяВерсия Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.1.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.1.1") < 0) Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеГрафиковРаботы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.3.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.3.1") < 0) Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Истина);
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеДанныхГрафиковРаботы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.3.96") >= 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.3.96") < 0) Тогда
		
		ИмяОбработчика = ИмяОбработчикаОбновитьПубликациюПотерянныхОбъектов();
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика; 
		ЗаписьНабора.Выполнено = Ложь;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.2.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.2.1") < 0) Тогда
		
		ИмяОбработчика = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками();
		МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Обработчик = ИмяОбработчика;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			ЗарегистрироватьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.3.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.3.1") < 0) Тогда
		
		ИмяОбработчика = ИмяОбработчикаОбновлениеУволенныхСотрудников();
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика; 
		ЗаписьНабора.Выполнено = Ложь;
		НаборЗаписей.Записать();
		
	КонецЕсли;

	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.3.66") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.3.66") < 0) Тогда
		КадровыйЭДО.УстановитьЗначениеВедетсяУчетСогласийНаПрисоединениеККЭДО(ИспользуетсяКадровыйЭДО());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.3.75") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.3.75") < 0)
		И КабинетСотрудникаВнутренний.ИспользоватьПубликациюВидовСправок() Тогда
		
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияПриПереходеНаВерсиюAPI(СтараяВерсия, НоваяВерсия) Экспорт

	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		ВыполнитьДействияПриПереходеНаВерсию(Настройки.ВерсияПриложения, "6.0.1.1");
		БизнесПроцессыЗаявокСотрудников.ОбработатьПереходНаВерсиюФормата_1_0();
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьДействияПриПереходеНаВерсиюФормата(СтараяВерсия, НоваяВерсия) Экспорт

	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаОбновлениеФизическихЛиц());
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьОбновитьУровеньДоступаКИ(Истина);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	КонецЕсли;
	
	Если НоваяВерсия = "1.1" Тогда
		КабинетСотрудникаВнутренний.ВключитьСборГрафиковОтпусков();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочие

Процедура ПроверкаДоступностиАдресаПоИмениФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	КабинетСотрудникаМенеджерОбмена.ПроверитьДоступностьАдресаПоИмени(Ложь);

КонецПроцедуры

Функция ЕстьАктивныеФоновыеЗаданияОбменПубликация() Экспорт
	
	Возврат ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияПубликации())
		Или ЕстьАктивныеФоновыеЗадания("ПубликацияДанныхВСервисе") ;
	
КонецФункции

Функция ФизическоеЛицоПубликуется(ФизическоеЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыСОшибкамиЗаполненияКабинетСотрудника КАК ОбъектыСОшибками
	|		ПО ФизическиеЛица.ФизическоеЛицо = ОбъектыСОшибками.ОбъектПубликации
	|			И (ОбъектыСОшибками.БлокирующаяОшибка)
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо = &ФизическоеЛицо
	|	И ОбъектыСОшибками.БлокирующаяОшибка ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция НастройкиПрограммы() Экспорт

	
	НастройкиПрограммы = Новый Структура("ИспользоватьДСВ");
	НастройкиПрограммы.ИспользоватьДСВ = Ложь;
	КабинетСотрудникаВнутренний.ЗаполнитьНастройкиПрограммы(НастройкиПрограммы);
	
	Возврат НастройкиПрограммы;
	
КонецФункции

Функция ПотерянныеОбъектыСервиса(ФизическиеЛица)

	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	
	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КабинетСотрудникаВнутренний.ТипШтатноеРасписание())));
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если ИспользоватьКадровыйУчет Тогда
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = "ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = "Подразделение,Должность";
		КонецЕсли;
		ПараметрыПолучения.СписокФизическихЛиц 	= ФизическиеЛица;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		
		КадровыеДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.СписокФизическихЛиц 	= ФизическиеЛица;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) Тогда
				Если СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				КонецЕсли;
			Иначе
				Если СтрокаТЗ.ДатаУвольнения = ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.ДатаУвольнения < ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				ИначеЕсли СтрокаТЗ.ДатаПриема <= ДатаАктуальности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМеста.Добавить(), СтрокаТЗ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбъектыКПубликации = Новый ТаблицаЗначений;
	ОбъектыКПубликации.Колонки.Добавить("ПубликуемыйОбъект");
	ОбъектыКПубликации.Колонки.Добавить("ЭтоСотрудник", Новый ОписаниеТипов("Булево"));
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(РабочиеМеста, "ДолжностьПоШтатномуРасписанию", Истина);
	ПрочиеОбъектыКПубликации = ОбъектыПозицийШтатногоРасписанияПоСсылкам(Позиции, Истина);
	Для каждого ПубликуемыйОбъект Из ПрочиеОбъектыКПубликации Цикл
		НоваяСтрока = ОбъектыКПубликации.Добавить();
		НоваяСтрока.ПубликуемыйОбъект = ПубликуемыйОбъект;
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из РабочиеМеста Цикл
		НоваяСтрока = ОбъектыКПубликации.Добавить();
		НоваяСтрока.ПубликуемыйОбъект = СтрокаТЗ.Сотрудник;
		НоваяСтрока.ЭтоСотрудник = Истина;
	КонецЦикла;
	
	Возврат ОбъектыКПубликации;

КонецФункции

Функция ДоступнаПубликацияРасчетныхЛистков() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.РасчетныеЛисткиКабинетСотрудника);

КонецФункции

Функция РодителиПодразделений(Подразделения) Экспорт
	
	РодителиПодразделений = Новый Массив;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Родитель", Ложь);
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			РодителиПодразделений.Добавить(ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
	РодителиПодразделений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РодителиПодразделений);
	Если РодителиПодразделений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
		РодителиПодразделений = РодителиПодразделений(РодителиПодразделений);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Подразделения);

КонецФункции

Функция КонтактнаяИнформацияФизическихЛиц(ФизическиеЛица) Экспорт

	КонтактнаяИнформация = Новый Структура("МобильныеТелефоны, АдресаПочты", Новый Соответствие, Новый Соответствие);
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат КонтактнаяИнформация;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Настройки.ВидКонтактнойИнформацииМобильныйТелефон);
	ВидыКИ.Добавить(Настройки.ВидКонтактнойИнформацииАдресЭлектроннойПочты);
	
	МобильныеТелефоны = Новый Соответствие;
	АдресаПочты = Новый Соответствие;
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ФизическиеЛица, , ВидыКИ, ТекущаяДатаСеанса());
	Для каждого СтрокаТЗ Из ТаблицаКИ Цикл
		Если СтрокаТЗ.Вид = Настройки.ВидКонтактнойИнформацииМобильныйТелефон Тогда
			МобильныеТелефоны.Вставить(СтрокаТЗ.Объект, СокрЛП(СтрокаТЗ.Представление));
		ИначеЕсли СтрокаТЗ.Вид = Настройки.ВидКонтактнойИнформацииАдресЭлектроннойПочты Тогда
			АдресаПочты.Вставить(СтрокаТЗ.Объект, СокрЛП(СтрокаТЗ.Представление));
		КонецЕсли;
	КонецЦикла;
	
	КонтактнаяИнформация.МобильныеТелефоны = МобильныеТелефоны;
	КонтактнаяИнформация.АдресаПочты = АдресаПочты;
	
	Возврат КонтактнаяИнформация;

КонецФункции

Функция ЭтоПодписанСервиса(СтрокаРольПодписантаЭП) Экспорт

	РолиПодписантаСервиса = Новый Соответствие;
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП("Руководитель")), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКабинетСотрудника.Сотрудник)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКабинетСотрудника.НепосредственныйРуководитель)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКабинетСотрудника.РуководителиПоВсемМестамРаботы)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКабинетСотрудника.РуководительПоДополнительнымМестамРаботы)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКабинетСотрудника.ВышестоящийРуководитель)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКабинетСотрудника.НеформальныйРуководитель)), Истина);
	
	Если РолиПодписантаСервиса[ВРег(СтрокаРольПодписантаЭП)] = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция СтрокаРольПодписантаДляЭП(РольПодписанта) Экспорт
	
	Если ТипЗнч(РольПодписанта) = Тип("ПеречислениеСсылка.РолиПодписантовКабинетСотрудника") Тогда
		СтрокаРольПодписанта = ОбщегоНазначения.ИмяЗначенияПеречисления(РольПодписанта);
	Иначе
		СтрокаРольПодписанта = РольПодписанта;
	КонецЕсли;

	Возврат СтрШаблон("%1:%2", "РольПодписанта", СтрокаРольПодписанта);

КонецФункции

Функция РазмерФайлаСоответсвуетТребованиям(ДвоичныеДанные) Экспорт

	Возврат ДвоичныеДанные.Размер() <= КабинетСотрудникаКлиентСервер.МаксимальныйРазмерПринимаемогоФайла();

КонецФункции

Функция РасширениеФотографии(ДвоичныеДанные) Экспорт
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	ФорматФайла = Картинка.Формат();
	Если ФорматФайла = ФорматКартинки.JPEG 
		Или ФорматФайла = ФорматКартинки.GIF
		Или ФорматФайла = ФорматКартинки.TIFF
		Или ФорматФайла = ФорматКартинки.PNG
		Или ФорматФайла = ФорматКартинки.BMP Тогда
		Возврат Строка(ФорматФайла);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СистемнаяУчетнаяЗаписьНастроена() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	СистемнаяУчетнаяЗаписьНастроена = РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СистемнаяУчетнаяЗаписьНастроена;

КонецФункции

Процедура ОбработатьИзменениеНастройкиИспользоватьЭлектронныеПодписи(Объект)

	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	Если Не Объект.Значение Тогда
		Настройки.ПолучениеДокументаСЭПНедоступно = Истина;
		Если Настройки.ПолучениеДокументаФайлДляПечатиНедоступно
			И Настройки.ПолучениеДокументаВБумажномВидеНедоступно
			И Настройки.ПолучениеДокументаСканОригиналаНедоступно Тогда
			Настройки.ПолучениеДокументаФайлДляПечатиНедоступно = Ложь;
		КонецЕсли;
			КабинетСотрудника.СохранитьНастройкиИспользуемаяФункциональностьСервиса(Настройки);
	КонецЕсли;
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);

КонецПроцедуры

#КонецОбласти

#Область ОпределениеФункциональностиПоВерсииФормата

Функция ВерсионированиеИспользуется() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеЗаполнено(Настройки.ВерсияAPI);

КонецФункции

Функция ВерсияФорматаМеньшеВерсии(ВерсияФормата, ВерсияДляСравнения) Экспорт

	Если ПустаяСтрока(ВерсияФормата) Тогда
		Возврат Истина;
	Иначе
		Возврат СравнитьВерсии(ВерсияФормата, ВерсияДляСравнения) < 0;
	КонецЕсли;

КонецФункции 

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате 0.0 либо 0.0.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//             Меньше 0 если СтрокаВерсии1 < СтрокаВерсии2.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Результат = 0;
	Если СокрЛП(СтрокаВерсии1) = СокрЛП(СтрокаВерсии2) Тогда
		Возврат 0;
	КонецЕсли;
	
	Версия1 = СтрРазделить(СтрокаВерсии1, ".");
	Версия2 = СтрРазделить(СтрокаВерсии2, ".");
	
	// Значимыми при сравнении являются первые 2 разряда (всегда число).
	Для Разряд = 0 По 1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РасчетныеЛисткиПервойПоловиныМесяцаДоступны() Экспорт
	
	Возврат ВерсионированиеИспользуется();
	
КонецФункции

Функция ИспользуетсяВерсияФормата(ВерсияДляСравнения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияФормата) Тогда
		Возврат Ложь;
	Иначе
		Возврат СравнитьВерсии(Настройки.ВерсияФормата, ВерсияДляСравнения) >= 0;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область НастройкиФункциональностиСервиса

Функция НовыеНастройкиФункциональностиСервиса() Экспорт

	ВерсияФормата = ВерсияФормата();
	
	НастройкиФункциональности = КабинетСотрудникаМенеджерОбмена.НовоеОписаниеНастроекФункциональностиСервиса(ВерсияФормата);
	КабинетСотрудникаВнутренний.ЗаполнитьНастройкиФункциональностиСервиса(НастройкиФункциональности, ВерсияФормата);
	
	НастройкиФункциональности.ИспользуютсяОбсуждения 		= ПолучитьФункциональнуюОпцию("ИспользуютсяОбсужденияКабинетСотрудника");
	НастройкиФункциональности.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	НастройкиФункциональности.ДоступноПолучениеКопииНаЭлектроннуюПочту 	= СистемнаяУчетнаяЗаписьНастроена();
	
	Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	НастройкиФункциональности.РазделКомпания 	= Не Настройки.СкрытьРазделКомпания;
	НастройкиФункциональности.РазделСправки 	= Не Настройки.СкрытьРазделСправки;
	НастройкиФункциональности.РазделДокументы 	= Не Настройки.СкрытьРазделДокументы;
	НастройкиФункциональности.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") И Не Настройки.ПолучениеДокументаСЭПНедоступно;
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	НастройкиФункциональности.ИспользуетсяКЭДО = Настройки.ИспользуетсяКадровыйЭДО;
	СпособПолученияСогласия = Настройки.СпособПолученияСогласияНаПрисоединениеККЭДО;
	НастройкиФункциональности.ПолучениеСогласияКЭДОНаБумаге = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.БумажныйДокумент);
	НастройкиФункциональности.ПолучениеСогласияКЭДОУНЭП 	= (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.УНЭП);
	
	Возврат НастройкиФункциональности;
	
КонецФункции

Функция ДоступнаяФункциональностьСервисаПоВерсииПриложения() Экспорт

	ДоступнаяФункциональность = КабинетСотрудникаВнутренний.ДоступнаяФункциональностьСервисаПоВерсииПриложения();
	
	ДоступнаяФункциональность.ЗапросМестаРаботыВЗаявлении 	= ИспользоватьФормат303();
	ДоступнаяФункциональность.ИспользуютсяОбсуждения 		= ПолучитьФункциональнуюОпцию("ИспользуютсяОбсужденияКабинетСотрудника");
	ДоступнаяФункциональность.РасширенныйЗапросНаИзменениеЛичнойИнформации = ИспользоватьФормат503();
	ДоступнаяФункциональность.ДоступноПолучениеДокументаСЭП 			= ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	ДоступнаяФункциональность.ДоступноПолучениеКопииНаЭлектроннуюПочту 	= СистемнаяУчетнаяЗаписьНастроена();
	
	Если ИспользоватьФормат503() Тогда
		Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
		ДоступнаяФункциональность.РазделКомпания 	= Не Настройки.СкрытьРазделКомпания;
		ДоступнаяФункциональность.РазделСправки 	= Не Настройки.СкрытьРазделСправки;
		ДоступнаяФункциональность.РазделДокументы 	= Не Настройки.СкрытьРазделДокументы;
		ДоступнаяФункциональность.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") И Не Настройки.ПолучениеДокументаСЭПНедоступно;
	КонецЕсли;
	
	Если ИспользоватьФормат50366() Тогда
		НастройкиИнтеграции = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
		ДоступнаяФункциональность.ИспользуетсяКЭДО = НастройкиИнтеграции.ИспользуетсяКадровыйЭДО;
		СпособПолученияСогласия = НастройкиИнтеграции.СпособПолученияСогласияНаПрисоединениеККЭДО;  
		ДоступнаяФункциональность.ПолучениеСогласияКЭДОНаБумаге = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.БумажныйДокумент);
		ДоступнаяФункциональность.ПолучениеСогласияКЭДОУНЭП = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.УНЭП);
	КонецЕсли;
	
	Возврат ДоступнаяФункциональность;

КонецФункции

#КонецОбласти

#КонецОбласти
