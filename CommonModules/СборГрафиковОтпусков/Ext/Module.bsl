
#Область СлужебныйПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.747";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "СборГрафиковОтпусков.ВключитьСборГрафиковОтпусков";
	
КонецПроцедуры

Процедура ВключитьСборГрафиковОтпусков() Экспорт 
	
	Если Не КабинетСотрудникаРасширенный.ДоступноИспользованиеСборГрафиковОтпусков() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеИспользоватьСборГрафиковОтпусков(Истина);
	
КонецПроцедуры

// Устанавливает значение для константы ИспользоватьСборГрафиковОтпусков.
//	Параметры:
//		НовоеЗначение - Булево;
Процедура УстановитьЗначениеИспользоватьСборГрафиковОтпусков(НовоеЗначение) Экспорт 
	
	Если НовоеЗначение <> Константы.ИспользоватьСборГрафиковОтпусков.Получить() Тогда
		Константы.ИспользоватьСборГрафиковОтпусков.Установить(НовоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#Область КабинетСотрудника

// Формирует данные графиков для публикации в сервисе 1С:Кабинет сотрудника.
// 
// Параметры;
// 		МассивОтбора - Массив
//
// Возвращаемое значение:
// 		ТаблицаЗначений - содержит колонки
// 			* СборГрафиковОтпусков - ДокументСсылка.СборГрафиковОтпусков
// 			* Год - Число
// 			* Состояние - ПеречислениеСсылка.СостоянияСбораГрафиковОтпусков
//
Функция ДанныеСборовГрафиковОтпусковДляСервисаКабинетСотрудника(МассивОтбора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК СборГрафиковОтпусков,
	|	Документы.Год КАК Год,
	|	Документы.Состояние КАК Состояние
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&Ссылки)";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает список документов по переданным идентификаторам.
//
// Параметры
// 		Идентификаторы - Массив - идентификаторы
//
// 	Возвращаемое значение
// 		Соответствите - ключ Идентификатор, значение ссылка на документ.
//
Функция ДокументыПоИдентификаторам(Идентификаторы) Экспорт

	ИдентификаторыДокументы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.ИдентификаторКабинетСотрудника КАК ИдентификаторДокумента
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК Документы
	|ГДЕ
	|	Документы.ИдентификаторКабинетСотрудника В(&Идентификаторы)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыДокументы.Вставить(Выборка.ИдентификаторДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ИдентификаторыДокументы;

КонецФункции

// Возвращает описание документа.
//	Возвращаемое значение:
//		Структура - содержит параметры необходимые для создания нового документа Сбор графиков отпусков.
Функция ОписаниеДокумента() Экспорт

	ОписаниеДокумента = Новый Структура("
	|Дата,
	|Год,
	|Подразделение,
	|ОтветственныйЗаСбор,
	|СостояниеСбораГрафиковОтпусков,
	|КорневойСборГрафиков,
	|ИдентификаторКабинетСотрудника,
	|Периоды");
	
	Периоды = Новый ТаблицаЗначений;
	Периоды.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Периоды.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Периоды.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ОписаниеДокумента.Периоды = Периоды;
		
	Возврат ОписаниеДокумента;

КонецФункции

Процедура ОбработатьНовыйГрафикПодразделения(ОписаниеДокумента, ИдентификаторыДокументы) Экспорт

	ДокументСборГрафиковОтпусков = ИдентификаторыДокументы[ОписаниеДокумента.ИдентификаторКабинетСотрудника];
	
	Если ДокументСборГрафиковОтпусков = Неопределено Тогда
		ДокументОбъект = НовыйДокументСборГрафиковОтпусков(ОписаниеДокумента);
		ЗаписатьДокументСборГрафиковОтпусков(ДокументОбъект, ОписаниеДокумента);
	Иначе
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СборГрафиковОтпусков");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСборГрафиковОтпусков);
			Блокировка.Заблокировать();
			
			ДокументОбъект = ДокументСборГрафиковОтпусков.ПолучитьОбъект();
			ЗаписатьДокументСборГрафиковОтпусков(ДокументОбъект, ОписаниеДокумента);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "043fcad2-b99b-11ed-b3ec-2c4d54d2b2aa", Метаданные.Документы.СборГрафиковОтпусков);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.СборГрафиковОтпусков, Истина);
	Списки.Вставить(Метаданные.Справочники.СборГрафиковОтпусковПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.СборГрафиковОтпусков.Чтение.ГруппыФизическихЛиц
	|Документ.СборГрафиковОтпусков.Изменение.ГруппыФизическихЛиц
	|Справочник.СборГрафиковОтпусковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СборГрафиковОтпусковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет и записывает на основе переданных данных документ СборГрафиковОтпусков.
//	Параметры:
//		ДокументОбъект - документ объект Сбор графиков отпусков;
//		СтруктураОбъекта - Структура - параметры для заполнения и создания документа.
Процедура ЗаписатьДокументСборГрафиковОтпусков(ДокументОбъект, СтруктураОбъекта)
	
	Организация = РегламентированнаяОтчетность.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ДокументОбъект.Подразделение = СтруктураОбъекта.Подразделение;
	ДокументОбъект.ОтветственныйЗаСбор = СтруктураОбъекта.ОтветственныйЗаСбор;
	ДокументОбъект.Состояние = СтруктураОбъекта.СостояниеСбораГрафиковОтпусков;
	
	ДокументОбъект.Сотрудники.Очистить();
	Для Каждого Период Из СтруктураОбъекта.Периоды Цикл
		СтрокаПериод = ДокументОбъект.Сотрудники.Добавить();
		СтрокаПериод.ФизическоеЛицо = Период.ФизическоеЛицо;
		СтрокаПериод.ДатаНачала = Период.ДатаНачала;
		СтрокаПериод.ДатаОкончания = Период.ДатаОкончания;
		СтрокаПериод.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(СтрокаПериод.ФизическоеЛицо, Организация, СтрокаПериод.ДатаНачала);		
		СтрокаПериод.КоличествоДней = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(СтрокаПериод.Сотрудник, СтрокаПериод.ДатаНачала, СтрокаПериод.ДатаОкончания);
	КонецЦикла;		
	
	ДокументОбъект.Записать();

КонецПроцедуры

// Формирует на основе переданных данных документ СборГрафиковОтпусков.
//	Параметры:
//		СтруктураОбъекта - Структура - параметры для заполнения и создания документа.
//	Возвращаемое значение:
//		ДокументОбъект - Сбор графиков отпусков.
Функция НовыйДокументСборГрафиковОтпусков(СтруктураОбъекта)

	ДокументОбъект = Документы.СборГрафиковОтпусков.СоздатьДокумент();
	ДокументОбъект.ДополнительныеСвойства.Вставить("СсылкаНового", Документы.СборГрафиковОтпусков.ПолучитьСсылку());
	ДокументОбъект.Дата 							= ТекущаяДатаСеанса();
	ДокументОбъект.Год 								= СтруктураОбъекта.Год;
	ДокументОбъект.Подразделение 					= СтруктураОбъекта.Подразделение;
	ДокументОбъект.Состояние 						= СтруктураОбъекта.СостояниеСбораГрафиковОтпусков;
	ДокументОбъект.КорневойСборГрафиков 			= ПолучитьКорневойСборГрафиковОтпусков(СтруктураОбъекта.Год);
	ДокументОбъект.ИдентификаторКабинетСотрудника 	= СтруктураОбъекта.ИдентификаторКабинетСотрудника;
		
	Возврат ДокументОбъект;
	
КонецФункции

// Формирует на основе переданных данных документ СборГрафиковОтпусков.
//	Параметры:
//		Год - Число (4,0) - год, за который происходит сбор графиков, корневого документа.
//	Возвращаемое значение:
//		ДокументСсылка - Сбор графиков отпусков.
Функция ПолучитьКорневойСборГрафиковОтпусков(Год) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументСборГрафиковОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК ДокументСборГрафиковОтпусков
	|ГДЕ
	|	ДокументСборГрафиковОтпусков.Год = &Год
	|	И (ДокументСборГрафиковОтпусков.КорневойСборГрафиков = ЗНАЧЕНИЕ(Документ.СборГрафиковОтпусков.ПустаяСсылка)
	|			ИЛИ ДокументСборГрафиковОтпусков.КорневойСборГрафиков = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДокументСборГрафиковОтпусков.КорневойСборГрафиков ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументСборГрафиковОтпусков.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.СборГрафиковОтпусков.ПустаяСсылка();	
	
КонецФункции

// Определяет находятся ли подчиненные корневому сбору графиков документы СборГрафиковОтпусков в состоянии Утверждено.
//	Параметры:
//		КорневойСборГрафиковОтпусков - документ объект Сбор графиков отпусков.
//	Возвращаемое значение:
//		Булево.
Функция СборыГрафиковОтпусковПодразделенийУтверждены(КорневойСборГрафиковОтпусков) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументСборГрафиковОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК ДокументСборГрафиковОтпусков
	|ГДЕ
	|	ДокументСборГрафиковОтпусков.КорневойСборГрафиков = &КорневойСборГрафиков
	|	И (ДокументСборГрафиковОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСбораГрафиковОтпусков.Черновик)
	|			ИЛИ ДокументСборГрафиковОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСбораГрафиковОтпусков.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("КорневойСборГрафиков", КорневойСборГрафиковОтпусков);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
