////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам НСИ производства.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область Спецификации

// Возвращает спецификации изделия
//
// Параметры:
//  ДанныеОбИзделии             - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации
//  ПараметрыВыбораСпецификаций - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
// 
// Возвращаемое значение:
//  Массив - содержит данные спецификаций изделия.
//
Функция СпецификацииИзделия(ДанныеОбИзделии, ПараметрыВыбораСпецификаций) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РесурсныеСпецификации.СпецификацииИзделия");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	0                                                                   КАК ИндексДанных,
	|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	&Номенклатура                                                       КАК Номенклатура,
	|	&Характеристика                                                     КАК Характеристика,
	|	НАЧАЛОПЕРИОДА(&НачалоПроизводства, ДЕНЬ)                            КАК НачалоПроизводства,
	|	&ПодразделениеДиспетчер                                             КАК ПодразделениеДиспетчер,
	|	&НаправлениеДеятельности                                            КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|;
	|";
	
	Запрос.УстановитьПараметр("Номенклатура",            ДанныеОбИзделии.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          ДанныеОбИзделии.Характеристика);
	Запрос.УстановитьПараметр("НачалоПроизводства",      ДанныеОбИзделии.НачалоПроизводства);
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер",  ДанныеОбИзделии.ПодразделениеДиспетчер);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ДанныеОбИзделии.НаправлениеДеятельности);
	
	ПараметрыТекстаЗапроса = ПараметрыТекстаЗапросаСпецификацийИзделий();
	
	Запрос.Текст = Запрос.Текст +  ТекстЗапросаСпецификацийИзделий(
		ПараметрыТекстаЗапроса,
		ПараметрыВыбораСпецификаций);
	
	УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбораСпецификаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокСпецификаций = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеСпецификации = Новый Структура("Спецификация,ПодбираетсяАвтоматически,"+ПараметрыВыбораСпецификаций.РеквизитыСпецификации);
			ЗаполнитьЗначенияСвойств(ДанныеСпецификации, Выборка);
			СписокСпецификаций.Добавить(ДанныеСпецификации);
		КонецЦикла;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, СписокСпецификаций.Количество());
	
	Возврат СписокСпецификаций;
	
КонецФункции

// Возвращает спецификации изделий
//
// Параметры:
//  ДанныеОбИзделиях            - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации
//  ПараметрыВыбораСпецификаций - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
// 
// Возвращаемое значение:
//  Массив - содержит данные спецификаций изделия.
//
Функция СпецификацииИзделий(ДанныеОбИзделиях, ПараметрыВыбораСпецификаций) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеОбИзделиях) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.ИндексДанных                            КАК ИндексДанных,
	|	Т.Номенклатура                            КАК Номенклатура,
	|	Т.Характеристика                          КАК Характеристика,
	|	НАЧАЛОПЕРИОДА(Т.НачалоПроизводства, ДЕНЬ) КАК НачалоПроизводства,
	|	Т.ПодразделениеДиспетчер                  КАК ПодразделениеДиспетчер,
	|	Т.НаправлениеДеятельности                 КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК Т
	|
	|;
	|
	|ВЫБРАТЬ
	|	Т.*,
	|	Т.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|ИЗ
	|	СписокНоменклатуры КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика
	|;
	|
	|";
	
	СписокНоменклатуры = ТаблицаДанныхОбИзделииДляВыбораСпецификации();
	Для ИндексДанных = 0 По ДанныеОбИзделиях.ВГраница() Цикл
		НоваяСтрока = СписокНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОбИзделиях[ИндексДанных]);
		НоваяСтрока.ИндексДанных = ИндексДанных;
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	ПараметрыТекстаЗапроса = ПараметрыТекстаЗапросаСпецификацийИзделий();
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаСпецификацийИзделий(
		ПараметрыТекстаЗапроса,
		ПараметрыВыбораСпецификаций);
	
	УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбораСпецификаций);
	
	СписокСпецификаций = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Массив(ДанныеОбИзделиях.Количество());
	
	ПрекратитьОбработку = Новый Соответствие;
	
	Для Индекс = 0 По СписокСпецификаций.Количество() - 1 Цикл
		
		СтрокаСпецификация = СписокСпецификаций[Индекс];
		ИндексДанных       = СтрокаСпецификация.ИндексДанных;
		
		Если ПрекратитьОбработку.Получить(ИндексДанных) = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОбИзделии        = ДанныеОбИзделиях[ИндексДанных];
		ПодобратьАвтоматически = (Результат[ИндексДанных] = Неопределено И СтрокаСпецификация.ПодбираетсяАвтоматически = Истина);
		
		Если ДанныеОбИзделии.Свойство("ТекущаяСпецификация") И ЗначениеЗаполнено(ДанныеОбИзделии.ТекущаяСпецификация) Тогда
		
			ЭтоТекущаяСпецификация = (СтрокаСпецификация.Спецификация = ДанныеОбИзделии.ТекущаяСпецификация);
			
			Если ЭтоТекущаяСпецификация ИЛИ ПодобратьАвтоматически Тогда
				Результат[ИндексДанных] = Новый Структура("Спецификация,"+ПараметрыВыбораСпецификаций.РеквизитыСпецификации);
				ЗаполнитьЗначенияСвойств(Результат[ИндексДанных], СтрокаСпецификация);
			КонецЕсли;
			
			Если ЭтоТекущаяСпецификация Тогда
				ПрекратитьОбработку.Вставить(ИндексДанных, Истина);
			КонецЕсли;
		
		ИначеЕсли ПодобратьАвтоматически Тогда
			
			Результат[ИндексДанных] = Новый Структура("Спецификация,"+ПараметрыВыбораСпецификаций.РеквизитыСпецификации);
			ЗаполнитьЗначенияСвойств(Результат[ИндексДанных], СтрокаСпецификация);
			ПрекратитьОбработку.Вставить(ИндексДанных, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет спецификацию в строках
//
// Параметры:
//  МассивСтрок					 - ДанныеФормыСтруктура, СтрокаТабличнойЧасти - строки в которых нужно заполнить спецификацию
//  ДанныеОбИзделиях			 - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации
//  ПараметрыВыбораСпецификаций	 - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
//  ИмяПоляСпецификация			 - Строка									 - Имя поля спецификация
//  ТолькоНезаполненные			 - Булево									 - Истина, если нужно заполнить спецификацию только если она не указана.
//
Процедура ЗаполнитьСпецификациюВСтроках(МассивСтрок, ДанныеОбИзделиях, ПараметрыВыбораСпецификаций, ИмяПоляСпецификация = "Спецификация", ТолькоНезаполненные = Ложь) Экспорт
	
	СпецификацииИзделий = СпецификацииИзделий(ДанныеОбИзделиях, ПараметрыВыбораСпецификаций);
	
	ИмяПоля = ИмяПоляСпецификация;
	ИндексДанных = 0;
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоля]) ИЛИ НЕ ТолькоНезаполненные Тогда
			
			ДанныеСпецификации = СпецификацииИзделий[ИндексДанных];
			
			Если ДанныеСпецификации <> Неопределено Тогда
				ТекущаяСтрока[ИмяПоля] = ДанныеСпецификации.Спецификация;
			Иначе
				ТекущаяСтрока[ИмяПоля] = Неопределено;
			КонецЕсли;
			
			ЗначенияЗаполнения = Новый Структура;
			Для каждого Реквизит Из СтрРазделить(ПараметрыВыбораСпецификаций.РеквизитыСпецификации,",",Ложь) Цикл
				ЗначенияЗаполнения.Вставить(Реквизит, ?(ДанныеСпецификации = Неопределено, Неопределено, ДанныеСпецификации[Реквизит]));
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗначенияЗаполнения);
			
		КонецЕсли;
		
		ДанныеОбИзделиях[ИндексДанных].Вставить("Спецификация", ТекущаяСтрока[ИмяПоля]);
		ИндексДанных = ИндексДанных + 1;
		
	КонецЦикла; 

КонецПроцедуры

// Проверяет корректность заполнения полуфабрикатов производимых в процессе
//
// Параметры:
// 		КоллекцияДанных - ТабличнаяЧасть - Таблица, в которой необходимо заполнить реквизиты, содержит:
// 			* НомерСтроки - Число - номер строки таблицы
// 		ПараметрыПроверки - Структура - Параметры проверок, которые требуется выполнить, содержит:
// 			* ПараметрыПроверкиВнутреннихПолуфабрикатов - Структура - структура параметров проверки внутренних пф, содержит:
// 				** ТаблицаПолуфабрикатов - ТаблицаЗначений - таблица полуфабрикатов для проверки
// 		Отказ - Булево - признак наличия ошибок заполнения
// 		Объект - СправочникОбъект.РесурсныеСпецификации - объект, связанный с проверкой.
//
Процедура ПроверитьСпецификацииПолуфабрикатов(КоллекцияДанных, ПараметрыПроверки, Отказ, Объект = Неопределено) Экспорт
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	
	ПутьКДанным = "";
	ИмяРеквизита = "ИсточникПолученияПолуфабриката";
	
	СтруктураПроверок = ПараметрыПроверки.СтруктураПроверок;
	ВыводитьСообщения = Истина;
	
	Если ПараметрыПроверки.Свойство("ПутьКДанным") Тогда
		ПутьКДанным = ПараметрыПроверки.ПутьКДанным;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ИмяРеквизита") Тогда
		ИмяРеквизита = ПараметрыПроверки.ИмяРеквизита;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ВыводитьСообщения") Тогда
		ВыводитьСообщения = ПараметрыПроверки.ВыводитьСообщения;
	КонецЕсли;
	
	ШаблонСообщенияНетИзделия              = НСтр("ru = 'В выходных изделиях спецификации полуфабриката должен быть полуфабрикат, который потребляется в текущей спецификации (список ""Материалы и работы"", строка %1)'");
	ШаблонСообщенияПереработкаНаСтороне    = НСтр("ru = 'По спецификации полуфабриката производственный процесс выполняется силами переработчика. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)'");
	ШаблонСообщенияСпецификацияНеДействует = НСтр("ru = 'Спецификация полуфабриката должна быть действующей (список ""Материалы и работы"", строка %1)'");
	ШаблонСообщенияНекратноеКоличество     = НСтр("ru = 'В спецификации полуфабриката выход полуфабриката должен быть кратен количеству потребляемого полуфабриката текущей спецификации (список ""Материалы и работы"", строка %1)'");
	
	СписокНоменклатуры = Новый Массив;
	СписокСпецификаций = Новый Массив;
	СписокСтрокПромежуточныхПолуфабрикатов = Новый Массив;
	
	Для каждого Строка Из КоллекцияДанных Цикл
		
		Если Строка.ПроизводитсяВПроцессе Тогда
		
			Если ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
				
				Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
					
					СписокНоменклатуры.Добавить(Строка.Номенклатура);
					СписокСпецификаций.Добавить(Строка.ИсточникПолученияПолуфабриката);
					
				ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов") Тогда
					
					СписокСтрокПромежуточныхПолуфабрикатов.Добавить(Строка);
					
				КонецЕсли;
			
			//++ Устарело_Производство21
			ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеСпецификации") Тогда // только 2.1
				
				Если Не ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
					
					Если ВыводитьСообщения Тогда
						Если ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
							Шаблон = НСтр("ru = 'Не заполнена колонка ""Спецификация полуфабриката"" в строке %1 списка ""Материалы и работы""'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						Иначе
							Шаблон = НСтр("ru = 'Не заполнена колонка ""Этап выпуска полуфабриката"" в строке %1 списка ""Материалы и работы""'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						КонецЕсли;
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, ИмяРеквизита);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
					
					Если ВыводитьСообщения Тогда
						Шаблон = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 списка ""Материалы и работы"". Колонка обязательна для заполнения для производимых полуфабрикатов.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка.НомерСтроки);
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Строка.НомерСтроки, "Номенклатура");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения,
							Объект,
							Поле,
							ПутьКДанным,
							Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;
				
				КонецЕсли;
				
			//-- Устарело_Производство21
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.Владелец КАК Ссылка
		|ПОМЕСТИТЬ ВТСпецификацииПолуфабрикатов
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (&СпецификацииПолуфабрикатов)
		|	И ЭтапыПроизводства.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка КАК Ссылка,
		|	РесурсныеСпецификации.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА СпецификацииСЭтапамиНаСтороне.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПереработкаНаСтороне
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпецификацииПолуфабрикатов КАК СпецификацииСЭтапамиНаСтороне
		|		ПО РесурсныеСпецификации.Ссылка = СпецификацииСЭтапамиНаСтороне.Ссылка
		|ГДЕ
		|	РесурсныеСпецификации.Ссылка В(&СпецификацииПолуфабрикатов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка          КАК Номенклатура,
		|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.Ссылка В (&СписокПолуфабрикатов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыходныеИзделия.Ссылка             КАК Ссылка,
		|	ВыходныеИзделия.ВидНоменклатуры    КАК ВидНоменклатуры,
		|	ВыходныеИзделия.Номенклатура       КАК Номенклатура,
		|	ВыходныеИзделия.Характеристика     КАК Характеристика,
		|	ВыходныеИзделия.Упаковка           КАК Упаковка,
		|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка В(&СпецификацииПолуфабрикатов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокПолуфабрикатов",       СписокНоменклатуры);
	Запрос.УстановитьПараметр("СпецификацииПолуфабрикатов", СписокСпецификаций);
	
	Результат = Запрос.ВыполнитьПакет(); 
	
	РеквизитыСпецификаций = Результат[1].Выгрузить();
	ВидыНоменклатуры      = Результат[2].Выгрузить();
	ДанныеСпецификаций    = Результат[3].Выгрузить();
	
	ВидыНоменклатуры.Индексы.Добавить("Номенклатура");
	РеквизитыСпецификаций.Индексы.Добавить("Ссылка");
	
	Для Каждого СтрокаМатериал Из КоллекцияДанных Цикл
	
		Если НЕ СтрокаМатериал.ПроизводитсяВПроцессе 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаМатериал.ИсточникПолученияПолуфабриката)
			ИЛИ ТипЗнч(СтрокаМатериал.ИсточникПолученияПолуфабриката) <> Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", СтрокаМатериал.ИсточникПолученияПолуфабриката);
		СпецификацияПолуфабриката = ДанныеСпецификаций.НайтиСтроки(СтруктураПоиска);
		
		СтрокаТаблицы = ВидыНоменклатуры.Найти(СтрокаМатериал.Номенклатура, "Номенклатура");
		Если СтрокаТаблицы = Неопределено Тогда
			ВидНоменклатурыПолуфабриката = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		Иначе
			ВидНоменклатурыПолуфабриката = СтрокаТаблицы.ВидНоменклатуры;
		КонецЕсли;
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, ИмяРеквизита);
		
		Реквизиты = РеквизитыСпецификаций.Найти(СтрокаМатериал.ИсточникПолученияПолуфабриката, "Ссылка");
		Если Реквизиты <> Неопределено И Реквизиты.Статус <> Перечисления.СтатусыСпецификаций.Действует И СтруктураПроверок.Свойство("СтатусСпецификации") Тогда
			
			// Спецификация не действует
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияСпецификацияНеДействует, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
		//++ Устарело_Производство21
		Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 И СтруктураПроверок.Свойство("ПроизводствоНаСтороне")
			И Реквизиты <> Неопределено И Реквизиты.ЕстьПереработкаНаСтороне Тогда
			
			// Производство на стороне
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияПереработкаНаСтороне, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		//-- Устарело_Производство21
		
		ЕстьВыходПолуфабриката = Ложь;
		Для каждого СтрокаИзделиеСпецификацииПолуфабриката Из СпецификацияПолуфабриката Цикл
			Если (СтрокаМатериал.Номенклатура = СтрокаИзделиеСпецификацииПолуфабриката.Номенклатура
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаИзделиеСпецификацииПолуфабриката.Номенклатура)
						И СтрокаИзделиеСпецификацииПолуфабриката.ВидНоменклатуры = ВидНоменклатурыПолуфабриката)
				И (НЕ ЗначениеЗаполнено(СтрокаИзделиеСпецификацииПолуфабриката.Характеристика)
					ИЛИ СтрокаМатериал.Характеристика = СтрокаИзделиеСпецификацииПолуфабриката.Характеристика) Тогда
				
				ЕстьВыходПолуфабриката = Истина;
				
				//++ Устарело_Производство21
				Если НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство21 И СтруктураПроверок.Свойство("КратностьПроизводимогоКоличества") Тогда
					
					Если СтрокаМатериал.Упаковка = СтрокаИзделиеСпецификацииПолуфабриката.Упаковка Тогда
						НормативМатериал = СтрокаМатериал.КоличествоУпаковок;
						НормативИзделие  = СтрокаИзделиеСпецификацииПолуфабриката.КоличествоУпаковок;
					Иначе
						МассивЗначений = Новый Массив;
						МассивЗначений.Добавить(Новый Структура("Номенклатура,Упаковка", СтрокаМатериал.Номенклатура, СтрокаМатериал.Упаковка));
						МассивЗначений.Добавить(Новый Структура("Номенклатура,Упаковка", СтрокаМатериал.Номенклатура, СтрокаИзделиеСпецификацииПолуфабриката.Упаковка));
						
						КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(МассивЗначений).Получить(СтрокаМатериал.Номенклатура);
						
						НормативМатериал = СтрокаМатериал.КоличествоУпаковок
							* ?(ЗначениеЗаполнено(КоэффициентыУпаковок.Получить(СтрокаМатериал.Упаковка)),
								КоэффициентыУпаковок.Получить(СтрокаМатериал.Упаковка),
								1);
						
						НормативИзделие = СтрокаИзделиеСпецификацииПолуфабриката.КоличествоУпаковок
							* ?(ЗначениеЗаполнено(КоэффициентыУпаковок.Получить(СтрокаИзделиеСпецификацииПолуфабриката.Упаковка)),
								КоэффициентыУпаковок.Получить(СтрокаИзделиеСпецификацииПолуфабриката.Упаковка),
								1);
					КонецЕсли;
					
					Если НормативМатериал <> 0 И НормативИзделие <> 0
						И Цел(НормативМатериал / НормативИзделие) <> (НормативМатериал / НормативИзделие) Тогда
						
						Если ВыводитьСообщения Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщенияНекратноеКоличество,
								СтрокаМатериал.НомерСтроки);
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
						Иначе
							Отказ = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				//-- Устарело_Производство21
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураПроверок.Свойство("СоответствиеСпецификации") Тогда
			Если НЕ ЕстьВыходПолуфабриката Тогда
				// Нет выхода полуфабриката
				Если ВыводитьСообщения Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщенияНетИзделия,
						СтрокаМатериал.НомерСтроки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов")
		И СписокСтрокПромежуточныхПолуфабрикатов.Количество() > 0 Тогда
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов = ПараметрыПроверки.ПараметрыПроверкиВнутреннихПолуфабрикатов;
		ТекстЗапроса = ТекстЗапросаПроверкиВнутреннихПолуфабрикатов(ПараметрыПроверкиВнутреннихПолуфабрикатов);
		ТаблицаПотребностиВПолуфабрикатах = ПотребностьВоВнутреннихПолуфабрикатах(ПараметрыПроверкиВнутреннихПолуфабрикатов, СписокСтрокПромежуточныхПолуфабрикатов);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ИспользуетсяПроизводство22", НастройкиПодсистемыПроизводство.ИспользуетсяПроизводство22);
		
		Запрос.УстановитьПараметр("ТаблицаПотребностиВПолуфабрикатах", ТаблицаПотребностиВПолуфабрикатах);
		
		//++ Устарело_Производство21
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа" Тогда
			
			Запрос.УстановитьПараметр("ТаблицаЭтаповЗаказа", ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов);
		
		КонецЕсли;
		//-- Устарело_Производство21
		
		Результат = Запрос.ВыполнитьПакет();
		КоличествоПакетов = Результат.Количество();
		
		Если Не Результат[КоличествоПакетов - 4].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 4].Выбрать();
			
			Шаблон = НСтр("ru = 'Этап выпуска полуфабриката выполняется позже этапа, на котором этот полуфабрикат потребляется (список ""Материалы и работы"", строка %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
					
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 3].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 3].Выбрать();
			
			Шаблон = НСтр("ru = 'Не допускается указание работ в качестве полуфабрикатов, производимых на этапах (список ""Материалы и работы"", строка %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 2].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 2].Выбрать();
			
			Шаблон = НСтр("ru = 'Этап выпуска полуфабриката выполняется переработчиком. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 1].Пустой() Тогда
			
			Шаблон  = НСтр("ru = 'В выходных изделиях не описан выпуск полуфабриката ""%НоменклатураХарактеристика%"" на этапе ""%ЭтапВыпуска%"" в%Достаточном% количестве%НеХватает% %Количество% %Упаковка%, см. список ""%ТаблицаПолуфабрикатов%"" (список ""Материалы и работы"", строка %НомерСтроки%)'");
			ТекстДостаточном = " " + НСтр("ru = 'достаточном'");
			ТекстНеХватает   = ", " + НСтр("ru = 'не хватает'");
			
			СтруктураПоиска = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
				ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска);
			
			ТаблицаПолуфабрикатовОстаток = ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов;
			ТаблицаПолуфабрикатовОстаток.Колонки.Добавить("КоличествоДоступно");
			
			Выборка = Результат[КоличествоПакетов - 1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				НайденныеСтроки = ТаблицаПолуфабрикатовОстаток.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.ВГраница() <> -1 Тогда
					СтрокаПолуфабрикат = НайденныеСтроки[0];
				Иначе
					СтрокаПолуфабрикат = Неопределено;
				КонецЕсли;
				
				Если СтрокаПолуфабрикат = Неопределено Тогда
					КоличествоДоступно = 0;
				ИначеЕсли СтрокаПолуфабрикат.КоличествоДоступно <> Неопределено Тогда
					КоличествоДоступно = СтрокаПолуфабрикат.КоличествоДоступно;
				Иначе
					КоличествоДоступно = СтрокаПолуфабрикат.Количество;
				КонецЕсли;
				
				Если КоличествоДоступно = -1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.Количество > КоличествоДоступно Тогда
					
					Если ВыводитьСообщения Тогда
						
						ТекстСообщения = СтрЗаменить(Шаблон, "%НоменклатураХарактеристика%", 
											НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление, Выборка.ХарактеристикаПредставление));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапВыпуска%", Выборка.ЭтапВыпускаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", (Выборка.Количество - КоличествоДоступно)/Выборка.КоэффициентУпаковки);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.УпаковкаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаПолуфабрикатов%", ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
						
						Если СтрокаПолуфабрикат <> Неопределено Тогда
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", ТекстДостаточном);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", ТекстНеХватает);
						Иначе
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", "");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", "");
						КонецЕсли;
						
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
							Выборка.НомерСтроки, 
							ИмяРеквизита);
							
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							Объект, 
							Поле, 
							ПутьКДанным, 
							Отказ);
							
					Иначе
						
						Отказ = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаПолуфабрикат <> Неопределено Тогда
					СтрокаПолуфабрикат.КоличествоДоступно = Макс(КоличествоДоступно - Выборка.Количество, 0);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры выбора спецификаций для номенклатуры.
//
// Параметры:
//  Объект			 - СправочникОбъект, ДокументОбъект, ДанныеФормыСтруктура	 - объект, для которого нужно сформировать параметры.
//  МенеджерОбъекта	 - СправочникМенеджер, ДокументМенеджер						 - менеджер объекта, для которого нужно сформировать параметры.
// 
// Возвращаемое значение:
//  Структура - параметры выбора спецификаций.
//
Функция ПараметрыВыбораСпецификаций(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = МенеджерОбъекта.ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций();
	
	ЗначенияРеквизитов = Неопределено;
	Если ЗначениеЗаполнено(ИменаРеквизитов) Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект))
			ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
		Иначе
			ЗначенияРеквизитов = Новый Структура(ИменаРеквизитов);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Объект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(МенеджерОбъекта.ПараметрыВыбораСпецификаций(ЗначенияРеквизитов));
	
КонецФункции

// Возвращает описание источника доступных спецификаций
//
// Возвращаемое значение:
//  Структура - поля описания источника
//
Функция ИсточникДоступныхСпецификацийКонструктор() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТекстЗапроса",                             "");
	Результат.Вставить("ТекстПоляНоменклатура",                    "");
	Результат.Вставить("ТекстПоляСпецификация",                    "");
	Результат.Вставить("ТекстПоляНоменклатураСпецификации",        "");
	Результат.Вставить("ТекстПоляУпаковкаСпецификации",            "");
	Результат.Вставить("ИмяВременнойТаблицыИсточникаСпецификаций", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры формирования текста запроса спецификаций изделий
//
// Возвращаемое значение:
//  Структура - параметры текста запроса
//
Функция ПараметрыТекстаЗапросаСпецификацийИзделий() Экспорт
	
	Результат = Новый Структура;
	
	// Используется, если имя входной таблицы отличается от ВтСписокНоменклатуры
	Результат.Вставить("ИмяВходнойТаблицы",           "");
	// Используется, если результат необходимо поместить во временную таблицу 
	Результат.Вставить("ИмяВыходнойТаблицы",          "");
	// Истина - если необходим отбор только приоритетных спецификаций
	Результат.Вставить("ТолькоПриоритетные",          Ложь);
	// Истина - если необходима сортировка результата по приоритету
	Результат.Вставить("УпорядочитьПоПриоритету",     Истина);
	// Истина - если необходимо поместить все поля структуры/таблицы данных об изделии в результат выборки
	Результат.Вставить("ВсеПоляВРезультате",          Ложь);
	// Истина - если необходимо уничтожить используемые временные таблицы
	Результат.Вставить("УничтожитьВременныеТаблицы",  Истина);
	// Истина - если необходим разделитель итогового пакета
	Результат.Вставить("РазделительИтоговогоПакета",  Истина);
	// Дополнительные условия отбора входной таблицы
	Результат.Вставить("УсловияОтбораВходящихДанных", Новый Массив);
	// Структура - см. ИсточникДоступныхСпецификацийКонструктор
	Результат.Вставить("ИсточникДоступныхСпецификаций", Неопределено);
	// Переопределение полей 
	Результат.Вставить("ПутиКДанным", Новый Структура());
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса спецификаций изделий
//
// Параметры:
//  ПараметрыЗапроса            - см. УправлениеДаннымиОбИзделиях.ПараметрыТекстаЗапросаСпецификацийИзделий
//  ПараметрыВыбораСпецификаций - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
// 
// Возвращаемое значение:
//  Строка - текст запроса для выбора спецификаций изделий
//
Функция ТекстЗапросаСпецификацийИзделий(ПараметрыЗапроса, ПараметрыВыбораСпецификаций) Экспорт
	
	ТаблицыУничтожить = Новый Массив;
	ТаблицыУничтожить.Добавить("ВтДоступныеСпецификации");
	ТаблицыУничтожить.Добавить("ВтСоответствуютПараметрамНазначения");
	ТаблицыУничтожить.Добавить("ВтНайденоВСписке");
	
	УправлениеДаннымиОбИзделияхПереопределяемый.ИсточникДоступныхСпецификаций(ПараметрыЗапроса, ПараметрыВыбораСпецификаций);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИсточникДоступныхСпецификаций) Тогда
		
		ИсточникДоступныхСпецификаций = ПараметрыЗапроса.ИсточникДоступныхСпецификаций;
		
		ТекстЗапроса                             = ИсточникДоступныхСпецификаций.ТекстЗапроса;
		ТекстПоляНоменклатура                    = ИсточникДоступныхСпецификаций.ТекстПоляНоменклатура;
		ТекстПоляСпецификация                    = ИсточникДоступныхСпецификаций.ТекстПоляСпецификация;
		ТекстПоляНоменклатураСпецификации        = ИсточникДоступныхСпецификаций.ТекстПоляНоменклатураСпецификации;
		ТекстПоляУпаковкаСпецификации            = ИсточникДоступныхСпецификаций.ТекстПоляУпаковкаСпецификации;
		ИмяВременнойТаблицыИсточникаСпецификаций = ИсточникДоступныхСпецификаций.ИмяВременнойТаблицыИсточникаСпецификаций;
		
	Иначе
		
		ТаблицыУничтожить.Добавить("ВтИсточникДоступныхСпецификаций");
		
		ТекстЗапроса = "
		|
		|ВЫБРАТЬ
		|	СписокНоменклатуры.ИндексДанных            КАК ИндексДанных,
		|	СписокНоменклатуры.Номенклатура            КАК Номенклатура,
		|	СписокНоменклатуры.Характеристика          КАК Характеристика,
		|	СписокНоменклатуры.ПодразделениеДиспетчер  КАК ПодразделениеДиспетчер,
		|	СписокНоменклатуры.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	СписокНоменклатуры.НачалоПроизводства      КАК НачалоПроизводства,
		|
		|	СпецификацииИзделий.Спецификация           КАК Спецификация,
		|	СпецификацииИзделий.НачалоДействия         КАК НачалоДействия,
		|	СпецификацииИзделий.Спецификация.Код       КАК Код,
		|
		|	СпецификацииИзделий.Спецификация.ВариантПодбораВДокументы
		|		= ЗНАЧЕНИЕ(Перечисление.ВариантыПодбораСпецификацииВДокументы.Автоматически)
		|		И СпецификацииИзделий.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
		|		И НЕ СпецификацииИзделий.ПобочныйВыход                                                        КАК ПодбираетсяАвтоматически,
		|	СпецификацииИзделий.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК ЛюбаяНоменклатура,
		|	СпецификацииИзделий.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ЛюбаяХарактеристика
		|
		|ПОМЕСТИТЬ ВтИсточникДоступныхСпецификаций
		|ИЗ
		|	РегистрСведений.СпецификацииИзделий КАК СпецификацииИзделий
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСписокНоменклатуры КАК СписокНоменклатуры
		|		 ПО СпецификацииИзделий.ВидНоменклатуры = СписокНоменклатуры.ВидНоменклатуры
		|			И (СпецификацииИзделий.Номенклатура = СписокНоменклатуры.Номенклатура
		|				ИЛИ СпецификацииИзделий.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|			И (СпецификацииИзделий.Характеристика = СписокНоменклатуры.Характеристика
		|				ИЛИ СпецификацииИзделий.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И &ТекстУсловиеОтбораВходящихДанных
		|
		|ГДЕ
		|
		|	(СписокНоменклатуры.НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1) 
		|		ИЛИ СпецификацииИзделий.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
		|	И (СпецификацииИзделий.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ СпецификацииИзделий.КонецДействия >= СписокНоменклатуры.НачалоПроизводства)
		|
		|	И (СпецификацииИзделий.ТипПроизводственногоПроцесса В (&ДоступныеТипы)
		|		ИЛИ &ДоступныеТипыБезОтбора)
		|
		|	И (СпецификацииИзделий.Статус В (&ДоступныеСтатусы)
		|		ИЛИ &ДоступныеСтатусыБезОтбора)
		|
		|	И (СпецификацииИзделий.Спецификация <> &ИсключитьСпецификацию
		|		ИЛИ &ИсключитьСпецификациюБезОтбора)
		|
		|	И (СпецификацииИзделий.ПобочныйВыход = ЛОЖЬ
		|		ИЛИ (&ДоступныСпецификацииНаПобочныйВыход
		|				И СпецификацииИзделий.Спецификация.РазрешитьВыборДляИзделийПобочногоВыхода)
		|		ИЛИ (&ДоступныСпецификацииНаПобочныйВыход
		|				И &ИспользуетсяПроизводство21))
		|
		|	И &ТекстУсловиеОтбораПоУпаковке
		|
		|	И &ТекстУсловиеОтбораПоНаименованию
		|
		|	И &ТекстУсловиеДоступныСпецификацииСПроизводствомНаСтороне
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		ТекстПоляНоменклатура                    = "СписокНоменклатуры.Номенклатура";
		ТекстПоляСпецификация                    = "СпецификацииИзделий.Спецификация";
		ТекстПоляНоменклатураСпецификации        = "СпецификацииИзделий.Номенклатура";
		ТекстПоляУпаковкаСпецификации            = "СпецификацииИзделий.Упаковка";
		ИмяВременнойТаблицыИсточникаСпецификаций = "ВтИсточникДоступныхСпецификаций";
	
	КонецЕсли;
	
	ТекстУсловия = ТекстУсловияОтбораПоУпаковкеПриВыбореСпецификаций(
		ТекстПоляНоменклатура, ТекстПоляНоменклатураСпецификации, ТекстПоляУпаковкаСпецификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловиеОтбораПоУпаковке", ТекстУсловия);
	
	Если ПараметрыВыбораСпецификаций.Свойство("СтрокаПоиска") Тогда
		ТекстУсловия = "
		|	И (&ТекстПоляСпецификация.Наименование ПОДОБНО &СтрокаПоиска
		|		ИЛИ &СтрокаПоиска = """")";
	Иначе
		ТекстУсловия = "";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловиеОтбораПоНаименованию", ТекстУсловия);
	
	Если ПараметрыВыбораСпецификаций.Свойство("ДоступныСпецификацииСПроизводствомНаСтороне")
		И НЕ ПараметрыВыбораСпецификаций.ДоступныСпецификацииСПроизводствомНаСтороне Тогда
		ТекстУсловия = "
		|	И НЕ ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Справочник.ЭтапыПроизводства КАК Т
		|		ГДЕ
		|			Т.Владелец = &ТекстПоляСпецификация
		|			И Т.ПроизводствоНаСтороне
		|			И НЕ Т.ПометкаУдаления
		|		)";
	Иначе
		ТекстУсловия = "";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстУсловиеДоступныСпецификацииСПроизводствомНаСтороне", ТекстУсловия);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ДоступныеСпецификации.ИндексДанных                               КАК ИндексДанных,
	|	ДоступныеСпецификации.Спецификация                               КАК Спецификация,
	|	ДоступныеСпецификации.ЛюбаяНоменклатура                          КАК ЛюбаяНоменклатура,
	|	ДоступныеСпецификации.ЛюбаяХарактеристика                        КАК ЛюбаяХарактеристика,
	|
	|	ДоступныеСпецификации.НачалоПроизводства                         КАК НачалоПроизводства,
	|	ДоступныеСпецификации.НачалоДействия                             КАК НачалоДействия,
	|	ДоступныеСпецификации.Код                                        КАК Код,
	|	ДоступныеСпецификации.ПодбираетсяАвтоматически                   КАК ПодбираетсяАвтоматически,
	|
	|	ПараметрыНазначенияСпецификаций.ВидПараметра                     КАК ВидПараметраНазначения,
	|	&КлючСвязиПустой                                                 КАК ВидУточненияПрименения,
	|
	|	ПараметрыНазначенияСпецификаций.Реквизит                         КАК Реквизит,
	|	ЕСТЬNULL(ВЫБОР
	|				КОГДА ЗначенияПараметровНазначенияСпецификаций.НомерВСписке В (0, 1)
	|					ТОГДА ПараметрыНазначенияСпецификаций.Приоритет
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)                                                КАК Приоритет,
	|
	|	ЕСТЬNULL(ЗначенияПараметровНазначенияСпецификаций.Условие, """") КАК Условие,
	|	ЗначенияПараметровНазначенияСпецификаций.Значение                КАК ЗначениеНастройки,
	|
	|	ВЫБОР ПараметрыНазначенияСпецификаций.ВидПараметра
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер)
	|			ТОГДА ДоступныеСпецификации.ПодразделениеДиспетчер
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.НаправлениеДеятельности)
	|			ТОГДА ДоступныеСпецификации.НаправлениеДеятельности
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ДопРеквизитПодразделения)
	|			ТОГДА ЕСТЬNULL(ДопРеквизитПодразделения.Значение,
	|								ВЫБОР
	|									КОГДА ТИПЗНАЧЕНИЯ(ЗначенияПараметровНазначенияСпецификаций.Значение) = ТИП(БУЛЕВО)
	|											И ДоступныеСпецификации.ПодразделениеДиспетчер <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|										ТОГДА ЛОЖЬ
	|									КОГДА ТИПЗНАЧЕНИЯ(ЗначенияПараметровНазначенияСпецификаций.Значение) = ТИП(ЧИСЛО)
	|											И ДоступныеСпецификации.ПодразделениеДиспетчер <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|										ТОГДА 0
	|									ИНАЧЕ НЕОПРЕДЕЛЕНО
	|								КОНЕЦ)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ДопРеквизитНаправленияДеятельности)
	|			ТОГДА ЕСТЬNULL(ДопРеквизитНаправленияДеятельности.Значение,
	|								ВЫБОР
	|									КОГДА ТИПЗНАЧЕНИЯ(ЗначенияПараметровНазначенияСпецификаций.Значение) = ТИП(БУЛЕВО)
	|											И ДоступныеСпецификации.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|										ТОГДА ЛОЖЬ
	|									КОГДА ТИПЗНАЧЕНИЯ(ЗначенияПараметровНазначенияСпецификаций.Значение) = ТИП(ЧИСЛО)
	|											И ДоступныеСпецификации.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|										ТОГДА 0
	|									ИНАЧЕ НЕОПРЕДЕЛЕНО 
	|								КОНЕЦ)
	|	КОНЕЦ                                                            КАК ЗначениеПараметра,
	|	""ПараметрНазначения""                                           КАК ВидНастройки
	|
	|ПОМЕСТИТЬ ВтДоступныеСпецификации
	|ИЗ
	|	ВтИсточникДоступныхСпецификаций КАК ДоступныеСпецификации
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНазначенияСпецификаций КАК ПараметрыНазначенияСпецификаций
	|		ПО (&ИспользоватьПараметрыНазначенияСпецификаций)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПараметровНазначенияСпецификаций КАК ЗначенияПараметровНазначенияСпецификаций
	|		ПО ДоступныеСпецификации.Спецификация               = ЗначенияПараметровНазначенияСпецификаций.Спецификация
	|			И (ПараметрыНазначенияСпецификаций.ВидПараметра = ЗначенияПараметровНазначенияСпецификаций.ВидПараметра)
	|			И (ПараметрыНазначенияСпецификаций.Реквизит     = ЗначенияПараметровНазначенияСпецификаций.Реквизит)
	|			И НЕ ЗначенияПараметровНазначенияСпецификаций.ВидПараметра В (&ИгнорируемыеПараметрыНазначения)
	|			И ЗначенияПараметровНазначенияСпецификаций.НомерВСписке МЕЖДУ 0 И 2
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК ДопРеквизитПодразделения
	|		ПО ДоступныеСпецификации.ПодразделениеДиспетчер = ДопРеквизитПодразделения.Ссылка
	|			И (ПараметрыНазначенияСпецификаций.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ДопРеквизитПодразделения)
	|			И (ПараметрыНазначенияСпецификаций.Реквизит = ДопРеквизитПодразделения.Свойство))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности.ДополнительныеРеквизиты КАК ДопРеквизитНаправленияДеятельности
	|		ПО ДоступныеСпецификации.НаправлениеДеятельности = ДопРеквизитНаправленияДеятельности.Ссылка
	|			И (ПараметрыНазначенияСпецификаций.ВидПараметра = ЗНАЧЕНИЕ(Перечисление.ВидыПараметровНазначенияСпецификаций.ДопРеквизитНаправленияДеятельности)
	|			И (ПараметрыНазначенияСпецификаций.Реквизит = ДопРеквизитНаправленияДеятельности.Свойство))
	|
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗначенияПараметровНазначенияСпецификаций.Условие, """") В (""ВСписке"",""НеВСписке"")
	|			ТОГДА ЗначенияПараметровНазначенияСпецификаций.НомерВСписке = 1
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|
	|;
	|
	|ВЫБРАТЬ
	|	Т.ИндексДанных           КАК ИндексДанных,
	|	Т.Спецификация           КАК Спецификация,
	|	Т.ВидПараметраНазначения КАК ВидПараметраНазначения,
	|	Т.ВидУточненияПрименения КАК ВидУточненияПрименения,
	|	Т.Реквизит               КАК Реквизит
	|
	|ПОМЕСТИТЬ
	|	ВтНайденоВСписке
	|ИЗ
	|	ВтДоступныеСпецификации КАК Т
	|
	|ГДЕ
	|	Т.Условие В (""ВСписке"",""НеВСписке"")
	|	И ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ЗначенияПараметровНазначенияСпецификаций КАК Т1
	|		ГДЕ
	|			Т.ВидНастройки = ""ПараметрНазначения""
	|			И Т.ЗначениеПараметра = Т1.Значение
	|			И Т.Спецификация = Т1.Спецификация
	|			И Т.ВидПараметраНазначения = Т1.ВидПараметра
	|			И Т.Реквизит = Т1.Реквизит
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексДанных,
	|	Спецификация,
	|	ВидПараметраНазначения,
	|	ВидУточненияПрименения,
	|	Реквизит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000000000
	|	АВТОНОМЕРЗАПИСИ() КАК Приоритет,
	|	ДоступныеСпецификации.ИндексДанных                КАК ИндексДанных,
	|	ДоступныеСпецификации.Спецификация                КАК Спецификация,
	|	ДоступныеСпецификации.НачалоДействия              КАК НачалоДействия,
	|	ДоступныеСпецификации.Код                         КАК Код,
	|	ДоступныеСпецификации.ПодбираетсяАвтоматически    КАК ПодбираетсяАвтоматически,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ДоступныеСпецификации.Условие В (""НеРавно"", ""НеВСписке"")
	|				ТОГДА ДоступныеСпецификации.Приоритет
	|			ИНАЧЕ 0
	|		КОНЕЦ)                                        КАК Приоритет1,
	|	НЕ ДоступныеСпецификации.ЛюбаяНоменклатура        КАК Приоритет2,
	|	НЕ ДоступныеСпецификации.ЛюбаяХарактеристика      КАК Приоритет3,
	|	СУММА(ВЫБОР
	|			КОГДА ДоступныеСпецификации.Условие В (""НеРавно"", ""НеВСписке"")
	|				ТОГДА ДоступныеСпецификации.Приоритет
	|			ИНАЧЕ 0
	|		КОНЕЦ)                                        КАК Приоритет4
	|ПОМЕСТИТЬ ВтСоответствуютПараметрамНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.ИндексДанных             КАК ИндексДанных,
	|		Т.Спецификация             КАК Спецификация,
	|		Т.НачалоДействия           КАК НачалоДействия,
	|		Т.Код                      КАК Код,
	|		Т.ПодбираетсяАвтоматически КАК ПодбираетсяАвтоматически,
	|		Т.ЛюбаяНоменклатура        КАК ЛюбаяНоменклатура,
	|		Т.ЛюбаяХарактеристика      КАК ЛюбаяХарактеристика,
	|		Т.Приоритет                КАК Приоритет,
	|		Т.Условие                  КАК Условие,
	|		ВЫБОР Т.Условие
	|			КОГДА ""Равно""
	|				ТОГДА Т.ЗначениеПараметра = Т.ЗначениеНастройки
	|			КОГДА ""НеРавно""
	|				ТОГДА Т.ЗначениеПараметра <> Т.ЗначениеНастройки
	|			КОГДА ""Больше""
	|				ТОГДА Т.ЗначениеПараметра > Т.ЗначениеНастройки
	|			КОГДА ""БольшеИлиРавно""
	|				ТОГДА Т.ЗначениеПараметра >= Т.ЗначениеНастройки
	|			КОГДА ""Меньше""
	|				ТОГДА Т.ЗначениеПараметра < Т.ЗначениеНастройки
	|			КОГДА ""МеньшеИлиРавно""
	|				ТОГДА Т.ЗначениеПараметра <= Т.ЗначениеНастройки
	|			КОГДА ""ВСписке""
	|				ТОГДА НЕ НайденоВСписке.ИндексДанных ЕСТЬ NULL
	|			КОГДА ""НеВСписке""
	|				ТОГДА НайденоВСписке.ИндексДанных ЕСТЬ NULL
	|			КОГДА ""Заполнено""
	|				ТОГДА НЕ Т.ЗначениеПараметра В (
	|										НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0,
	|										ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
	|										ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|												)
	|			КОГДА ""НеЗаполнено""
	|				ТОГДА Т.ЗначениеПараметра В (
	|										НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0,
	|										ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
	|										ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|												)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК СоответствуетПараметрамНазначения
	|	ИЗ
	|		ВтДоступныеСпецификации КАК Т
	|	
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтНайденоВСписке КАК НайденоВСписке
	|			ПО Т.ИндексДанных = НайденоВСписке.ИндексДанных
	|				И Т.Спецификация = НайденоВСписке.Спецификация
	|				И Т.ВидПараметраНазначения = НайденоВСписке.ВидПараметраНазначения
	|				И Т.ВидУточненияПрименения = НайденоВСписке.ВидУточненияПрименения
	|				И Т.Реквизит = НайденоВСписке.Реквизит
	|	) КАК ДоступныеСпецификации
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеСпецификации.ИндексДанных,
	|	ДоступныеСпецификации.Спецификация,
	|	ДоступныеСпецификации.НачалоДействия,
	|	ДоступныеСпецификации.Код,
	|	ДоступныеСпецификации.ПодбираетсяАвтоматически,
	|	НЕ ДоступныеСпецификации.ЛюбаяНоменклатура,
	|	НЕ ДоступныеСпецификации.ЛюбаяХарактеристика
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ДоступныеСпецификации.СоответствуетПараметрамНазначения) = ИСТИНА
	|";
	
	// Сортировка по приоритету
	Если ПараметрыЗапроса.УпорядочитьПоПриоритету ИЛИ ПараметрыЗапроса.ТолькоПриоритетные Тогда
		
		ТекстСортировкиПоПриоритету = "
		|УПОРЯДОЧИТЬ ПО
		|	ИндексДанных,
		|	Приоритет1 УБЫВ,
		|	Приоритет2 УБЫВ,
		|	Приоритет3 УБЫВ,
		|	Приоритет4 УБЫВ,
		|	НачалоДействия УБЫВ,
		|	Код УБЫВ
		|;
		|";
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1000000000",                "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АВТОНОМЕРЗАПИСИ() КАК Приоритет,", "");
		
		ТекстСортировкиПоПриоритету = "
		|;";
		
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ТекстСортировкиПоПриоритету;
	
	ТекстУсловияОтбора = "";
	ТекстСортировкиПоПриоритету = "";
	Если ПараметрыЗапроса.ТолькоПриоритетные Тогда
		
		ТекстУсловияОтбора = "
		|ГДЕ
		|	(Спецификации.ИндексДанных, Спецификации.Приоритет) В
		|			(ВЫБРАТЬ
		|				Т.ИндексДанных,
		|				МИНИМУМ(Т.Приоритет)
		|			ИЗ
		|				ВтСоответствуютПараметрамНазначения КАК Т
		|			ГДЕ
		|				Т.ПодбираетсяАвтоматически = ИСТИНА
		|			СГРУППИРОВАТЬ ПО
		|				Т.ИндексДанных)
		|";
		
	ИначеЕсли ПараметрыЗапроса.УпорядочитьПоПриоритету И ПустаяСтрока(ПараметрыЗапроса.ИмяВыходнойТаблицы) Тогда
		
		ТекстСортировкиПоПриоритету = "
		|УПОРЯДОЧИТЬ ПО
		|	Спецификации.ИндексДанных,
		|	Спецификации.Приоритет
		|";
		
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Спецификации.ИндексДанных               КАК ИндексДанных,
	|	Спецификации.Спецификация               КАК Спецификация,
	|	Спецификации.ПодбираетсяАвтоматически   КАК ПодбираетсяАвтоматически,
	|	&РеквизитыСпецификации,
	|	&ВСЕПОЛЯ_РЕКВИЗИТЫ,
	|	Спецификации.Спецификация.Представление КАК Представление
	|
	|ПОМЕСТИТЬ ИмяВыходнойТаблицы
	|
	|ИЗ
	|	ВтСоответствуютПараметрамНазначения КАК Спецификации
	|
	|	,ВСЕПОЛЯ_СОЕДИНЕНИЕ
	|
	|";
	
	// Реквизиты спецификации
	Если ЗначениеЗаполнено(ПараметрыВыбораСпецификаций.РеквизитыСпецификации) Тогда
		ПоляЗапроса = Новый Массив;
		Для каждого Реквизит Из СтрРазделить(ПараметрыВыбораСпецификаций.РеквизитыСпецификации, ",", Ложь) Цикл
			ПоляЗапроса.Добавить(СтрШаблон("Спецификации.Спецификация.%1 КАК %1,", СокрЛП(Реквизит)));
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыСпецификации,", СтрСоединить(ПоляЗапроса,Символы.ПС));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыСпецификации,", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстУсловияОтбора;
	ТекстЗапроса = ТекстЗапроса + ТекстСортировкиПоПриоритету;
	
	Если ПараметрыЗапроса.ВсеПоляВРезультате Тогда
		
		ТекстСоединениеВсеПоля = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтИсточникДоступныхСпецификаций КАК Т
		|	ПО Спецификации.ИндексДанных = Т.ИндексДанных
		|		И Спецификации.Спецификация = Т.Спецификация
		|";
		ТекстРеквизитыВсеПоля  = "
		|	Т.*,
		|";
		ТекстИндексировать     = "";
		
	Иначе
		
		ТекстСоединениеВсеПоля = "";
		ТекстРеквизитыВсеПоля  = "";
		ТекстИндексировать     = "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИндексДанных";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВСЕПОЛЯ_РЕКВИЗИТЫ,", ТекстРеквизитыВсеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",ВСЕПОЛЯ_СОЕДИНЕНИЕ", ТекстСоединениеВсеПоля);
	
	Если НЕ ПустаяСтрока(ПараметрыЗапроса.ИмяВыходнойТаблицы) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВыходнойТаблицы", "ПОМЕСТИТЬ "+ПараметрыЗапроса.ИмяВыходнойТаблицы);
		ТекстЗапроса = ТекстЗапроса + ТекстИндексировать;
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяВыходнойТаблицы", "");
		
	КонецЕсли;
	
	ТекстУсловиеОтбораВходящихДанных = "ИСТИНА";
	Если ЗначениеЗаполнено(ПараметрыЗапроса.УсловияОтбораВходящихДанных) Тогда
		ТекстУсловиеОтбораВходящихДанных = СтрСоединить(ПараметрыЗапроса.УсловияОтбораВходящихДанных, " И ");
	КонецЕсли;
	
	Если ПараметрыЗапроса.УничтожитьВременныеТаблицы Тогда
		
		Для Индекс = 0 По ТаблицыУничтожить.ВГраница() Цикл
			ТаблицыУничтожить[Индекс] = СтрШаблон("%1 УНИЧТОЖИТЬ %2", ОбщегоНазначения.РазделительПакетаЗапросов(), ТаблицыУничтожить[Индекс]);
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + СтрСоединить(ТаблицыУничтожить);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.РазделительИтоговогоПакета Тогда
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляСпецификация",            ТекстПоляСпецификация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловиеОтбораВходящихДанных", ТекстУсловиеОтбораВходящихДанных);
	
	Если НЕ ПустаяСтрока(ПараметрыЗапроса.ИмяВходнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтСписокНоменклатуры", ПараметрыЗапроса.ИмяВходнойТаблицы);
	КонецЕсли;
	
	Если ИмяВременнойТаблицыИсточникаСпецификаций <> "ВтИсточникДоступныхСпецификаций" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтИсточникДоступныхСпецификаций", ИмяВременнойТаблицыИсточникаСпецификаций);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает параметры запроса, сформированного функцией ТекстЗапросаСпецификацийИзделий()
//
// Параметры:
//  Запрос          - Запрос    - Запрос выбора спецификаций
//  ПараметрыВыбора - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
//
Процедура УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбора) Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ДоступныеТипы",         Новый Массив);
	СписокПараметров.Вставить("ДоступныеСтатусы",      Новый Массив);
	СписокПараметров.Вставить("ИсключитьСпецификацию", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	
	СписокПараметровБезОтбора = Новый Структура;
	СписокПараметровБезОтбора.Вставить("ДоступныеТипы",         "ДоступныеТипыБезОтбора");
	СписокПараметровБезОтбора.Вставить("ДоступныеСтатусы",      "ДоступныеСтатусыБезОтбора");
	СписокПараметровБезОтбора.Вставить("ИсключитьСпецификацию", "ИсключитьСпецификациюБезОтбора");
	
	Для каждого КлючИЗначение Из СписокПараметров Цикл
		ЗначениеПараметра = КлючИЗначение.Значение;
		Если ПараметрыВыбора.Свойство(КлючИЗначение.Ключ) Тогда
			ЗначениеПараметра = ПараметрыВыбора[КлючИЗначение.Ключ];
		КонецЕсли;
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, ЗначениеПараметра);
		Запрос.УстановитьПараметр(СписокПараметровБезОтбора[КлючИЗначение.Ключ], НЕ ЗначениеЗаполнено(ЗначениеПараметра));
	КонецЦикла;
	
	ДоступныСпецификацииНаПобочныйВыход = Ложь;
	Если ПараметрыВыбора.Свойство("ДоступныСпецификацииНаПобочныйВыход") Тогда
		ДоступныСпецификацииНаПобочныйВыход = ПараметрыВыбора.ДоступныСпецификацииНаПобочныйВыход;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоступныСпецификацииНаПобочныйВыход", ДоступныСпецификацииНаПобочныйВыход);
	
	ИгнорируемыеПараметрыНазначения = Новый Массив;
	Если ПараметрыВыбора.Свойство("ИгнорируемыеПараметрыНазначения")
		И ЗначениеЗаполнено(ПараметрыВыбора.ИгнорируемыеПараметрыНазначения) Тогда
		Для каждого ПараметрыНазначения Из ПараметрыВыбора.ИгнорируемыеПараметрыНазначения Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ИгнорируемыеПараметрыНазначения, ВидПараметраНазначенияВМассив(ПараметрыНазначения));
		КонецЦикла;
	КонецЕсли;
	Запрос.УстановитьПараметр("ИгнорируемыеПараметрыНазначения", ИгнорируемыеПараметрыНазначения);
	
	ИгнорируемыеУточненияПрименения = Новый Массив;
	Если ПараметрыВыбора.Свойство("ИгнорируемыеУточненияПрименения")
		И ЗначениеЗаполнено(ПараметрыВыбора.ИгнорируемыеУточненияПрименения) Тогда
		ИгнорируемыеУточненияПрименения = ПараметрыВыбора.ИгнорируемыеУточненияПрименения;
	КонецЕсли;
	Запрос.УстановитьПараметр("ИгнорируемыеУточненияПрименения", ИгнорируемыеУточненияПрименения);
	
	Запрос.УстановитьПараметр("ИспользоватьПараметрыНазначенияСпецификаций", ПолучитьФункциональнуюОпцию("ИспользоватьПараметрыНазначенияСпецификаций"));
	Запрос.УстановитьПараметр("КлючСвязиПустой",         Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если ПараметрыВыбора.Свойство("СтрокаПоиска") Тогда
		
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СокрЛП(ПараметрыВыбора.СтрокаПоиска) + "%");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИспользуетсяПроизводство21", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством"));
	
КонецПроцедуры

Функция ТекстУсловияОтбораПоУпаковкеПриВыбореСпецификаций(ТекстПоляНоменклатура, ТекстПоляНоменклатураСпецификации, ТекстПоляУпаковкаСпецификации) Экспорт
	
	ТекстУсловиеОтбораПоУпаковке = СтрШаблон("
	|	И ВЫБОР КОГДА %2 = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НЕ (%1.ЕдиницаИзмерения = %3) ТОГДА
	|		ВЫБОР (%3.ТипИзмеряемойВеличины)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				ТОГДА (%3.Владелец В (%1, %1.НаборУпаковок))
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|				ТОГДА (%1.ВесИспользовать И %1.ВесМожноУказыватьВДокументах)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|				ТОГДА (%1.ОбъемИспользовать И %1.ОбъемМожноУказыватьВДокументах)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
	|				ТОГДА (%1.ДлинаИспользовать И %1.ДлинаМожноУказыватьВДокументах)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
	|				ТОГДА (%1.ПлощадьИспользовать И %1.ПлощадьМожноУказыватьВДокументах)
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|", ТекстПоляНоменклатура, ТекстПоляНоменклатураСпецификации, ТекстПоляУпаковкаСпецификации);
	
	Возврат ТекстУсловиеОтбораПоУпаковке;
	
КонецФункции
#КонецОбласти

#Область ЭтапыПроизводства

// Проверяет соответствуют ли значения реквизитов выбранному подразделению
//  Если не соответствуют то значения очищаются.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура	- Объект содержащий данные этапа.
//  СписокРеквизитов - Строка		 - Список реквизитов к проверке.
//
Процедура ПроверитьСоответствиеРеквизитовПодразделению(Объект, СписокРеквизитов = "") Экспорт

	Если Объект.Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры


#КонецОбласти

#Область ОписаниеПроизводственногоПроцесса

// Проверяет возможность описания партии выпуска по спецификации
// 
// Возвращаемое значение:
//  Булево - Истина, если описание партии выпуска по спецификации доступно
//
Функция ДоступноОписаниеПартииВыпуска() Экспорт
	
	Возврат НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	
КонецФункции

// Проверяет возможность описания типа производственного процесса (сборка, разборка, ремонт).
// 
// Возвращаемое значение:
//  Булево - Истина, если тип производственного процесса доступен.
//
Функция ДоступноОписаниеТипаПроизводственногоПроцесса() Экспорт
	
	Результат = Ложь;
	Возврат Результат;
	
КонецФункции

// Проверяет возможность описания вероятности применения материалов.
// 
// Возвращаемое значение:
//  Булево - Истина, если тип производственного процесса доступен.
//
Функция ДоступноОписаниеВероятностиПримененияМатериалов() Экспорт
	
	Результат = Ложь;
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Спецификации

#Область СпецификацииНоменклатуры

Функция СписокСпецификацийПоНоменклатуре(ДанныеОбИзделии, ПараметрыВыбораСпецификаций) Экспорт
	
	ДанныеСпецификаций = СпецификацииИзделия(ДанныеОбИзделии, ПараметрыВыбораСпецификаций);
	
	Результат = Новый Массив;
	
	Для каждого ДанныеСпецификации Из ДанныеСпецификаций Цикл
		Результат.Добавить(ДанныеСпецификации.Спецификация);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокСпецификацийПоСпискуНоменклатуры(СписокНоменклатуры, ПараметрыВыбораСпецификаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.ИндексДанных                            КАК ИндексДанных,
	|	Т.Номенклатура                            КАК Номенклатура,
	|	Т.Характеристика                          КАК Характеристика,
	|	НАЧАЛОПЕРИОДА(Т.НачалоПроизводства, ДЕНЬ) КАК НачалоПроизводства,
	|	Т.ПодразделениеДиспетчер                  КАК ПодразделениеДиспетчер,
	|	Т.НаправлениеДеятельности                 КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&СписокНоменклатуры КАК Т
	|;
	|
	|ВЫБРАТЬ
	|	Т.*,
	|	Т.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВтСписокНоменклатуры
	|ИЗ
	|	СписокНоменклатуры КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика
	|;
	|
	|";
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	ПараметрыТекстаЗапроса = ПараметрыТекстаЗапросаСпецификацийИзделий();
	ПараметрыТекстаЗапроса.ИмяВыходнойТаблицы = "ВтСпецификации";
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаСпецификацийИзделий(ПараметрыТекстаЗапроса, ПараметрыВыбораСпецификаций) + "
	|
	|ВЫБРАТЬ
	|	Спецификации.Спецификация КАК Спецификация
	|ИЗ
	|	ВтСпецификации КАК Спецификации
	|
	|СГРУППИРОВАТЬ ПО
	|	Спецификации.Спецификация
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Спецификации.ИндексДанных) В
	|		(ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.ИндексДанных)
	|		ИЗ
	|			ВтСписокНоменклатуры КАК Т)";
	
	УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбораСпецификаций);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Спецификация");
	Возврат Результат;
	
КонецФункции

Функция ТаблицаДанныхОбИзделииДляВыбораСпецификации() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИндексДанных",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Результат.Колонки.Добавить("Номенклатура",            Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика",          Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("НачалоПроизводства",      Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Результат.Колонки.Добавить("ПодразделениеДиспетчер",  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Результат.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НаборыМатериаловИРабот

Функция НаборыМатериаловИРаботКонструктор() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	ТипыДанных = Новый Массив;
	ТипыДанных.Добавить(Тип("СправочникСсылка.РесурсныеСпецификации"));
	ТипыДанных.Добавить(Тип("СправочникСсылка.ВариантыКомплектацииНоменклатуры"));
	
	Результат.Колонки.Добавить("КлючСвязи",             Новый ОписаниеТипов("УникальныйИдентификатор"));
	Результат.Колонки.Добавить("Спецификация",          Новый ОписаниеТипов(ТипыДанных));
	Результат.Колонки.Добавить("КлючСвязиРодитель",     Новый ОписаниеТипов("УникальныйИдентификатор"));
	Результат.Колонки.Добавить("СпецификацияРодитель",  Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Результат.Колонки.Добавить("КоличествоСтрок",       Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КлючСвязиСпецификация", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Результат.Колонки.Добавить("Этап",                  Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область ПараметрыНазначения


Функция ВидПараметраНазначенияВМассив(ВидПараметра, ВключаяЗависимые = Истина) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ВидПараметра);
	
	Если ВключаяЗависимые Тогда
		Если ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.ПодразделениеДиспетчер Тогда
			Результат.Добавить(Перечисления.ВидыПараметровНазначенияСпецификаций.ДопРеквизитПодразделения);
		ИначеЕсли ВидПараметра = Перечисления.ВидыПараметровНазначенияСпецификаций.НаправлениеДеятельности Тогда
			Результат.Добавить(Перечисления.ВидыПараметровНазначенияСпецификаций.ДопРеквизитНаправленияДеятельности);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

//++ Устарело_Производство21

// Производит перенумерацию таблицы этапов производства
// 
// Параметры:
// 	ТаблицаЭтапы - ТаблицаЗначений - таблица этапов
//
Процедура ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы)

	ТаблицаЭтапы.Колонки.Добавить("УровеньЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0, ДопустимыйЗнак.Неотрицательный)));
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиЭтапы", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
	КоличествоУровней = 1;
	ЗаполнитьУровеньЭтапов(ТаблицаЭтапы, НайденныеСтроки, 1, КоличествоУровней);
	
	ПредыдущийНомер = 0;
	СмещениеНомера = 0;
	ТекущийУровень = КоличествоУровней;
	
	ТаблицаЭтапы.Сортировать("УровеньЭтапа Убыв");
	
	КлючиСвязейЭтапов = Новый Соответствие;
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		Если ТекущийУровень <> Строка.УровеньЭтапа Тогда
			СмещениеНомера = СмещениеНомера + ПредыдущийНомер;
			ТекущийУровень = Строка.УровеньЭтапа;
		КонецЕсли;
		
		Строка.НомерЭтапа = Строка.НомерЭтапа + СмещениеНомера;
		
		КлючиСвязейЭтапов.Вставить(Строка.КлючСвязи, Строка.НомерЭтапа);
		
		Если ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = Строка.НомерСледующегоЭтапа + СмещениеНомера;
		КонецЕсли;
		
		ПредыдущийНомер = Строка.НомерЭтапа;
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = КлючиСвязейЭтапов.Получить(Строка.КлючСвязиЭтапы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа, КоличествоУровней)
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", Строка.КлючСвязи));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			КоличествоУровней = Макс(УровеньЭтапа, КоличествоУровней);
			
			Если Строка.НомерЭтапа = 1 Тогда
				Строка.УровеньЭтапа = КоличествоУровней;
			Иначе
				Строка.УровеньЭтапа = УровеньЭтапа;
			КонецЕсли;
			
		Иначе
			Строка.УровеньЭтапа = УровеньЭтапа;
			ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа + 1, КоличествоУровней);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает спецификацию на основании спецификации заказа
//
// Параметры:
//  Объект					 - ДокументОбъект.ЗаказНаПроизводство - содержит данные спецификации заказа
//  ДанныеПродукции			 - ДанныеФормыЭлементКоллекции - содержит данные текущей продукции заказа
//  ПараметрыСпецификации	 - Структура - содержит параметры новой спецификации.
//
// Возвращаемое значение:
//	Структура - содержит данные новой спецификации:
//  	* Ссылка - СправочникСсылка.РесурсныеСпецификации - новая спецификация
//		* Наименование - Строка - наименование спецификации.
//    
Функция СоздатьСпецификациюНаОснованииСпецификацииЗаказа(Объект, ДанныеПродукции, ПараметрыСпецификации) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		СсылкаНового = Справочники.РесурсныеСпецификации.ПолучитьСсылку();
		
		Если ЗначениеЗаполнено(ДанныеПродукции.Спецификация) Тогда
			// Чтобы скопировать реквизиты спецификации, которых нет в заказе
			НоваяСпецификация = ДанныеПродукции.Спецификация.Скопировать();
			НоваяСпецификация.ВыходныеИзделия.Очистить();
			НоваяСпецификация.ВозвратныеОтходы.Очистить();
			НоваяСпецификация.МатериалыИУслуги.Очистить();
			НоваяСпецификация.Трудозатраты.Очистить();
			НоваяСпецификация.СоответствиеСвойств.Очистить();
			НоваяСпецификация.ДополнительныеРеквизиты.Очистить();
		Иначе
			НоваяСпецификация = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
			НоваяСпецификация.Заполнить(Неопределено);
		КонецЕсли; 
		
		НоваяСпецификация.Наименование = ПараметрыСпецификации.НаименованиеСпецификации;
		НоваяСпецификация.Описание = ПараметрыСпецификации.Описание;
		
		// Копирование Этапы
		СозданныеЭтапы = Новый Соответствие;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаЭтапы = Объект.Этапы.Выгрузить(СтруктураПоиска);
		
		ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы);
		
		Для каждого ЭтапЗаказа Из ТаблицаЭтапы Цикл
			
			Если ЗначениеЗаполнено(ЭтапЗаказа.Этап) Тогда
				// Чтобы скопировать реквизиты этапа, которых нет в заказе
				НовыйЭтап = ЭтапЗаказа.Этап.Скопировать();
				НовыйЭтап.ВидыРабочихЦентров.Очистить();
				НовыйЭтап.АльтернативныеВидыРабочихЦентров.Очистить();
				НовыйЭтап.ДополнительныеРеквизиты.Очистить();
			Иначе
				НовыйЭтап = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
				НовыйЭтап.Заполнить(Неопределено);
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапЗаказа);
			НовыйЭтап.Владелец = СсылкаНового;
			
			СтруктураПоискаПоЭтапу = Новый Структура("КлючСвязиЭтапы", ЭтапЗаказа.КлючСвязи);
			ТаблицаВидыРЦ = Объект.ВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
			ТаблицаВидыРЦ.Сортировать("НомерСтроки");
			Для каждого ВидРЦЗаказа Из ТаблицаВидыРЦ Цикл
				СтрокаВидРЦ = НовыйЭтап.ВидыРабочихЦентров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВидРЦ, ВидРЦЗаказа);
			КонецЦикла;
			
			ТаблицаАльтернативныеВидыРЦ = Объект.АльтернативныеВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
			ТаблицаАльтернативныеВидыРЦ.Сортировать("НомерСтроки");
			Для каждого АльтернативныйВидРЦ Из ТаблицаАльтернативныеВидыРЦ Цикл
				СтрокаАльтернативныйВидРЦ = НовыйЭтап.АльтернативныеВидыРабочихЦентров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАльтернативныйВидРЦ, АльтернативныйВидРЦ);
			КонецЦикла;
			
			НовыйЭтап.ОбменДанными.Загрузка = Истина;
			НовыйЭтап.Записать();
			
			СозданныеЭтапы.Вставить(ЭтапЗаказа.КлючСвязи, НовыйЭтап.Ссылка);
			
		КонецЦикла;
		
		// Копирование ВыходныеИзделия
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		СтруктураПоиска.Вставить("ПроизводитсяВПроцессе", Ложь);
		ТаблицаВыходныеИзделия = Объект.ВыходныеИзделия.Выгрузить(СтруктураПоиска);
		ТаблицаВыходныеИзделия.Сортировать("НомерСтроки");
		Для каждого ИзделиеЗаказа Из ТаблицаВыходныеИзделия Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ИзделиеЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИзделие = НоваяСпецификация.ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзделие, ИзделиеЗаказа);
			
			СтрокаИзделие.КоличествоУпаковок = СтрокаИзделие.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаИзделие);
			
			СтрокаИзделие.Этап = НовыйЭтап;
			СтрокаИзделие.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		// Копирование ВозвратныеОтходы
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаВозвратныеОтходы = Объект.ВозвратныеОтходы.Выгрузить(СтруктураПоиска);
		ТаблицаВозвратныеОтходы.Сортировать("НомерСтроки");
		Для каждого ОтходЗаказа Из ТаблицаВозвратныеОтходы Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ОтходЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтход = НоваяСпецификация.ВозвратныеОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтход, ОтходЗаказа);
			
			СтрокаОтход.КоличествоУпаковок = СтрокаОтход.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаОтход);
			
			СтрокаОтход.Этап = НовыйЭтап;
			СтрокаОтход.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		// Копирование МатериалыИУслуги
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаМатериалы = Объект.МатериалыИУслуги.Выгрузить(СтруктураПоиска);
		ТаблицаМатериалы.Сортировать("НомерСтроки");
		Для каждого МатериалЗаказа Из ТаблицаМатериалы Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(МатериалЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМатериал = НоваяСпецификация.МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериал, МатериалЗаказа);
			
			СтрокаМатериал.КоличествоУпаковок = СтрокаМатериал.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			Если СтрокаМатериал.ПроизводитсяВПроцессе Тогда
				СтрокаМатериал.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизвестиПоСпецификации;
			Иначе
				СтрокаМатериал.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.Обеспечивать;
			КонецЕсли;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиСАвтовыбором(СтрокаМатериал);
			
			СтрокаМатериал.Этап = НовыйЭтап;
			СтрокаМатериал.ЭтапРедактирование = НовыйЭтап;
			
		КонецЦикла;
		
		// Копирование Трудозатраты
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
		ТаблицаТрудозатраты = Объект.Трудозатраты.Выгрузить(СтруктураПоиска);
		ТаблицаТрудозатраты.Сортировать("НомерСтроки");
		Для каждого ТрудозатратыЗаказа Из ТаблицаТрудозатраты Цикл
			НовыйЭтап = СозданныеЭтапы.Получить(ТрудозатратыЗаказа.КлючСвязиЭтапы);
			Если НовыйЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТрудозатраты = НоваяСпецификация.Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТрудозатраты, ТрудозатратыЗаказа);
			
			СтрокаТрудозатраты.Количество = СтрокаТрудозатраты.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
			
			СтрокаТрудозатраты.Этап = НовыйЭтап;
			СтрокаТрудозатраты.ЭтапРедактирование = НовыйЭтап;
		КонецЦикла;
		
		НоваяСпецификация.МногоэтапныйПроизводственныйПроцесс = (СозданныеЭтапы.Количество() <> 1);
		
		НоваяСпецификация.УстановитьСсылкуНового(СсылкаНового);
		НоваяСпецификация.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ПроизводствоСервер.СобытиеСозданиеСпецификации(), 
			УровеньЖурналаРегистрации.Ошибка,,Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Новый Структура("Ссылка,Наименование", НоваяСпецификация.Ссылка, НоваяСпецификация.Наименование);

КонецФункции

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ТаблицаЗначений  - Таблица, в которой необходимо заполнить реквизиты, содержит:
// 			* НомерСтроки - Число - номер строки в коллекции
// 		Поля - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
// 		МассивСтрок - Массив - массив строк, которые нужно обработать.
//
Процедура ЗаполнитьСлужебныеРеквизитыПоСпецификации(КоллекцияДанных, Поля, МассивСтрок = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Спецификация КАК Спецификация,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Ссылка КАК Спецификация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПолуфабрикаты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПустыеСтатьиКалькуляции,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяНоменклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяХарактеристика
	|ПОМЕСТИТЬ СпецификацииСПолуфабрикатами
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
	|ГДЕ
	|	МатериалыИУслуги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика,
	|	ВыходныеИзделия.Ссылка КАК Ссылка,
	|	ВыходныеИзделия.Ссылка.Статус КАК Статус,
	|	ВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
	|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТВыходныеИзделия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	РесурсныеСпецификацииВозвратныеОтходы.Номенклатура,
	|	РесурсныеСпецификацииВозвратныеОтходы.Характеристика,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка.Статус,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная),
	|	РесурсныеСпецификацииВозвратныеОтходы.КоличествоУпаковок
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК РесурсныеСпецификацииВозвратныеОтходы
	|ГДЕ
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.НомерСтроки ЕСТЬ NULL 
	|				ИЛИ ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПобочныйВыход,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.Ссылка ЕСТЬ NULL 
	|				И ТаблицаДокумента.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВыходныеИзделия.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ТОГДА 2
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьПустыеСтатьиКалькуляции
	|			ТОГДА 4
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяНоменклатура
	|			ТОГДА 5
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяХарактеристика И &ХарактеристикиИспользуются
	|			ТОГДА 6
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодОшибки,
	|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
	|	0 КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.ДоляСтоимости ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ ВыходныеИзделия.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВыходныеИзделия.КоличествоУпаковок,0) > 0 И (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок - 0.5 КАК ЧИСЛО(15, 0))) < (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок КАК ЧИСЛО(15, 3)))
	|				И ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодПредупреждения,
	|	ЕСТЬNULL(ВыходныеИзделия.ТипСтоимости, ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается)) КАК ТипСтоимости
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыходныеИзделия КАК ВыходныеИзделия
	|		ПО ТаблицаДокумента.Спецификация = ВыходныеИзделия.Ссылка
	|			И ТаблицаДокумента.Номенклатура = ВыходныеИзделия.Номенклатура
	|			И (ТаблицаДокумента.Характеристика = ВыходныеИзделия.Характеристика
	|				ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииСПолуфабрикатами КАК СпецификацииСПолуфабрикатами
	|		ПО ТаблицаДокумента.Спецификация = СпецификацииСПолуфабрикатами.Спецификация";
	
	Если МассивСтрок = Неопределено Тогда
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	Иначе
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(МассивСтрок, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ХарактеристикиИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ОтборНомерСтроки = Новый Структура("НомерСтроки");
	
	Для Каждого Строка Из КоллекцияДанных Цикл
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		Если Выборка.НайтиСледующий(ОтборНомерСтроки) Тогда
			ЗаполнитьЗначенияСвойств(Строка, Выборка, Поля);
			Выборка.Сбросить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//-- Устарело_Производство21

// Устанавливает отбор по номенклатуре в списке спецификаций
// 
// Параметры:
// 	Список - ДинамическийСписок - список
// 	Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// 	Назначение - ПеречислениеСсылка.ИспользованиеНоменклатурыВНСИПроизводства - вариант использования
//
Процедура УстановитьОтборПоНоменклатуреВСпискеСпецификаций(Список, Номенклатура, Назначение = Неопределено) Экспорт
	
	ТекстыЗапроса = Новый Массив;
	
	// Изделие
	Если ЗначениеЗаполнено(Номенклатура)
		И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = ПредопределенноеЗначение("Перечисление.ИспользованиеНоменклатурыВНСИПроизводства.Изделие")) Тогда
		
		ТекстыЗапроса.Добавить("
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК Т
		|ГДЕ
		|	Т.Номенклатура = &Номенклатура
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК Т
		|ГДЕ
		|	Т.Номенклатура = &Номенклатура
		|");
		
	КонецЕсли;
		
	// Материал
	Если ЗначениеЗаполнено(Номенклатура)
		И (НЕ ЗначениеЗаполнено(Назначение) ИЛИ Назначение = ПредопределенноеЗначение("Перечисление.ИспользованиеНоменклатурыВНСИПроизводства.Материал")) Тогда
		
		ТекстыЗапроса.Добавить("
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК Т
		|ГДЕ
		|	Т.Номенклатура = &Номенклатура");
		
	КонецЕсли;
	
	СписокОтбора = Новый СписокЗначений;
	Использовать = (ТекстыЗапроса.Количество() > 0);
	
	Если Использовать Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, " ОБЪЕДИНИТЬ ");
		Запрос.УстановитьПараметр("Номенклатура",    Номенклатура);
		
		СписокОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
		
	ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru = 'Отбор по номенклатуре'"),
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ОтборПоНоменклатуре,
			"Ссылка",
			ВидСравненияКомпоновкиДанных.ВСписке,
			СписокОтбора,
			,
			Использовать);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РасчетНормативнойДлительности

Процедура СредняяНормаЧасовПоГрафикуРаботыПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Отказ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикРаботыИзИсточникаСобытия(Источник);
	Если ГрафикРаботы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СредняяНормаЧасов = 0;
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		МассивГрафиков = ПроизводствоСервер.МассивЗначений(ГрафикРаботы);
		СредняяНормаЧасов = СредняяНормаЧасовПоГрафикамРаботы(МассивГрафиков)[ГрафикРаботы];
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("СредняяНормаЧасовДоИзменения", СредняяНормаЧасов);
	
КонецПроцедуры

Процедура СредняяНормаЧасовПоГрафикуРаботыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СредняяНормаЧасовДоИзменения = 0;
	Если НЕ Источник.ДополнительныеСвойства.Свойство("СредняяНормаЧасовДоИзменения", СредняяНормаЧасовДоИзменения)
		ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикРаботыИзИсточникаСобытия(Источник);
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивГрафиков = ПроизводствоСервер.МассивЗначений(ГрафикРаботы);
	СредняяНормаЧасов = СредняяНормаЧасовПоГрафикамРаботы(МассивГрафиков)[ГрафикРаботы];

	Если СредняяНормаЧасовДоИзменения <> СредняяНормаЧасов Тогда
		
		РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ДобавитьЗадание(ГрафикРаботы, Истина, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает ссылку на график работы из источника события
// 
// Параметры:
// 	Источник - СправочникОбъект.Календари, КонстантаМенеджерЗначения.ОсновнойКалендарьПредприятия - календарь
// Возвращаемое значение:
// 	СправочникСсылка.Календари - график работы
//
Функция ГрафикРаботыИзИсточникаСобытия(Источник)
	
	Перем ГрафикРаботы;
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("КонстантаМенеджерЗначения.ОсновнойКалендарьПредприятия") Тогда
		
		ГрафикРаботы = Константы.ОсновнойКалендарьПредприятия.Получить(); 
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Календари") Тогда
		
		ГрафикРаботы = Источник.Ссылка;
		
	КонецЕсли;
	
	Возврат ГрафикРаботы;
	
КонецФункции

Функция СредняяНормаЧасовПоГрафикамРаботы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Календари.Ссылка                                          КАК Ссылка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Календари.Длительность) КАК ЧИСЛО(10,3)) КАК НормаЧасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ШаблонЗаполнения.Ссылка                                                          КАК Ссылка,
	|		СУММА(РАЗНОСТЬДАТ(Расписание.ВремяНачала, Расписание.ВремяОкончания, МИНУТА)/60) КАК Длительность
	|	ИЗ
	|		Справочник.Календари.ШаблонЗаполнения КАК ШаблонЗаполнения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК Расписание
	|			ПО ШаблонЗаполнения.Ссылка = Расписание.Ссылка
	|				И ШаблонЗаполнения.НомерСтроки = Расписание.НомерДня
	|	ГДЕ
	|		ШаблонЗаполнения.Ссылка В (&ГрафикиРаботы)
	|		И ШаблонЗаполнения.ДеньВключенВГрафик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШаблонЗаполнения.Ссылка,
	|		ШаблонЗаполнения.НомерСтроки) КАК Календари
	|
	|СГРУППИРОВАТЬ ПО
	|	Календари.Ссылка");
	
	Запрос.УстановитьПараметр("ГрафикиРаботы", МассивСсылок);
	
	СредняяНормаЧасов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СредняяНормаЧасов.Вставить(Выборка.Ссылка, Выборка.НормаЧасов);
	КонецЦикла;
	Для каждого Ссылка Из МассивСсылок Цикл
		Если Не ЗначениеЗаполнено(СредняяНормаЧасов[Ссылка]) Тогда
			СредняяНормаЧасов[Ссылка] = 24.000;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СредняяНормаЧасов;
	
КонецФункции

Функция СвернутаяСредняяНормаЧасовПоГрафикамРаботы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Календари.Длительность) КАК ЧИСЛО(10,3)) КАК НормаЧасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РАЗНОСТЬДАТ(Расписание.ВремяНачала, Расписание.ВремяОкончания, МИНУТА)/60) КАК Длительность
	|	ИЗ
	|		Справочник.Календари.ШаблонЗаполнения КАК ШаблонЗаполнения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК Расписание
	|			ПО ШаблонЗаполнения.Ссылка = Расписание.Ссылка
	|				И ШаблонЗаполнения.НомерСтроки = Расписание.НомерДня
	|	ГДЕ
	|		ШаблонЗаполнения.Ссылка В (&ГрафикиРаботы)
	|		И ШаблонЗаполнения.ДеньВключенВГрафик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШаблонЗаполнения.НомерСтроки) КАК Календари");
	
	Запрос.УстановитьПараметр("ГрафикиРаботы", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.НормаЧасов) Тогда
		Результат = Выборка.НормаЧасов;
	Иначе
		Результат = 24.000;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область ДанныеУпаковки

Процедура ЗаполнитьДанныеУпаковокВНабореДанных(НаборДанных, ТаблицаДанныхУпаковок) Экспорт
	
	Если НаборДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска              = Новый Структура("Номенклатура,Упаковка");
	СтруктураУпаковкиПоУмолчанию = УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки();
	
	Для каждого Строка Из НаборДанных Цикл
		Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
			ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(Строка, ТаблицаДанныхУпаковок, СтруктураПоиска);
		Иначе
			Строка.ДанныеУпаковки = СтруктураУпаковкиПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУпаковокВСтрокеНабораДанных(Строка, ТаблицаДанныхУпаковок, СтруктураПоиска = Неопределено) Экспорт
	
	РеквизитыПоиска = "Номенклатура,Упаковка";
	
	Если ТаблицаДанныхУпаковок.Индексы.Количество() = 0 Тогда
		ТаблицаДанныхУпаковок.Индексы.Добавить(РеквизитыПоиска);
	КонецЕсли;
	
	Если СтруктураПоиска = Неопределено Тогда
		СтруктураПоиска = Новый Структура(РеквизитыПоиска, Строка.Номенклатура, Строка.Упаковка);
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
	КонецЕсли;
	
	СтрокаТаблицы = Неопределено;
	
	НайденныеСтроки = ТаблицаДанныхУпаковок.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаТаблицы = НайденныеСтроки[0];
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДанныеУпаковки) Тогда
		
			Строка.ДанныеУпаковки = СтрокаТаблицы.ДанныеУпаковки;
			Возврат;
			
		КонецЕсли;
		
		СтрокаТаблицы.ДанныеУпаковки = СтруктураДанныхУпаковки(НайденныеСтроки[0]);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы) И ЗначениеЗаполнено(СтрокаТаблицы.ДанныеУпаковки) Тогда
		Строка.ДанныеУпаковки = СтрокаТаблицы.ДанныеУпаковки;
	Иначе
		Строка.ДанныеУпаковки = УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки();
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеТаблицыТекстаЗапросаДанныеУпаковок() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИмяТаблицы",           "");
	Результат.Вставить("ТекстСоединения",      "");
	Результат.Вставить("ИсточникНоменклатуры", "");
	Результат.Вставить("ИсточникУпаковки",     "");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаДанныеУпаковок(ОписанияТаблиц) Экспорт
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Упаковка     КАК Упаковка,
	|
	|	&ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения,
	|
	|	НЕОПРЕДЕЛЕНО   КАК ДанныеУпаковки
	|
	|ИЗ
	|	&ИмяТаблицы КАК Т
	|
	|		,ТекстСоединения
	|
	|ГДЕ
	|	Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|
	|";
	
	ТекстЗапроса = "";
	Для Индекс = 0 По ОписанияТаблиц.ВГраница() Цикл
		
		ОписаниеТаблицы = ОписанияТаблиц[Индекс];
		Если ТипЗнч(ОписаниеТаблицы) = Тип("Строка") Тогда
			ОписаниеТаблицы = ОписаниеТаблицыТекстаЗапросаДанныеУпаковок();
			ОписаниеТаблицы.ИмяТаблицы = ОписанияТаблиц[Индекс];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса + СтрШаблон("
				| %1
				|", "ОБЪЕДИНИТЬ"+?(Индекс = ОписанияТаблиц.ВГраница(),"", " ВСЕ"));
			
		КонецЕсли;
		
		ТекстЗапросаПоШаблону = СтрЗаменить(ШаблонЗапроса,         "&ИмяТаблицы",      ОписаниеТаблицы.ИмяТаблицы);
		ТекстЗапросаПоШаблону = СтрЗаменить(ТекстЗапросаПоШаблону, ",ТекстСоединения", ОписаниеТаблицы.ТекстСоединения);
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоШаблону;
		
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ИсточникНоменклатуры) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Т.Номенклатура", ОписаниеТаблицы.ИсточникНоменклатуры);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ИсточникУпаковки) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Т.Упаковка", ОписаниеТаблицы.ИсточникУпаковки);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения",
		ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения("Т.Упаковка", "Т.Номенклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРеквизитыУпаковкиЕдиницыИзмерения(ИсточникУпаковки, ИсточникНоменклатуры) Экспорт
	
	ТекстЗапроса = "
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины          КАК ЕдиницаИзмеренияТипИзмеряемойВеличины,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Числитель, 0)         КАК ЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Знаменатель, 0)       КАК ЕдиницаИзмеренияЗнаменатель,
	|
	|	ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины                               КАК УпаковкаТипИзмеряемойВеличины,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Числитель,0)                               КАК УпаковкаЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель,0)                             КАК УпаковкаЗнаменатель,
	|
	|	ТаблицаТовары.Номенклатура.ВесИспользовать                                 КАК ВесИспользовать,
	|	ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения                             КАК ВесЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель,0)                        КАК ВесЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель,0)                      КАК ВесЗнаменатель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель,0)       КАК ВесЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель,0)     КАК ВесЕдиницаИзмеренияЗнаменатель,
	|
	|	ТаблицаТовары.Номенклатура.ОбъемИспользовать                               КАК ОбъемИспользовать,
	|	ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения                           КАК ОбъемЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель,0)                      КАК ОбъемЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель,0)                    КАК ОбъемЗнаменатель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель,0)     КАК ОбъемЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель,0)   КАК ОбъемЕдиницаИзмеренияЗнаменатель,
	|
	|	ТаблицаТовары.Номенклатура.ПлощадьИспользовать                             КАК ПлощадьИспользовать,
	|	ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения                         КАК ПлощадьЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель,0)                    КАК ПлощадьЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель,0)                  КАК ПлощадьЗнаменатель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель,0)   КАК ПлощадьЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель,0) КАК ПлощадьЕдиницаИзмеренияЗнаменатель,
	|
	|	ТаблицаТовары.Номенклатура.ДлинаИспользовать                               КАК ДлинаИспользовать,
	|	ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения                           КАК ДлинаЕдиницаИзмерения,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель,0)                      КАК ДлинаЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель,0)                    КАК ДлинаЗнаменатель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель,0)     КАК ДлинаЕдиницаИзмеренияЧислитель,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель,0)   КАК ДлинаЕдиницаИзмеренияЗнаменатель
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка",     ИсточникУпаковки);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтруктураДанныхУпаковки(РеквизитыУпаковки)
	
	Числитель = 0;
	Знаменатель = 0;
	
	Если РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес Тогда
		
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель
								* РеквизитыУпаковки.ВесЕдиницаИзмеренияЗнаменатель
								* РеквизитыУпаковки.ВесЗнаменатель;
				
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель
								* РеквизитыУпаковки.ВесЕдиницаИзмеренияЧислитель
								* РеквизитыУпаковки.ВесЧислитель;
		
	ИначеЕсли РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем Тогда
		
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель
								* РеквизитыУпаковки.ОбъемЕдиницаИзмеренияЗнаменатель
								* РеквизитыУпаковки.ОбъемЗнаменатель;
				
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель
								* РеквизитыУпаковки.ОбъемЕдиницаИзмеренияЧислитель
								* РеквизитыУпаковки.ОбъемЧислитель;
		
	ИначеЕсли РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Площадь Тогда
		
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель
								* РеквизитыУпаковки.ПлощадьЕдиницаИзмеренияЗнаменатель
								* РеквизитыУпаковки.ПлощадьЗнаменатель;
				
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель
								* РеквизитыУпаковки.ПлощадьЕдиницаИзмеренияЧислитель
								* РеквизитыУпаковки.ПлощадьЧислитель;
		
	ИначеЕсли РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Длина Тогда
		
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель
								* РеквизитыУпаковки.ДлинаЕдиницаИзмеренияЗнаменатель
								* РеквизитыУпаковки.ДлинаЗнаменатель;
				
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель
								* РеквизитыУпаковки.ДлинаЕдиницаИзмеренияЧислитель
								* РеквизитыУпаковки.ДлинаЧислитель;
		
	ИначеЕсли (РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Мощность
		ИЛИ РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Энергия
		ИЛИ РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд
		ИЛИ РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Время)
		И РеквизитыУпаковки.ЕдиницаИзмеренияТипИзмеряемойВеличины = РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины Тогда
			
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель * РеквизитыУпаковки.ЕдиницаИзмеренияЗнаменатель;
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель * РеквизитыУпаковки.ЕдиницаИзмеренияЧислитель;
			
	ИначеЕсли РеквизитыУпаковки.УпаковкаТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
	
		Числитель = РеквизитыУпаковки.УпаковкаЧислитель;
		Знаменатель = РеквизитыУпаковки.УпаковкаЗнаменатель;
		
	КонецЕсли;
	
	Возврат УправлениеДаннымиОбИзделияхПовтИсп.СтруктураДанныхУпаковки(Числитель, Знаменатель);
	
КонецФункции

#КонецОбласти

#Область Прочее


Функция ИспользоватьПолуфабрикатыПроизводимыеНаЭтапе(Объект = Неопределено) Экспорт
	
	Результат = Ложь;
	
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьКлючиСвязиОбъекта(Объект, ТолькоЗаполненные = Ложь) Экспорт
	
	ОсновныеТабличныеЧасти  = Новый Массив;
	ОсновныеТабличныеЧасти.Добавить("ВыходныеИзделия");
	ОсновныеТабличныеЧасти.Добавить("ВозвратныеОтходы");
	ОсновныеТабличныеЧасти.Добавить("МатериалыИУслуги");
	ОсновныеТабличныеЧасти.Добавить("Трудозатраты");
	
	ЗависимыеТабличныеЧасти = Новый Массив;
	
	СоответствиеКлючей = Новый Соответствие();
	
	Для каждого ИмяТЧ из ОсновныеТабличныеЧасти Цикл
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяТЧ) Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Строка Из Объект[ИмяТЧ] Цикл
			Если ТолькоЗаполненные И НЕ ЗначениеЗаполнено(Строка.КлючСвязи) Тогда
				Продолжить;
			КонецЕсли;
			НовыйКлючСвязи = Новый УникальныйИдентификатор();
			СоответствиеКлючей.Вставить(Строка.КлючСвязи, НовыйКлючСвязи);
			Строка.КлючСвязи = НовыйКлючСвязи;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ИмяТЧ из ЗависимыеТабличныеЧасти Цикл
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяТЧ) Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Строка Из Объект[ИмяТЧ] Цикл
			НовыйКлючСвязи = СоответствиеКлючей.Получить(Строка.КлючСвязи);
			Если НовыйКлючСвязи <> Неопределено Тогда
				Строка.КлючСвязи = НовыйКлючСвязи;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ШтучноеИзделие(Номенклатура) Экспорт
	
	Возврат ( ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения.ТипИзмеряемойВеличины") = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук );
	
КонецФункции

Процедура ЗаполнитьКоэффициентПересчетаВОсновноеИзделие(ЗаказываемоеИзделие, ОсновноеИзделие) Экспорт
	
	Если НЕ ЗаказываемоеИзделие.ЭтоОсновноеИзделие
		И НЕ ЗаказываемоеИзделие.ДанныеУпаковки.Знаменатель = 0
		И НЕ ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска = 0
		И НЕ ОсновноеИзделие.ДанныеУпаковки.Числитель = 0 Тогда
		
		ЗаказываемоеИзделие.КоэффициентПересчетаВОсновноеИзделие = 
			(ЗаказываемоеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
				* ЗаказываемоеИзделие.ДанныеУпаковки.Числитель * ОсновноеИзделие.ДанныеУпаковки.Знаменатель)
				/
			(ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска
				* ЗаказываемоеИзделие.ДанныеУпаковки.Знаменатель * ОсновноеИзделие.ДанныеУпаковки.Числитель);
			
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствие полуфабриката и спецификации, которая назначена для его производства.
//
// Параметры:
//  Объект                  - СправочникОбъект.РесурсныеСпецификации,
//                              ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа,
//                              ДокументСсылка.ЗаказНаПроизводство - объект, связанный с проверкой
//  КоллекцияПолуфабрикатов - Массив - коллекция строк, содержащая данные о полуфабрикатах
//  КоллекцияЭтапов         - Массив - коллекция строк, содержащая данные о последовательности этапов
// Возвращаемое значение:
//   - Структура - Структура параметров проверки заполнения внутренних полуфабрикатов
//                  в ресурсной спецификации и спецификации заказа на производство.
//
Функция ПолучитьПараметрыПроверкиВнутреннихПолуфабрикатов(Объект, Знач КоллекцияПолуфабрикатов = Неопределено, Знач КоллекцияЭтапов = Неопределено) Экспорт
	
	ПараметрыПроверкиВнутреннихПолуфабрикатов = Новый Структура("
		|СтруктураПоиска,
		|ТаблицаПолуфабрикатов,
		//++ Устарело_Производство21
		|Режим,
		|ТаблицаЭтапов,
		//-- Устарело_Производство21
		|ПредставлениеТаблицыПолуфабрикатов");
	
	//++ Устарело_Производство21
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.РесурсныеСпецификации") Тогда
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация";
		
	//-- Устарело_Производство21
		
		// структура поиска в таблице полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска = Новый Структура("
			|ИсточникПолученияПолуфабриката,
			|Номенклатура,
			|Характеристика");
			
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Т.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства)      КАК ИсточникПолученияПолуфабриката,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура)                 КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)         КАК Упаковка,
		|	Т.КоличествоУпаковок                                                 КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(Т.АлгоритмРасчетаКоличества КАК СТРОКА(100)) <> """"        КАК РасчетПоФормуле
		|ПОМЕСТИТЬ
		|	ВтТаблицаПолуфабрикатов
		|ИЗ
		|	&ТаблицаПолуфабрикатов КАК Т
		|ГДЕ
		|	Т.ОбработатьПоСпецификации = ЛОЖЬ
		|;
		|
		|ВЫБРАТЬ
		|	Т.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	Т.Номенклатура                   КАК Номенклатура,
		|	Т.Характеристика                 КАК Характеристика,
		|	СУММА(ВЫБОР КОГДА Т.РасчетПоФормуле
		|			ТОГДА -1
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(Т.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3))
		|	КОНЕЦ)                           КАК Количество
		|ИЗ
		|	ВтТаблицаПолуфабрикатов КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.ИсточникПолученияПолуфабриката,
		|	Т.Номенклатура,
		|	Т.Характеристика,
		|	Т.РасчетПоФормуле
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Т.Упаковка", "Т.Номенклатура"));
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТаблицаПолуфабрикатов", КоллекцияПолуфабрикатов);
		
		ТаблицаПолуфабрикатов = Запрос.Выполнить().Выгрузить();
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|ИсточникПолученияПолуфабриката, 
			|Номенклатура, 
			|Характеристика");
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru = 'Побочный и промежуточный выпуск'");
		
	//++ Устарело_Производство21
	Иначе
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа";
		
		// структура поиска в таблице полуфабрикатов
		
		СтруктураПоиска = Новый Структура("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура,
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Вставить("СтруктураПоиска", СтруктураПоиска);
		
		// таблица полуфабрикатов
		
		ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиМатериалыИУслугиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
		
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
			
		Для Каждого ЭлементКоллекции Из КоллекцияПолуфабрикатов Цикл
			
			НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.КлючСвязиМатериалыИУслугиСтрока = Строка(ЭлементКоллекции.КлючСвязиМатериалыИУслуги);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			
		КонецЦикла;
		
		ТаблицаПолуфабрикатов.Свернуть("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика", 
			"Количество");
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// таблица полуфабрикатов
	
		ТаблицаЭтапов = Новый ТаблицаЗначений;
		ТаблицаЭтапов.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаЭтапов.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЭтапов.Колонки.Добавить("НаименованиеЭтапа", Новый ОписаниеТипов("Строка"));
		ТаблицаЭтапов.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
		
		Если КоллекцияЭтапов = Неопределено Тогда
			КоллекцияЭтапов = Объект.Этапы;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из КоллекцияЭтапов Цикл
			
			НоваяСтрока = ТаблицаЭтапов.Добавить();
			
			НоваяСтрока.КлючСвязиСтрока       = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.НомерЭтапа            = ЭлементКоллекции.НомерЭтапа;
			НоваяСтрока.НаименованиеЭтапа     = ЭлементКоллекции.НаименованиеЭтапа;
			НоваяСтрока.ПроизводствоНаСтороне = ЭлементКоллекции.ПроизводствоНаСтороне;
			
		КонецЦикла;
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов = ТаблицаЭтапов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru = 'Побочный и промежуточный выпуск'");
		
	КонецЕсли;
	//-- Устарело_Производство21
	
	Возврат ПараметрыПроверкиВнутреннихПолуфабрикатов;
	
КонецФункции

Функция ПотребностьВоВнутреннихПолуфабрикатах(ПараметрыПроверкиВнутреннихПолуфабрикатов, МассивСтрок)
	
	ТаблицаПотребностиВПолуфабрикатах = Новый ТаблицаЗначений;
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("ИсточникПолученияПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	
	//++ Устарело_Производство21
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
	//-- Устарело_Производство21
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		
	//++ Устарело_Производство21
	Иначе
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапВыпускаСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		
	КонецЕсли;
	//-- Устарело_Производство21
	
	Для Каждого ЭлементКоллекции Из МассивСтрок Цикл
		
		НоваяСтрока = ТаблицаПотребностиВПолуфабрикатах.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		
		//++ Устарело_Производство21
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
		//-- Устарело_Производство21
			
			НоваяСтрока.Этап = ЭлементКоллекции.ЭтапРедактирование;
			
		//++ Устарело_Производство21
		Иначе
			
			НоваяСтрока.КлючСвязиСтрока = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			НоваяСтрока.КлючСвязиЭтапВыпускаСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапВыпуска);
			
		КонецЕсли;
		//-- Устарело_Производство21
		
	КонецЦикла;
	
	Возврат ТаблицаПотребностиВПолуфабрикатах;
	
КонецФункции

Функция ТекстЗапросаПроверкиВнутреннихПолуфабрикатов(ПараметрыПроверкиВнутреннихПолуфабрикатов)
	
	//++ Устарело_Производство21
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
	//-- Устарело_Производство21
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Этап КАК Справочник.ЭтапыПроизводства) КАК Этап,
		|	ВЫРАЗИТЬ(Т.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства) КАК ИсточникПолученияПолуфабриката,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.КоличествоУпаковок                                         КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.НомерЭтапа >= ВЫБОР
		|			КОГДА Т.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|				ТОГДА 1
		|			ИНАЧЕ Т.Этап.НомерЭтапа
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.ПроизводствоНаСтороне
		|	И НЕ &ИспользуетсяПроизводство22
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	Т.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
		|	ВЫРАЗИТЬ(Т.КоличествоУпаковок * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК ЧИСЛО(15,3)) КАК Количество,
		|	Т.Номенклатура.Представление КАК НоменклатураПредставление,
		|	Т.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	Т.ИсточникПолученияПолуфабриката.Представление КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА Т.Упаковка.Представление
		|		ИНАЧЕ Т.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	НЕ Т.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Т.Упаковка",
			"Т.Номенклатура"));
		
	//++ Устарело_Производство21
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	Т.КлючСвязиЭтапыСтрока КАК КлючСвязиЭтапыСтрока,
		|	Т.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапВыпускаСтрока,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.Количество КАК Количество
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтаповЗаказа.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	ТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ТаблицаЭтаповЗаказа.НомерЭтапа КАК НомерЭтапа
		|ПОМЕСТИТЬ ВТТаблицаЭтаповЗаказа
		|ИЗ
		|	&ТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПотребностиВПолуфабрикатах.НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ПотребностиВПолуфабрикатах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповПотребления
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапыСтрока = ТаблицаЭтаповПотребления.КлючСвязиСтрока
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповВыпуска
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповВыпуска.КлючСвязиСтрока
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаЭтаповВыпуска.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповПотребления.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповВыпуска.НомерЭтапа >= ТаблицаЭтаповПотребления.НомерЭтапа
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки,
		|	ТПотребностиВПолуфабрикатах.Номенклатура КАК Номенклатура,
		|	ТПотребностиВПолуфабрикатах.Характеристика КАК Характеристика,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапыСтрока,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиСтрока КАК КлючСвязиМатериалыИУслугиСтрока,
		|	ТПотребностиВПолуфабрикатах.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	ТПотребностиВПолуфабрикатах.Количество КАК Количество,
		|	ТПотребностиВПолуфабрикатах.Номенклатура.Представление КАК НоменклатураПредставление,
		|	ТПотребностиВПолуфабрикатах.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	ТТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТПотребностиВПолуфабрикатах.Упаковка.Представление
		|		ИНАЧЕ ТПотребностиВПолуфабрикатах.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	НЕ ТПотребностиВПолуфабрикатах.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТПотребностиВПолуфабрикатах.Упаковка",
			"ТПотребностиВПолуфабрикатах.Номенклатура"));
		
	КонецЕсли;
	//-- Устарело_Производство21
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОтборНоменклатурыПоСвойствам(ИмяТаблицыНастроек) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Идентификатор         КАК Идентификатор,
	|	ВложенныйЗапрос.КлючСвязи             КАК КлючСвязи,
	|	МИНИМУМ(ВложенныйЗапрос.Используется) КАК Используется
	|ПОМЕСТИТЬ ВТОтборПоСвойствам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТОтборПоСвойствамНастройки.Идентификатор  КАК Идентификатор,
	|		ВТОтборПоСвойствамНастройки.КлючСвязи      КАК КлючСвязи,
	|		ВЫБОР ВТОтборПоСвойствамНастройки.Условие
	|			КОГДА ""Равно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства = ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""НеРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <> ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Больше""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства > ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""БольшеИлиРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства >= ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Меньше""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства < ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""МеньшеИлиРавно""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <= ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""ВСписке""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства В
	|						(&ТекстОтбораВСписке)
	|			КОГДА ""НеВСписке""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства <> ВТОтборПоСвойствамНастройки.ЗначениеОтбор
	|			КОГДА ""Заполнено""
	|				ТОГДА НЕ ВТОтборПоСвойствамНастройки.ЗначениеСвойства В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)
	|			КОГДА ""НеЗаполнено""
	|				ТОГДА ВТОтборПоСвойствамНастройки.ЗначениеСвойства В (НЕОПРЕДЕЛЕНО, ЛОЖЬ, 0)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Используется
	|	ИЗ
	|		&ВТОтборПоСвойствамНастройки КАК ВТОтборПоСвойствамНастройки) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Идентификатор,
	|	ВложенныйЗапрос.КлючСвязи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	КлючСвязи";
	
	ТекстОтбораВСписке = "
	|						ВЫБРАТЬ
	|							Т.ЗначениеОтбор КАК ЗначениеОтбор
	|						ИЗ
	|							&ВТОтборПоСвойствамНастройки КАК Т
	|						ГДЕ
	|							Т.Условие           = ""ВСписке""
	|							И Т.Свойство        = ВТОтборПоСвойствамНастройки.Свойство
	|							И Т.Идентификатор   = ВТОтборПоСвойствамНастройки.Идентификатор
	|							И Т.КлючСвязи       = ВТОтборПоСвойствамНастройки.КлючСвязи";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтбораВСписке",          ТекстОтбораВСписке);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТОтборПоСвойствамНастройки", ИмяТаблицыНастроек);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти