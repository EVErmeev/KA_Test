////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции редактора производственного процесса
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЭтапПроизводства

// Устанавливает доступность элементов этапа по статусу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	ДоступностьРеквизитов - Булево
// 	СпецификацияЗакрыта - Булево
// 	ПрефиксЭлементов - Строка
Процедура УстановитьДоступностьЭлементовЭтапаПоСтатусу(Форма, ДоступностьРеквизитов, СпецификацияЗакрыта, ПрефиксЭлементов = "") Экспорт
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("НомерЭтапа");
	МассивЭлементов.Добавить("НомерСледующегоЭтапа");
	МассивЭлементов.Добавить("Подразделение");
	МассивЭлементов.Добавить("СпособПроизводства");
	МассивЭлементов.Добавить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий");
	МассивЭлементов.Добавить("ПланироватьРаботуВидовРабочихЦентров");
	МассивЭлементов.Добавить("ВидыРабочихЦентров");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("УслугиПереработчика");
	МассивЭлементов.Добавить("ГрафикРаботыПартнера");
	МассивЭлементов.Добавить("ПорядокРаботыВидовРабочихЦентров");
	
	Для каждого ИмяЭлемента Из МассивЭлементов Цикл
		Форма.Элементы[СоответствиеЭлементов[ИмяЭлемента]].ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	КонецЦикла;
	
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ЗаполнитьВидыРабочихЦентров");
	МассивЭлементов.Добавить("ВидыРабочихЦентровДобавитьАльтернативный");
	
	Для каждого ИмяЭлемента Из МассивЭлементов Цикл
		Форма.Элементы[СоответствиеЭлементов[ИмяЭлемента]].Доступность = ДоступностьРеквизитов;
	КонецЦикла;
	
	// Если спецификация закрыта то сделаем недоступными остальные реквизиты
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ПредварительныйБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
	МассивЭлементов.Добавить("ЗавершающийБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	МассивЭлементов.Добавить("ДлительностьЭтапа");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
	МассивЭлементов.Добавить("Непрерывный");
	
	Для каждого ИмяЭлемента Из МассивЭлементов Цикл
		Форма.Элементы[СоответствиеЭлементов[ИмяЭлемента]].ТолькоПросмотр = СпецификацияЗакрыта;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет единицу измерения буфера в списке
//
// Параметры:
//  ИнтервалПланирования - ПеречислениеСсылка.ТочностьГрафикаПроизводства	 - интервал планирования
//  СписокВыбора		 - СписокЗначений									 - Список для заполнения.
//
Процедура ЗаполнитьВыборЕдиницыИзмеренияБуфера(ИнтервалПланирования, СписокВыбора) Экспорт

	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ЕдиницыИзмеренияВремени.День);
	
КонецПроцедуры

// Производит проверку единицы измерения буферов
// 
// Параметры:
// 	Объект - СправочникОбъект.ЭтапыПроизводства
// 	Форма - ФормаКлиентскогоПриложения
// 	ЗаменитьЗначения - Булево
// 	ПрефиксЭлементов - Строка
Процедура ПроверитьВыборЕдиницыИзмеренияБуферов(Объект, Форма, ЗаменитьЗначения, ПрефиксЭлементов = "") Экспорт
	
	Элементы = Форма.Элементы;
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	// Предварительный буфер
	СписокВыбора = Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияПредварительногоБуфера].СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(Объект.ЕдиницаИзмеренияПредварительногоБуфера) = Неопределено 
		И ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияПредварительногоБуфера) Тогда
		
		Если ЗаменитьЗначения Тогда
			
			Объект.ПредварительныйБуфер = 0;
			Объект.ЕдиницаИзмеренияПредварительногоБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ПутьКДанным = СтрРазделить(Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияПредварительногоБуфера].ПутьКДанным, ".");
			
			ТекстСообщения = НСтр("ru = 'Указана некорректная единица измерения предварительного буфера.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						ПутьКДанным[1],
						ПутьКДанным[0]);
		КонецЕсли; 
		
	КонецЕсли; 

	// Завершающий буфер
	СписокВыбора = Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияЗавершающегоБуфера].СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(Объект.ЕдиницаИзмеренияЗавершающегоБуфера) = Неопределено
		И ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияЗавершающегоБуфера) Тогда
		
		Если ЗаменитьЗначения Тогда
			
			Объект.ЗавершающийБуфер = 0;
			Объект.ЕдиницаИзмеренияЗавершающегоБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ПутьКДанным = СтрРазделить(Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияЗавершающегоБуфера].ПутьКДанным, ".");
			
			ТекстСообщения = НСтр("ru = 'Указана некорректная единица измерения завершающего буфера.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						ПутьКДанным[1],
						ПутьКДанным[0]);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


#Область ПроверкаЗаполнения

// Конструктор таблицы для проверки последовательности элементов производственного процесса
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Ссылка - СправочникСсылка.ЭтапыПроизводства,СправочникСсылка.ТехнологическиеОперации
// * Наименование - Строка
// * Номер - Число
// * НомерСледующего - Число
Функция ТаблицаПроверкиПорядкаЭлементовПроизводственногоПроцессаКонструктор() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	МассивТиповСсылки = Новый Массив;
	МассивТиповСсылки.Добавить(Тип("СправочникСсылка.ЭтапыПроизводства"));
	
	МассивТиповОбъекта = Новый Массив;
	МассивТиповОбъекта.Добавить(Тип("СправочникОбъект.ЭтапыПроизводства"));
	
	Результат.Колонки.Добавить("Объект",                     Новый ОписаниеТипов(МассивТиповОбъекта));
	Результат.Колонки.Добавить("Представление",              Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	
	Результат.Колонки.Добавить("Операция",                   Новый ОписаниеТипов(МассивТиповСсылки));
	Результат.Колонки.Добавить("НомерОперации",              Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("НомерСледующейОперации",     Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("НетСледующейОперации",       Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПолеНомерСледующейОперации", Новый ОписаниеТипов("Строка"));
	
	
	Возврат Результат;
	
КонецФункции

// Производит проверку порядка элементов производственного процесса
// 
// Параметры:
//	ТаблицаЭлементов - см. ТаблицаПроверкиПорядкаЭлементовПроизводственногоПроцессаКонструктор
//	СтруктураПроверок - Структура
// 	Отказ - Булево
// 	Сообщения - Массив - массив для сбора сообщений
// 	ВладелецОбъект - СправочникОбъект.ЭтапыПроизводства
//
Процедура ПроверитьПорядокЭлементовПроизводственногоПроцесса(ТаблицаЭлементов, СтруктураПроверок, Отказ, Сообщения = Неопределено, ВладелецОбъект = Неопределено) Экспорт
	
	Если ТаблицаЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НомерОперации");
	
	ТаблицаЭлементов.ЗаполнитьЗначения("Номер следующего", "ПолеНомерСледующейОперации");
	ТаблицаЭлементов.Индексы.Добавить("НомерОперации");
	
	Для Индекс = 0 По ТаблицаЭлементов.Количество() - 1 Цикл
		
		ТекущаяСтрока = ТаблицаЭлементов[Индекс];
		
		СтруктураПоиска.НомерОперации = ТекущаяСтрока.НомерСледующейОперации;
		СледующиеОперации = ТаблицаЭлементов.НайтиСтроки(СтруктураПоиска);
		
		Если НЕ ЗначениеЗаполнено(СледующиеОперации) И ТекущаяСтрока.НомерСледующейОперации <> 0 Тогда
			ТекущаяСтрока.НетСледующейОперации = Истина;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Если НЕ ПоследовательностьСпискаОперацийПравильная(ТаблицаЭлементов, СтруктураПроверок) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	КлючДанных = Неопределено;
	Если ВладелецОбъект <> Неопределено Тогда
		КлючДанных = ?(ВладелецОбъект.ЭтоНовый(), ВладелецОбъект.ПолучитьСсылкуНового(), ВладелецОбъект.Ссылка);
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(Сообщения, КлючДанных);
	
КонецПроцедуры

// Проверяет последовательность этапов спецификации или операций маршрутных карт
//
// Параметры:
//  ВладелецОпераций	 - СправочникСсылка	 - ссылка на владельца операций
//  СтруктураПараметров	 - Структура		 - обязательные поля: 
//  											ИмяСправочникаОпераций, ПолеНомерОперации, ПолеНомерСледующейОперации
//  СтруктураПроверок	 - Структура		 - состав проверок и тексты сообщений об ошибках
//  Отказ				 - Булево			 - признак отмены текущего действия.
// 
// Возвращаемое значение:
//  Булево - истина, если последовательность операций правильная.
//
Функция ПоследовательностьОперацийПравильная(ВладелецОпераций, СтруктураПараметров, СтруктураПроверок, Отказ = Ложь) Экспорт
	
	ИмяСправочникаОпераций     = СтруктураПараметров.ИмяСправочникаОпераций;
	ПолеНомерОперации          = СтруктураПараметров.ПолеНомерОперации;
	ПолеНомерСледующейОперации = СтруктураПараметров.ПолеНомерСледующейОперации;
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|	СпрОперации.Ссылка КАК Операция,
	|	СпрОперации.Представление КАК Представление,
	|	
	|	&КорректностьПоследовательностиКонтрольныхОпераций,
	|	
	|	СпрОперации." + ПолеНомерОперации + " КАК НомерОперации,
	|	СпрОперации." + ПолеНомерСледующейОперации + " КАК НомерСледующейОперации,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА СпрСледующиеОперации.Ссылка ЕСТЬ NULL 
	|				И СпрОперации." + ПолеНомерСледующейОперации + " <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК НетСледующейОперации
	|
	|ИЗ
	|	Справочник." + ИмяСправочникаОпераций + " КАК СпрОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочникаОпераций + " КАК СпрСледующиеОперации
	|		ПО СпрОперации." + ПолеНомерСледующейОперации + " = СпрСледующиеОперации." + ПолеНомерОперации + "
	|			И (СпрСледующиеОперации.Владелец = &Владелец)
	|			И (НЕ СпрСледующиеОперации.ПометкаУдаления)
	|ГДЕ
	|	СпрОперации.Владелец = &Владелец
	|	И НЕ СпрОперации.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрОперации.Ссылка,
	|	СпрОперации.Представление,
	|	СпрОперации." + ПолеНомерОперации + ",
	|	СпрОперации." + ПолеНомерСледующейОперации;
	
	ТекстКонтрольныеОперации = "";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КорректностьПоследовательностиКонтрольныхОпераций," , ТекстКонтрольныеОперации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", ВладелецОпераций);
	
	СписокОпераций = Запрос.Выполнить().Выгрузить();
	
	СписокОпераций.Колонки.Добавить("ПолеНомерСледующейОперации", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки));
	СписокОпераций.ЗаполнитьЗначения(ПолеНомерСледующейОперации, "ПолеНомерСледующейОперации");
	
	ЕстьОшибки = НЕ ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураПроверок, ВладелецОпераций);
	
	Отказ = Отказ ИЛИ ЕстьОшибки;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Проверяет заданный список операций/этапов на корректность по следующим критериям:
// - имеется первая операция и она одна;
// - имеется последняя операция;
// - имеются все последующие операции.
//
// Параметры:
//	СписокОпераций - ТаблицаЗначений - операции/этапы для проверки, колонки:
//		* Операция - СправочникСсылка - ссылка на этап/операцию.
//		* Представление - Строка - представление этапа/операции.
//		* НомерОперации - Число - номер операции.
//		* НомерСледующейОперации - Число - номер следующей операции.
//		* НетСледующейОперации - Булево - флаг того, что в списке отсутствует операция,
//			номер которой указан в качестве номера следующей операции.
//		* ПолеНомерСледующейОперации - Строка - наименование реквизита формы, с которым необходимо
//			связать сообщение об отсутствии следующей операции.
//  СтруктураПроверок - Структура - состав проверок и тексты сообщений об ошибках
//  ВладелецОпераций - СправочникСсылка - ссылка на владельца операций.
//
// Возвращаемое значение:
//   Булево   - истина, если последовательность операций правильная.
//
Функция ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураПроверок, ВладелецОпераций = Неопределено) Экспорт
	
	ЕстьОшибки = Ложь;
	
	#Область НетПервойОперации_НесколькоПервыхОпераций
	
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НомерОперации", 1));
	Если СтруктураПроверок.Свойство("НетПервойОперации")
		И СписокСтрок.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НетПервойОперации,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	ИначеЕсли СтруктураПроверок.Свойство("НесколькоПервыхОпераций")
		И СписокСтрок.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НесколькоПервыхОпераций,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НетПоследнейОперации_НесколькоПоследнихОпераций
	
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НомерСледующейОперации", 0));
	Если СтруктураПроверок.Свойство("НетПоследнейОперации")
		И СписокСтрок.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НетПоследнейОперации,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	ИначеЕсли СтруктураПроверок.Свойство("НесколькоПоследнихОпераций")
		И СписокСтрок.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НесколькоПоследнихОпераций,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки); 
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НетСледующейОперации
	
	Если СтруктураПроверок.Свойство("НетСледующейОперации") Тогда
		
		СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НетСледующейОперации", Истина));
		Для каждого ЭлементКоллекции Из СписокСтрок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтруктураПроверок.НетСледующейОперации,
				ЭлементКоллекции.Представление);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭлементКоллекции.Операция,
				ЭлементКоллекции.ПолеНомерСледующейОперации,
				,
				ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЕсли;

	#КонецОбласти
	
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Производит проверку заполнения реквизитов этапа производства
// 
// Параметры:
// 	ЭтапОбъект - СправочникОбъект.ЭтапыПроизводства
// 	Отказ - Булево
// 	Сообщения - Массив - массив для сбора сообщений
Процедура ПроверитьЗаполнениеРеквизитовЭтапа(ЭтапОбъект, Отказ = Ложь, Сообщения = Неопределено) Экспорт
	
	КлючДанных = ?(ЭтапОбъект.ЭтоНовый(), ЭтапОбъект.ПолучитьСсылкуНового(), ЭтапОбъект.Ссылка);
	
	Если НЕ ЭтапОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(Сообщения, КлючДанных, Истина);
	
КонецПроцедуры

Процедура ПроверитьЭтапыПроизводстваНаСтороне(Этапы, ДанныеСпецификации, Отказ = Ложь, Сообщения = Неопределено) Экспорт
	
	Если Этапы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Производство на стороне доступно только для типа производственного процесса "Изготовление, сборка"
	Если ДанныеСпецификации.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В спецификации типа ""%1"" не допускается использовать этапы, выполняемые переработчиком'"),
			ДанныеСпецификации.ТипПроизводственногоПроцесса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	// В КА не допускается в многоэтапной спецификации использовать этапы, выполняемые переработчиком
	Если ДанныеСпецификации.МногоэтапныйПроизводственныйПроцесс И ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		ТекстСообщения = НСтр("ru = 'В многоэтапной спецификации не допускается использовать этапы, выполняемые переработчиком'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ДанныеЭтапов = Новый ТаблицаЗначений;
	ДанныеЭтапов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	ДанныеЭтапов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДанныеЭтапов.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
	ДанныеЭтапов.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число"));
	ДанныеЭтапов.Колонки.Добавить("НомерСледующегоЭтапа", Новый ОписаниеТипов("Число"));
	
	Для каждого Этап Из Этапы Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЭтапов.Добавить(), Этап);
	КонецЦикла;
	
	ТаблицаМатериалыИУслуги = ДанныеСпецификации.МатериалыИУслуги.Выгрузить();
	ТаблицаВыходныеИзделия  = ДанныеСпецификации.ВыходныеИзделия.Выгрузить();
	ТаблицаВозвратныеОтходы = ДанныеСпецификации.ВозвратныеОтходы.Выгрузить();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеЭтапов.Ссылка,
	|	ДанныеЭтапов.Наименование,
	|	ДанныеЭтапов.ПроизводствоНаСтороне,
	|	ДанныеЭтапов.НомерЭтапа,
	|	ДанныеЭтапов.НомерСледующегоЭтапа
	|ПОМЕСТИТЬ ВТДанныеЭтапов
	|ИЗ
	|	&ДанныеЭтапов КАК ДанныеЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки                                                   КАК НомерСтроки,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура)            КАК Номенклатура,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства) КАК ЭтапРедактирование,
	|	МатериалыИУслуги.ПроизводитсяВПроцессе                                         КАК ПроизводитсяВПроцессе,
	|	ВЫБОР
	|		КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                          КАК ПроизводитсяНаЭтапе,
	|	ВЫБОР
	|		КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                                          КАК ПроизводитсяПоСпецификации
	|ПОМЕСТИТЬ ВТТаблица
	|ИЗ
	|	&МатериалыИУслуги КАК МатериалыИУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокЭтапов.Ссылка                КАК Ссылка,
	|	СписокЭтапов.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне
	|ПОМЕСТИТЬ ВтСписокЭтапов
	|ИЗ
	|	ВТДанныеЭтапов КАК СписокЭтапов
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка),
	|	МАКСИМУМ(СписокЭтапов.ПроизводствоНаСтороне)
	|ИЗ
	|	ВТДанныеЭтапов КАК СписокЭтапов
	|ГДЕ
	|	СписокЭтапов.НомерЭтапа = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СписокЭтапов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки                       КАК НомерСтроки,
	|	МатериалыИУслуги.Номенклатура                      КАК Номенклатура,
	|	ЕСТЬNULL(СписокЭтапов.ПроизводствоНаСтороне, ЛОЖЬ) КАК ПроизводствоНаСтороне,
	|	МатериалыИУслуги.ПроизводитсяВПроцессе             КАК ПроизводитсяВПроцессе,
	|	МатериалыИУслуги.ПроизводитсяНаЭтапе               КАК ПроизводитсяНаЭтапе,
	|	МатериалыИУслуги.ПроизводитсяПоСпецификации        КАК ПроизводитсяПоСпецификации
	|ПОМЕСТИТЬ ВТМатериалыИУслуги
	|ИЗ
	|	ВТТаблица КАК МатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСписокЭтапов КАК СписокЭтапов
	|		ПО МатериалыИУслуги.ЭтапРедактирование = СписокЭтапов.Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка               КАК Этап,
	|	Таблица.Наименование         КАК НаименованиеЭтапа,
	|	Таблица.НомерЭтапа           КАК НомерЭтапа,
	|	Таблица.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа
	|ИЗ
	|	ВТДанныеЭтапов КАК Таблица
	|ГДЕ 
	|	 Таблица.ПроизводствоНаСтороне
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки
	|ГДЕ
	|	ЛОЖЬ
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТМатериалыИУслуги КАК Т
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И Т.ПроизводствоНаСтороне
	|					И НЕ &ИспользуетсяТолькоПередачаВПереработку2_5
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	//-- Устарело_Переработка24
	|";
	
	НастройкиПодсистемыПроизводство = ПроизводствоСерверПовтИсп.НастройкиПодсистемыПроизводство();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МатериалыИУслуги", ТаблицаМатериалыИУслуги);
	Запрос.УстановитьПараметр("ДанныеЭтапов", ДанныеЭтапов);
	//++ Устарело_Переработка24
	Запрос.УстановитьПараметр("ИспользуетсяТолькоПередачаВПереработку2_5", НастройкиПодсистемыПроизводство.ИспользуетсяТолькоПередачаВПереработку2_5);
	//-- Устарело_Переработка24
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Результат.Количество();
	
	// Для этапов выполняемых на стороне должны быть описаны материалы и выходные изделия
	Если Не Результат[КоличествоПакетов - 3].Пустой() Тогда
		
		Если ДанныеСпецификации.МногоэтапныйПроизводственныйПроцесс Тогда
			
			
		Иначе
			
			// Для этапа, выполняемого переработчиком, должен быть описан хотя бы один материал
			Если ТаблицаМатериалыИУслуги.Количество() = 0 Тогда
				
				ШаблонТекста = НСтр("ru = 'Не введено ни одной строки в список ""Материалы и услуги""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ШаблонТекста, ДанныеСпецификации, "МатериалыИУслуги",, Отказ);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// В списке ""Материалы и работы"" не допускается указание работ для этапов, выполняемых переработчиком
	Если Не Результат[КоличествоПакетов - 1].Пустой() Тогда
		
		ШаблонТекста = НСтр("ru = 'Указание работ для этапов, выполняемых переработчиком, допускается при отключенном учете по версии 2.4 (см. строку %1 списка ""Материалы и работы"").'");
		
		Выборка = Результат[КоличествоПакетов - 1].Выбрать();
			
		Пока Выборка.Следующий() Цикл
			
			Поле           = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "Номенклатура");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, ДанныеСпецификации, Поле,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(Сообщения);
	
КонецПроцедуры

Функция СтруктураПроверокПоследовательностиЭтапов(ТипПроизводственногоПроцесса, СписокПроверок = "") Экспорт
	
	СтруктураПроверок = Новый Структура;
	
	СтруктураПроверок.Вставить("НетПервойОперации",    НСтр("ru = 'Отсутствует первый этап.'"));
	СтруктураПроверок.Вставить("НетПоследнейОперации", НСтр("ru = 'Отсутствует последний этап.'"));
	СтруктураПроверок.Вставить("НетСледующейОперации", НСтр("ru = 'Этап ""%1"" ссылается на несуществующий этап.'"));
	
	Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт
		//++ Устарело_Производство21
		ИЛИ ПроизводствоСервер.ИспользуетсяПроизводство21()
		//-- Устарело_Производство21
		Тогда
		СтруктураПроверок.Вставить("НесколькоПоследнихОпераций", НСтр("ru = 'Не может быть несколько последних этапов.'"));
	КонецЕсли;
	
	Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт
		ИЛИ ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка
		//++ Устарело_Производство21
		ИЛИ ПроизводствоСервер.ИспользуетсяПроизводство21()
		//-- Устарело_Производство21
		Тогда
		СтруктураПроверок.Вставить("НесколькоПервыхОпераций", НСтр("ru = 'Не может быть несколько первых этапов.'"));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокПроверок) Тогда
		МассивПроверок =  СтрРазделить(СписокПроверок, ",");
		Для каждого КлючИЗначение Из СтруктураПроверок Цикл
			Если МассивПроверок.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				СтруктураПроверок.Удалить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПроверок;
	
КонецФункции


Процедура ОбработатьСообщенияПользователю(Сообщения, КлючДанных = Неопределено, РазбитьПострочно = Ложь)
	
	Если Сообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияТекущие = Новый Массив;
	
	Для каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
		Если РазбитьПострочно Тогда
			Для каждого ТекстСообщения Из СтрРазделить(Сообщение.Текст, Символы.ПС) Цикл
				НовоеСообщение = Новый СообщениеПользователю();
				ЗаполнитьЗначенияСвойств(НовоеСообщение, Сообщение);
				НовоеСообщение.Текст = ТекстСообщения;
				НовоеСообщение.КлючДанных = ?(КлючДанных <> Неопределено, КлючДанных, НовоеСообщение.КлючДанных);
				СообщенияТекущие.Добавить(НовоеСообщение);
			КонецЦикла;
		Иначе
			Сообщение.КлючДанных = ?(КлючДанных <> Неопределено, КлючДанных, Сообщение.КлючДанных);
			СообщенияТекущие.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сообщения, СообщенияТекущие);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СтруктураПроизводственногоПроцессаВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = СтруктураПроизводственногоПроцесса(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция СтруктураПроизводственногоПроцесса(Параметры)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.РедакторПроизводственногоПроцесса.СтруктураПроизводственногоПроцесса");
	ВесЗамера = 0;
	
	КартинкиЭлементов                    = Неопределено;
	Спецификация                         = Параметры["Спецификация"];
	Дерево                               = Параметры["ПроизводственныйПроцессДерево"]; // ДеревоЗначений
	Результат                            = Новый Структура;
	МассивПодразделений                  = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	""Этап""                    КАК ВидЭлемента,
	|	Этапы.Наименование          КАК Наименование,
	|	Этапы.Ссылка                КАК Ссылка,
	|	Этапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
	|	Этапы.НомерЭтапа            КАК Номер,
	|	Этапы.НомерСледующегоЭтапа  КАК НомерСледующего,
	|	Этапы.Подразделение         КАК Подразделение
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Этапы
	|
	|ГДЕ
	|	Этапы.Владелец = &Спецификация
	|	И НЕ Этапы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Этапы.НомерЭтапа,
	|	Ссылка
	|;
	|
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоЭтапов          = 0;
	КоличествоОпераций        = 0;
	ЕстьМногооперационныйЭтап = Ложь;
	
	ТаблицаЭтапы = РезультатыЗапроса[0].Выгрузить();
	
	Для каждого ВыборкаЭтап из ТаблицаЭтапы Цикл
		
		СтрокаЭтап = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтап, ВыборкаЭтап);
		РедакторПроизводственногоПроцессаКлиентСервер.УстановитьКартинкуЭлемента(СтрокаЭтап, КартинкиЭлементов);
		
		КоличествоЭтапов = КоличествоЭтапов + 1;
		
		
	КонецЦикла;
	
	Результат.Вставить("ПроизводственныйПроцессДерево", Дерево);
	Результат.Вставить("МассивПодразделений",           МассивПодразделений);
	Результат.Вставить("ЭтапКоличество",                КоличествоЭтапов);
	Результат.Вставить("ОперацияКоличество",            КоличествоОпераций);
	Результат.Вставить("ЕстьМногооперационныйЭтап",     ЕстьМногооперационныйЭтап);
	
	ВесЗамера = ВесЗамера + КоличествоЭтапов + КоличествоОпераций;
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ВесЗамера / 1000);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
