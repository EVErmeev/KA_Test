
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обработка заявлений абонента 
//             на подключение электронной подписи в модели сервиса".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регламентное задание.
Процедура ОбработкаЗаявленийАбонентов(ДокументЗаявление) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если ЗначениеЗаполнено(ДокументЗаявление) Тогда
		
		Если ДокументЗаявление.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено
			И НЕ ДокументЗаявление.ПометкаУдаления
			И ДокументЗаявление.Дата + 2 * 30 * 24 * 60 * 60 > ТекущаяДатаСеанса() Тогда
			
			МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.ОпределитьМестоХраненияКлюча(ДокументЗаявление.МодельХраненияЗакрытогоКлюча, 
									ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(ДокументЗаявление, "УчетнаяЗапись"));
			Если КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(МестоХраненияКлюча) Тогда
				ЗаявлениеОбработано = ОбработкаЗаявленийАбонентаВызовСервера.ОбработатьИзменениеСтатусаЗаявленияАбонентаВМоделиСервиса(ДокументЗаявление);
			Иначе
				РезультатОтветаСервера 	= ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьИРазобратьОтветНаЗаявление(ДокументЗаявление,,Истина);
				ЗаявлениеОбработано 	= РезультатОтветаСервера.Выполнено И РезультатОтветаСервера.СтатусИзменился;
			КонецЕсли;
			
			Если ЗаявлениеОбработано Тогда
				ОбработкаЗаявленийАбонентаВызовСервера.ОтключитьОтслеживаниеИзменениеСтатусаЗаявления(ДокументЗаявление);
			КонецЕсли;
			
		Иначе
			
			ОбработкаЗаявленийАбонентаВызовСервера.ОтключитьОтслеживаниеИзменениеСтатусаЗаявления(ДокументЗаявление);
			
		КонецЕсли;
		
	Иначе
		
		ОбработкаЗаявленийАбонентаВызовСервера.ОтключитьОтслеживаниеИзменениеСтатусаЗаявления(ДокументЗаявление);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьЗаявлениеАбонентаВМоделиСервиса(Знач ЗаявлениеАбонента, Знач Алгоритм) Экспорт
	
	ДанныеЗаявления = ПодготовитьЗаявление(ЗаявлениеАбонента, Алгоритм);
	
	Если ЗаявлениеАбонента.ПодписатьЭП Тогда
		Результат = МенеджерСервисаКриптографии.СформироватьЗаявлениеДляПодписания(ДанныеЗаявления);
	Иначе
		Результат = МенеджерСервисаКриптографии.ОтправитьЗаявлениеНаПодключение(ДанныеЗаявления);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#Область ДляБП3

Функция ПользовательНачалИспользоватьОтчетность(Организация) Экспорт
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат);
	Состояния.Добавить(Перечисления.СостояниеСдачиОтчетности.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Состояния", Состояния);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|    ЖурналОтчетовСтатусы.Ссылка КАК Ссылка
	|ИЗ
	|    РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|ГДЕ
	|    НЕ ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности В (&Состояния)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|    ЖурналОтправокВКонтролирующиеОрганы.Ссылка
	|ИЗ
	|    РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
	|ГДЕ
	|    НЕ ЖурналОтправокВКонтролирующиеОрганы.СостояниеСдачиОтчетности В (&Состояния)";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДобавитьОтборПоОрганизации(Запрос, Организация);
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


Функция СостояниеЗаявленияНаПодключениеОтчетности(Организация) Экспорт
	
	// Состояние подключения отчетности определяем по наличию заявления.
	// Если есть хотя бы одно заявление со статусом Одобрено, то возвращаем состояние "Одобрено".
	// Если нет ни одного одобренного, но есть хотя бы одно со статусом Отправлено, то возвращаем состояние "Отправлено"
	// Если нет ни одного отправленного, но есть хотя бы одно "Отклонено", то возвращаем состояние "Отклонено".
	// Если ни одна ситуация выше не подходит, возвращаем состояние "НеСоздано".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|    ЗаявлениеАбонентаСпецоператораСвязи.Статус КАК Статус,
	|    МАКСИМУМ(ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления) КАК ДатаОтправкиЗаявления
	|ПОМЕСТИТЬ СтатусыЗаявлений
	|ИЗ
	|    Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|ГДЕ
	|    НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|    ЗаявлениеАбонентаСпецоператораСвязи.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|    СтатусыЗаявлений.Статус КАК Статус,
	|    ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Заявление
	|ИЗ
	|    СтатусыЗаявлений КАК СтатусыЗаявлений
	|        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|        ПО СтатусыЗаявлений.ДатаОтправкиЗаявления = ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления
	|            И СтатусыЗаявлений.Статус = ЗаявлениеАбонентаСпецоператораСвязи.Статус
	|            И (НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления)";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДобавитьОтборПоОрганизации(Запрос, Организация);
	КонецЕсли;
	
	СостояниеЗаявления = Новый Структура;
	СостояниеЗаявления.Вставить("Состояние", "НеСоздано");
	СостояниеЗаявления.Вставить("Заявление", Неопределено);
	
	СтатусыЗаявлений = Запрос.Выполнить().Выгрузить();
	
	СтатусЗаявленияОдобрено = СтатусыЗаявлений.Найти(Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
	Если СтатусЗаявленияОдобрено <> Неопределено Тогда
		СостояниеЗаявления.Состояние = "Одобрено";
		СостояниеЗаявления.Заявление = СтатусЗаявленияОдобрено.Заявление;
		Возврат СостояниеЗаявления;
	КонецЕсли;
	
	СтатусЗаявленияОдобрено = СтатусыЗаявлений.Найти(Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
	Если СтатусЗаявленияОдобрено <> Неопределено Тогда
		СостояниеЗаявления.Состояние = "Отправлено";
		СостояниеЗаявления.Заявление = СтатусЗаявленияОдобрено.Заявление;
		Возврат СостояниеЗаявления;
	КонецЕсли;
	
	СтатусЗаявленияОдобрено = СтатусыЗаявлений.Найти(Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
	Если СтатусЗаявленияОдобрено <> Неопределено Тогда
		СостояниеЗаявления.Состояние = "Отклонено";
		СостояниеЗаявления.Заявление = СтатусЗаявленияОдобрено.Заявление;
		Возврат СостояниеЗаявления;
	КонецЕсли;
	
	Возврат СостояниеЗаявления;
	
КонецФункции

Процедура ДобавитьОтборПоОрганизации(Запрос, Организация)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	// Добавляем отбор по организации
	Для Каждого Оператор Из СхемаЗапроса.ПакетЗапросов[0].Операторы Цикл
		
		Условия = Оператор.Отбор;
		
		Для Каждого Источник Из Оператор.Источники Цикл
			Условия.Добавить(СтрШаблон("%1.Организация = &Организация", Источник.Источник.Псевдоним));
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоИнтеграцияСБанком() Экспорт

	// Это УСН 6% для ПСБ
	ФлагиУчета = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьФлагиИнтеграцииПоУмолчанию();
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьЗначенияКонстантИнтеграции(ФлагиУчета);
	
	ЭтоИнтеграцияСБанком = ФлагиУчета.ИнтеграцияСБанком;
	
	Возврат ЭтоИнтеграцияСБанком;
	
КонецФункции

Процедура СкопироватьРеквизитыВладельцаИзИсходногоЗаявления(Форма, Реквизит) Экспорт
	
	Форма.ТелефонМобильный = Реквизит.ТелефонМобильный;
	Форма.ЭлектроннаяПочта = Реквизит.ЭлектроннаяПочта;
	Если НЕ ПустаяСтрока(Форма.ТелефонМобильный) Тогда
		Форма.ПолучатьСМС = Истина;
	КонецЕсли;
	
	// Копируем все реквизиты, содержащие подстроку ВладелецЭЦП
	Реквизиты = Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи.Реквизиты;
	Для каждого ТекущийРеквизит Из Реквизиты Цикл
		
		Имя = ТекущийРеквизит.Имя;
		
		ЭтоРеквизитВладельца = 
			СтрНайти(Врег(Имя), Врег("ВладелецЭЦП"))
			И НЕ СтрНайти(Врег(Имя), Врег("Удалить"));
		
		Если ЭтоРеквизитВладельца Тогда
			Форма[Имя] = Реквизит[Имя];
		КонецЕсли;
	
	КонецЦикла;
	
	Форма.СертификатДолженБытьПолученОтГосУЦ = СертификатДолженБытьПолученОтГосУЦ(Форма);
	
КонецПроцедуры

Процедура УдалитьПробелы(НовыйДокументЗаявление) Экспорт
	
	Для каждого РеквизитЗаявления Из НовыйДокументЗаявление.Метаданные().Реквизиты Цикл
		
		Если НЕ РеквизитЗаявления.Тип.СодержитТип(Тип("Строка")) Тогда
			Продолжить;
		КонецЕсли;
			
		Значение = НовыйДокументЗаявление[РеквизитЗаявления.Имя];
		Если ТипЗнч(Значение) <> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйДокументЗаявление[РеквизитЗаявления.Имя] = СокрЛП(НовыйДокументЗаявление[РеквизитЗаявления.Имя]);
		
	КонецЦикла;
	
КонецПроцедуры

Функция КлючЗаявленийТребующихНапоминанияПозже() Экспорт

	Возврат "ДокументооборотСКонтролирующимиОрганами_ЗаявленияТребующиеНапоминанияПозже";

КонецФункции

Функция ПодготовитьЗаявление(ДокументЗаявление, Алгоритм) Экспорт
	
	Заявление = Новый Структура;
	Заявление.Вставить("type", XMLСтрока(ДокументЗаявление.ТипЗаявления));
	
	Если ДокументЗаявление.ЭтоУпрощенноеЗаявление И ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
		Заявление.Вставить("test", Истина);
	КонецЕсли;
	
	Заявление.Вставить("version", "1.10");
	Заявление.Вставить("application", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	Заявление.Вставить("abonent_id", ПолучитьИдентификаторАбонента(ДокументЗаявление));
	Заявление.Вставить("id", ДокументЗаявление.ИдентификаторДокументооборота);
	Заявление.Вставить("date", ТекущаяУниверсальнаяДата());
	Заявление.Вставить("organization", ПодготовитьОрганизацию(ДокументЗаявление));
	Заявление.Вставить("signature_owner", ПодготовитьВладельцаЭП(ДокументЗаявление));
	Заявление.Вставить("recipients", ПодготовитьПолучателей(ДокументЗаявление));
	Заявление.Вставить("files", ПодготовитьФайлы(ДокументЗаявление));
	Заявление.Вставить("changed_attributes", ПодготовитьИзменившиесяРеквизиты(ДокументЗаявление));
	Заявление.Вставить("auth", ПолучитьПараметрыАутентификации(ДокументЗаявление));
	Если Алгоритм = "GOST R 34.10-2012-256" Тогда
		Заявление.Вставить("ПриоритетГОСТ", "2012-256");
	ИначеЕсли Алгоритм = "GOST R 34.10-2012-512" Тогда
		Заявление.Вставить("ПриоритетГОСТ", "2012-512");
	КонецЕсли;
	
	IdentKind = ДокументооборотСКОКлиентСервер.IdentKind(ДокументЗаявление);
	Заявление.Вставить("IdentKind", IdentKind);
	
	НаименованиеУЦ = УЦВЗаявлении(ДокументЗаявление);
	Заявление.Вставить("CertifyingCenter", НаименованиеУЦ);
	
	// Обязательные новые поля ИмяПрограммы, НомерВерсииПрограммы, ВерсияПлатформы
	КонтекстЭДОСервер   = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ИмяПрограммыБИП     = КонтекстЭДОСервер.ИмяПрограммыБИП();
	
	Если ИмяПрограммыБИП <> "" Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Заявление.Вставить("app_name", 			ИмяПрограммыБИП);
		Заявление.Вставить("app_version", 		РегламентированнаяОтчетность.ВерсияПрограммы());
		Заявление.Вставить("platform_version", 	СистемнаяИнформация.ВерсияПриложения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументЗаявление.НомерОсновнойПоставки1с) Тогда
		Заявление.Вставить("code_product_1c", ДокументЗаявление.НомерОсновнойПоставки1с);
	Иначе
		Заявление.Вставить("UserID", 	ИдентификаторПользователя());
		Заявление.Вставить("Splitter", 	РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
		Заявление.Вставить("AreaKey", 	КлючОбластиДанных());
	КонецЕсли;
	
	Возврат Заявление;
	
КонецФункции

Функция ИдентификаторПользователя()

	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ИдентификаторПользователя =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийПользователь,
			"ИдентификаторПользователяСервиса");	

КонецФункции
		
Функция КлючОбластиДанных()
	
	ЗначениеРазделителя = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		// В разделенном режиме не кэшируется, т.к.
		// нет необходимости входить в область данных.
		УстановитьПривилегированныйРежим(Истина);
		
		Если Метаданные.Константы.Найти("КлючОбластиДанных") = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат Константы["КлючОбластиДанных"].Получить();
		КонецЕсли;
	Иначе
		// Результат кэшируется, т.к. необходимо выполнить вход в область данных.
		Возврат ИнтернетПоддержкаПользователейВМоделиСервисаПовтИсп.КлючОбластиДанных(ЗначениеРазделителя);
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьОрганизацию(ДокументЗаявление)
	
	Организация = Новый Структура;
	Организация.Вставить("short_name", ДокументЗаявление.КраткоеНаименование);
	Организация.Вставить("inn", ДокументЗаявление.ИНН);
	Организация.Вставить("kpp", ДокументЗаявление.КПП);
	Организация.Вставить("ogrn", ДокументЗаявление.ОГРН);
	
	Если НЕ ЗначениеЗаполнено(ДокументЗаявление.ОГРН) И ДокументЗаявление.ЭтоНотариусАдвокатИлиГКФХ Тогда
		Организация.Вставить("is_individual", Истина);
	КонецЕсли;
	
	Организация.Вставить("reg_number_pfr", ДокументЗаявление.РегНомерПФР);
	Организация.Вставить("reg_number_fss", ДокументЗаявление.РегНомерФСС);
	Организация.Вставить("reg_number_fss_optional", ДокументЗаявление.ДополнительныйКодФСС);
	Организация.Вставить("separate_subdivision", ДокументЗаявление.ПризнакОбособленногоПодразделения);
	Организация.Вставить("legal_address", ПодготовитьАдрес(ДокументЗаявление, "АдресЮридический"));
	Организация.Вставить("actual_address", ПодготовитьАдрес(ДокументЗаявление, "АдресФактический"));
	Организация.Вставить("phone", ДокументЗаявление.ТелефонОсновной);
	Организация.Вставить("mobile_phone", ДокументЗаявление.ТелефонМобильный);
	Организация.Вставить("email", ДокументЗаявление.ЭлектроннаяПочта);
	Организация.Вставить("tariff", ДокументЗаявление.Тариф);
	
	Возврат Организация;
	
КонецФункции

Функция ПодготовитьАдрес(ДокументЗаявление, ИмяРеквизита)
	
	АдресСтрокой = ДокументЗаявление[ИмяРеквизита];
	
	Если ЗначениеЗаполнено(АдресСтрокой) Тогда
		
		ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресСтрокой);

		Если ЭтоАдресПоФИАСу Тогда
			
			КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
			Адрес = Новый Структура;
			Адрес.Вставить("country", "643");
			Адрес.Вставить("region_code", "");
			Адрес.Вставить("region", "");
			Адрес.Вставить("district", "");
			Адрес.Вставить("city", "");
			Адрес.Вставить("locality", "");
			Адрес.Вставить("street", "");
			Адрес.Вставить("house", "");
			Адрес.Вставить("building", "");
			Адрес.Вставить("apartment", "");
			
			// Представление
			ПредставлениеАдреса = КонтекстЭДОСервер.ПредставлениеАдресаИзДанныхОрганизации(АдресСтрокой);
			Адрес.Вставить("presentation", ПредставлениеАдреса);
			
			// Адрес в том виде, как он передается в заявлении на подключение.
			АдресВВидеXML = КонтекстЭДОСервер.АдресФИАСДляТелаЗаявления(ДокументЗаявление, ИмяРеквизита);
			Адрес.Вставить("fias", АдресВВидеXML);
			
			localityName 		= КонтекстЭДОСервер.ПолеСертификата_2_5_4_7(АдресСтрокой);
			stateOrProvinceName = КонтекстЭДОСервер.ПолеСертификата_2_5_4_8(АдресСтрокой);
			streetAddress 		= КонтекстЭДОСервер.ПолеСертификата_2_5_4_9(АдресСтрокой);
				
			Адрес.street 		= streetAddress; 
			Адрес.region_code	= Лев(stateOrProvinceName, 2);
			Адрес.region 		= Сред(stateOrProvinceName, 4);
			Адрес.city 			= localityName;
			
		Иначе
			
			ЧастиАдреса = СтрРазделить(АдресСтрокой, ",");
			Если ЧастиАдреса.Количество() <> 10 И ЧастиАдреса.Количество() <> 13 Тогда
				ВызватьИсключение(НСтр("ru = 'Неверный формат адреса.'"));
			КонецЕсли;
			
			Адрес = Новый Структура;
			Адрес.Вставить("country", ЧастиАдреса[0]);
			Адрес.Вставить("postcode", ЧастиАдреса[1]);
			Адрес.Вставить("region_code", ЧастиАдреса[2]);
			Адрес.Вставить("region", НазваниеРегионаПоКоду(ЧастиАдреса[2]));
			Адрес.Вставить("district", ЧастиАдреса[3]);
			Адрес.Вставить("city", ЧастиАдреса[4]);
			Адрес.Вставить("locality", ЧастиАдреса[5]);
			Адрес.Вставить("street", ЧастиАдреса[6]);
			Адрес.Вставить("house", ЧастиАдреса[7]);
			Адрес.Вставить("building", ЧастиАдреса[8]);
			Адрес.Вставить("apartment", ЧастиАдреса[9]);
			
		КонецЕсли;

	Иначе
		
		Если ИмяРеквизита = "АдресЮридический" Тогда
		
			РеквизитыСертификата = ДокументЗаявление.РеквизитыСертификата.Получить();
			Если ЗначениеЗаполнено(РеквизитыСертификата) Тогда
				
				Адрес = Новый Структура;
				Адрес.Вставить("country", "643");
				Адрес.Вставить("region_code", "");
				Адрес.Вставить("region", "");
				Адрес.Вставить("district", "");
				Адрес.Вставить("city", "");
				Адрес.Вставить("locality", "");
				Адрес.Вставить("street", "");
				Адрес.Вставить("house", "");
				Адрес.Вставить("building", "");
				Адрес.Вставить("apartment", "");
				
				Если РеквизитыСертификата.Свойство("OID2_5_4_9") Тогда
					Адрес.street = РеквизитыСертификата["OID2_5_4_9"]; 
				КонецЕсли;
				Адрес.region_code = Лев(РеквизитыСертификата["OID2_5_4_8"], 2);
				Адрес.region = Сред(РеквизитыСертификата["OID2_5_4_8"], 4);
				
				Адрес.city = РеквизитыСертификата["OID2_5_4_7"];
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

Функция НазваниеРегионаПоКоду(КодРегиона)
	
	Название = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(КодРегиона);
	
	Если Не ЗначениеЗаполнено(Название) Тогда
		// затем пробуем найти в таблице регионов
		МакетРегионы = Обработки.ОбщиеОбъектыРеглОтчетности.ПолучитьМакет("Регионы");
		нрегАдресРегион = нрег(Название);
		Для Индекс = 1 По МакетРегионы.ВысотаТаблицы Цикл
			ТекущийКодРегиона = СокрЛП(МакетРегионы.Область(Индекс, 2, Индекс, 2).Текст);
			Если ТекущийКодРегиона = КодРегиона Тогда
				Название = СокрЛП(МакетРегионы.Область(Индекс, 1, Индекс, 1).Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Название;
	
КонецФункции

Функция ПодготовитьВладельцаЭП(ДокументЗаявление)
	
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);
	
	ВладелецЭП = Новый Структура;
	
	Если ИспользоватьСуществующий Тогда
		
		Сертификат = ОбработкаЗаявленийАбонентаВызовСервера.СертификатИзЗаявления(ДокументЗаявление);
		
		Если ТипЗнч(Сертификат.Отпечаток) = Тип("ДвоичныеДанные") Тогда
			Тело = Нрег(ПолучитьHexСтрокуИзДвоичныхДанных(Сертификат.Отпечаток));
		Иначе
			Тело = Base64Строка(Сертификат.Сертификат);
		КонецЕсли;
		
		ВладелецЭП.Вставить("certificate", Тело);
		
	КонецЕсли;
	
	ВладелецЭП.Вставить("first_name", ДокументЗаявление.ВладелецЭЦПИмя);
	ВладелецЭП.Вставить("middle_name", ДокументЗаявление.ВладелецЭЦПОтчество);
	ВладелецЭП.Вставить("last_name", ДокументЗаявление.ВладелецЭЦПФамилия);
	ВладелецЭП.Вставить("snils", ДокументЗаявление.ВладелецЭЦПСНИЛС);
	ВладелецЭП.Вставить("post", ДокументЗаявление.ВладелецЭЦПДолжность);
	ВладелецЭП.Вставить("subdivision", ДокументЗаявление.ВладелецЭЦППодразделение);
	ВладелецЭП.Вставить("is_person", ДокументЗаявление.ВладелецЭЦПЭтоФизЛицо);
	
	Если ДокументЗаявление.ВладелецЭЦППол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		Пол = "1";
	ИначеЕсли ДокументЗаявление.ВладелецЭЦППол = Перечисления.ПолФизическогоЛица.Женский Тогда
		Пол = "2";
	Иначе
		Пол = "0";
	КонецЕсли;
	
	Гражданство = ДокументЗаявление.ВладелецЭЦПГражданство;
	КодАльфа2 = "RU";
	Если ЗначениеЗаполнено(Гражданство) И ЗначениеЗаполнено(Гражданство.КодАльфа2) Тогда
		КодАльфа2 = Гражданство.КодАльфа2;
	КонецЕсли;
	
	ВладелецЭП.Вставить("sex", Пол);
	ВладелецЭП.Вставить("date_birth", 	ДокументЗаявление.ВладелецЭЦПДатаРождения);
	ВладелецЭП.Вставить("place_birth",  ДокументЗаявление.ВладелецЭЦПМестоРождения);
	ВладелецЭП.Вставить("inn", ДокументЗаявление.ВладелецЭЦПИНН);

	ВладелецЭП.Вставить("nationality", КодАльфа2);
	
	ВладелецЭП.Вставить("identity_document", ПодготовитьДокументУдостоверяющийЛичность(ДокументЗаявление));
	
	Возврат ВладелецЭП;
	
КонецФункции

Функция ПолучитьПараметрыАутентификации(ДокументЗаявление)
	
	ПараметрыАутентификации = Новый Структура;
	ПараметрыАутентификации.Вставить("phone", ДокументЗаявление.ИдентификаторПроверкиТелефонаДляПаролей);
	ПараметрыАутентификации.Вставить("email", ДокументЗаявление.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей);
	
	Возврат ПараметрыАутентификации;
	
КонецФункции

Функция ПодготовитьДокументУдостоверяющийЛичность(ДокументЗаявление)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КодВидаДокумента  = КонтекстЭДОСервер.ПолучитьКодВидаДокументаФизическогоЛица(ДокументЗаявление.ВладелецЭЦПВидДокумента);
	
	ДокументУдостоверяющийЛичность = Новый Структура;
	ДокументУдостоверяющийЛичность.Вставить("type", КодВидаДокумента);
	ДокументУдостоверяющийЛичность.Вставить("serial", ДокументЗаявление.ВладелецЭЦПСерияДокумента);
	ДокументУдостоверяющийЛичность.Вставить("number", ДокументЗаявление.ВладелецЭЦПНомерДокумента);
	ДокументУдостоверяющийЛичность.Вставить("issuer", ДокументЗаявление.ВладелецЭЦПКемВыданДокумент);
	ДокументУдостоверяющийЛичность.Вставить("issue_date", ДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента);
	ДокументУдостоверяющийЛичность.Вставить("issuer_code", ДокументЗаявление.ВладелецЭЦПКодПодразделения);
		
	Возврат ДокументУдостоверяющийЛичность;
	
КонецФункции

Функция ПодготовитьПолучателей(ДокументЗаявление)
	
	Получатели = Новый Массив;
	
	Если ДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		Получатель = Новый Структура;
		Получатель.Вставить("type", XMLСтрока(Перечисления.ТипыКонтролирующихОрганов.ФСРАР));
		Получатель.Вставить("code", XMLСтрока(ДокументЗаявление.КодРегионаФСРАР));
		Получатели.Добавить(Получатель);
	КонецЕсли;
	
	Если ДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН Тогда
		Получатель = Новый Структура;
		Получатель.Вставить("type", XMLСтрока(Перечисления.ТипыКонтролирующихОрганов.РПН));
		Получатели.Добавить(Получатель);
	КонецЕсли;
	
	Если ДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС Тогда
		Получатель = Новый Структура;
		Получатель.Вставить("type", XMLСтрока(Перечисления.ТипыКонтролирующихОрганов.ФТС));
		Получатели.Добавить(Получатель);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДокументЗаявление.Получатели Цикл
		Получатель = Новый Структура;			
		Если СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			Получатель.Вставить("type", XMLСтрока(СтрокаТаблицы.ТипПолучателя));
			Получатель.Вставить("code", СтрокаТаблицы.КодПолучателя);
			Получатель.Вставить("kpp",  СтрокаТаблицы.КПП);
		ИначеЕсли СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			Получатель.Вставить("type", XMLСтрока(СтрокаТаблицы.ТипПолучателя));			
		Иначе
			Получатель = Новый Структура;
			Получатель.Вставить("type", XMLСтрока(СтрокаТаблицы.ТипПолучателя));
			Получатель.Вставить("code", СтрокаТаблицы.КодПолучателя);
		КонецЕсли;
		
		Получатели.Добавить(Получатель);
	КонецЦикла;
	
	Возврат Получатели;
	
КонецФункции

Функция ПодготовитьИзменившиесяРеквизиты(ДокументЗаявление)
	
	ИзменившиесяРеквизиты = Новый Массив;
	Для Каждого ИзменившийсяРеквизит Из ДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления Цикл
		ИзменившиесяРеквизиты.Добавить(XMLСтрока(ИзменившийсяРеквизит.ИзмененныйРеквизит));		
	КонецЦикла;
	
	Возврат ИзменившиесяРеквизиты;
	
КонецФункции

Функция ПолучитьИдентификаторАбонента(ДокументЗаявление)
	
	ИдентификаторАбонента = "";
	Если ДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение Тогда
		ИдентификаторАбонента = ДокументЗаявление.УчетнаяЗапись.ИдентификаторАбонента;		
	КонецЕсли;
	
	Возврат ИдентификаторАбонента;
	
КонецФункции

Функция ПодготовитьФайлы(ДокументЗаявление)
	
	Файлы = Новый Массив;
	ИдентификаторыМЧД = ОбработкаЗаявленийАбонентаКлиентСервер.СоответствиеИДиМЧД(ДокументЗаявление);
	
	Для Каждого ЭлектронныйДокумент Из ДокументЗаявление.ЭлектронныеДокументы Цикл

		ПрисоединенныйФайл = ЭлектронныйДокумент.Файл;
		
		document = ОбработкаЗаявленийАбонентаКлиентСервер.ВидДокументаЗаявленияСкорректированный(ЭлектронныйДокумент);
		
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы 				= Новый УникальныйИдентификатор;
		ДополнительныеПараметры.ПолучатьСсылкуНаДвоичныеДанные 	= Истина;
		Результат = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ДополнительныеПараметры);
		
		Файл = Новый Структура;
		Файл.Вставить("document", 	document);
		Файл.Вставить("data", 		ПолучитьИзВременногоХранилища(Результат.СсылкаНаДвоичныеДанныеФайла));
		Файл.Вставить("type", 		Результат.Расширение);
		
		Если Результат.ПодписанЭП Тогда
			
			ДвоичныеДанныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл)[0].Подпись;
			Если ТипЗнч(ДвоичныеДанныеПодписи) = Тип("ХранилищеЗначения") Тогда
				ДвоичныеДанныеПодписи = ДвоичныеДанныеПодписи.Получить();
			КонецЕсли;
			Файл.Вставить("signature", ДвоичныеДанныеПодписи);
			
		КонецЕсли;
		
		ЗаполнитьIDФайлов(Файл, ЭлектронныйДокумент, ИдентификаторыМЧД);
		
		Файлы.Добавить(Файл);
			
	КонецЦикла;
	
	Возврат Файлы;
	
КонецФункции

Процедура ЗаполнитьIDФайлов(Файл, ЭлектронныйДокумент, ИдентификаторыМЧД)
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.МЧД) Тогда
		
		ИД_МЧД = ИдентификаторыМЧД.Получить(ЭлектронныйДокумент.МЧД);
		
		Если ЭлектронныйДокумент.ЭтоПодписьКМЧД Тогда
			Файл.Вставить("ParentID", ИД_МЧД);
			Файл.Вставить("ID", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор());
		КонецЕсли;
		
		Если ЭлектронныйДокумент.ЭтоМЧД Тогда
			Файл.Вставить("ID", ИД_МЧД);
		КонецЕсли;
		
	Иначе
		Файл.Вставить("ID", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаШум(ДокументЗаявление, МастерДалее) Экспорт
	
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(ДокументЗаявление);
	Если ИспользоватьСуществующий Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Реквизиты = Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи.Реквизиты;
	Для каждого ЗначениеРеквизита Из Реквизиты Цикл
		
		Если НЕ ЗначениеРеквизита.Тип.СодержитТип(Тип("Строка")) Тогда
			Продолжить;
		КонецЕсли;
			
		Значение = ДокументЗаявление[ЗначениеРеквизита.Имя];
		Если ТипЗнч(Значение) <> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
			
		ЗаполненоШумом = КонтекстЭДОСервер.ЗначениеЗаполненоШумом(Значение);
	
		Если ЗаполненоШумом Тогда
			
			МастерДалее = Ложь;
			
			ТекстОшибки = НСтр("ru = 'Значение ""%2"" в поле ""%1"" не несет в себе полезной информации'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ЗначениеРеквизита.Синоним, Значение);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция СертификатДолженБытьПолученОтГосУЦ(Форма) Экспорт
	
	СертификатДолженБытьПолученОтГосУЦ = Форма.ЭтоБюджетополучатель;
		
	Возврат СертификатДолженБытьПолученОтГосУЦ;
	
КонецФункции

Функция ВозможноБесшовноеПолучениеСертификатаВДУЦ(Форма) Экспорт
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	Возможно =
		ЭтоРуководитель
		И НЕ Форма.ЭтоБюджетополучатель;
		
	Возврат Возможно;
	
КонецФункции

Функция УдалитьДобавленныйФлаг(Форма, ИмяРеквизита)
	
	Элементы = Форма.Элементы;
	
	ИмяЭлемента = ИмяЭлементаДобавляемогоФлага(ИмяРеквизита);
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент <> Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли;;
	
КонецФункции

Функция СоздатьДобавляемыйФлаг(Форма, ИмяРеквизита, Подсказка)
	
	Элементы = Форма.Элементы;
	
	ИмяЭлемента = ИмяЭлементаДобавляемогоФлага(ИмяРеквизита);
	ИмяСобытия  = ИмяСобытияДобавляемогоФлага(ИмяРеквизита);
	
	НужнаяГруппа = Форма.РодительФлага();
	
	Если НужнаяГруппа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Элемент     = Элементы.Найти(ИмяЭлемента);
	Создать     = Элемент = Неопределено;
	Переместить = Элемент <> Неопределено И Элемент.Родитель <> НужнаяГруппа;
	
	Если НЕ Создать И НЕ Переместить Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Переместить Тогда
		Элементы.Переместить(Элемент, НужнаяГруппа);
		Возврат Элемент;
	Иначе

		Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), НужнаяГруппа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.УстановитьДействие("ПриИзменении", ИмяСобытия);
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		
		Если Подсказка <> "" Тогда
			
			Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
			Элемент.Подсказка = Подсказка;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ИмяЭлементаДобавляемогоФлага(ИмяРеквизита)
	
	Возврат ИмяРеквизита + "Доп";
	
КонецФункции

Функция ИмяСобытияДобавляемогоФлага(ИмяРеквизита)
	
	Возврат ИмяРеквизита + "ПриИзменении";
	
КонецФункции

Процедура ИзменитьОформлениеДобавляемогоФлага(Форма, ИмяРеквизита, ДляЮЛ, Подсказка = "")
	
	Удалить = 
		ДляЮЛ И НЕ Форма.ЭтоЮридическоеЛицо
		ИЛИ НЕ ДляЮЛ И Форма.ЭтоЮридическоеЛицо
		ИЛИ НЕ ЗначениеЗаполнено(Форма.Организация)
		ИЛИ Форма.ЭтоИнтеграцияСБанком;
	
	Если Удалить Тогда
		УдалитьДобавленныйФлаг(Форма, ИмяРеквизита);
	Иначе
		СоздатьДобавляемыйФлаг(Форма, ИмяРеквизита, Подсказка);
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлементаДобавляемогоФлага(ИмяРеквизита);
	Элемент     = Форма.Элементы.Найти(ИмяЭлемента);
	
	Если Форма.ЗапретитьИзменение И Элемент <> Неопределено Тогда
		Элемент.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеДобавляемыхФлагов(Форма) Экспорт
	
	ИзменитьОформлениеДобавляемогоФлага(Форма, "ЭтоНотариусАдвокатИлиГКФХ", Ложь);
	
КонецПроцедуры

Функция РодительДобавляемогоФлага(Группы) Экспорт
	
	НужнаяГруппа = Неопределено;
	Для каждого Группа Из Группы Цикл
		Если ГруппаВидима(Группа) Тогда
			НужнаяГруппа = Группа;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НужнаяГруппа;
	
КонецФункции

Функция ГруппаВидима(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Истина;
	ИначеЕсли НЕ Элемент.Видимость Тогда
		Возврат Ложь;
	Иначе
		Возврат ГруппаВидима(Элемент.Родитель);
	КонецЕсли;
	
КонецФункции

Функция ДоступнаЭлектроннаяПодписьВМоделиСервиса(Форма) Экспорт
	
	ОблакоВозможноДляДУЦ = ОбработкаЗаявленийАбонентаКлиентСервер.ЭПВМоделиСервисаДоступнаЧерезДУЦ();
	
	Доступна = 
		ЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно() 
		И НЕ Форма.СертификатДолженБытьПолученОтГосУЦ
		И (НЕ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ
		ИЛИ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ И ОблакоВозможноДляДУЦ);
		
	Возврат Доступна;
		
КонецФункции

Процедура ПриУстановкеРежимаТолькоСУЦНаСервере(Форма) Экспорт
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(Форма);
	
	Форма.СертификатДолженБытьПолученОтГосУЦ        = СертификатДолженБытьПолученОтГосУЦ(Форма);
	Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ = ВозможноБесшовноеПолучениеСертификатаВДУЦ(Форма);
	ОблакоВозможноДляДУЦ = ОбработкаЗаявленийАбонентаКлиентСервер.ЭПВМоделиСервисаДоступнаЧерезДУЦ();
	
	Форма.ИнициализацияДляЭПВМоделиСервиса();
	
КонецПроцедуры

Функция УЦВЗаявлении(ДокументЗаявление) Экспорт
	
	УЦ = ДокументЗаявление.УдостоверяющийЦентр;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КА = КонтекстЭДОСервер.ДанныеУЦ(ДокументЗаявление).НаименованиеУЦ;

	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоПолучениеСертификатВКА(ДокументЗаявление) Тогда
		УЦСтрокой = КА;
	ИначеЕсли УЦ = Перечисления.УдостоверяющиеЦентрыБРО.УЦФНС Тогда
		УЦСтрокой = НСтр("ru = 'Федеральная налоговая служба'");
	ИначеЕсли УЦ = Перечисления.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр
		ИЛИ ДокументЗаявление.ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.Руководитель Тогда
		УЦСтрокой = НСтр("ru = 'АО ""Аналитический Центр""'");
	Иначе
		УЦСтрокой = КА;
	КонецЕсли;
	
	Возврат УЦСтрокой;
	
КонецФункции

Процедура ИзменитьОформлениеВключаемогоСертификата(Форма) Экспорт
	
	ИзменитьГруппировкуСУЦ(Форма);
	ИзменитьОформлениеСУЦ(Форма);
	ИзменитьОформлениеКнопкиОчисткиСУЦ(Форма);
	ИзменитьОформлениеСпособаПолученияСертификата(Форма);
	ИзменитьОформлениеПодсказкиСУЦ(Форма);
	
КонецПроцедуры

Процедура ИзменитьГруппировкуСУЦ(Форма)
	
	Элементы = Форма.Элементы;
	
	ИспользоватьСуществующий = ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Форма);
	
	ВывестиВОднойСтроке = 
		ИспользоватьСуществующий И Форма.ВключаемыйСертификат = Неопределено
		ИЛИ НЕ ИспользоватьСуществующий;
	
	Если ВывестиВОднойСтроке Тогда
		Элементы.ГруппаСпособПолученияСертификата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	Иначе
		Элементы.ГруппаСпособПолученияСертификата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеСУЦ(Форма)
	
	Элементы = Форма.Элементы;
	
	ПоказыватьСуществующий = 
		ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Форма)
		ИЛИ Форма.СертификатДолженБытьПолученОтГосУЦ;
		
	Элемент = Элементы.ПредставлениеВключаемогоСертификата;
		
	Если ПоказыватьСуществующий Тогда
		
		Если Форма.ВключаемыйСертификат = Неопределено Тогда
			Элемент.Заголовок  = НСтр("ru = 'Выбрать'");
			Элемент.ЦветТекста = Форма.КрасныйЦвет;
		Иначе
			Представление = ДокументооборотСКОКлиентСервер.ПредставлениеСертификата(Форма.ВключаемыйСертификат);
			Элемент.Заголовок  = Представление;
			Элемент.ЦветТекста = Форма.СинийЦвет;
		КонецЕсли;
		Элемент.Видимость = Истина;
	Иначе
		Элемент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеКнопкиОчисткиСУЦ(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ОчиститьВключаемыйСертификат.Видимость = 
		ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Форма) 
		И НЕ Форма.ЗапретитьИзменение 
		И Форма.ВключаемыйСертификат <> Неопределено
		И НЕ Форма.СертификатДолженБытьПолученОтГосУЦ;
	
КонецПроцедуры
	
Процедура ИзменитьОформлениеСпособаПолученияСертификата(Форма)
	
	Элементы = Форма.Элементы;
	ЭтоПервичноеЗаявление = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма);
	ЭтоРуководитель       = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	Если ЭтоПервичноеЗаявление Тогда
		
		Видимость = 
			Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса 
			ИЛИ Форма.СертификатыОрганизацииПоИНН.Количество() > 0 
			ИЛИ Форма.СертификатДолженБытьПолученОтГосУЦ
			ИЛИ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ И ЭтоРуководитель
			ИЛИ НЕ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ И НЕ ЭтоРуководитель;
		
		Элементы.ГруппаПолученияСертификата.Видимость = Видимость;

		Если Видимость И Форма.ЗапретитьИзменение Тогда
			Элементы.ГруппаПолученияСертификата.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если Форма.ЭтоИнтеграцияСБанком Тогда
			Элементы.ГруппаПолученияСертификата.Ширина = 60;
		Иначе
			Элементы.ГруппаПолученияСертификата.ЦветФона = Новый Цвет();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПереключатателейСертификата.Видимость = 
		НЕ Форма.СертификатДолженБытьПолученОтГосУЦ
		И НЕ Форма.ЭтоИнтеграцияСБанком;
	
КонецПроцедуры

Процедура ИзменитьОформлениеПодсказкиСУЦ(Форма)
	
	Если Форма.ЭтоИнтеграцияСБанком Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	СсылкаСертификата = Элементы.ПредставлениеВключаемогоСертификата;
	Вопросик = Элементы.ПодсказкаПоВключаемомуСертификату;
	
	Если Форма.ЭтоБюджетополучатель Тогда
		
		Подсказка = ОбработкаЗаявленийАбонентаКлиентСервер.ПодсказкаПриВыбореСертификатаКазначейства();
		СсылкаСертификата.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		СсылкаСертификата.РасширеннаяПодсказка.Заголовок = Подсказка;
		Вопросик.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
	ИначеЕсли ЭтоРуководитель И НЕ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ Тогда
		
		Подсказка = ОбработкаЗаявленийАбонентаКлиентСервер.ПодсказкаПриВыбореСертификатаФНС(Форма.ЭтоЮридическоеЛицо);
		СсылкаСертификата.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		СсылкаСертификата.РасширеннаяПодсказка.Заголовок = Подсказка;
		Вопросик.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
	Иначе
		
		Подсказка = НСтр("ru = 'Можно использовать сертификаты, выданные удостоверяющими центрами, аккредитованными 
                          |Минкомсвязи России, а также сертификаты, изданные для целей 1С-Отчетности в другой программе.'");
		СсылкаСертификата.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Вопросик.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Вопросик.РасширеннаяПодсказка.Заголовок = Подсказка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьЗаявление_ДанныеУЦ(Форма, НовыйДокументЗаявление) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.РазобратьДанныеУЦ(Форма);
	
	НовыйДокументЗаявление.СпецоператорСвязи = Форма.Спецоператор;
	
	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоПолучениеСертификатВКА(Форма) Тогда
		НовыйДокументЗаявление.НаименованиеУЦ			= Форма.НаименованиеУЦ;
		НовыйДокументЗаявление.РегламентУЦ				= Форма.РегламентУЦ;
		НовыйДокументЗаявление.ПолучательЗаявленияВУЦ	= Форма.ПолучательЗаявленияВУЦ;
		НовыйДокументЗаявление.АдресУЦ					= Форма.АдресУЦ;
	ИначеЕсли НЕ ОбработкаЗаявленийАбонентаКлиентСервер.ИспользоватьСуществующий(Форма) Тогда
		НовыйДокументЗаявление.УдостоверяющийЦентр		= Форма.УЦ;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьЗаявление_СлужебныеРеквизиты(Форма, НовыйДокументЗаявление, GUID = "") Экспорт
	
	НовыйДокументЗаявление.Дата							= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Ответственный				= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи	= '00010101';
	НовыйДокументЗаявление.Статус						= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
	
	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма) Тогда
	
		НовыйДокументЗаявление.ТипЗаявления	= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
		НовыйДокументЗаявление.ИдентификаторДокументооборота = GUID;
		
	Иначе
		НовыйДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение;
		НовыйДокументЗаявление.ИдентификаторДокументооборота	= ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор();
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьЗаявление_Очистка(Форма, НовыйДокументЗаявление) Экспорт
	
	Для каждого РеквизитЗаявления Из НовыйДокументЗаявление.Метаданные().Реквизиты Цикл
		Если РеквизитЗаявления.Имя = "Номер" И Форма.ЭтоОткрытиеЗаявления Тогда
			НовыйДокументЗаявление.УстановитьНовыйНомер();
		ИначеЕсли РеквизитЗаявления.Имя <> "ПодписатьЭП" Тогда
			НовыйДокументЗаявление[РеквизитЗаявления.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Для каждого ТаблицаЗаявления Из НовыйДокументЗаявление.Метаданные().ТабличныеЧасти Цикл
		НовыйДокументЗаявление[ТаблицаЗаявления.Имя].Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДанныеВладельца(Форма) Экспорт
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Имя = РеквизитФормы.Имя;
		
		ОчиститьРеквзит = 
			СтрНайти(Имя, "Владелец") <> 0
			И СтрНайти(Имя, "Исходн") = 0;
		
		Если ОчиститьРеквзит Тогда
			Форма[Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Чистим, т.к. они были отобраны по ИНН Владельца
	Форма.СертификатыОрганизацииПоИНН.Очистить();

	ОбработкаЗаявленийАбонентаКлиентСервер.ОчиститьФайлыПриУстановкеНовогоВладельцаЭЦП(Форма);
		
КонецПроцедуры

Процедура ЗаполнитьДанныеСотрудника(Форма) Экспорт
	
	ДанныеОрганизации = Форма.ДанныеОрганизации;
	
	ДанныеОрганизации.Вставить("Организация", Форма.Организация);
 
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		Форма.ВладелецЭЦПТип, 
		ДанныеОрганизации, 
		Форма.ВладелецЭЦП);
		
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	Форма.ВладелецЭЦПИмя		= ДанныеСотрудника.ФИО.Имя;
	Форма.ВладелецЭЦПФамилия	= ДанныеСотрудника.ФИО.Фамилия;
	Форма.ВладелецЭЦПОтчество	= ДанныеСотрудника.ФИО.Отчество;
	Форма.ВладелецЭЦПСНИЛС		= ДанныеСотрудника.СНИЛС;
	Форма.ВладелецЭЦПИНН		= ДанныеСотрудника.ИНН;
	Форма.ВладелецЭЦПЭтоФизЛицо = НЕ ЭтоРуководитель; // Потом переключат, если понадобится
	
	Если Форма.ЭтоЮридическоеЛицо Тогда
		Форма.ВладелецЭЦПДолжность = ДанныеСотрудника.Должность;
		Форма.ВладелецЭЦППодразделение = ДанныеСотрудника.Подразделение;
	КонецЕсли;
	
	ПередставлениеТелефона = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(ДанныеСотрудника.ТелефонРабочий); 
	Если ПередставлениеТелефона = "" Тогда
		Форма.ТелефонДляПаролей = ДанныеСотрудника.ТелефонРабочий;
	Иначе
		Форма.ТелефонДляПаролей = ПередставлениеТелефона;
	КонецЕсли;
	
	Форма.ВладелецЭЦПВидДокумента = ДанныеСотрудника.ВидДокумента;
	ЭтоПервичноеЗаявление = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма);
	Если ЭтоПервичноеЗаявление Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Форма.ВладелецЭЦПВидДокумента = КонтекстЭДОСервер.СкорректироватьВидУдостоверения(Форма.ВладелецЭЦПВидДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ВладелецЭЦПВидДокумента) Тогда
		
		Форма.ВладелецЭЦПСерияДокумента      = ДанныеСотрудника.Серия;
		Форма.ВладелецЭЦПНомерДокумента      = ДанныеСотрудника.Номер;
		Форма.ВладелецЭЦПДатаВыдачиДокумента = ДанныеСотрудника.ДатаВыдачи;
		Форма.ВладелецЭЦПКемВыданДокумент    = ДанныеСотрудника.КемВыдан;
		Форма.ВладелецЭЦПДатаРождения        = ДанныеСотрудника.ДатаРождения;
		Форма.ВладелецЭЦПМестоРождения       = ДанныеСотрудника.МестоРождения;
		Форма.ВладелецЭЦППол                 = ДанныеСотрудника.Пол;
		
		ЭтоПаспортРФ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(Форма.ВладелецЭЦПВидДокумента);
		
		Если ЭтоПаспортРФ Тогда
			Форма.ВладелецЭЦПКодПодразделения = ДанныеСотрудника.КодПодразделения;
		Иначе
			Форма.ВладелецЭЦПКодПодразделения = "";
		КонецЕсли;
		
		// Гражданство заполняем только для Российского паспорта
		Форма.ВладелецЭЦПГражданство = ДанныеСотрудника.Гражданство;
		Если ЭтоПаспортРФ И НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦПГражданство) Тогда
			Форма.ВладелецЭЦПГражданство = Справочники.СтраныМира.Россия;
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦПВидДокумента) Тогда
		Форма.ВладелецЭЦПВидДокумента = ОбщегоНазначения.ПредопределенныйЭлемент(
			"Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМЧДВЗаявлении(Форма) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда
		ОбработкаЗаявленийАбонентаКлиентСервер.УдалитьМЧДИзФайлов(Форма);
		Возврат;
	КонецЕсли;
	
	Обязательно = ОбработкаЗаявленийАбонентаКлиентСервер.ОбязательноПриложитьМЧД(Форма);
	ЕстьВыбор   = ОбработкаЗаявленийАбонентаКлиентСервер.ЕстьВыборМеждуМЧДиСканом(Форма);
	
	Заполнить = Обязательно ИЛИ ЕстьВыбор И Форма.ВладелецЭЦПЭтоФизЛицо;
	
	Если НЕ Заполнить Тогда
		ОбработкаЗаявленийАбонентаКлиентСервер.УдалитьМЧДИзФайлов(Форма);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.УдалитьТекущийВидДокументов(Форма, "Доверенность");
	
	Доверенности = Новый Массив;
	ДобавитьМЧДВЗаявление(Форма, Доверенности, "ФНС");
	ДобавитьМЧДВЗаявление(Форма, Доверенности, "РаспределенныйРеестр");
	ДобавитьМЧДФССВЗаявление(Форма, Доверенности);
	
	МЧДДляДобавления = Новый Массив;
	Для каждого МЧД Из Доверенности Цикл
		
		Результат = ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьФайлыМЧД(МЧД, Форма.ВладелецЭЦПИНН);
	
		Если НЕ Результат.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		
		МЧДДляДобавления.Добавить(Результат.Доверенность);
		
	КонецЦикла;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ДобавитьМЧДВФайлыЗаявления(Форма, МЧДДляДобавления);
		
КонецПроцедуры

Функция ДобавитьМЧДВЗаявление(Форма, Доверенности, Вид) Экспорт
	
	Выборка = ВыборкаМЧДДляЗаявления(Форма, Вид);
	
	Пока Выборка.Следующий() Цикл
		
		МЧД = Выборка.МЧД;
		
		Отправлена = МЧДОтправлена(МЧД);
		Отозвана   = МЧДОтозвана(МЧД);
		Загружена  = ОбработкаЗаявленийАбонентаВызовСервера.МЧДЗагружена(МЧД);
		
		Если (Отправлена ИЛИ Загружена) И НЕ Отозвана Тогда
			Доверенности.Добавить(МЧД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция МЧДОтправлена(МЧД) Экспорт
	
	Если ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС") Тогда 
		ТекущееСостояние = ДлительнаяОтправкаВызовСервера.ТекущийЭтапОтправки(МЧД, "ФНС");
	ИначеЕсли ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		ТекущееСостояние = ДлительнаяОтправкаВызовСервера.ТекущийЭтапОтправки(МЧД, Неопределено);
	КонецЕсли;

	Если ТекущееСостояние = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Состояние = ТекущееСостояние.СостояниеСдачиОтчетности;
	Состояния = Перечисления.СостояниеСдачиОтчетности;
	
	Отправлено = 
		Состояние = Состояния.ДокументооборотНачат
		ИЛИ Состояние = Состояния.ПоложительныйРезультатДокументооборота;
	
	Возврат Отправлено;
	
КонецФункции

Функция МЧДОтозвана(МЧД) Экспорт
	
	Если ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС") Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Отозвана = КонтекстЭДОСервер.ПроверитьМЧДФНСНаОтзыв(МЧД);
	ИначеЕсли ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		Отозвана = МЧД.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отозвано;
	Иначе
		Отозвана = Ложь;
	КонецЕсли;
		
	Возврат Отозвана;
	
КонецФункции

Функция ДобавитьМЧДФССВЗаявление(Форма, Доверенности) Экспорт
	
	Выборка = ВыборкаМЧДДляЗаявления(Форма, "ФСС");
	
	Пока Выборка.Следующий() Цикл
		
		МЧД = Выборка.МЧД;
		Зарегистрирована = МЧДФССЗарегистрирована(МЧД);
		Если Зарегистрирована Тогда
			Доверенности.Добавить(МЧД);
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

Функция ВыборкаМЧДДляЗаявления(Форма, Вид) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МЧД.Ссылка КАК МЧД
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФСС КАК МЧД
		|ГДЕ
		|	МЧД.ПометкаУдаления = ЛОЖЬ
		|	И МЧД.Доверитель = &Доверитель
		|	И МЧД.ДатаОкончания > &ТекущаяДата
		|	И ТИПЗНАЧЕНИЯ(МЧД.Представитель) = ТИП(Справочник.ФизическиеЛица)
		|	И МЧД.ПредставительФЛ_ИНН = &ПредставительФЛ_ИНН";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФСС", Вид);
	
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Доверитель", 	Форма.Организация);
	Запрос.УстановитьПараметр("ПредставительФЛ_ИНН", Форма.ВладелецЭЦПИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция МЧДФССЗарегистрирована(МЧД) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ОтправкаСсылка = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСС(МЧД);
	Зарегистрирована = 
		ОтправкаСсылка <> Неопределено 
		И ОтправкаСсылка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
	Возврат Зарегистрирована;
	
КонецФункции

#КонецОбласти