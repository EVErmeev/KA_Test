#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Настройки размещения отчетов
// см. ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	Разделы.Добавить(Метаданные.Подсистемы.РегламентированныйУчет,
		НСтр("ru= 'Отчеты по регламентированному учету'"));
		
	Разделы.Добавить(Метаданные.Подсистемы.РегламентированныйУчет.Подсистемы.СтандартныеОтчеты, 
		НСтр("ru= 'Стандартные бухгалтерские отчеты'"));
		
	ЗарплатаКадрыПереопределяемый.ОпределитьРазделыСВариантамиОтчетов(Разделы);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки команд отчетов
// см. ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	ИмущественныеНалоги.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	//-- НЕ УТ

	Объекты.Добавить(Метаданные.Документы.ЗапросКоммерческогоПредложенияОтКлиента);
	Объекты.Добавить(Метаданные.Документы.ЗапросКоммерческихПредложенийПоставщиков);
	Объекты.Добавить(Метаданные.Документы.КоммерческоеПредложениеПоставщика);
	Объекты.Добавить(Метаданные.Документы.КоммерческоеПредложениеКлиенту);
	Объекты.Добавить(Метаданные.Документы.ЛистКассовойКниги);
	Объекты.Добавить(Метаданные.Документы.ОперацияПоЯндексКассе);
	Объекты.Добавить(Метаданные.Документы.СправкаОПодтверждающихДокументах);
	Объекты.Добавить(Метаданные.Документы.ТранспортнаяНакладная);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОЗачисленииВалюты);
	Объекты.Добавить(Метаданные.Документы.КорректировкаОбособленногоУчетаЗапасов);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОЗачисленииВалюты);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковНДСПредъявленного);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров);
	
	
	//++ НЕ УТ
	Объекты.Добавить(Метаданные.Документы.ВводДанныхПоНалогуНаПрибыль);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковРасходовПриУСН);
	Объекты.Добавить(Метаданные.Документы.ВозвратМатериаловИзПроизводства);
	Объекты.Добавить(Метаданные.Документы.ВыбытиеДенежныхДокументов);
	Объекты.Добавить(Метаданные.Документы.ВыпускПродукции);
	Объекты.Добавить(Метаданные.Документы.ДепонированиеЗарплаты);
	Объекты.Добавить(Метаданные.Документы.ИзделияИЗатратыНЗП);
	Объекты.Добавить(Метаданные.Документы.ПередачаМатериаловВПроизводство);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеМатериаловВПроизводстве);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеДенежныхДокументов);
	Объекты.Добавить(Метаданные.Документы.СписаниеЗатратНаВыпуск);
	Объекты.Добавить(Метаданные.Документы.СтатистикаПерсонала);
	
	// ЗарплатаКадрыПодсистемы
	ЗарплатаКадры.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	// Конец ЗарплатаКадрыПодсистемы
	
	// ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете
	Объекты.Добавить(Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете);
	// Конец ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете
	
	//-- НЕ УТ
	
	// ИнтеграцияГИСМ
	Объекты.Добавить(Метаданные.Документы.ЗаявкаНаВыпускКиЗГИСМ);
	Объекты.Добавить(Метаданные.Документы.МаркировкаТоваровГИСМ);
	Объекты.Добавить(Метаданные.Документы.ЗапросАкцизныхМарокЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ПеремаркировкаТоваровГИСМ);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОбИмпортеМаркированныхТоваровГИСМ);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОПоступленииМаркированныхТоваровГИСМ);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОСписанииКиЗГИСМ);
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	Объекты.Добавить(Метаданные.Документы.АктПостановкиНаБалансЕГАИС);
	Объекты.Добавить(Метаданные.Документы.АктСписанияЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ВозвратИзРегистра2ЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ОстаткиЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ПередачаВРегистр2ЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ТТНВходящаяЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ЧекЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ЧекЕГАИСВозврат);
	Объекты.Добавить(Метаданные.Документы.ОтчетЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ТранспортнаяНакладнаяЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ОтчетОбИмпортеЕГАИС);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС);
	Объекты.Добавить(Метаданные.Документы.ОтчетОПроизводствеЕГАИС);
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияВЕТИС
	Объекты.Добавить(Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС);
	Объекты.Добавить(Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС);
	Объекты.Добавить(Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС);
	Объекты.Добавить(Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС);
	Объекты.Добавить(Метаданные.Документы.ПроизводственнаяОперацияВЕТИС);
	// Конец ИнтеграцияВЕТИС
	
	// ИнтеграцияИСМП
	Объекты.Добавить(Метаданные.Документы.МаркировкаТоваровИСМП);
	Объекты.Добавить(Метаданные.Документы.ВыводИзОборотаИСМП);
	Объекты.Добавить(Метаданные.Документы.ВозвратВОборотИСМП);
	Объекты.Добавить(Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ);
	Объекты.Добавить(Метаданные.Документы.ПеремаркировкаТоваровИСМП);
	Объекты.Добавить(Метаданные.Документы.СписаниеКодовМаркировкиИСМП);
	Объекты.Добавить(Метаданные.Документы.ОтгрузкаТоваровИСМП);
	Объекты.Добавить(Метаданные.Документы.ПриемкаТоваровИСМП);
	Объекты.Добавить(Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП);
	Объекты.Добавить(Метаданные.Справочники.ШтрихкодыУпаковокТоваров);
	// Конец ИнтеграцияИСМП
	
	//Начало ИнтеграцияЗЕРНО
	Объекты.Добавить(Метаданные.Справочники.ДоговорыХраненияПартийЗЕРНО);
	Объекты.Добавить(Метаданные.Справочники.РеестрМестФормированияПартийЗЕРНО);
	Объекты.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО);
	Объекты.Добавить(Метаданные.Справочники.РезультатыИсследованийЗЕРНО);
	Объекты.Добавить(Метаданные.Справочники.СДИЗЗЕРНО);
	Объекты.Добавить(Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО);
	Объекты.Добавить(Метаданные.Документы.ЗапросОстатковПартийЗЕРНО);
	Объекты.Добавить(Метаданные.Документы.ОформлениеСДИЗЗЕРНО);
	Объекты.Добавить(Метаданные.Документы.ПогашениеСДИЗЗЕРНО);
	Объекты.Добавить(Метаданные.Документы.СписаниеПартийЗЕРНО);
	Объекты.Добавить(Метаданные.Документы.ФормированиеПартийЗЕРНО);
	Объекты.Добавить(Метаданные.Документы.ФормированиеПартийИзДругихПартийЗЕРНО);
	Объекты.Добавить(Метаданные.Документы.ФормированиеПартийПриПроизводствеЗЕРНО);
	//Конец ИнтеграцияЗЕРНО
	
	УчетПрослеживаемыхТоваровЛокализация.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	//++ НЕ УТ
	РеглУчетСервер.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	//-- НЕ УТ
	
	// 275-ФЗ
	Объекты.Добавить(Метаданные.Справочники.ГосударственныеКонтракты);

	//-- Локализация

КонецПроцедуры

// Задает настройки, применяемые как стандартные для объектов подсистемы.
// см. ВариантыОтчетовПереопределяемый.ПриОпределенииНастроек
// 
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	//++ Локализация
	Настройки.Вставить("ОписаниеМобильногоПриложения",  ИнформацияОМобильномПриложении());
	//-- Локализация
	
КонецПроцедуры

// Задает настройки размещения вариантов отчетов в панели отчетов.
// см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	//++ Локализация
	ВыводитьВариантыОтчетов = Ложь;
	
	//++ НЕ УТ
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДанныеДляБазыРаспределенияРасходов);
	//-- НЕ УТ
	
	// ИнтернетПоддержкаПользователей
	ИнтеграцияПодсистемБИП.ПриНастройкеВариантовОтчетов(Настройки);
	// Конец ИнтернетПоддержкаПользователей
	
	ТМЦВЭксплуатацииСервер.НастроитьВариантыОтчетов(Настройки);
	
	//++ НЕ УТ
	#Область ДенежныеДокументы
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоДенежнымДокументам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоДенежнымДокументам");
	ОписаниеВарианта.Описание = НСтр("ru='Какие денежные документы есть на предприятии?'");
	#КонецОбласти
	//-- НЕ УТ
	
	#Область ДосьеКонтрагента
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДосьеКонтрагента);
	ОписаниеОтчета.Включен = Ложь;	
	#КонецОбласти
	
	
	#Область ЖурналУчетаРозничнойПродажиАлкогольнойПродукции
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЖурналУчетаРозничнойПродажиАлкогольнойПродукции);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Журнал учета объема розничной продажи алкогольной
		|и спиртосодержащей продукции.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Журнал учета объема розничной продажи алкогольной и спиртосодержащей продукции
		|Организация
		|Подразделение'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Склад'");
	#КонецОбласти
	
	
	#Область ЖурналУчетаТМЦСданныхНаХранение
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЖурналУчетаТМЦСданныхНаХранение);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Форма по ОКУД 0335003
		|Организация
		|Организация-хранитель
		|Поклажедатель
		|Поклажедержатель
		|Структурное подразделение
		|ОКПО
		|ОКДП
		|Материально-ответственное лицо
		|МОЛ'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация'");
	ОписаниеВарианта.Описание = НСтр("ru= 'Печать унифицированных форм МХ-1, МХ-2, МХ-3 по организации-хранителю за период'");
	#КонецОбласти
	
	
	#Область ЖурналФискальныхОпераций
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ЖурналФискальныхОпераций);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Журнал учета документов, выданных покупателю при расчетах.'");
	#КонецОбласти
	
	//++ НЕ УТ
	#Область ВедомостьПрослеживаемыхТоваровВСоставеОС
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПрослеживаемыхТоваровВСоставеОС);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Отчет предназначен для учета остатков прослеживаемых товаров в составе ОС'");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров");
	ОписаниеВарианта.Размещение.Вставить(Метаданные.Подсистемы.ВнеоборотныеАктивы.Подсистемы.ОсновныеСредства);
	#КонецОбласти
	
	#Область ОстаткиПрослеживаемыхТоваровВСоставеОСНепринятыхКУчету
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиПрослеживаемыхТоваровВСоставеОСНепринятыхКУчету);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Отчет предназначен для учета остатков прослеживаемых товаров в составе ОС, не принятых к учету'");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Истина;
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров");
	ОписаниеВарианта.Размещение.Вставить(Метаданные.Подсистемы.ВнеоборотныеАктивы.Подсистемы.ОсновныеСредства);
	#КонецОбласти
	//-- НЕ УТ
	
	#Область ИндексыСПАРКРиски
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИндексыСПАРКРиски);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Просмотр индексов 1СПАРК Риски по контрагентам.'");
	#КонецОбласти
	
	
	#Область ИмпортныеТоварыКОформлению
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмпортныеТоварыКОформлению);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИмпортныеТоварыКОформлению");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьИмпортныеЗакупки");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким товарам не оформлены таможенные декларации?'");	
	#КонецОбласти
	
	#Область КартаПродаж
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КартаПродаж);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ объемов продаж с помощью географической карты.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КартаПродаж");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ объемов продаж с помощью географической карты.'");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьБизнесРегионы");
	#КонецОбласти
	
	#Область КарточкаПартииПоВидамНалогообложения
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаПартииПоВидамНалогообложения);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);	
	#КонецОбласти
	
	
	#Область НастройкаСписка
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.НастройкаСписка);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти

	#Область ПересеченияШтрихкодовНоменклатурыСоСпецКодами 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПересеченияШтрихкодовНоменклатурыСоСпецКодами);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;	
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);	
	#КонецОбласти
	
	#Область РеестрНормативноСправочнойИнформации
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РеестрНормативноСправочнойИнформации);
	#КонецОбласти
	
	
	#Область РеестрТорговыхДокументов
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрТорговыхДокументов);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ВариантыОтчетовУТПереопределяемый.УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "СмТакже");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru= 'Список всех торговых документов'");
	#КонецОбласти
	
	
	#Область РеестрУчетныхДанных
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РеестрУчетныхДанных);
	#КонецОбласти
	
	#Область СверкаДанныхПартионногоУчетаИСебестоимости 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаДанныхПартионногоУчетаИСебестоимости);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СверкаДанныхПартионногоУчетаИСебестоимости");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПартионныйУчет");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сверка движений по регистрам партионного учета и движений по регистру себестоимости.'");
	#КонецОбласти

	#Область СверкаРасчетовСПартнерами
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаРасчетовСПартнерами);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ задокументированных сверок расчетов с клиентами.
		|Есть ли расхождения между данными от клиента и нашими?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СверкаРасчетовСПартнерами");
	ОписаниеВарианта.Описание = НСтр("ru= 'Анализ задокументированных сверок расчетов с клиентами.
		|Есть ли расхождения между данными от клиента и нашими?'");
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СверкаРасчетовСПартнерамиКонтекст");
	#КонецОбласти
	
	#Область СобытияМониторингаСПАРКРиски
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СобытияМониторингаСПАРКРиски);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Просмотра событий мониторинга 1СПАРК Риски. Показываются события за последние 15 дней.'");
	#КонецОбласти
	
	
	#Область ТоварныйОтчетТОРГ29
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ТоварныйОтчетТОРГ29);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Форма по ОКУД 330229
		|Организация
		|Структурное подразделение
		|ОКПО
		|ОКДП
		|Материально-ответственное лицо
		|МОЛ'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Организация
		|Склад
		|Номер отчета'");
	ОписаниеВарианта.Описание =  НСтр("ru= 'Товарный отчет для анализа розничных продаж. Отчет формируется по регламентированной форме Торг-29'");
	#КонецОбласти
		
	#Область СверкаДанныхПартионногоУчетаИСебестоимости 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаДанныхПартионногоУчетаИСебестоимости);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СверкаДанныхПартионногоУчетаИСебестоимости");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользоватьПартионныйУчет");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сверка движений по регистрам партионного учета и движений по регистру себестоимости.'");
	#КонецОбласти
	
	//++ НЕ УТ
	#Область АнализЗатрат
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализЗатрат);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы затраты подразделений за период?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализПроизводственныхЗатрат");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы затраты подразделений за период?
		|Какова структура затрат за период и остаток незавершенного производства?'");
	#КонецОбласти
					
	#Область ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяТолькоУправлениеПроизводством21");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы затраты производства по материалам, полуфабрикатам и работам?
										|Куда распределены затраты производства?
										|Каковы остатки материалов, полуфабрикатов в производстве?'");
	
	ОтключитьВариант = Ложь;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве21");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("ИспользуетсяУправлениеПроизводством21и22");
	ОписаниеВарианта.Описание = НСтр("ru='Каковы затраты производства по материалам, полуфабрикатам и работам?
										 |Куда распределены затраты производства?
										 |Каковы остатки материалов, полуфабрикатов в производстве?'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ДвижениеМатериаловПолуфабрикатовРаботВПроизводствеКонтекст");
	#КонецОбласти
	
	
	#Область ЗарплатаКадры
	// Для всех отчетов разделов "Зарплата" и "Кадры" устанавливаем вывод отчетов вместо вариантов.
	ВыводитьВариантыОтчетов = Ложь;
	КоллекцияОтчетов = Метаданные.Отчеты;
	Для Каждого Отчет Из КоллекцияОтчетов Цикл
		Если ЗарплатаКадры.ОбъектМетаданныхВключенВПодсистемы(Отчет.ПолноеИмя(), "ЗарплатаКадрыПодсистемы,ЗарплатаКадрыРасширеннаяПодсистемы,ЗарплатаКадрыПриложения") Тогда
			ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Отчет);
			ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
		КонецЕсли;
	КонецЦикла;
	
	ЗарплатаКадрыОтчеты.НастроитьВариантыОтчетов(Настройки);
	ЗарплатаКадрыКомандныйИнтерфейс.НастроитьВариантыОтчетов(Настройки);
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.КнигаУчетаДепонентов);
	#КонецОбласти
	
	
	#Область МатериалыВПроизводствеПоСрокамГодности
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.МатериалыВПроизводствеПоСрокамГодности);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким материалам скоро истекает срок годности?'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОстаткиТоваровПоСрокамГодности");
	ОписаниеВарианта.Описание = НСтр("ru= 'По каким материалам скоро истекает срок годности?
		|Сколько таких материалов и в каких они подразделениях?'");
	#КонецОбласти		
		
	
	#Область ПроблемыПроверкиКонтрагентов
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПроблемыПроверкиКонтрагентов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Проблемы, выявленные при проверке контрагентов сервисом ФНС.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Контрагент
		|Документ
		|ИНН
		|КПП
		|Проблема'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Период
		|Контрагенты
		|Документы'");
	#КонецОбласти
	
	#Область ПроизводственныеЗатраты
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПроизводственныеЗатраты);
	ОписаниеОтчета.Описание = НСтр("ru= 'Сводная информация о затратах (материалах, выполненных видах работ и постатейных расходах), партиях производства и выпущенной продукции в разрезе организаций.'");
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДвижениеТМЦиПроизводственныеЗатратыПоПредприятию");
	ОписаниеВарианта.Описание = НСтр("ru= 'Сводная информация о затратах (материалах, выполненных видах работ и постатейных расходах), партиях производства и выпущенной продукции по предприятию.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ВариантыОтчетовУТПереопределяемый.УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	#КонецОбласти
	
	#Область РасшифровкаПоступлениеМатериаловВПроизводство
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаПоступлениеМатериаловВПроизводство));
	#КонецОбласти
	
	
	#Область РасшифровкаРасходовНаПроизводство
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаРасходовНаПроизводство));
	#КонецОбласти

	#Область СправкаРасчетПереоценкиВалютныхСредствНУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетПереоценкиВалютныхСредствНУ);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НеБазоваяВерсия");
	ОписаниеВарианта.Описание = НСтр("ru= 'Откуда возникают курсовые разницы?
		|Почему требуется переоценка?'");
	#КонецОбласти
	
	//-- НЕ УТ
	
	
	
	ИнтеграцияИС.НастроитьВариантыОтчетов(Настройки);
	
	//++ НЕ УТ
	РеглУчетСервер.НастроитьВариантыОтчетов(Настройки);
	//-- НЕ УТ
	
	//-- Локализация
		
КонецПроцедуры

// Содержит описания изменений имен вариантов отчетов. Используется
// при обновлении информационной базы, в целях контроля ссылочной целостности
// и для сохранения настроек варианта, сделанных администратором.
// см. ВариантыОтчетовПереопределяемый.ЗарегистрироватьИзмененияКлючейВариантовОтчетов
// 
Процедура ЗарегистрироватьИзмененияКлючейВариантовОтчетов(Изменения) Экспорт
	
	//++ Локализация
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьИзменениеКлючей(Изменения, "УправленческийБаланс", "ПоОрганизациям", "УправленческийБаланс");
	
	//-- Локализация
	
КонецПроцедуры

// Возвращает имя и параметры формы с информацией о мобильном приложении для отображения в отчетах
//
// Возвращаемое значение:
// 	Структура - Ключи:
// 		* ИмяФормы - Строка - Имя общей формы
// 		* ПараметрыФормы - Структура - Содержит поля:
// 			** ИмяМакетаОписания - Строка - Имя общего макета с информацией о мобильном приложении
// 			** НазваниеПриложения - Строка - Название приложения
Функция ИнформацияОМобильномПриложении() Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяФормы", "");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМакетаОписания", "");
	ПараметрыФормы.Вставить("НазваниеПриложения", "");
	Описание.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат Описание;
	
КонецФункции

#Область ДосьеКонтрагента

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
// Возвращаемое значение:
//   См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
Функция ДобавитьКомандуДосьеКонтрагента(КомандыОтчетов) Экспорт
	
	//++ Локализация
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДосьеКонтрагента) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.ДосьеКонтрагента.ПолноеИмя();
		
		ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
		Представление = ?(ИспользоватьПартнеровКакКонтрагентов, НСтр("ru = 'Досье контрагента по данным сервиса 1С:Контрагент'"), НСтр("ru = 'Досье контрагента'"));
		
		КомандаОтчет.Представление = Представление;
		КомандаОтчет.Обработчик = "ПартнерыИКонтрагентыЛокализацияКлиент.ДосьеКонтрагента";
		
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Важное";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	//-- Локализация
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти
