#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значения по умолчанию для ресурсов регистра.
// Имена ключей структуры должны строго соответствовать именам ресурсов регистра.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - структура значений ресурсов регистра.
Функция ЗначенияПоУмолчанию() Экспорт
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("ПорядокУплатыАвансовПоНалогуНаПрибыль", Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежеквартально);
	СтруктураЗначений.Вставить("БазаРаспределенияКосвенныхРасходовПоВидамДеятельности", 
		Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализации);
	СтруктураЗначений.Вставить("ФормироватьРезервыПоСомнительнымДолгамНУ", Ложь);
	СтруктураЗначений.Вставить("ПериодичностьРезервовПоСомнительнымДолгамНУ", Неопределено);
	СтруктураЗначений.Вставить("ВключатьВСоставНалоговыхРасходовАрендныеПлатежи", Ложь);
	СтруктураЗначений.Вставить("МетодНачисленияАмортизацииНУ", Перечисления.МетодыНачисленияАмортизации.Линейный);
	СтруктураЗначений.Вставить("ОсновнойВариантНалогообложенияПрибыли",
		Справочники.ВариантыНалогообложенияПрибыли.ОбщиеУсловияНалогообложения);
	СтруктураЗначений.Вставить("РаздельныйУчетПоНалогуНаПрибыль", Ложь);
	СтруктураЗначений.Вставить("ПоказательОпределенияДолиПрибыли",
		Перечисления.ПоказателиДляОпределенияДолиПрибыли.РасходыНаОплатуТруда);
	СтруктураЗначений.Вставить("УплачиватьНалогПоГруппамОбособленныхПодразделений", Ложь);
	СтруктураЗначений.Вставить("УчетнаяПолитикаСуществует", Ложь);
	
	Возврат СтруктураЗначений
КонецФункции

// Возращает текст запроса по данным регистра.
// 
// Возвращаемое значение:
// 	Строка - Текст запроса.
Функция ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик() Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА ТаблицаСрезПоследних.Период ЕСТЬ NULL Тогда
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК УчетнаяПолитикаСуществует,
	|	ТаблицаСрезПоследних.Период КАК Период,
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация,
	|	ТаблицаСрезПоследних.ПорядокУплатыАвансовПоНалогуНаПрибыль,
	|	ТаблицаСрезПоследних.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности,
	|	ТаблицаСрезПоследних.ФормироватьРезервыПоСомнительнымДолгамНУ,
	|	ТаблицаСрезПоследних.ПериодичностьРезервовПоСомнительнымДолгамНУ,
	|	ТаблицаСрезПоследних.ВключатьВСоставНалоговыхРасходовАрендныеПлатежи,
	|	ТаблицаСрезПоследних.МетодНачисленияАмортизацииНУ,
	|	ТаблицаСрезПоследних.ОсновнойВариантНалогообложенияПрибыли,
	|	ТаблицаСрезПоследних.РаздельныйУчетПоНалогуНаПрибыль,
	|	ТаблицаСрезПоследних.ПоказательОпределенияДолиПрибыли,
	|	ТаблицаСрезПоследних.УплачиватьНалогПоГруппамОбособленныхПодразделений,
	|	ТаблицаСрезПоследних.ДатаНезависимогоПризнанияДоходовРасходов
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&Период, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК ТаблицаСрезПоследних
	|		ПО ГоловныеОрганизации.Организация = ТаблицаСрезПоследних.Организация
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Формирует текстовое описание установленных параметров.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДатаДействия - Дата - период действия настроек.
// 	ДействующиеНастройки - Структура - действующие параметры учетной политики.
// Возвращаемое значение:
// 	Строка - Описание действующих параметров строкой.
Функция ОписаниеДействующихПараметров(Организация, ДатаДействия = Неопределено, ДействующиеНастройки = Неопределено) Экспорт
	
	Период = ?(ЗначениеЗаполнено(ДатаДействия), ДатаДействия, ТекущаяДатаСеанса());
	
	СтрокаОписанияНастроек = "";
	
	Если ДействующиеНастройки = Неопределено Тогда
		ДействующиеНастройки = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"НастройкиУчетаНалогаНаПрибыль",
			Организация,
			ДатаДействия,
			Ложь);
	КонецЕсли;
	СтрокаШаблон = "%1: %2.";
	Если НЕ ЗначениеЗаполнено(ДействующиеНастройки) Тогда
		СтрокаОписанияНастроек = НСтр("ru='Не заданы параметры.'");
		Возврат СтрокаОписанияНастроек;
	КонецЕсли;
	
	МассивСтрокОписания = Новый Массив;
	
	ПараметрыСистемыНалогообложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"НастройкиСистемыНалогообложения",
			Организация,
			ДатаДействия,
			Истина);
	Если ПараметрыСистемыНалогообложения.ПрименяетсяЕНВД Тогда
		МассивСтрокОписания.Добавить(
			СтрШаблон("%1: %2.",  
				НСтр("ru='База распределения косвенных расходов'"),
				ДействующиеНастройки.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности));	
	КонецЕсли;
	
	Если ДействующиеНастройки.ФормироватьРезервыПоСомнительнымДолгамНУ Тогда	
		МассивСтрокОписания.Добавить( 
			СтрШаблон(НСтр("ru='Начисляются резервы по сомнительным долгам с периодичностью ""%1""'"),
				ДействующиеНастройки.ПериодичностьРезервовПоСомнительнымДолгамНУ));
	КонецЕсли;
		
	Если ДействующиеНастройки.ВключатьВСоставНалоговыхРасходовАрендныеПлатежи Тогда
		МассивСтрокОписания.Добавить(НСтр("ru='Применяется автоматическое включение лизинговых платежей в расходы'"));
	КонецЕсли;
	
	МассивСтрокОписания.Добавить( 
		СтрШаблон(СтрокаШаблон, 
			НСтр("ru='Метод начисления амортизации'"),
			ДействующиеНастройки.МетодНачисленияАмортизацииНУ));
	
	МассивСтрокОписания.Добавить( 
		СтрШаблон(СтрокаШаблон, 
			НСтр("ru='Показатель определения доли прибыли по ст. 288 НК РФ'"),
			ДействующиеНастройки.ПоказательОпределенияДолиПрибыли));
	
	Если РеглУчетКлиентСервер.ДатаВходитВПериодУчетаКурсовыхРазницНУПо67ФЗ(Период)
		И ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов")
		И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		ПредставлениеДаты = ?(ЗначениеЗаполнено(ДействующиеНастройки.ДатаНезависимогоПризнанияДоходовРасходов),
			Формат(ДействующиеНастройки.ДатаНезависимогоПризнанияДоходовРасходов, НСтр("ru='ДФ=''ММ гггг'''")), НСтр("ru = 'не указана'"));
		МассивСтрокОписания.Добавить(СтрШаблон(СтрокаШаблон,
			НСтр("ru = 'Дата начала независимого признания доходов и расходов'"), ПредставлениеДаты));
		
	КонецЕсли;

	Возврат СтрСоединить(МассивСтрокОписания, Символы.ПС);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

//++ Локализация
#Область КурсовыеРазницы67ФЗ

// Возвращает дату начала года вступления в силу закона 67-ФЗ
// Возвращаемое значение:
//  Дата
Функция НачалоВступленияВСилу67ФЗ() Экспорт
	
	Возврат Дата(2022,1,1);
	
КонецФункции

// Возвращает дату начала применения закона 67-ФЗ по доходам.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Дата
Функция НачалоПрименения67ФЗПоДоходам(Организация) Экспорт
	
	Результат = Неопределено;
	
	Отбор = Новый Структура("Организация", Организация);
	Данные = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(ТекущаяДатаСеанса(), Отбор);
	Если Данные.Количество() > 0 Тогда
		Результат = Данные[0].ДатаНезависимогоПризнанияДоходовРасходов;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = НачалоВступленияВСилу67ФЗ();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает дату начала применения закона 67-ФЗ по расходам.
// Возвращаемое значение:
//  Дата
Функция НачалоПрименения67ФЗПоРасходам() Экспорт
	
	Возврат Дата(2023,1,1);
	
КонецФункции

#КонецОбласти
//-- Локализация
#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.3.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a480ce1-ef7e-48e1-9358-381e83475bab");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр НастройкиУчетаНалогаНаПрибыль из настроек учетных политик организаций.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.УдалитьУчетныеПолитикиОрганизаций.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры
//++ Локализация

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.НастройкиУчетаНалогаНаПрибыль";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ГОД) КАК Период,
	|	ДанныеРегистра.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНалогаНаПрибыль КАК Настройки
	|		ПО (Настройки.Организация = ДанныеРегистра.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьУчетныеПолитикиОрганизаций КАК Политики
	|		ПО (ДанныеРегистра.УчетнаяПолитика = Политики.Ссылка)
	|ГДЕ
	|	Настройки.Организация ЕСТЬ NULL
	|	И НЕ Политики.Ссылка ЕСТЬ NULL";
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиУчетаНалогаНаПрибыль;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТДанныеДляОбработки";
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(СтавкиНалогаНаПрибыльДляВсехОрганизаций.Период) КАК ПериодСтавокНалогаНаПрибыль,
	|	НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ГОД) КАК Период,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляОбработки КАК ДанныеДляОбработки
	|		ПО НАЧАЛОПЕРИОДА(ДанныеДляОбработки.Период, ГОД) = НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ГОД)
	|		И ДанныеДляОбработки.Организация = ДанныеРегистра.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций КАК СтавкиНалогаНаПрибыльДляВсехОрганизаций
	|		ПО НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ГОД) >= СтавкиНалогаНаПрибыльДляВсехОрганизаций.Период
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.УчетнаяПолитика,
	|	НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ГОД)
	|ИТОГИ
	|ПО
	|	УчетнаяПолитика";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыборкаУчетнаяПолитика = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "УчетнаяПолитика");
	
	Пока ВыборкаУчетнаяПолитика.Следующий() Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			БлокировкаУчетнаяПолитика = Новый БлокировкаДанных;
			
			ЭлементБлокировки = БлокировкаУчетнаяПолитика.Добавить("Справочник.УдалитьУчетныеПолитикиОрганизаций");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаУчетнаяПолитика.УчетнаяПолитика);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			БлокировкаУчетнаяПолитика.Заблокировать();
			
			ЗапросУчетнаяПолитика = Новый Запрос();
			ЗапросУчетнаяПолитика.Текст = "ВЫБРАТЬ
			|	УчетнаяПолитика.ПорядокУплатыАвансовПоНалогуНаПрибыль,
			|	УчетнаяПолитика.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности,
			|	УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ,
			|	УчетнаяПолитика.ПериодичностьРезервовПоСомнительнымДолгамНУ,
			|	УчетнаяПолитика.ВключатьВСоставНалоговыхРасходовАрендныеПлатежи,
			|	УчетнаяПолитика.МетодНачисленияАмортизацииНУ
			|ИЗ
			|	Справочник.УдалитьУчетныеПолитикиОрганизаций КАК УчетнаяПолитика
			|ГДЕ
			|	УчетнаяПолитика.Ссылка = &УчетнаяПолитика";
			
			ЗапросУчетнаяПолитика.УстановитьПараметр("УчетнаяПолитика", ВыборкаУчетнаяПолитика.УчетнаяПолитика);
			
			РезультатЗапросаУчетнаяПолитика = ЗапросУчетнаяПолитика.Выполнить();
			
			Если РезультатЗапросаУчетнаяПолитика.Пустой() Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка получения настроек учетной политики ""%1"".'",
					ОбщегоНазначения.КодОсновногоЯзыка()), 
					ВыборкаУчетнаяПолитика.УчетнаяПолитика);
				ВызватьИсключение ТекстОшибки;
			Иначе
				НастройкаУчетнойПолитики = РезультатЗапросаУчетнаяПолитика.Выгрузить()[0];
			КонецЕсли;
			
			Выборка = ВыборкаУчетнаяПолитика.Выбрать(ОбходРезультатаЗапроса.Прямой);
			
			Пока Выборка.Следующий() Цикл
				
					НаборЗаписей = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
					НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
					
					НоваяЗапись = НаборЗаписей.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
					ЗаполнитьЗначенияСвойств(НоваяЗапись, НастройкаУчетнойПолитики);
					НоваяЗапись.Период = Выборка.Период;
					
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, Неопределено, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
//-- Локализация

#КонецОбласти

#КонецЕсли
