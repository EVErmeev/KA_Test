#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизическоеЛицо)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН;
	
	Если Не СЭДОФСС.ДоступенОбменЧерезСЭДО() Или Не ПравоДоступа("Просмотр", МетаданныеРегистра) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(МетаданныеРегистра.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат; // Некорректное внедрение.
	КонецЕсли;
	
	Требования = ТребованияПоОтправке();
	
	Для Каждого Раздел Из Разделы Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "НовыеУведомленияОбЭЛН" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (Требования.ОжидающихПолучения > 0);
		Дело.Важное         = Ложь;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Новые сообщения ФСС об изменении ЭЛН'");
		Дело.Количество     = Требования.ОжидающихПолучения;
		Дело.Подсказка      = НСтр("ru = 'Получить из ФСС сообщения об изменении ЭЛН.'");
		Дело.ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Загружено", Ложь));
		Дело.Форма          = "РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Форма.ФормаСписка";
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "УведомленияОбЭЛНТребующиеОбработки" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = (Требования.ТребующихОбработки > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'ЭЛН требующие обработки'");
		Дело.Количество     = Требования.ТребующихОбработки;
		Дело.Подсказка      = НСтр("ru = 'Сообщения ФСС об изменении ЭЛН, по которым требуется создать больничные или отправить данные в Фонд.'");
		Дело.ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Загружено, ТребуетОбработки", Истина, Истина));
		Дело.Форма          = "РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Форма.ФормаСписка";
		
	КонецЦикла;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ТекущиеДела

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиПравилРегистрации

// См. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ПриЗаполненииНастроекОбработчиковПравилРегистрации(Настройки) Экспорт
	ЗарплатаКадрыРасширенныйСинхронизацияДанных.ДляНезависимогоРегистра(Настройки, "Организация",
		"РегламентированныеДанные");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаСообщенийФСС

Процедура ЗагрузитьУведомлениеОНаличииСообщения5(Страхователь, ИдентификаторСообщения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения);
	Если Набор.Количество() > 0 Тогда
		ОтменитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	
	Запись = Набор.Добавить();
	Запись.Организация = Страхователь;
	Запись.Страхователь = Страхователь;
	Запись.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
	Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	Запись.ТребуетОбработки = Истина; // Требуется получение и расшифровка.
	Запись.Последнее = Истина; // Неизвестно, является-ли сообщение последним.
	
	ЗавершитьЗаписьНабора(Набор);
КонецПроцедуры

Процедура ЗагрузитьСообщение5(Страхователь, ИдентификаторСообщения, ТекстXML, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	// Пример:
	//<lnStateChange>
	//	<ln_code>900000000003</ln_code>
	//	<snils>0000060004</snils>
	//	<ln_state>010</ln_state>
	//</lnStateChange>
	//<eln>
	//	<lnCode>900000000003</ln_code>
	//	<snils>0000060004</snils>
	//	<lnState>010</ln_state>
	//</eln>
	//<v01:changeElnNotice
	//		xmlns:v01="http://www.fss.ru/integration/types/eln/ins/notice/v01"
	//		xmlns:v011="http://www.fss.ru/integration/types/eln/ins/v01"
	//		xmlns:v012="http://www.fss.ru/integration/types/eln/v01">
	//	<v011:snils>0000060004</v011:snils>
	//	<v011:lnCode>900000000003</v011:lnCode>
	//	<v011:lnState>010</v011:lnState>
	//</v01:changeElnNotice>
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Если Запись.Страхователь <> Страхователь Тогда
		Запись.Страхователь = Страхователь;
		Запись.Организация  = Страхователь;
	КонецЕсли;
	Запись.ГоловнаяОрганизация    = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
	Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	
	СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
	УзелСНИЛСDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "snils");
	Если УзелСНИЛСDOM = Неопределено Тогда
		СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, НСтр("ru = 'В xml-содержимом сообщения не удалось найти узел с именем ""snils"".'"));
		ЗавершитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	
	ЭлементDOM = УзелСНИЛСDOM.РодительскийУзел;
	ФрагментXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(ЭлементDOM);
	ОбъектXDTO = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(ФрагментXML);
	ЗначенияРеквизитов = ОбщегоНазначенияБЗК.ЗначенияСвойств(ОбъектXDTO, "snils, ln_code, ln_state, lnCode, lnState");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.snils) Тогда
		СНИЛСВФорматеИБ = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(ЗначенияРеквизитов.snils);
		РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(СНИЛСВФорматеИБ, "", "", "");
		Запись.СНИЛС          = СНИЛСВФорматеИБ;
		Запись.ФизическоеЛицо = РезультатПоиска.ФизическоеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ln_code) Тогда
		Запись.НомерЛН = ЗначенияРеквизитов.ln_code;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.lnCode) Тогда
		Запись.НомерЛН = ЗначенияРеквизитов.lnCode;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.ln_state) Тогда
		ЗаполнитьСостояниеЭЛН(Запись, ЗначенияРеквизитов.ln_state);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.lnState) Тогда
		ЗаполнитьСостояниеЭЛН(Запись, ЗначенияРеквизитов.lnState);
	КонецЕсли;
	
	Значения = РегистрыСведений.СведенияОбЭЛН.ЗначенияРесурсов(Запись.НомерЛН, Запись.ГоловнаяОрганизация);
	Запись.ДатаНачалаСобытия = Значения.ДатаНачалаСобытия;
	
	Если Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
		СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, СтрШаблон(НСтр("ru = 'Не удалось найти физическое лицо по СНИЛС ""%1"".'"), СНИЛСВФорматеИБ));
		ЗавершитьЗаписьНабора(Набор);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	КадровыеДанные = КадровыйУчет.КадровыеДанныеОсновногоСотрудникаФизическогоЛица(
		Страхователь,
		Запись.ФизическоеЛицо,
		"Организация",
		Запись.ДатаНачалаСобытия,
		Ложь,
		ТекстОшибки);
	Если КадровыеДанные = Неопределено Тогда
		СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки);
		Запись.Организация = Страхователь;
	Иначе
		Запись.Организация = КадровыеДанные.Организация;
	КонецЕсли;
	
	Запись.Загружено = Истина;
	
	ЗавершитьЗаписьНабора(Набор);
	Результат.Обработано = Истина;
	
	Попытка
		ОбновитьВторичныеДанные(Запись.Организация, Запись.НомерЛН);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Подробно = Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при обновлении вторичных данных: %1: %2'"), Кратко, Подробно);
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьСостояниеЭЛН(Запись, LN_STATE)
	СостояниеЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.НайтиПоКодуФСС(LN_STATE);
	Если ЗначениеЗаполнено(СостояниеЭЛНВФСС) Тогда
		Запись.СостояниеЭЛН = СостояниеЭЛНВФСС;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаСообщения111

Процедура ЗагрузитьУведомлениеОНаличииСообщения111(Страхователь, ИдентификаторСообщения) Экспорт
	ЗагрузитьУведомлениеОНаличииСообщения5(Страхователь, ИдентификаторСообщения);
КонецПроцедуры

Процедура ЗагрузитьСообщение111(Страхователь, ИдентификаторСообщения, ТекстXML, Результат, Кэш) Экспорт
	// Пример:
	//<v01:changeElnNotice
	//		xmlns:v01="http://www.fss.ru/integration/types/eln/ins/notice/v01"
	//		xmlns:v011="http://www.fss.ru/integration/types/eln/ins/v01"
	//		xmlns:v012="http://www.fss.ru/integration/types/eln/v01">
	//	<v011:snils>0000060004</v011:snils>
	//	<v011:lnCode>900000000003</v011:lnCode>
	//	<v011:lnState>010</v011:lnState>
	//</v01:changeElnNotice>
	ДанныеЭЛН = ЭЛНФСС.ДанныеЭЛНСКэшем(ТекстXML, Кэш);
	Если Не ДанныеЭЛН.Успех Тогда
		Возврат; // Ошибка СЭДО уже записана в РегистрыСведений.СведенияОбЭЛН.ЗагрузитьСообщение111().
	КонецЕсли;
	
	Набор = НачатьЗаписьНабора(ИдентификаторСообщения);
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	Если Запись.Страхователь <> Страхователь Тогда
		Запись.Страхователь = Страхователь;
		Запись.Организация  = Страхователь;
	КонецЕсли;
	Запись.ГоловнаяОрганизация    = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
	Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	Запись.НомерЛН                = ДанныеЭЛН.НомерЛН;
	Запись.СостояниеЭЛН           = ДанныеЭЛН.СтатусЭЛНВФСС;
	Запись.ДатаНачалаСобытия      = ЭЛНФСС.ДатаНачалаСобытия(ДанныеЭЛН);
	
	Если Запись.СНИЛС <> ДанныеЭЛН.СНИЛС Или Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
		Запись.СНИЛС = ДанныеЭЛН.СНИЛС;
		Запись.ФизическоеЛицо = ЭЛНФСС.ФизическоеЛицо(ДанныеЭЛН);
		Если Не ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
			Текст = СтрШаблон(НСтр("ru = 'Не удалось найти физическое лицо по СНИЛС ""%1"".'"), ДанныеЭЛН.СНИЛС);
			СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, Текст);
			ЗавершитьЗаписьНабора(Набор);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки = "";
	КадровыеДанные = КадровыйУчет.КадровыеДанныеОсновногоСотрудникаФизическогоЛица(
		Страхователь,
		Запись.ФизическоеЛицо,
		"Организация",
		Запись.ДатаНачалаСобытия,
		Ложь,
		ТекстОшибки);
	Если КадровыеДанные = Неопределено Тогда
		СЭДОФСС.ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки);
		Запись.Организация = Страхователь;
	Иначе
		Запись.Организация = КадровыеДанные.Организация;
	КонецЕсли;
	
	ЭтоНовоеСообщение = Не Запись.Загружено;
	Запись.Загружено = Истина;
	
	ЗавершитьЗаписьНабора(Набор);
	Результат.Обработано = Истина;
	
	Попытка
		Если ЭтоНовоеСообщение Тогда // Разрешено создание больничных.
			ОбновитьВторичныеДанные(Запись.Организация, Запись.НомерЛН, ИдентификаторСообщения, ДанныеЭЛН);
		Иначе // При повторной обработке (обновление ИБ / загрузка за период) новые документы создавать не требуется.
			ОбновитьВторичныеДанные(Запись.Организация, Запись.НомерЛН);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Подробно = Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при обновлении вторичных данных: %1: %2'"), Кратко, Подробно);
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

Функция ТребованияПоОтправке() Экспорт
	Результат = Новый Структура("ОжидающихПолучения, ТребующихОбработки");
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН) Тогда
		Результат.ОжидающихПолучения = 0;
		Результат.ТребующихОбработки = 0;
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|ГДЕ
	|	НЕ СообщенияФСС.Загружено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|ГДЕ
	|	СообщенияФСС.ТребуетОбработки
	|	И НЕ СообщенияФСС.ОбработаноВручную
	|	И СообщенияФСС.Загружено";
	
	Пакет = Запрос.ВыполнитьПакет();
	Результат.ОжидающихПолучения = Пакет[0].Выбрать().Количество();
	Результат.ТребующихОбработки = Пакет[1].Выбрать().Количество();
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбновлениеВторичныхДанных

Процедура ОбновитьВторичныеДанные(Организация = Неопределено, НомерЛН = Неопределено, ИдентификаторЗагружаемогоСообщения = Неопределено, ДанныеЭЛН = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПриоритетовСостоянийЭЛН.Ссылка КАК Ссылка,
	|	ТаблицаПриоритетовСостоянийЭЛН.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТПриоритетыСостоянийЭЛН
	|ИЗ
	|	&ТаблицаПриоритетовСостоянийЭЛН КАК ТаблицаПриоритетовСостоянийЭЛН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщенияФСС.Организация КАК Организация,
	|	СообщенияФСС.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ЕСТЬNULL(ПриоритетыСостояний.Приоритет, 99) КАК Приоритет,
	|	СообщенияФСС.НомерЛН КАК НомерЛН,
	|	СообщенияФСС.Загружено КАК Загружено,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ СообщенияФСС.Загружено
	|				ТОГДА ИСТИНА
	|			КОГДА СообщенияФСС.СостояниеЭЛН = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.Аннулирован)
	|				ТОГДА СведенияОбЭЛН.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|						И НЕ ДанныеСостоянийСотрудников.Регистратор ЕСТЬ NULL
	|						И ЗаменяющийЭЛН.Больничный ЕСТЬ NULL
	|			КОГДА СообщенияФСС.СостояниеЭЛН = ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.Закрыт)
	|				ТОГДА ЕСТЬNULL(СведенияОбЭЛН.Больничный, ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|						И ЕСТЬNULL(СведенияОбЭЛН.СостояниеФСС, ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭЛНВФСС.Аннулирован)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТребуетОбработки,
	|	СообщенияФСС.СостояниеЭЛН КАК СостояниеЭЛН,
	|	СообщенияФСС.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСообщения
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетыСостоянийЭЛН КАК ПриоритетыСостояний
	|		ПО СообщенияФСС.СостояниеЭЛН = ПриоритетыСостояний.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|			ПО СведенияОбЭЛН.Больничный = ДанныеСостоянийСотрудников.Регистратор
	|		ПО СообщенияФСС.НомерЛН = СведенияОбЭЛН.НомерЛисткаНетрудоспособности
	|			И СообщенияФСС.Организация = СведенияОбЭЛН.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбЭЛН КАК ЗаменяющийЭЛН
	|		ПО СообщенияФСС.НомерЛН = ЗаменяющийЭЛН.НомерЗаменяемогоЛН
	|			И СообщенияФСС.Организация = ЗаменяющийЭЛН.Организация
	|ГДЕ
	|	СообщенияФСС.Организация = &Организация
	|	И СообщенияФСС.НомерЛН = &НомерЛН
	|
	|СГРУППИРОВАТЬ ПО
	|	СообщенияФСС.Организация,
	|	СообщенияФСС.НомерЛН,
	|	СообщенияФСС.Загружено,
	|	СообщенияФСС.ФизическоеЛицо,
	|	СообщенияФСС.ИдентификаторСообщения,
	|	СообщенияФСС.СостояниеЭЛН,
	|	ЕСТЬNULL(ПриоритетыСостояний.Приоритет, 99)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрогулНеявка.Ссылка КАК Ссылка,
	|	ПрогулНеявка.НомерЛН КАК НомерЛН,
	|	ПрогулНеявка.ДатаОкончания КАК ДатаОкончания,
	|	ПрогулНеявка.ДатаНачала КАК ДатаНачала,
	|	ПрогулНеявка.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПрогулНеявка.Организация КАК Организация
	|ПОМЕСТИТЬ Отсутствия
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрогулНеявка КАК ПрогулНеявка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСообщения КАК ВТСообщения
	|			ПО ПрогулНеявка.ФизическоеЛицо = ВТСообщения.ФизическоеЛицо
	|				И ПрогулНеявка.Организация = ВТСообщения.Организация
	|				И ПрогулНеявка.НомерЛН = ВТСообщения.НомерЛН
	|		ПО ДанныеСостоянийСотрудников.Регистратор = ПрогулНеявка.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Отсутствия.ДатаОкончания) КАК ДатаОкончания,
	|	Отсутствия.Организация КАК Организация,
	|	Отсутствия.НомерЛН КАК НомерЛН
	|ПОМЕСТИТЬ МаксДатыОкончанияОтсутствий
	|ИЗ
	|	Отсутствия КАК Отсутствия
	|
	|СГРУППИРОВАТЬ ПО
	|	Отсутствия.Организация,
	|	Отсутствия.НомерЛН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Отсутствия.Ссылка) КАК Ссылка,
	|	Отсутствия.Организация КАК Организация,
	|	Отсутствия.НомерЛН КАК НомерЛН
	|ПОМЕСТИТЬ МаксОтсутствия
	|ИЗ
	|	МаксДатыОкончанияОтсутствий КАК МаксДатыОкончанияОтсутствий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Отсутствия КАК Отсутствия
	|		ПО МаксДатыОкончанияОтсутствий.НомерЛН = Отсутствия.НомерЛН
	|			И МаксДатыОкончанияОтсутствий.Организация = Отсутствия.Организация
	|			И МаксДатыОкончанияОтсутствий.ДатаОкончания = Отсутствия.ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	Отсутствия.ФизическоеЛицо,
	|	Отсутствия.Организация,
	|	Отсутствия.НомерЛН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщенияФСС.Организация КАК Организация,
	|	СообщенияФСС.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	МАКСИМУМ(СообщенияФСС.ТребуетОбработки) КАК ТребуетОбработки,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Сообщения2.Приоритет ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			КОГДА СообщенияФСС.Приоритет < Сообщения2.Приоритет
	|				ТОГДА ИСТИНА
	|			КОГДА СообщенияФСС.Приоритет = Сообщения2.Приоритет
	|					И СообщенияФСС.ИдентификаторСообщения > Сообщения2.ИдентификаторСообщения
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Последнее,
	|	МаксОтсутствия.Ссылка КАК Отсутствие
	|ИЗ
	|	ВТСообщения КАК СообщенияФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСообщения КАК Сообщения2
	|		ПО СообщенияФСС.НомерЛН = Сообщения2.НомерЛН
	|			И СообщенияФСС.Организация = Сообщения2.Организация
	|			И СообщенияФСС.ФизическоеЛицо = Сообщения2.ФизическоеЛицо
	|			И СообщенияФСС.ИдентификаторСообщения <> Сообщения2.ИдентификаторСообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксОтсутствия КАК МаксОтсутствия
	|		ПО СообщенияФСС.НомерЛН = МаксОтсутствия.НомерЛН
	|			И СообщенияФСС.Организация = МаксОтсутствия.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СообщенияФСС.ИдентификаторСообщения,
	|	СообщенияФСС.Организация,
	|	МаксОтсутствия.Ссылка";
	Запрос.УстановитьПараметр("ТаблицаПриоритетовСостоянийЭЛН", ТаблицаПриоритетовСостоянийЭЛН());
	
	Если Организация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СообщенияФСС.Организация = &Организация", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Если НомерЛН = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СообщенияФСС.НомерЛН = &НомерЛН", "");
	Иначе
		Запрос.УстановитьПараметр("НомерЛН", НомерЛН);
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Набор = НачатьЗаписьНабора(СтрокаТаблицы.ИдентификаторСообщения);
		
		ЕстьИзменения = Ложь;
		Для Каждого Запись Из Набор Цикл
			ТребуемаяГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
			Если Запись.ГоловнаяОрганизация <> ТребуемаяГоловнаяОрганизация Тогда
				Запись.ГоловнаяОрганизация = ТребуемаяГоловнаяОрганизация;
				ЕстьИзменения = Истина;
			КонецЕсли;
			Если Не Запись.Загружено Тогда
				ТребуетОбработки = Истина;
			ИначеЕсли Не СтрокаТаблицы.Последнее Тогда
				ТребуетОбработки = Ложь;
			Иначе
				ТребуетОбработки = СтрокаТаблицы.ТребуетОбработки;
			КонецЕсли;
			Если Запись.ТребуетОбработки <> ТребуетОбработки Тогда
				ЕстьИзменения = Истина;
				Запись.ТребуетОбработки = ТребуетОбработки;
			КонецЕсли;
			Если Запись.Последнее <> СтрокаТаблицы.Последнее Тогда
				ЕстьИзменения = Истина;
				Запись.Последнее = СтрокаТаблицы.Последнее;
			КонецЕсли;
			Отсутствие = ?(Запись.Последнее, СтрокаТаблицы.Отсутствие, Документы.ПрогулНеявка.ПустаяСсылка());
			Если Запись.Последнее
				И Запись.Отсутствие <> Отсутствие Тогда
				ЕстьИзменения = Истина;
				Запись.Отсутствие = Отсутствие;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ЗавершитьЗаписьНабора(Набор);
		Иначе
			ОтменитьЗаписьНабора(Набор);
		КонецЕсли;
		
		// Автоматическое создание документов при загрузке сообщения СЭДО.
		Если ДанныеЭЛН <> Неопределено Тогда
			Фильтр = Новый Структура;
			Фильтр.Вставить("Последнее", Истина);
			Фильтр.Вставить("ИдентификаторСообщения", ИдентификаторЗагружаемогоСообщения);
			Найденные = Набор.Выгрузить().Скопировать(Фильтр);
			Для Каждого Запись Из Найденные Цикл
				ИзменитьОтсутствия(Запись, ЕстьИзменения, ДанныеЭЛН);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ИзменитьОтсутствия(Запись, ЕстьИзменения, ДанныеЭЛН)
	Состояния = Перечисления.СостоянияЭЛНВФСС;
	Если Запись.СостояниеЭЛН = Состояния.Аннулирован Тогда
		Если СоздаватьОтсутствия() И ЗначениеЗаполнено(Запись.Отсутствие) Тогда
			СторнироватьОтсутствия(Запись, ЕстьИзменения, ДанныеЭЛН);
		КонецЕсли;
	ИначеЕсли Запись.СостояниеЭЛН = Состояния.ВыплаченФСС
		Или Запись.СостояниеЭЛН = Состояния.ПринятРеестрПВСО
		Или Запись.СостояниеЭЛН = Состояния.ПринятРеестрЭЛН Тогда
		Возврат; // Ничего не требуется.
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеЭЛН.НомерЛН)
		Или Не ЗначениеЗаполнено(Запись.ФизическоеЛицо)
		Или Не ЗначениеЗаполнено(Запись.Организация)
		Или Не ЗначениеЗаполнено(ДанныеЭЛН.ДатаНачала)
		Или Не ЗначениеЗаполнено(ДанныеЭЛН.ДатаОкончания) Тогда
		Возврат; // ЭЛН не может быть зарегистрирован в учете.
	ИначеЕсли Запись.СостояниеЭЛН = Состояния.Закрыт Тогда
		Если СоздаватьОтсутствия() И СоздаватьБольничные() И ЗначениеЗаполнено(Запись.Отсутствие) Тогда
			СторнироватьОтсутствия(Запись, ЕстьИзменения, ДанныеЭЛН);
		КонецЕсли;
		Если СоздаватьБольничные() Тогда
			Больничный = СоздатьБольничный(Запись.ГоловнаяОрганизация, Запись.ФизическоеЛицо, ДанныеЭЛН);
			Если ЗначениеЗаполнено(Больничный) Тогда
				ЕстьИзменения = Истина; // Чтобы не отменилась транзакция при отмене записи.
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СоздаватьОтсутствия() И Не ЗначениеЗаполнено(Запись.Отсутствие) Тогда
			ПродлитьОтсутствия(Запись, ЕстьИзменения, ДанныеЭЛН);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СоздаватьОтсутствия()
	Возврат Истина;
КонецФункции

Функция СоздаватьБольничные()
	Возврат Истина;
КонецФункции

Процедура ПродлитьОтсутствия(Запись, ЕстьИзменения, ДанныеЭЛН)
	Возврат;
КонецПроцедуры

Процедура СторнироватьОтсутствия(Запись, ЕстьИзменения, ДанныеЭЛН)
	Возврат;
КонецПроцедуры

Функция СоздатьБольничный(ГоловнаяОрганизация, ФизическоеЛицо, ДанныеЭЛН) Экспорт
	Больничный = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(ДанныеЭЛН.НомерЛН, ГоловнаяОрганизация);
	Если Больничный <> Неопределено Тогда
		Возврат Больничный.Ссылка;
	КонецЕсли;
	Отказ = Ложь;
	Количество = СообщенияБЗК.КоличествоСообщенийПользователю();
	БольничныйОбъект = Документы.БольничныйЛист.СоздатьДокумент();
	БольничныйОбъект.Заполнить(Неопределено); // Заполнение значениями по-умолчанию.
	БольничныйОбъект.Дата = ТекущаяДатаСеанса();
	// При ручном заполнении порядка выплаты пособие рассчитывается и в т.ч. заполняется вкладка "Оплата".
	БольничныйОбъект.ПорядокВыплаты = Неопределено;
	ЗначенияДляЗаполнения = Новый Структура("МесяцРасчета", "ПериодРегистрации");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(БольничныйОбъект, ЗначенияДляЗаполнения);
	ТекстыСообщений = Новый Массив;
	Попытка
		ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьБольничныйПоДаннымЭЛН(БольничныйОбъект, ДанныеЭЛН, Отказ, Неопределено);
		Если Не Отказ И ЗначениеЗаполнено(БольничныйОбъект.Сотрудник) Тогда
			БольничныйОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ТекстыСообщений.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	СообщенияБЗК.СократитьЧислоСообщений(Количество, ТекстыСообщений);
	Если Отказ Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для сообщения об изменении ЭЛН %1 не удалось автоматически создать больничный: %2'"),
			ДанныеЭЛН.НомерЛН,
			Символы.ПС + СтрСоединить(ТекстыСообщений, Символы.ПС + Символы.ПС));
		УчетПособийСоциальногоСтрахования.ЗаписатьОшибкуВЖурнал(
			ТекстСообщения,
			ФизическоеЛицо,
			Метаданные.Документы.БольничныйЛист);
		Возврат Неопределено;
	КонецЕсли;
	Возврат БольничныйОбъект.Ссылка;
КонецФункции

Функция ТаблицаПриоритетовСостоянийЭЛН()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЭЛНВФСС, Число"));
	Таблица.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	Приоритеты = Перечисления.СостоянияЭЛНВФСС.Приоритеты();
	Для Каждого КлючИЗначение Из Приоритеты Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Ссылка    = КлючИЗначение.Ключ;
		СтрокаТаблицы.Приоритет = КлючИЗначение.Значение;
	КонецЦикла;
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Ссылка    = Неопределено;
	СтрокаТаблицы.Приоритет = 11;
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Ссылка    = Перечисления.СостоянияЭЛНВФСС.ПустаяСсылка();
	СтрокаТаблицы.Приоритет = 10;
	
	Возврат Таблица;
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет ресурс ГоловнаяОрганизация. Регистрируется в модуле СЭДОФССРасширенный.
Процедура ЗаполнитьГоловнуюОрганизацию(ПараметрыОбновления = Неопределено) Экспорт
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщенияФСС.Организация КАК Организация,
	|	СообщенияФСС.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН КАК СообщенияФСС
	|ГДЕ
	|	СообщенияФСС.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СообщенияФСС.Страхователь <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = НачатьЗаписьНабора(Выборка.ИдентификаторСообщения);
		Если Набор = Неопределено Или Набор.Количество() = 0 Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		ЕстьИзменения = Ложь;
		Для Каждого Запись Из Набор Цикл
			ТребуемаяГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Запись.Страхователь);
			Если Запись.ГоловнаяОрганизация <> ТребуемаяГоловнаяОрганизация Тогда
				Запись.ГоловнаяОрганизация = ТребуемаяГоловнаяОрганизация;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьИзменения Тогда
			ЗавершитьЗаписьНабора(Набор);
		Иначе
			ОтменитьЗаписьНабора(Набор);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область НаборЗаписей

// АПК:326-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// АПК:325-выкл. Методы поставляются комплектом и предназначены для совместного последовательного использования.
// Транзакция открывается в методе НачатьЗаписьНабора, закрывается в ЗавершитьЗаписьНабора, отменяется в ОтменитьЗаписьНабора.

// Транзакционный вариант (с управляемой блокировкой) получения набора записей, соответствующего значениям измерений.
//
// Параметры:
//   ИдентификаторСообщения - Строка - Значение отбора по соответствующему измерению.
//
// Возвращаемое значение:
//   РегистрСведенийНаборЗаписей.СообщенияФССОбИзмененииСостоянийЭЛН - Если удалось установить блокировку
//       и прочитать набор записей. При необходимости, открывает свою локальную транзакцию. Для закрытия транзакции
//       следует использовать одну из терминирующих процедур: ЗавершитьЗаписьНабора, либо ОтменитьЗаписьНабора.
//   Неопределено - Если не удалось установить блокировку и прочитать набор записей.
//       Вызывать процедуры ЗавершитьЗаписьНабора, ОтменитьЗаписьНабора не требуется,
//       поскольку если перед блокировкой функции потребовалось открыть локальную транзакцию,
//       то после неудачной блокировки локальная транзакция была отменена.
//
Функция НачатьЗаписьНабора(ИдентификаторСообщения) Экспорт
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ПолныеПраваИлиПривилегированныйРежим
		И Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недостаточно прав для изменения регистра ""%1"".'"),
			Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Представление());
	КонецЕсли;
	ЛокальнаяТранзакция = Не ТранзакцияАктивна();
	Если ЛокальнаяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Если Не ПолныеПраваИлиПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторСообщения", ИдентификаторСообщения);
		Блокировка.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЛокальнаяТранзакция", ЛокальнаяТранзакция);
	Исключение
		Если ЛокальнаяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось изменить уведомление ФСС об изменении состояний ЭЛН %1 по причине: %2'"),
			ИдентификаторСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН,
			ИдентификаторСообщения,
			ТекстСообщения);
		НаборЗаписей = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НаборЗаписей;
КонецФункции

// Записывает набор и фиксирует локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СообщенияФССОбИзмененииСостоянийЭЛН
//
Процедура ЗавершитьЗаписьНабора(НаборЗаписей) Экспорт
	НаборЗаписей.Записать(Истина);
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Отменяет запись набора и отменяет локальную транзакцию, если она была открыта в функции НачатьЗаписьНабора.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.СообщенияФССОбИзмененииСостоянийЭЛН
//
Процедура ОтменитьЗаписьНабора(НаборЗаписей)
	ЛокальнаяТранзакция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ЛокальнаяТранзакция");
	Если ЛокальнаяТранзакция = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// АПК:326-вкл.
// АПК:325-вкл.

#КонецОбласти

#КонецОбласти

#КонецЕсли