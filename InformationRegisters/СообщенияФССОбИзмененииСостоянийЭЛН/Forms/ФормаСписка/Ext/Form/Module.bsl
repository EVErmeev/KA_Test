#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Значения по умолчанию.
	РежимФильтрации = 1;
	
	// Адаптация к правам кадровика.
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия) Тогда
		Элементы.ВходящийЗапрос.Видимость = Ложь;
		Элементы.ОткрытьВходящийЗапросФСС.Видимость = Ложь;
	КонецЕсли;
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия) Тогда
		ТекстЗапроса = Список.ТекстЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтветНаЗапросФСС.ДатаОтправки", "&ПустаяДата");
		УдаляемыйТекст = "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапросФСС";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УдаляемыйТекст, "");
		УдаляемыйТекст = "ПО (СведенияОбЭЛН.ОтветНаЗапрос = ОтветНаЗапросФСС.Ссылка)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УдаляемыйТекст, "");
		Список.ТекстЗапроса = ТекстЗапроса;
		Элементы.ОтветНаЗапрос.Видимость = Ложь;
		Элементы.ОткрытьОтветНаЗапросФСС.Видимость = Ложь;
	КонецЕсли;
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ИсходящееСообщениеОСтраховомСлучаеФСС) Тогда
		ТекстЗапроса = Список.ТекстЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СообщениеОСтраховомСлучаеФСС.ДатаОтправки", "&ПустаяДата");
		УдаляемыйТекст = "ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсходящееСообщениеОСтраховомСлучаеФСС КАК СообщениеОСтраховомСлучаеФСС";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УдаляемыйТекст, "");
		УдаляемыйТекст = "ПО (СведенияОбЭЛН.СообщениеОСтраховомСлучае = СообщениеОСтраховомСлучаеФСС.Ссылка)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УдаляемыйТекст, "");
		Список.ТекстЗапроса = ТекстЗапроса;
		Элементы.СообщениеОСтраховомСлучае.Видимость = Ложь;
	КонецЕсли;
	
	// Заголовок формы должен соответствовать заголовку команды.
	Команда = Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Команды.СообщенияФССОбИзмененииЭЛН;
	НавигационнаяСсылка = "e1cib/command/" + Команда.ПолноеИмя();
	Заголовок = Команда.Представление();
	
	Организация = Параметры.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Организация", "Организация");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
	КонецЕсли;
	
	Перечисления.ПричиныНетрудоспособности.ДобавитьВФормуСпискаПредставлениеСтарыхПричин(
		Список,
		"ПричинаНетрудоспособности",
		"ПричинаНетрудоспособности",
		"ДатаНачалаСобытия");
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Отсутствие");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "ТребуетсяОтсутствие", "=", Истина);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "Отсутствие", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "Текст", НСтр("ru = '<Создать отсутствие...>'"));
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Отсутствие");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "ТребуетсяОтсутствие", "=", Истина);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "Отсутствие", ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "ДатаОкончанияОтсутствия", "<", Новый ПолеКомпоновкиДанных("ПериодНетрудоспособностиОкончание"));
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "Текст", НСтр("ru = '<Продлить отсутствие...>'"));
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Список, "Больничный");
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, "ТребуетсяБольничный", "=", Истина);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "Текст", НСтр("ru = '<Создать больничный...>'"));
	
	// Добавление отборов и сохранение их идентификаторов для быстрого поиска.
	НастройкиКД = Список.КомпоновщикНастроек.Настройки;
	
	ЭлементОтбораКД = ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(НастройкиКД, "Организация", "=", Организация);
	ЭлементОтбораКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ИдентификаторОтбораПоОрганизации = НастройкиКД.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	
	ЭлементОтбораКД = ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(НастройкиКД, "ТребуетОбработки", "=", Истина);
	ЭлементОтбораКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ИдентификаторОтбораТолькоТребующиеОбработки = НастройкиКД.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	
	ЭлементОтбораКД = ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(НастройкиКД, "Последнее", "=", Истина);
	ЭлементОтбораКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ИдентификаторОтбораТолькоПоследние = НастройкиКД.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбораКД);
	
	ФиксированныеПараметрыСписка = ФиксированныеПараметрыСписка();
	Для Каждого КлючИЗначение Из ФиксированныеПараметрыСписка Цикл
		Список.Параметры.УстановитьЗначениеПараметра(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.ДатаПолучения", "ДатаПолучения");
	
	ОбновитьФорму();
	УчетПособийСоциальногоСтрахованияРасширенный.ОбновитьФорму(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	Если ЗначениеЗаполнено(Организация) Тогда
		Настройки.Удалить("Организация");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_БольничныйЛист"
		Или ИмяСобытия = "Запись_НастройкиПолученияУведомленийОбЭЛН"
		Или ИмяСобытия = "Запись_ПрогулНеявка"
		Или СЭДОФССРасширенныйКлиент.ТребуетсяОбновитьНапоминаниеОбОтключенииПодпискиНаЭЛН(ИмяСобытия) Тогда
		ОтключитьОбработчикОжидания("ОбновитьСписок");
		ПодключитьОбработчикОжидания("ОбновитьСписок", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОжидающиеОбработкиПриИзменении(Элемент)
	ОбновитьФорму();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(ТаблицаФормы, ИдентификаторСтроки, ПолеФормы, СтандартнаяОбработка)
	Если ПолеФормы = Элементы.ИдентификаторСообщения Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	Если СтрокаТаблицы.Загружено Тогда
		Если ПолеФормы = Элементы.Больничный Тогда
			СоздатьИлиОткрытьБольничный(СтрокаТаблицы);
			
		ИначеЕсли ПолеФормы = Элементы.Отсутствие Тогда
			СоздатьИлиОткрытьОтсутствие(СтрокаТаблицы);
			
		ИначеЕсли ПолеФормы = Элементы.ВходящийЗапрос Тогда
			ПоказатьСсылку(СтрокаТаблицы.ВходящийЗапрос);
			
		ИначеЕсли ПолеФормы = Элементы.ОтветНаЗапрос Тогда
			СоздатьИлиОткрытьОтветНаЗапрос(СтрокаТаблицы);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
			СоздатьИлиОткрытьБольничный(СтрокаТаблицы);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Отсутствие) Тогда
			СоздатьИлиОткрытьОтсутствие(СтрокаТаблицы);
		КонецЕсли;
	Иначе
		Если ПолеФормы = Элементы.Состояние Тогда
			ПолучитьСообщениеИзФСС(СтрокаТаблицы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторноПолучитьСообщенияИзФСС(Команда)
	ИдентификаторыСообщенийСтрахователей = Новый Соответствие;
	Для Каждого ИдентификаторСтроки Из Элементы.Список.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Элементы.Список.ДанныеСтроки(ИдентификаторСтроки);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить; // Пустая строка.
		КонецЕсли;
		Идентификаторы = ИдентификаторыСообщенийСтрахователей[СтрокаТаблицы.Страхователь];
		Если Идентификаторы = Неопределено Тогда
			Идентификаторы = Новый Массив;
			Идентификаторы.Добавить(СтрокаТаблицы.ИдентификаторСообщения);
			ИдентификаторыСообщенийСтрахователей.Вставить(СтрокаТаблицы.Страхователь, Идентификаторы);
		Иначе
			ОбщегоНазначенияБЗККлиентСервер.ДобавитьЗначениеВМассив(Идентификаторы, СтрокаТаблицы.ИдентификаторСообщения);
		КонецЕсли;
	КонецЦикла;
	СЭДОФССКлиент.ПовторноПолучитьСообщенияИзФСС(ИдентификаторыСообщенийСтрахователей);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеСообщения(Команда)
	РежимФильтрации = 0;
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОжидающиеОбработки(Команда)
	РежимФильтрации = 1;
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекЭДО(Команда)
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ОрганизацияСсылка", Организация);
	ОткрытьФорму("РегистрСведений.НастройкиОбменаФСС.ФормаЗаписи", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВторичныеДанныеСообщений(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	ОбновитьВторичныеДанныеСообщенийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтсутствие(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.Загружено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	СоздатьИлиОткрытьОтсутствие(СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБольничный(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.Загружено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	СоздатьИлиОткрытьБольничный(СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВходящийЗапросФСС(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.Загружено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	ПоказатьСсылку(СтрокаТаблицы.ВходящийЗапрос);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтветНаЗапросФСС(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.Загружено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	СоздатьИлиОткрытьОтветНаЗапрос(СтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбработано(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	Номер = ?(ЗначениеЗаполнено(СтрокаТаблицы.НомерЛН), СтрокаТаблицы.НомерЛН, СтрокаТаблицы.ИдентификаторСообщения);
	Если БольшеНеЗадаватьВопросСообщениеОбработано Тогда
		СообщениеОбработаноНаКлиенте(СтрокаТаблицы.ИдентификаторСообщения, Номер);
	Иначе
		Контекст = Новый Структура;
		Контекст.Вставить("ИдентификаторСообщения", СтрокаТаблицы.ИдентификаторСообщения);
		Контекст.Вставить("НомерСообщения", Номер);
		Обработчик = Новый ОписаниеОповещения("СообщениеОбработаноПослеПодтверждения", ЭтотОбъект, Контекст);
		ТекстВопроса = НСтр("ru = 'Отметить сообщение об изменении %1 как обработанное вручную?
			|Сообщение не будет отображаться в режиме фильтрации ""Требующие обработки"", но останется в остальных режимах.'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, Номер);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сообщение обработано'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Обработчик, ТекстВопроса, Кнопки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуетОбработки(Команда)
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат; // Пустая строка.
	КонецЕсли;
	Если Не СтрокаТаблицы.Последнее Тогда
		Текст = НСтр("ru = 'Сообщение не является последним (поэтому не может считаться требующим обработки).'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	Номер = ?(ЗначениеЗаполнено(СтрокаТаблицы.НомерЛН), СтрокаТаблицы.НомерЛН, СтрокаТаблицы.ИдентификаторСообщения);
	Если БольшеНеЗадаватьВопросСообщениеТребуетОбработки Тогда
		СообщениеТребуетОбработкиНаКлиенте(СтрокаТаблицы.ИдентификаторСообщения, Номер);
	Иначе
		Контекст = Новый Структура;
		Контекст.Вставить("ИдентификаторСообщения", СтрокаТаблицы.ИдентификаторСообщения);
		Контекст.Вставить("НомерСообщения", Номер);
		Обработчик = Новый ОписаниеОповещения("СообщениеТребуетОбработкиПослеПодтверждения", ЭтотОбъект, Контекст);
		ТекстВопроса = НСтр("ru = 'Отметить сообщение об изменении %1 как требующее обработки?
			|Сообщение начнет отображаться в режиме фильтрации ""Требующие обработки"".'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, Номер);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сообщение требует обработки'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Обработчик, ТекстВопроса, Кнопки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьФорму()
	
	ТолькоТребующиеОбработки = (РежимФильтрации = 1);
	ТолькоПоследние = (РежимФильтрации = 2);
	
	Элементы.ВсеСообщения.Пометка = Не ТолькоТребующиеОбработки;
	Элементы.ТолькоОжидающиеОбработки.Пометка = ТолькоТребующиеОбработки;
	Элементы.Список.ВертикальнаяПолосаПрокрутки = ?(
		ТолькоТребующиеОбработки,
		ИспользованиеПолосыПрокрутки.НеИспользовать,
		ИспользованиеПолосыПрокрутки.ИспользоватьВсегда);
	
	ДоступныеОрганизации = РегистрыСведений.НастройкиПолученияУведомленийОбЭЛН.ОрганизацииПолучающиеСостоянияЭЛН();
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации);
	Если ЗначениеЗаполнено(Организация) И ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	НастройкиКД = Список.КомпоновщикНастроек.Настройки;
	
	ЭлементОтбораКД = НастройкиКД.Отбор.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораПоОрганизации);
	ЭлементОтбораКД.Использование  = ЗначениеЗаполнено(Организация);
	ЭлементОтбораКД.ПравоеЗначение = Организация;
	
	ЭлементОтбораКД = НастройкиКД.Отбор.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораТолькоТребующиеОбработки);
	ЭлементОтбораКД.Использование = ТолькоТребующиеОбработки;
	
	ЭлементОтбораКД = НастройкиКД.Отбор.ПолучитьОбъектПоИдентификатору(ИдентификаторОтбораТолькоПоследние);
	ЭлементОтбораКД.Использование = ТолькоПоследние;
	
КонецПроцедуры

&НаСервере
Функция ФиксированныеПараметрыСписка()
	Результат = Новый Структура;
	Результат.Вставить("ПустаяДата",          '00010101');
	Результат.Вставить("ДатаНачалаПроактива", СЭДОФССРасширенный.ДатаНачалаПроактивныхВыплат());
	Результат.Вставить("ИндексКонвертЗакрыт",           1);
	Результат.Вставить("ИндексКонвертОткрыт",           2);
	Результат.Вставить("ИндексКонвертОткрытОстановлен", 3);
	Результат.Вставить("ИндексДокументСоздан",          4);
	Результат.Вставить("ИндексДокументЗеленыйФлажок",   5);
	Результат.Вставить("ИндексДействияПрекращены",      6);
	Результат.Вставить("ТекстСообщениеНеЗагружено",        НСтр("ru = '<Не получено>'"));
	Результат.Вставить("ТекстСообщениеНеПоследнее",        НСтр("ru = '<Не последнее>'"));
	Результат.Вставить("ТекстОтсутствуютСведенияОбЭЛН",    НСтр("ru = '<Нет сведений об ЭЛН>'"));
	Результат.Вставить("ТекстЭЛНАннулирован",              НСтр("ru = 'ЭЛН аннулирован (действия прекращены)'"));
	Результат.Вставить("ТекстТребуетсяСоздатьОтсутствие",  НСтр("ru = 'Требуется ввести отсутствие'"));
	Результат.Вставить("ТекстТребуетсяПродлитьОтсутствие", НСтр("ru = 'Требуется продлить отсутствие'"));
	Результат.Вставить("ТекстВведеноОтсутствие",           НСтр("ru = 'Болеет (введено отсутствие)'"));
	Результат.Вставить("ТекстТребуетсяБольничный",         НСтр("ru = 'Требуется создать больничный'"));
	Результат.Вставить("ТекстТребуетсяОтветНаЗапрос",      НСтр("ru = 'Требуется ответ на запрос ФСС'"));
	Результат.Вставить("ТекстОтправленОтветНаЗапрос",      НСтр("ru = 'Отправлен ответ на запрос ФСС'"));
	Результат.Вставить("ТекстСозданОтветНаЗапрос",         НСтр("ru = 'Создан ответ на запрос ФСС'"));
	Результат.Вставить("ТекстОтправленаИнициализация",     НСтр("ru = 'Отправлено сообщение о страховом случае в ФСС'"));
	Результат.Вставить("ТекстСозданаИнициализация",        НСтр("ru = 'Создано сообщение о страховом случае в ФСС'"));
	Результат.Вставить("ТекстТребуетсяИнициализация",      НСтр("ru = 'Требуется сообщение о страховом случае в ФСС'"));
	Результат.Вставить("ТекстТребуетсяРеестрЭЛН",          НСтр("ru = 'Требуется отправить реестр ЭЛН'"));
	Результат.Вставить("ТекстСозданБольничный",            НСтр("ru = 'Создан больничный'"));
	Результат.Вставить("ТекстОтправленЭЛН",                НСтр("ru = 'Сведения об ЭЛН отправлены в ФСС'"));
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписок()
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	Элементы.Список.Обновить();
	УчетПособийСоциальногоСтрахованияРасширенный.ОбновитьФорму(ЭтотОбъект);
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(РегистрыСведений.НастройкиПолученияУведомленийОбЭЛН.ОрганизацииПолучающиеСостоянияЭЛН());
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеСообщенийНаСервере()
	Если Не СЭДОФСС.ЕстьПравоОбмена() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав на обмен с сервисом электронного документооборота ФСС.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ОбновитьВторичныеДанные(Организация);
	ОбновитьСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИлиОткрытьОтсутствие(СтрокаТаблицы)
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Отсутствие)
		И Не СтрокаТаблицы.ТребуетсяОтсутствие Тогда
		Возврат;
	КонецЕсли;
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация",         СтрокаТаблицы.Организация);
	ЗначенияЗаполнения.Вставить("ФизическоеЛицо",      СтрокаТаблицы.ФизическоеЛицо);
	ЗначенияЗаполнения.Вставить("НомерЛН",             СтрокаТаблицы.НомерЛН);
	ЗначенияЗаполнения.Вставить("СостояниеСотрудника", Неопределено);
	ЗначенияЗаполнения.Вставить("ДатаНачала",          СтрокаТаблицы.ПериодНетрудоспособностиНачало);
	ЗначенияЗаполнения.Вставить("ДатаОкончания",       СтрокаТаблицы.ПериодНетрудоспособностиОкончание);
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Отсутствие) Тогда
		Если СтрокаТаблицы.ТребуетсяОтсутствие И Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
			ЗначенияЗаполнения.Вставить("ИсправленныйДокумент", СтрокаТаблицы.Отсутствие);
		Иначе
			ПараметрыФормы.Вставить("Ключ", СтрокаТаблицы.Отсутствие);
		КонецЕсли;
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",    ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("АктуализироватьПериод", Истина);
	ОткрытьФорму("Документ.ПрогулНеявка.Форма.ФормаДокумента", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИлиОткрытьБольничный(СтрокаТаблицы)
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный)
		И Не СтрокаТаблицы.ТребуетсяБольничный Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СтрокаТаблицы.Больничный);
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация",                   СтрокаТаблицы.Организация);
		ЗначенияЗаполнения.Вставить("ФизическоеЛицо",                СтрокаТаблицы.ФизическоеЛицо);
		ЗначенияЗаполнения.Вставить("НомерЛисткаНетрудоспособности", СтрокаТаблицы.НомерЛН);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("ПолучитьЭЛНИзФСС", Истина);
	КонецЕсли;
	ОткрытьФорму("Документ.БольничныйЛист.Форма.ФормаДокумента", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИлиОткрытьОтветНаЗапрос(СтрокаТаблицы)
	ПараметрыФормы = Новый Структура("Ключ", СтрокаТаблицы.ОтветНаЗапрос);
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОтветНаЗапрос) Тогда
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВходящийЗапрос) Тогда
			Текст = СтрШаблон(НСтр("ru = 'Отсутствует входящий запрос для ЭЛН %1'"), СтрокаТаблицы.НомерЛН);
			ПоказатьОповещениеПользователя(Текст, , , БиблиотекаКартинок.Предупреждение24БЗК);
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы.Больничный) Тогда
			Текст = СтрШаблон(НСтр("ru = 'Отсутствует больничный для ЭЛН %1'"), СтрокаТаблицы.НомерЛН);
			ПоказатьОповещениеПользователя(Текст, , , БиблиотекаКартинок.Предупреждение24БЗК);
		КонецЕсли;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация",               СтрокаТаблицы.Организация);
		ЗначенияЗаполнения.Вставить("ФизическоеЛицо",            СтрокаТаблицы.ФизическоеЛицо);
		ЗначенияЗаполнения.Вставить("НомерЛН",                   СтрокаТаблицы.НомерЛН);
		ЗначенияЗаполнения.Вставить("ВходящийЗапрос",            СтрокаТаблицы.ВходящийЗапрос);
		ЗначенияЗаполнения.Вставить("ПервичныйДокумент",         СтрокаТаблицы.Больничный);
		ЗначенияЗаполнения.Вставить("ПричинаНетрудоспособности", СтрокаТаблицы.ПричинаНетрудоспособности);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	ОткрытьФорму("Документ.ОтветНаЗапросФССДляРасчетаПособия.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСсылку(Ссылка)
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщениеИзФСС(СтрокаТаблицы)
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(СтрокаТаблицы.ИдентификаторСообщения);
	ИдентификаторыСообщенийСтрахователей = Новый Соответствие;
	ИдентификаторыСообщенийСтрахователей.Вставить(СтрокаТаблицы.Страхователь, Идентификаторы);
	СЭДОФССКлиент.ПовторноПолучитьСообщенияИзФСС(ИдентификаторыСообщенийСтрахователей);
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбработаноПослеПодтверждения(Результат, ПараметрыОбработчика) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	БольшеНеЗадаватьВопросСообщениеОбработано = Результат.БольшеНеЗадаватьЭтотВопрос;
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		СообщениеОбработаноНаКлиенте(ПараметрыОбработчика.ИдентификаторСообщения, ПараметрыОбработчика.НомерСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбработаноНаКлиенте(ИдентификаторСообщения, НомерСообщения)
	СообщениеОбработаноНаСервере(ИдентификаторСообщения);
	Текст = СтрШаблон(НСтр("ru = 'Сообщение %1 отмечено как обработанное вручную'"), НомерСообщения);
	ПоказатьОповещениеПользователя(Текст,,, БиблиотекаКартинок.Успешно32)
КонецПроцедуры

&НаСервере
Процедура СообщениеОбработаноНаСервере(ИдентификаторСообщения)
	Набор = РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.НачатьЗаписьНабора(ИдентификаторСообщения);
	Для Каждого Запись Из Набор Цикл
		Запись.ОбработаноВручную = Истина;
	КонецЦикла;
	РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ЗавершитьЗаписьНабора(Набор);
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуетОбработкиПослеПодтверждения(Результат, ПараметрыОбработчика) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	БольшеНеЗадаватьВопросСообщениеТребуетОбработки = Результат.БольшеНеЗадаватьЭтотВопрос;
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		СообщениеТребуетОбработкиНаКлиенте(ПараметрыОбработчика.ИдентификаторСообщения, ПараметрыОбработчика.НомерСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуетОбработкиНаКлиенте(ИдентификаторСообщения, НомерСообщения)
	СообщениеТребуетОбработкиНаСервере(ИдентификаторСообщения);
	Текст = СтрШаблон(НСтр("ru = 'Сообщение %1 отмечено как требующее обработки'"), НомерСообщения);
	ПоказатьОповещениеПользователя(Текст,,, БиблиотекаКартинок.Успешно32)
КонецПроцедуры

&НаСервере
Процедура СообщениеТребуетОбработкиНаСервере(ИдентификаторСообщения)
	Набор = РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.НачатьЗаписьНабора(ИдентификаторСообщения);
	Для Каждого Запись Из Набор Цикл
		Запись.ОбработаноВручную = Ложь;
		Запись.ТребуетОбработки  = Истина;
	КонецЦикла;
	РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ЗавершитьЗаписьНабора(Набор);
	Элементы.Список.Обновить();
КонецПроцедуры

#КонецОбласти
