#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Увеличивает номер задания в константе.
// 
// Возвращаемое значение:
//  Число - Предыдущий номер задания.
//
Функция УвеличитьНомерЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НомерДоРасчета = 0;
	
	НачатьТранзакцию();
	Попытка
		
		НомерДоРасчета = ТекущийНомерЗадания();
		Константы.НомерЗаданияКРасчетуАмортизацииОС.Установить(НомерДоРасчета + 1);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + НСтр("ru = 'Значение константы'") + " = " + НомерДоРасчета;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ИнформацияОбОшибке);
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НомерДоРасчета;
	
КонецФункции

// Возвращает период с которого требуется расчет амортизации.
//
// Параметры:
//  СписокОрганизаций	 - Массив	 - Массив организаций.
// 
// Возвращаемое значение:
//  Дата - Начало месяца на который требуется расчет амортизации.
//
Функция НачалоРасчета(СписокОрганизаций) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Задания.Месяц), ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуАмортизацииОС КАК Задания
	|ГДЕ
	|	Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Организация В (&СписокОрганизаций)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.НачалоРасчета;
	
КонецФункции

// Считывает записи регистра во временную таблицу за указанный период по отборам.
//
// Параметры:
//  НачалоПериода	 - Дата	- Начало периода выборки данных.
//  ОкончаниеПериода - Дата	- Конец периода выборки данных.
//  НомерЗадания	 - Число	- Номер задания.
//  Организации		 - Массив, СправочникСсылка.Организации	 - Фильтр по организации.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства:
//  * СписокПараметровРасчета - Массив - Содержит параметры расчета.
//  * ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит в себе временную таблицу КэшГраниц.
//
Функция ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗадания, Организации) Экспорт

	НачатьТранзакцию();
	Попытка
	
		ЗаблокироватьРегистрЗаданий(НомерЗадания, Организации);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Задания.Месяц,
		|	Задания.НомерПакета,
		|	Задания.Организация,
		|	Задания.НомерЗадания,
		|	Задания.Документ
		|ПОМЕСТИТЬ КэшГраниц
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуАмортизацииОС КАК Задания
		|ГДЕ
		|	Задания.Месяц МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Задания.НомерЗадания <= &НомерЗадания
		|	И Задания.Организация В (&Организации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КэшГраниц.Организация,
		|	КэшГраниц.НомерПакета
		|ИЗ
		|	КэшГраниц КАК КэшГраниц";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
		Запрос.УстановитьПараметр("Организации", Организации);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Результат = Запрос.Выполнить();
		
		ИсходныеДанные = Новый Структура();
		ИсходныеДанные.Вставить("ПакетыАмортизации", Результат.Выгрузить());
		ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки; 
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Определяет необходимость расчета в заданном периоде.
//
// Параметры:
//  СписокОрганизаций	 - Массив	 - Список организаций.
//  Период				 - Дата		 - Проверяемый период.
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется расчет.
//
Функция ТребуетсяРасчет(СписокОрганизаций, Период) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаТребуетсяРасчетАмортизацииОС(Период);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|			&Период, 
		|			Организация В (&Организация)
		|				И (ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					ИЛИ ДатаИсправления >= &Период)) КАК НачислениеАмортизации
		|ГДЕ
		|	НачислениеАмортизации.НачислятьАмортизациюБУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|			&Период, 
		|			Организация В (&Организация)
		|				И (ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					ИЛИ ДатаИсправления >= &Период)) КАК НачислениеАмортизации
		|ГДЕ
		|	НачислениеАмортизации.НачислятьАмортизациюУУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОСБУ КАК НачислениеАмортизации
		|ГДЕ
		|	НачислениеАмортизации.НачислятьАмортизациюБУ
		|	И НачислениеАмортизации.Организация В(&Организация)
		|	И НачислениеАмортизации.Период >= &Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОСУУ КАК НачислениеАмортизации
		|ГДЕ
		|	НачислениеАмортизации.НачислятьАмортизациюУУ
		|	И НачислениеАмортизации.Организация В(&Организация)
		|	И НачислениеАмортизации.Период >= &Период
		|";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Если ВнеоборотныеАктивы.АмортизацияОСМожетНачислятьсяСДатыПринятияКУчету(СписокОрганизаций, Период) Тогда
		Запрос.УстановитьПараметр("Период", КонецМесяца(Период));
	Иначе	
		Запрос.УстановитьПараметр("Период", НачалоМесяца(Период));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции
 
// Фиксирует удачный пересчет данных.
//
// Параметры:
//  Организация	- СправочникСсылка.Организации, Массив - Организация для которой выполнялся расчет.
//  НачалоРасчета - Дата - Начало периода в котором выполнялся расчет.
//  НомерЗадания - Число - Номер задания, полученный до начала расчета.
//  ВыполненныеЗадания - см. РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.ЗаданияКРасчетуЗаМесяц
//
Процедура ЗафиксироватьРасчет(Организация, НачалоРасчета, НомерЗадания, ВыполненныеЗадания) Экспорт

	НачатьТранзакцию();
	
	Попытка
	
		ЗаблокироватьРегистрЗаданий(НомерЗадания, Организация);
	
		УстановитьПривилегированныйРежим(Истина);
		
		// Очистка записей по которым был выполнен расчет.
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задания.Месяц КАК Месяц,
		|	Задания.НомерПакета КАК НомерПакета,
		|	Задания.Организация КАК Организация,
		|	Задания.НомерЗадания КАК НомерЗадания
		|ИЗ
		|	КэшГраниц КАК КэшГраниц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуАмортизацииОС КАК Задания
		|		ПО (Задания.Месяц = КэшГраниц.Месяц)
		|			И (Задания.Организация = КэшГраниц.Организация)
		|			И (Задания.НомерЗадания <= &НомерЗадания)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВыполненныеЗадания.ВременныеТаблицы;
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.НомерПакета.Установить(Выборка.НомерПакета);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Записать(); 
		КонецЦикла;
		
		// Добавление записей на следующий период
		ЗаданияНаСледующийПериод = ЗаданияНаСледующийПериод(Организация, КонецМесяца(НачалоРасчета) + 1);
		Если ЗаданияНаСледующийПериод <> Неопределено Тогда
			Для каждого Выборка Из ЗаданияНаСледующийПериод Цикл
				НоваяЗапись = СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				НоваяЗапись.НомерЗадания = НомерЗадания;
				НоваяЗапись.Записать(Истина);
			КонецЦикла;
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки; 
	
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, НомерПакета, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ТекущийНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(
				СтруктураПолей.Месяц, 
				СтруктураПолей.Документ, 
				СтруктураПолей.Организация, 
				СтруктураПолей.НомерПакета, 
				НомерЗадания);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать задание к расчету амортизации ОС за %1 в организации %2 по причине: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавляет новое задание.
//
// Параметры:
//  ПериодЗадания	 - Дата - Месяц в котором добавляется задание.
//  ДокументЗадания	 - ДокументСсылка - Документ, который изменение которого привело к созданию задания.
//  Организация		 - СправочникСсылка.Организации - Организация, для которой добавляется задание.
//  НомерПакета		 - Число - Номер пакета основных средств.
//  НомерЗадания	 - Число - Номер задания.
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания, Организация, НомерПакета, НомерЗадания = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	// Запишем задания
	НачатьТранзакцию();
	Попытка
	
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ТекущийНомерЗадания();
		КонецЕсли; 
		
		НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.СоздатьМенеджерЗаписи();
		НаборЗаписей.Месяц        = НачалоМесяца(ПериодЗадания);
		НаборЗаписей.НомерПакета  = НомерПакета;
		НаборЗаписей.Организация  = Организация;
		НаборЗаписей.Документ     = ДокументЗадания;
		НаборЗаписей.НомерЗадания = НомерЗадания;
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки; 
	
КонецПроцедуры

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.НаработкиОбъектовЭксплуатации", "Период", "РегламентныеОперации");
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекущийНомерЗадания()
	УстановитьПривилегированныйРежим(Истина);
	ТекущийНомерЗадания = Константы.НомерЗаданияКРасчетуАмортизацииОС.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТекущийНомерЗадания;
КонецФункции

Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации)
	
	ВнеоборотныеАктивы.ЗаблокироватьРегистрЗаданий(
		НомерЗаданияДоРасчета, Организации, "РегистрСведений.ЗаданияКРасчетуАмортизацииОС");
	
КонецПроцедуры

Функция ЗаданияНаСледующийПериод(СписокОрганизаций, НачалоПериода)

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Задания на этот месяц, если на начало месяца есть объекты, по которым начисляется амортизация
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПрошлогоПериода", НачалоМесяца(НачалоПериода) - 1);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеАмортизации.Организация,
	|	НачислениеАмортизации.НомерПакета,
	|	НачислениеАмортизации.Период КАК Месяц
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачислениеАмортизации.Организация,
	|		ЕСТЬNULL(ПакетыАмортизации.НомерПакета, 0) КАК НомерПакета,
	|		&Период
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|			&КонецПрошлогоПериода, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация В (&СписокОрганизаций)) КАК НачислениеАмортизации
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизации
	|			ПО ПакетыАмортизации.Организация = НачислениеАмортизации.Организация
	|				И ПакетыАмортизации.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
	|	ГДЕ
	|		НачислениеАмортизации.НачислятьАмортизациюУУ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НачислениеАмортизации.Организация КАК Организация,
	|		ЕСТЬNULL(ПакетыАмортизации.НомерПакета, 0) КАК НомерПакета,
	|		&Период КАК Период
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|			&КонецПрошлогоПериода, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация В (&СписокОрганизаций)) КАК НачислениеАмортизации
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизации
	|			ПО ПакетыАмортизации.Организация = НачислениеАмортизации.Организация
	|				И ПакетыАмортизации.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
	|	ГДЕ
	|		(НачислениеАмортизации.НачислятьАмортизациюБУ
	|			ИЛИ НачислениеАмортизации.НачислятьАмортизациюНУ)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		АмортизацияОС.Организация КАК Организация,
	|		АмортизацияОС.НомерПакета КАК НомерПакета,
	|		&Период КАК Период
	|	ИЗ
	|		Документ.АмортизацияОС2_4 КАК АмортизацияОС
	|
	|	ГДЕ
	|		АмортизацияОС.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|		И АмортизацияОС.Проведен
	|		И АмортизацияОС.Организация В (&СписокОрганизаций)
	|
	|	) КАК НачислениеАмортизации";
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданияНаСледующийПериод = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗаданияНаСледующийПериод.Количество() <> 0 Тогда
		Возврат ЗаданияНаСледующийПериод;
	КонецЕсли;
	
	// Задания на ближайший следующий месяц, в котором начисляется амортизация

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеАмортизации.Организация,
	|	НачислениеАмортизации.НомерПакета,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Месяц,
	|	ЕСТЬNULL(МИНИМУМ(НачислениеАмортизации.Период), ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачислениеАмортизации.Организация КАК Организация,
	|		ЕСТЬNULL(ПакетыАмортизации.НомерПакета, 0) КАК НомерПакета,
	|		НАЧАЛОПЕРИОДА(НачислениеАмортизации.Период, МЕСЯЦ) КАК Период
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаОСУУ КАК НачислениеАмортизации
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизации
	|			ПО ПакетыАмортизации.Организация = НачислениеАмортизации.Организация
	|				И ПакетыАмортизации.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
	|	ГДЕ
	|		НачислениеАмортизации.НачислятьАмортизациюУУ
	|		И НачислениеАмортизации.Организация В (&СписокОрганизаций)
	|		И НачислениеАмортизации.Период >= &Период
	|		И НачислениеАмортизации.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НачислениеАмортизации.Организация,
	|		ЕСТЬNULL(ПакетыАмортизации.НомерПакета, 0) КАК НомерПакета,
	|		НАЧАЛОПЕРИОДА(НачислениеАмортизации.Период, МЕСЯЦ) КАК Период
	|	ИЗ
	|		РегистрСведений.ПорядокУчетаОСБУ КАК НачислениеАмортизации
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизации
	|			ПО ПакетыАмортизации.Организация = НачислениеАмортизации.Организация
	|				И ПакетыАмортизации.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
	|	ГДЕ
	|		(НачислениеАмортизации.НачислятьАмортизациюБУ
	|			ИЛИ НачислениеАмортизации.НачислятьАмортизациюНУ)
	|		И НачислениеАмортизации.Организация В (&СписокОрганизаций)
	|		И НачислениеАмортизации.Период >= &Период
	|		И НачислениеАмортизации.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		АмортизацияОС.Организация КАК Организация,
	|		АмортизацияОС.НомерПакета КАК НомерПакета,
	|		НАЧАЛОПЕРИОДА(АмортизацияОС.Дата, МЕСЯЦ) КАК Период
	|	ИЗ
	|		Документ.АмортизацияОС2_4 КАК АмортизацияОС
	|
	|	ГДЕ
	|		АмортизацияОС.Дата >= &Период
	|		И АмортизацияОС.Проведен
	|		И АмортизацияОС.Организация В (&СписокОрганизаций)
	|
	|	) КАК НачислениеАмортизации
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеАмортизации.Организация,
	|	НачислениеАмортизации.НомерПакета
	|
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(МИНИМУМ(НачислениеАмортизации.Период), ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|";

	УстановитьПривилегированныйРежим(Истина);
	ЗаданияНаСледующийПериод = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ДанныеЗадания Из ЗаданияНаСледующийПериод Цикл
		
		Если ВнеоборотныеАктивы.АмортизацияОСМожетНачислятьсяСДатыПринятияКУчету(ДанныеЗадания.Организация, ДанныеЗадания.Период) Тогда
			ДанныеЗадания.Месяц = ДанныеЗадания.Период;
		Иначе
			ДанныеЗадания.Месяц = ДобавитьМесяц(ДанныеЗадания.Период, 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗаданияНаСледующийПериод;

КонецФункции

#КонецОбласти

#КонецЕсли