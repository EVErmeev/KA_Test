#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значения по умолчанию для ресурсов регистра.
// Имена ключей структуры должны строго соответствовать именам ресурсов регистра.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - структура значений ресурсов регистра.
Функция ЗначенияПоУмолчанию() Экспорт
	
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("ПрименяетсяПБУ18", Ложь);
	СтруктураЗначений.Вставить("ВедетсяУчетПостоянныхИВременныхРазниц", Ложь);
	СтруктураЗначений.Вставить("ВариантУчетаОтложенногоНалога", Перечисления.ВариантыУчетаОтложенногоНалога.Нет);
	СтруктураЗначений.Вставить("ИспользоватьСчет40", Ложь);
	СтруктураЗначений.Вставить("ЗабалансовыйУчетТМЦВЭксплуатации", Ложь);
	СтруктураЗначений.Вставить("СборкаТоваровЧерезСчет20", Ложь);
	СтруктураЗначений.Вставить("ВзаимозачетЧерезСчет76", Ложь);
	СтруктураЗначений.Вставить("ВидРазницПБУ18РезервовПоСомнительнымДолгам", Перечисления.ВидыРазницПБУ18.ВР);
	СтруктураЗначений.Вставить("ПроводкиПоРаботникам", Ложь);
	СтруктураЗначений.Вставить("УчетНИОКРПоФСБУ26", Истина);
	СтруктураЗначений.Вставить("СтатьяРасходовПоИсследованиям", Неопределено);
	СтруктураЗначений.Вставить("АналитикаРасходовПоИсследованиям", Неопределено);
	СтруктураЗначений.Вставить("ПрименяетсяФСБУ6", Истина);
	СтруктураЗначений.Вставить("ПрименяетсяФСБУ14", Истина);
	СтруктураЗначений.Вставить("ПорядокНачисленияАмортизацииОС", Перечисления.ПорядокНачисленияАмортизации.СДатыПринятияКУчету);
	СтруктураЗначений.Вставить("ПорядокНачисленияАмортизацииАренда", Перечисления.ПорядокНачисленияАмортизации.СДатыПринятияКУчету);
	СтруктураЗначений.Вставить("СписатьСтоимостьТМЦВЭксплуатации", Ложь);
	СтруктураЗначений.Вставить("СписыватьСтоимостьМалоценныхТМЦНаРасходы", Ложь);
	СтруктураЗначений.Вставить("СтатьяРасходовДляСписанияМалоценныхТМЦ", Неопределено);
	СтруктураЗначений.Вставить("АналитикаСписанияМалоценныхТМЦ", Неопределено);
	СтруктураЗначений.Вставить("УчетнаяПолитикаСуществует", Ложь);
	СтруктураЗначений.Вставить("НастройкаЗаполненияБухОтчетности", Справочники.НастройкиЗаполненияБухОтчетности.НеНастраивается);
	
	Возврат СтруктураЗначений

КонецФункции

// Возращает текст запроса по данным регистра.
// 
// Возвращаемое значение:
// 	Строка - Текст запроса.
Функция ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик() Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСрезПоследних.Период КАК Период,
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация,
	|	ТаблицаСрезПоследних.ВариантУчетаОтложенногоНалога <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.Нет)
	|		И ТаблицаСрезПоследних.ВариантУчетаОтложенногоНалога <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ПустаяСсылка) КАК ПрименяетсяПБУ18,
	|	ТаблицаСрезПоследних.ВедетсяУчетПостоянныхИВременныхРазниц КАК ВедетсяУчетПостоянныхИВременныхРазниц,
	|	ТаблицаСрезПоследних.ВариантУчетаОтложенногоНалога КАК ВариантУчетаОтложенногоНалога,
	|	ТаблицаСрезПоследних.ИспользоватьСчет40 КАК ИспользоватьСчет40,
	|	ТаблицаСрезПоследних.ЗабалансовыйУчетТМЦВЭксплуатации КАК ЗабалансовыйУчетТМЦВЭксплуатации,
	|	ТаблицаСрезПоследних.СборкаТоваровЧерезСчет20 КАК СборкаТоваровЧерезСчет20,
	|	ТаблицаСрезПоследних.ВзаимозачетЧерезСчет76 КАК ВзаимозачетЧерезСчет76,
	|	ТаблицаСрезПоследних.ВидРазницПБУ18РезервовПоСомнительнымДолгам КАК ВидРазницПБУ18РезервовПоСомнительнымДолгам,
	|	ТаблицаСрезПоследних.ПроводкиПоРаботникам КАК ПроводкиПоРаботникам,
	|	ТаблицаСрезПоследних.УчетНИОКРПоФСБУ26 КАК УчетНИОКРПоФСБУ26,
	|	ТаблицаСрезПоследних.СтатьяРасходовПоИсследованиям КАК СтатьяРасходовПоИсследованиям,
	|	ТаблицаСрезПоследних.АналитикаРасходовПоИсследованиям КАК АналитикаРасходовПоИсследованиям,
	|	ТаблицаСрезПоследних.ПрименяетсяФСБУ6 КАК ПрименяетсяФСБУ6,
	|	ТаблицаСрезПоследних.ПрименяетсяФСБУ14 КАК ПрименяетсяФСБУ14,
	|	ТаблицаСрезПоследних.ПорядокНачисленияАмортизацииОС КАК ПорядокНачисленияАмортизацииОС,
	|	ТаблицаСрезПоследних.ПорядокНачисленияАмортизацииНМА КАК ПорядокНачисленияАмортизацииНМА,
	|	ТаблицаСрезПоследних.ПорядокНачисленияАмортизацииАренда КАК ПорядокНачисленияАмортизацииАренда,
	|	ТаблицаСрезПоследних.СписатьСтоимостьТМЦВЭксплуатации КАК СписатьСтоимостьТМЦВЭксплуатации,
	|	ТаблицаСрезПоследних.НастройкаЗаполненияБухОтчетности КАК НастройкаЗаполненияБухОтчетности,
	|	ТаблицаСрезПоследних.СписыватьСтоимостьМалоценныхТМЦНаРасходы КАК СписыватьСтоимостьМалоценныхТМЦНаРасходы,
	|	ТаблицаСрезПоследних.СтатьяРасходовДляСписанияМалоценныхТМЦ КАК СтатьяРасходовДляСписанияМалоценныхТМЦ,
	|	ТаблицаСрезПоследних.АналитикаСписанияМалоценныхТМЦ КАК АналитикаСписанияМалоценныхТМЦ
	|	
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухУчета.СрезПоследних(&Период, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК ТаблицаСрезПоследних
	|		ПО ГоловныеОрганизации.Организация = ТаблицаСрезПоследних.Организация
	|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Формирует текстовое описание установленных параметров.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДатаДействия - Дата - период действия настроек.
// 	ДействующиеНастройки - Структура - действующие параметры учетной политики.
// Возвращаемое значение:
// 	Строка - Описание действующих параметров строкой.
Функция ОписаниеДействующихПараметров(Организация, ДатаДействия = Неопределено, ДействующиеНастройки = Неопределено) Экспорт
	
	Если ДействующиеНастройки = Неопределено Тогда
		ДействующиеНастройки = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
			"УчетнаяПолитикаБухУчета",
			Организация,
			ДатаДействия,
			Ложь);
	КонецЕсли;
	СтрокаШаблон = "%1: %2." + Символы.ПС;
	СтрокаШаблонБулево = "%1." + Символы.ПС;
	Если ДействующиеНастройки = Неопределено Тогда
		СтрокаОписанияНастроек = НСтр("ru='Не заданы параметры.'");
		Возврат СтрокаОписанияНастроек;
	КонецЕсли;
	
	СтрокаОписанияНастроек = "";
	
	Если ЗначениеЗаполнено(ДействующиеНастройки.ВариантУчетаОтложенногоНалога) Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблон,
				НСтр("ru='Учет по ПБУ 18'"),
				ДействующиеНастройки.ВариантУчетаОтложенногоНалога);
	КонецЕсли;
	
	Если ДействующиеНастройки.ИспользоватьСчет40 Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Выпуск продукции с использованием счета 40 ""Выпуск продукции""'"));
	КонецЕсли;
	
	Если ДействующиеНастройки.ЗабалансовыйУчетТМЦВЭксплуатации Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Ведется дополнительный учет ТМЦ в эксплуатации на забалансовых счетах'"));
	КонецЕсли;
	
	Если ДействующиеНастройки.СборкаТоваровЧерезСчет20 Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Сборка товаров через счет 20'"));
	КонецЕсли;
	
	Если ДействующиеНастройки.СписатьСтоимостьТМЦВЭксплуатации Тогда
		ТекстОписания = СтрШаблон(НСтр("ru='Стоимость ТМЦ в эксплуатации списывается в декабре %1 г'"), Формат(Год(ДействующиеНастройки.Период), "ЧГ=0;"));
		СтрокаОписанияНастроек = СтрокаОписанияНастроек + СтрШаблон(СтрокаШаблонБулево, ТекстОписания);
	КонецЕсли;
	
	Если ДействующиеНастройки.ВзаимозачетЧерезСчет76 Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Взаимозачет задолженности производится через счет 76.09 (76.39) ""Прочие расчеты с разными дебиторами и кредиторами""'"));
	КонецЕсли;
	
	Если ДействующиеНастройки.ВедетсяУчетПостоянныхИВременныхРазниц Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблон,
				НСтр("ru='Вид разниц ПБУ 18/02'"),
				ДействующиеНастройки.ВидРазницПБУ18РезервовПоСомнительнымДолгам);
	КонецЕсли;
	
	Если ДействующиеНастройки.ПроводкиПоРаботникам Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Ведется учет расходов на оплату труда по счету 70 ""Оплата труда"" с детализацией по работникам организации'"));
	КонецЕсли;
	
	Если ДействующиеНастройки.СписыватьСтоимостьМалоценныхТМЦНаРасходы Тогда
		
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Списывать стоимость малоценных ТМЦ на расходы в месяце приобретения в соответствии с ФСБУ 5 ""Запасы""'"));
		
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблон,
				НСтр("ru='Статья расходов для списания малоценных ТМЦ'"),
				ДействующиеНастройки.СтатьяРасходовДляСписанияМалоценныхТМЦ);
		

		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблон,
				НСтр("ru='Аналитика списания малоценных ТМЦ'"),
				ДействующиеНастройки.АналитикаСписанияМалоценныхТМЦ);
	КонецЕсли;
	
	#Область ВнеоборотныеАктивы
	
	Если ДействующиеНастройки.ПрименяетсяФСБУ6 Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Учет ОС ведется в соответствии с ФСБУ 6'"));
	КонецЕсли;
	
	Если ДействующиеНастройки.ПрименяетсяФСБУ14 Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Учет НМА ведется в соответствии с ФСБУ 14/2022'"));
	КонецЕсли;
		
	Если ДействующиеНастройки.УчетНИОКРПоФСБУ26 Тогда
		
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Учет НИОКР ведется в соответствии с ФСБУ 26/2020'"));
				
	КонецЕсли;
		
	Если ДействующиеНастройки.ПорядокНачисленияАмортизацииОС = Перечисления.ПорядокНачисленияАмортизации.СоСледующегоМесяца
		И ДействующиеНастройки.ПорядокНачисленияАмортизацииНМА = Перечисления.ПорядокНачисленияАмортизации.СоСледующегоМесяца
		И ДействующиеНастройки.ПорядокНачисленияАмортизацииАренда = Перечисления.ПорядокНачисленияАмортизации.СоСледующегоМесяца Тогда
		
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Амортизация ОС и НМА начисляется с первого числа месяца, следующего за месяцем принятия к учету'"));
				
	ИначеЕсли ДействующиеНастройки.ПорядокНачисленияАмортизацииОС = Перечисления.ПорядокНачисленияАмортизации.СДатыПринятияКУчету
		И ДействующиеНастройки.ПорядокНачисленияАмортизацииНМА = Перечисления.ПорядокНачисленияАмортизации.СДатыПринятияКУчету
		И ДействующиеНастройки.ПорядокНачисленияАмортизацииАренда = Перечисления.ПорядокНачисленияАмортизации.СДатыПринятияКУчету Тогда
		
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Амортизация ОС и НМА начисляется с даты принятия к учету'"));
				
	Иначе
		
		Если ДействующиеНастройки.ПорядокНачисленияАмортизацииОС = Перечисления.ПорядокНачисленияАмортизации.СоСледующегоМесяца Тогда
				
			СтрокаОписанияНастроек = СтрокаОписанияНастроек
				+ СтрШаблон(СтрокаШаблонБулево,
					НСтр("ru='Амортизация собственных ОС начисляется с первого числа месяца, следующего за месяцем принятия к учету'"));
		Иначе
			
			СтрокаОписанияНастроек = СтрокаОписанияНастроек
				+ СтрШаблон(СтрокаШаблонБулево,
					НСтр("ru='Амортизация собственных ОС начисляется с даты принятия к учету'"));
					
		КонецЕсли;
				
		Если ДействующиеНастройки.ПорядокНачисленияАмортизацииАренда = Перечисления.ПорядокНачисленияАмортизации.СоСледующегоМесяца Тогда
				
			СтрокаОписанияНастроек = СтрокаОписанияНастроек
				+ СтрШаблон(СтрокаШаблонБулево,
					НСтр("ru='Амортизация арендованных ОС начисляется с первого числа месяца, следующего за месяцем принятия к учету'"));
		Иначе
			
			СтрокаОписанияНастроек = СтрокаОписанияНастроек
				+ СтрШаблон(СтрокаШаблонБулево,
					НСтр("ru='Амортизация арендованных ОС начисляется с даты принятия к учету'"));
					
		КонецЕсли;
				
		Если ДействующиеНастройки.ПорядокНачисленияАмортизацииНМА = Перечисления.ПорядокНачисленияАмортизации.СоСледующегоМесяца Тогда
				
			СтрокаОписанияНастроек = СтрокаОписанияНастроек
				+ СтрШаблон(СтрокаШаблонБулево,
					НСтр("ru='Амортизация НМА начисляется с первого числа месяца, следующего за месяцем принятия к учету'"));
		Иначе
			
			СтрокаОписанияНастроек = СтрокаОписанияНастроек
				+ СтрШаблон(СтрокаШаблонБулево,
					НСтр("ru='Амортизация НМА начисляется с даты принятия к учету'"));
					
		КонецЕсли;
				
	КонецЕсли;
	
	Если ДействующиеНастройки.УчетНИОКРПоФСБУ26 Тогда
		
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблон,
				НСтр("ru='Статья расходов по исследованиям'"),
				ДействующиеНастройки.СтатьяРасходовПоИсследованиям);
		
		Если ЗначениеЗаполнено(ДействующиеНастройки.АналитикаРасходовПоИсследованиям) Тогда
			
			СтрокаОписанияНастроек = СтрокаОписанияНастроек
				+ СтрШаблон(СтрокаШаблон,
					НСтр("ru='Аналитика расходов по исследованиям'"),
					ДействующиеНастройки.АналитикаРасходовПоИсследованиям);
				
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Отчетность
	
	Если ЗначениеЗаполнено(ДействующиеНастройки.НастройкаЗаполненияБухОтчетности) Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек
			+ СтрШаблон(СтрокаШаблон,
				НСтр("ru='Настройка заполнения бухгалтерской (финансовой)  отчетности'"),
				ДействующиеНастройки.НастройкаЗаполненияБухОтчетности);
	КонецЕсли;

	#КонецОбласти
		
	Если НЕ ЗначениеЗаполнено(СтрокаОписанияНастроек) Тогда
		СтрокаОписанияНастроек = НСтр("ru='Не заданы параметры.'");
	КонецЕсли;
	
	Возврат СтрокаОписанияНастроек;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.УчетнаяПолитикаБухУчета.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.12.51";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("76f742fc-f502-48bb-ac5e-eaaf81131c02");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.УчетнаяПолитикаБухУчета.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет регистр ""Учетная политика бухгалтерского учета"":
	|- заполняет новый реквизит ""Порядок начисления амортизации арендованных ОС""
	|- заполняет новый реквизит ""Порядок начисления амортизации НМА"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаБухУчета.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаБухУчета.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.УчетнаяПолитикаБухУчета.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.УчетнаяПолитикаБухУчета";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаБухУчета КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ПорядокНачисленияАмортизацииАренда = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.ПустаяСсылка)
	|	ИЛИ ДанныеРегистра.ПорядокНачисленияАмортизацииАренда = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.ПустаяСсылка)
	|	ИЛИ ДанныеРегистра.ПорядокНачисленияАмортизацииНМА = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.ПустаяСсылка)
	|";
	
	Данные = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.УчетнаяПолитикаБухУчета;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТДанныеДляОбработки";
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЭтоМеждународнаяВерсия = НЕ ПолучитьФункциональнуюОпцию("ЛокализацияРФ");
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляОбработки.Период КАК Период,
	|	ДанныеДляОбработки.Организация КАК Организация
	|ИЗ
	|	ВТДанныеДляОбработки КАК ДанныеДляОбработки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;

			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Период", Выборка.Период);
			ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Организация);
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Прочитать();
			
			Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
				
				Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.ПорядокНачисленияАмортизацииАренда) Тогда
					ЗаписьРегистра.ПорядокНачисленияАмортизацииАренда = ЗаписьРегистра.ПорядокНачисленияАмортизацииОС;
				КонецЕсли;
					
				Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.ПорядокНачисленияАмортизацииНМА) Тогда
					ЗаписьРегистра.ПорядокНачисленияАмортизацииНМА = Перечисления.ПорядокНачисленияАмортизации.СоСледующегоМесяца;
				КонецЕсли;
					
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПредставлениеОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, 
				Неопределено, 
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
