#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Отмечает изменение статуса проверки документа.
// 
// Параметры:
//	МассивДокументов - Массив Из ДокументСсылка -
//					-  ДокументСсылка - ссылка на документ или массив документов, являющийся измерением регистра "Статусы проверки документов" (см. измерение "Документ" данного регистра)
//	ДанныеОшибок - Соответствие - соответствие данных (если не задано - данные об ошибках не фиксируются).
//	ДокументПроверен - Булево - Истина, если ставится пометка что документ проверен и ложь в противном случае.
//	 		Если необходимо поменять текущий статус можно не указывать значение данного параметра.
//
Процедура УстановитьСтатусПроверкиДокументов(Знач МассивДокументов, ДанныеОшибок = Неопределено, ДокументПроверен = Неопределено) Экспорт
	
	ФиксироватьОшибки = Не ДанныеОшибок = Неопределено;
	
	Если Не ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		Документ = МассивДокументов;
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Документ);
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов) Тогда
		Если ФиксироватьОшибки Тогда
			ДанныеОшибок.Вставить(МассивДокументов.Получить(0), НСтр("ru = 'У пользователя не достаточно прав для изменения данных о проверке документов'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекстОшибкиДокумента = НСтр("ru = 'Недоступно изменение статуса проверки документа %1.
		|Возможно с документом работают другие пользователи.'");
	
	ТаблицаДокументов = ИнициализироватьТаблицуДокументов(МассивДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Документ КАК Документ
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Документ КАК Документ,
	|	СтатусыПроверкиДокументов.Период,
	|	СтатусыПроверкиДокументов.Организация,
	|	СтатусыПроверкиДокументов.СтатусПроверки КАК СтатусПроверкиСтарый,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|								ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА &НовыйСтатусПроверки = ИСТИНА
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|			ТОГДА &ТекущийПользователь
	|		ИНАЧЕ СтатусыПроверкиДокументов.Проверил
	|	КОНЕЦ КАК Проверил,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|								ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА &НовыйСтатусПроверки = ИСТИНА
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ СтатусыПроверкиДокументов.ДатаПроверки
	|	КОНЕЦ КАК ДатаПроверки,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|								ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА &НовыйСтатусПроверки = ИСТИНА
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|			ТОГДА СтатусыПроверкиДокументов.Изменил
	|		ИНАЧЕ &ТекущийПользователь
	|	КОНЕЦ КАК Изменил,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|								ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА &НовыйСтатусПроверки = ИСТИНА
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|			ТОГДА СтатусыПроверкиДокументов.ДатаИзменения
	|		ИНАЧЕ &ТекущаяДата
	|	КОНЕЦ КАК ДатаИзменения,
	|	ВЫБОР
	|		КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|					КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &НовыйСтатусПроверки = ИСТИНА
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.НеПроверен)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусПроверки,
	|	ВЫБОР
	|		КОГДА СтатусыПроверкиДокументов.Организация ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДанныхПоДокументуНетВРегистре
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверкиДокументов
	|		ПО ТаблицаДокументов.Документ = СтатусыПроверкиДокументов.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Документ КАК Документ,
	|	ТаблицаДанных.Период,
	|	ТаблицаДанных.Организация,
	|	ТаблицаДанных.Проверил,
	|	ТаблицаДанных.ДатаПроверки,
	|	ТаблицаДанных.Изменил,
	|	ТаблицаДанных.ДатаИзменения,
	|	ТаблицаДанных.СтатусПроверки
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|ГДЕ
	|	НЕ ТаблицаДанных.ДанныхПоДокументуНетВРегистре
	|ИТОГИ ПО
	|	Документ
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("НовыйСтатусПроверки", ДокументПроверен);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтатусыПроверкиДокумента = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
	ПараметрыБлокировки	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрСведений", "СтатусыПроверкиДокументов");
	
	// Запишем изменения для документов, данные по которым ранее заносились в регистр:	
	ВыборкаПоДокументам = Результат.Получить(2).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
					
			ЗначенияБлокировки	= Новый Структура("Документ", ВыборкаПоДокументам.Документ);
			ОбщегоНазначенияУТ.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
			
			ЗаблокироватьДанныеДляРедактирования(ВыборкаПоДокументам.Документ);
			
			СтатусыПроверкиДокумента.Очистить();
			СтатусыПроверкиДокумента.Отбор.Документ.Установить(ВыборкаПоДокументам.Документ);
			
			Выборка = ВыборкаПоДокументам.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ЗаписьРегистра = СтатусыПроверкиДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
				
			КонецЦикла;
			
			СтатусыПроверкиДокумента.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ФиксироватьОшибки Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиДокумента, ВыборкаПоДокументам.Документ);
				ДанныеОшибок.Вставить(ВыборкаПоДокументам.Документ, ТекстОшибки);
			КонецЕсли;
			
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(ВыборкаПоДокументам.Документ);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные о проверке документа.
//
//	Параметры:
//		ДокументСсылка - ДокументСсылка - ссылка на документ, для которого необходимо получить данные о проверке (см. измерение "Документ" данного регистра).
//
//	Возвращаемое значение:
//		Структура - содержит следующие данные:
//			* СтатусПроверки - ПеречислениеСсылка.СтатусыПроверкиФинансовыхДокументов - текущий статус проверки документа
//			* Проверен - Булево - признак проверки документа, если данных о проверке данного документа в базе нет - возвращает Ложь;
//			* Проверил - СправочникСсылка.Пользователи - последний пользователь, кто проверял документ, если никто не проверял - пустая ссылка;
//			* ДатаПроверки - Дата - дата и время последней проверки документа.
//			* БылПроверен - Булево - Признак того, что документ был ранее проверен.
//
Функция ПолучитьДанныеПроверкиДокумента(ДокументСсылка) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Проверен", Ложь);
	СтруктураВозврата.Вставить("Проверил", Справочники.Пользователи.ПустаяСсылка());
	СтруктураВозврата.Вставить("ДатаПроверки", Дата(1,1,1));
	СтруктураВозврата.Вставить("СтатусПроверки", Перечисления.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка());
	СтруктураВозврата.Вставить("БылПроверен", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
   |	СтатусыПроверкиДокументов.Организация КАК Организация,
   |	СтатусыПроверкиДокументов.Документ КАК Документ,
   |	СтатусыПроверкиДокументов.Проверил КАК Проверил,
   |	СтатусыПроверкиДокументов.ДатаПроверки КАК ДатаПроверки,
   |	СтатусыПроверкиДокументов.СтатусПроверки КАК СтатусПроверки,
   |	ВЫБОР
   |		КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
   |			ТОГДА ИСТИНА
   |		ИНАЧЕ ЛОЖЬ
   |	КОНЕЦ КАК Проверен,
   |	ВЫБОР
   |		КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)
   |				ИЛИ СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке)
   |			ТОГДА ИСТИНА
   |		ИНАЧЕ ЛОЖЬ
   |	КОНЕЦ КАК БылПроверен
   |ИЗ
   |	РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверкиДокументов
   |ГДЕ
   |	СтатусыПроверкиДокументов.Документ = &Документ
   |
   |УПОРЯДОЧИТЬ ПО
   |	Проверен УБЫВ";
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Устанавливает статус "Не проверен" для новых документов или отменяет проверку документу, если документ ранее был изменен.
//
//	Параметры:
//		ДокументСсылка - ДокументСсылка - ссылка на документ, для которого происходит запись статуса (см. измерение "Документ" данного регистра);
//		ДатаДокумента - Дата - Дата документа
//		Организации - Массив Из СправочникСсылка. - массив организаций, для которых необходимо отразить запись о проверке документа в регистре
//		ДанныеПроверки - см. ПолучитьДанныеПроверкиДокумента
//		ДопПараметры - Структура - Может содержать следующие свойства:
//			* ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - если передано "ВозвратИзЭксплуатации", тогда статус проверки
//										принудительно устанавливается в пустую ссылку, так как такие документы не должны проверяться.
//
Процедура УстановитьСтатусПроверкиДокументаПриЗаписи(ДокументСсылка,  ДатаДокумента, Организации, ДанныеПроверки, ДопПараметры = Неопределено) Экспорт
	
	ПроверкаДокументов = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
	ПроверкаДокументов.Отбор.Документ.Установить(ДокументСсылка);
	ПроверкаДокументов.Очистить();
	
	СтатусПроверки = Перечисления.СтатусыПроверкиФинансовыхДокументов.НеПроверен;
	Если ДанныеПроверки.Свойство("БылПроверен") И ДанныеПроверки.БылПроверен Тогда
		СтатусПроверки = Перечисления.СтатусыПроверкиФинансовыхДокументов.КПовторнойПроверке;
	КонецЕсли;
	Если ДопПараметры <> Неопределено Тогда
		Если ДопПараметры.Свойство("ХозяйственнаяОперация") И ДопПараметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации Тогда
			СтатусПроверки = Перечисления.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Организация Из Организации Цикл
		
		ЗаписьСтатусаПроверки = ПроверкаДокументов.Добавить();
	
		ЗаписьСтатусаПроверки.Документ = ДокументСсылка;
		ЗаписьСтатусаПроверки.Период = ДатаДокумента;
		ЗаписьСтатусаПроверки.Организация = Организация;
		
		ЗаписьСтатусаПроверки.ДатаИзменения = ТекущаяДатаСеанса();
		ЗаписьСтатусаПроверки.Изменил = Пользователи.ТекущийПользователь();
		ЗаписьСтатусаПроверки.СтатусПроверки = СтатусПроверки;
		ЗаписьСтатусаПроверки.Проверил = ДанныеПроверки.Проверил;
		ЗаписьСтатусаПроверки.ДатаПроверки = ДанныеПроверки.ДатаПроверки;
		
	КонецЦикла;
	
	ПроверкаДокументов.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьТаблицуДокументов(ИсходныйМассивДокументов)
	
	НаборЗаписей = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
	ТаблицаВозврата = НаборЗаписей.ВыгрузитьКолонки("Документ");
	
	Для ТекущийИндекс = 1 По ИсходныйМассивДокументов.Количество() Цикл
		ТаблицаВозврата.Добавить();
	КонецЦикла;
	
	ТаблицаВозврата.ЗагрузитьКолонку(ИсходныйМассивДокументов, "Документ");
	
	Возврат ТаблицаВозврата;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СтатусыПроверкиДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.9.27";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("82723913-4ca9-4f8f-a733-0c0dd8ac4cf6");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СтатусыПроверкиДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет Период в существующих записях регистра датой проверяемого документа.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СтатусыПроверкиДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СтатусыПроверкиДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.СтатусыПроверкиДокументов";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыПроверкиДокументов.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверкиДокументов
	|ГДЕ
	|	СтатусыПроверкиДокументов.Период = &ПустаяДата
	|";
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	ТаблицаРегистра = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ТаблицаРегистра, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.СтатусыПроверкиДокументов";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	
	ДанныеКОбработке = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяРегистра, ДополнительныеПараметры);
	
	Пока ДанныеКОбработке.Следующий() Цикл
		
		ЕстьЗаписиКОбработке = Истина;
		
		Пока ЕстьЗаписиКОбработке Цикл
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 10000
			|	СтатусыПроверкиДокументов.Организация КАК Организация,
			|	СтатусыПроверкиДокументов.Документ КАК Документ,
			|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, &ПустаяДата) КАК Период
			|ИЗ
			|	РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверкиДокументов
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
			|	ПО
			|		СтатусыПроверкиДокументов.Организация = ДанныеПервичныхДокументов.Организация
			|		И СтатусыПроверкиДокументов.Документ = ДанныеПервичныхДокументов.Документ
			|ГДЕ
			|	СтатусыПроверкиДокументов.Период = &ПустаяДата
			|	И СтатусыПроверкиДокументов.Организация = &Организация
			|";
			Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
			Запрос.УстановитьПараметр("Организация", ДанныеКОбработке.Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				НаборЗаписей = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(ДанныеКОбработке.Организация);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				ЕстьЗаписиКОбработке = Ложь;
				Продолжить;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НачатьТранзакцию();
				Попытка
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
					ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Организация);
					ЭлементБлокировки.УстановитьЗначение("Документ", Выборка.Документ);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					Блокировка.Заблокировать();
					
					НаборЗаписей = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
					НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
					
					Если НЕ ЗначениеЗаполнено(Выборка.Документ) Тогда
						
						НаборЗаписей.Записать();
						ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
						ЗафиксироватьТранзакцию();
						Продолжить;
						
					КонецЕсли;
					
					НаборЗаписей.Прочитать();
					
					Для каждого Запись Из НаборЗаписей Цикл
						Если Не ЗначениеЗаполнено(Запись.Период) Тогда
							
							Если ЗначениеЗаполнено(Выборка.Период) Тогда
								Запись.Период = Выборка.Период;
							Иначе
								Запись.Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Документ, "Дата");
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					Если НаборЗаписей.Модифицированность() Тогда
						
						ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
						ЗафиксироватьТранзакцию();
						
					Иначе
						
						ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
						ОтменитьТранзакцию();
						
					КонецЕсли;
					
				Исключение
					ОтменитьТранзакцию();
					ТекстСообщения = НСтр("ru = 'Не удалось обработать записи регистра сведений ""Статусы проверки документов"" по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.РегистрыСведений.СтатусыПроверкиДокументов,,
						ТекстСообщения);
				КонецПопытки;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяРегистра);
		
КонецПроцедуры


#КонецОбласти

#КонецЕсли
