#Область ОписаниеПеременных

&НаКлиенте
Перем КлючПредыдущейСтрокиЗадач;

&НаКлиенте
Перем КлючСтрокиЗадач;

&НаКлиенте
Перем КлючСтрокиДереваПриложений;

&НаКлиенте
Перем КлючЯчейкиСтрокиЗадач;

&НаКлиенте
Перем СостояниеДереваПриложений;

&НаКлиенте
Перем СохраненныеКомментарии;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервереФормРазмещаемыхНаРабочемСтоле(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоТонкийWindowsКлиент = Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриложениеЯвляетсяВебКлиентом()
		И ОбщегоНазначения.ЭтоWindowsКлиент();
	СтраницыКомандСозданияНаОсновании = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	
	ОтображатьИсполнителя = Истина;
	ОтображатьТрудоемкость = Ложь;
	
	КлючФормы = "ИнтеграцияС1СДокументооборот3ЗадачиМне";
	
	Автообновление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы, "Автообновление", Истина);
	ПериодАвтообновления = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы, "ПериодАвтообновления", 15); // Время в минутах.
	РазмерСтраницыДинамическогоСписка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы, "РазмерСтраницыДинамическогоСписка", 20);
	НаправлениеСортировкиПоля = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы, "НаправлениеСортировкиПоля", Ложь);
	ПолеДляСортировки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы, "ПолеДляСортировки", "СписокДействияЗадачДата");
	
	ОбновитьОтображениеКарточкиЗадачи();
	
	ВсегоСтраниц = 1;
	ТекущаяСтраница = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КлючПредыдущейСтрокиЗадач = "";
	КлючСтрокиЗадач = 0;
	КлючЯчейкиСтрокиЗадач = 0;
	СохраненныеКомментарии = Новый Соответствие;
	СостояниеДереваПриложений = Новый Соответствие;
	
	ПроверитьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" Тогда
		Если Источник <> ЭтотОбъект Тогда
			ПриПодключении();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененРезультатДействияТекстом" Тогда
		Если Источник = ЭтотОбъект
				Или ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("Текст")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип") Тогда
			Возврат;
		КонецЕсли;
		СохранитьКомментарий(Параметр.Текст, Параметр.ID);
		СтрокаЗадачи = Элементы.СписокДействияЗадач.ТекущиеДанные;
		Если СтрокаЗадачи <> Неопределено
				И СтрокаЗадачи.ДействиеЗадачиID = Параметр.ID
				И СтрокаЗадачи.ДействиеЗадачиТип = Параметр.Тип Тогда
			РезультатДействияТекстом = Параметр.Текст;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ВыполненаЗадача1СДокументооборот" Тогда
		Если Источник <> ЭтотОбъект
				И ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("ID")
				И Параметр.Свойство("Тип")
				И СтрокаПоID(Параметр.ID, Параметр.Тип) <> Неопределено Тогда
			ОбновитьФорму();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПолученHTMLПредпросмотрОбъекта" Тогда
		Если ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ПредставлениеHTML")
				Или Не Параметр.Свойство("ПредпросмотрУрезан")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип") Тогда
			Возврат;
		КонецЕсли;
		РеквизитыКОбновлению = Новый Структура("ПредставлениеHTML, ПредпросмотрУрезан, ОжиданиеПредпросмотра",
			Параметр.ПредставлениеHTML,
			Параметр.ПредпросмотрУрезан,
			Ложь);
		ОбновлениеВыполнено = ОбновитьПриложениеПоID(
			Параметр.ID,
			Параметр.Тип,
			РеквизитыКОбновлению,
			Элементы.СписокДействияЗадач.ТекущаяСтрока);
		Если ОбновлениеВыполнено Тогда
			ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДеревоПриложений(
				ЭтотОбъект,
				СостояниеДереваПриложений[КлючСтрокиЗадачи(Элементы.СписокДействияЗадач.ТекущиеДанные)]);
			// Метод ОбновитьПриложениеПоID заново собирает дерево на сервере.
			// Метод РазвернутьДеревоПриложений устанавливает текущую строку дерева,
			// при этом будет неявно вызван метод обновления предпросмотра.
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		Если ОтображениеКарточкиЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать")
				Или ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ИдентификаторФайла")
				Или Не Параметр.Свойство("Событие")
				Или Не Параметр.Свойство("ВладелецФайла")
				Или Не Параметр.Свойство("ИмяФайла")
				Или Не Параметр.Свойство("УникальныйИдентификаторФормы") Тогда
			Возврат;
		КонецЕсли;
		НужноОбновление = Ложь;
		НайденныеСтрокиЗадач = Новый Массив;
		РеквизитыКЧтению = Новый Структура("Редактируется", Неопределено);
		ОбновлениеВыполнено = ОбновитьПриложениеПоID(
			Параметр.ИдентификаторФайла,
			"DMFile",,,
			РеквизитыКЧтению);
		Если ОбновлениеВыполнено Тогда
			// Измененный файл есть в дереве приложений.
			НужноОбновление = Истина;
			Если Параметр.Событие = "РедактированиеФайла" Тогда
				Если РеквизитыКЧтению.Редактируется = Неопределено Тогда
					НужноОбновление = Ложь;
				Иначе
					НужноОбновление = Не РеквизитыКЧтению.Редактируется;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Возможно владелец файла есть в дереве приложений, но самого файла нет.
			// Например, когда был добавлен новый файл.
			НужноОбновление = ОбновитьПриложениеПоID(Параметр.ВладелецФайла,,,,, НайденныеСтрокиЗадач);
		КонецЕсли;
		Если НужноОбновление Тогда
			СтрокиНовыхФайлов = Новый Массив;
			Если Параметр.Событие = "СозданиеФайла" Тогда
				Для Каждого НайденнаяСтрокаЗадач Из НайденныеСтрокиЗадач Цикл
					СтрокаНовогоФайла = Новый Структура(
						"ПредставлениеПриложения, ПриложениеID, ПриложениеТип, ТипСтроки, РольФайлаID");
					СтрокаНовогоФайла.ПредставлениеПриложения = Параметр.ИмяФайла;
					СтрокаНовогоФайла.ПриложениеID = Параметр.ИдентификаторФайла;
					СтрокаНовогоФайла.ПриложениеТип = "DMFile";
					СтрокаДействияЗадачи = СписокДействияЗадач.НайтиПоИдентификатору(НайденнаяСтрокаЗадач);
					СтрокаНовогоФайла.Вставить("КлючНайденнойСтроки", КлючСтрокиЗадачи(СтрокаДействияЗадачи));
					СтрокиНовыхФайлов.Добавить(СтрокаНовогоФайла);
				КонецЦикла;
			КонецЕсли;
			Если Параметр.УникальныйИдентификаторФормы = Неопределено Тогда
				ВыводитьОкноОжидания = Истина;
			Иначе
				ВыводитьОкноОжидания = (УникальныйИдентификатор = Параметр.УникальныйИдентификаторФормы);
			КонецЕсли;
			ОбновитьФорму(ВыводитьОкноОжидания,, СтрокиНовыхФайлов);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_ДобавлениеСвязи" Тогда
		Если ОтображениеКарточкиЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать")
				Или ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип")
				Или Не Параметр.Свойство("Объект") Тогда
			Возврат;
		КонецЕсли;
		НайденныеСтрокиЗадач = Новый Массив;
		РеквизитыКОбновлению = Новый Структура("Ссылка, ПредставлениеПриложения",
			Параметр.Объект,
			ИнтеграцияС1СДокументооборот3ВызовСервера.ПредставлениеПриложенияОбъектаИС(Параметр.Объект));
		ОбновлениеВыполнено = ОбновитьПриложениеПоID(
			Параметр.ID,
			Параметр.Тип,
			РеквизитыКОбновлению,
			Элементы.СписокДействияЗадач.ТекущаяСтрока,,
			НайденныеСтрокиЗадач);
		Для Каждого НайденнаяСтрокаЗадач Из НайденныеСтрокиЗадач Цикл
			СтрокаДействияЗадачи = СписокДействияЗадач.НайтиПоИдентификатору(НайденнаяСтрокаЗадач);
			Если СтрокаДействияЗадачи <> Неопределено Тогда
				СтрокаДействияЗадачи.ПодходящиеПравила = "";
				СтрокаДействияЗадачи.КлючСтраницыКомандСозданияНаОсновании = "";
				ОтобразитьКомандыСозданияНаОсновании(Элементы.СписокДействияЗадач.ТекущиеДанные);
			КонецЕсли;
		КонецЦикла;
		Если ОбновлениеВыполнено Тогда
			ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДеревоПриложений(
				ЭтотОбъект,
				СостояниеДереваПриложений[КлючСтрокиЗадачи(Элементы.СписокДействияЗадач.ТекущиеДанные)]);
			// Метод ОбновитьПриложениеПоID заново собирает дерево на сервере.
			// Метод РазвернутьДеревоПриложений устанавливает текущую строку дерева.
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документооборот_УдалениеСвязи" Тогда
		Если ОтображениеКарточкиЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать")
				Или ТипЗнч(Параметр) <> Тип("Структура")
				Или Не Параметр.Свойство("ID")
				Или Не Параметр.Свойство("Тип")
				Или Не ОбновитьПриложениеПоID(Параметр.ID, Параметр.Тип) Тогда
			Возврат;
		КонецЕсли;
		ОбновитьФорму(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ОткрытьФорму(ИмяФормыПараметров,, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыРедактировать(
			Элементы.ДеревоПриложений.ТекущиеДанные,
			УникальныйИдентификатор);
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		ИнтеграцияС1СДокументооборот3Клиент.ОткрытьПриложение(
			Элементы.ДеревоПриложений.ТекущиеДанные,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДействияТекстомОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтрокаЗадачи = Элементы.СписокДействияЗадач.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьКомментарий(Текст, СтрокаЗадачи.ДействиеЗадачиID);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", СтрокаЗадачи.ДействиеЗадачиID);
	ПараметрыОповещения.Вставить("Тип", СтрокаЗадачи.ДействиеЗадачиТип);
	ПараметрыОповещения.Вставить("Текст", Текст);
	Оповестить("ИзмененРезультатДействияТекстом", ПараметрыОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьПриложение(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрокаЗадач = Элементы.СписокДействияЗадач.ТекущиеДанные;
	Если ТекущаяСтрокаЗадач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.УстановитьДоступностьКомандПриложений(
		Элемент.ТекущаяСтрока,
		КлючСтрокиДереваПриложений,
		ТекущаяСтрокаЗадач.ДействиеЗадачиID,
		ЭтотОбъект,
		ЭтоТонкийWindowsКлиент);
	ПодключитьОбработчикОжидания("ОбновитьПредпросмотрПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	ИнтеграцияС1СДокументооборот3Клиент.ДеревоПриложенийПередНачаломИзменения(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДействияЗадач

&НаКлиенте
Процедура СписокДействияЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаЗадачи = Элементы.СписокДействияЗадач.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоЗадаче = ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче(
		СтрокаЗадачи.ДействиеЗадачиID,
		СтрокаЗадачи.ДействиеЗадачиТип);
	ДанныеПоЗадаче.Заголовок = СтрокаЗадачи.Заголовок;
	ДанныеПоЗадаче.Новое = СтрокаЗадачи.Новое;
	ДанныеПоЗадаче.Просрочено = СтрокаЗадачи.Просрочено;
	ДанныеПоЗадаче.ПредставлениеHTML = СтрокаЗадачи.ПредставлениеHTML;
	ДанныеПоЗадаче.АдресДополнительныхДанных = СтрокаЗадачи.АдресДополнительныхДанных;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ID", СтрокаЗадачи.ДействиеЗадачиID);
	ПараметрыФормы.Вставить("Тип", СтрокаЗадачи.ДействиеЗадачиТип);
	ПараметрыФормы.Вставить("ДанныеПоЗадаче", ДанныеПоЗадаче);
	ПараметрыФормы.Вставить("СохраненныйКомментарий", СохраненныеКомментарии[СтрокаЗадачи.ДействиеЗадачиID]);
	ПараметрыФормы.Вставить("СостояниеДереваПриложений",
		ИнтеграцияС1СДокументооборот3Клиент.СостояниеДереваПриложений(ЭтотОбъект));
	ПараметрыФормы.Вставить("ОсновнойПредметID", СтрокаЗадачи.ОсновнойПредметID);
	ПараметрыФормы.Вставить("ОсновнойПредметТип", СтрокаЗадачи.ОсновнойПредметТип);
	ПараметрыФормы.Вставить("ПодходящиеПравила", СтрокаЗадачи.ПодходящиеПравила);
	
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.Задача",
		ПараметрыФормы,,
		СтрокаЗадачи.ДействиеЗадачиID);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДействияЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДействияЗадачПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДействияЗадачПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = КлючСтрокиЗадач Тогда
		Возврат;
	КонецЕсли;
	КлючСтрокиЗадач = Элемент.ТекущаяСтрока;
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиЗадач", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДействияЗадачПриАктивизацииЯчейки(Элемент)
	
	ИнтеграцияС1СДокументооборот3Клиент.СписокПриАктивизацииЯчейки(
		Элементы.СписокДействияЗадач,
		Элементы.СписокДействияЗадачКонтекстноеМенюУпорядочить,
		КлючЯчейкиСтрокиЗадач,
		ПолеДляСортировки,
		НаправлениеСортировкиПоля,
		ВозможныеПоляДляСортировки());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	ТекущаяСтраница = ТекущаяСтраница - 1;
	ОбновитьФорму(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	ОбновитьФорму(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрКоманда(Команда)
	
	ОбновитьПредпросмотр(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыбор(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницаВыборЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборот3Клиент.ВыбратьСтраницуДинамическогоСписка(
		ЭтотОбъект,
		Команда,
		ТекущаяСтраница,
		ВсегоСтраниц,
		ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыборЗавершение(НоваяСтраница, ДополнительныеПараметры) Экспорт
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница = НоваяСтраница;
	ОбновитьФорму(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтообновления(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автообновление", Автообновление);
	ПараметрыФормы.Вставить("ПериодАвтообновления", ПериодАвтообновления);
	ПараметрыФормы.Вставить("ВМинутах", Истина);
	
	Оповещение = Новый ОписаниеОповещения("НастройкаАвтообновленияЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.НастройкаАвтообновления",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАвтообновленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Автообновление = Результат.Автообновление;
	ПериодАвтообновления = Результат.ПериодАвтообновления;
	
	ОтключитьОбработчикОжидания("Автообновление");
	
	МассивСтруктур = Новый Массив;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", КлючФормы);
	Элемент.Вставить("Настройка", "Автообновление");
	Элемент.Вставить("Значение", Автообновление);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", КлючФормы);
	Элемент.Вставить("Настройка", "ПериодАвтообновления");
	Элемент.Вставить("Значение", ПериодАвтообновления);
	МассивСтруктур.Добавить(Элемент);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	Если Автообновление Тогда
		ПодключитьОбработчикОжидания("Автообновление", ПериодАвтообновления * 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗадач(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтображениеКарточкиЗадачи", ОтображениеКарточкиЗадачи);
	ПараметрыФормы.Вставить("РазмерСтраницыДинамическогоСписка", РазмерСтраницыДинамическогоСписка);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиЗадачЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.НастройкиЗадач",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗадачЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НужноОбновитьФорму = Ложь;
	
	Если ОтображениеКарточкиЗадачи <> Результат.ОтображениеКарточкиЗадачи Тогда
		НужноОбновитьФорму =
			(ОтображениеКарточкиЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать"));
		ОтображениеКарточкиЗадачи = Результат.ОтображениеКарточкиЗадачи;
	КонецЕсли;
	
	Если РазмерСтраницыДинамическогоСписка <> Результат.РазмерСтраницыДинамическогоСписка Тогда
		НужноОбновитьФорму = Истина;
		РазмерСтраницыДинамическогоСписка = Результат.РазмерСтраницыДинамическогоСписка;
	КонецЕсли;
	
	Если НужноОбновитьФорму Тогда
		ОбновитьФорму();
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", КлючФормы);
	Элемент.Вставить("Настройка", "ОтображениеКарточкиЗадачи");
	Элемент.Вставить("Значение", ОтображениеКарточкиЗадачи);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", КлючФормы);
	Элемент.Вставить("Настройка", "РазмерСтраницыДинамическогоСписка");
	Элемент.Вставить("Значение", РазмерСтраницыДинамическогоСписка);
	МассивСтруктур.Добавить(Элемент);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	ОбновитьОтображениеКарточкиЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура Упорядочить(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.КомандаУпорядочить(
		ЭтотОбъект,
		Элементы.СписокДействияЗадач,
		Элементы.СписокДействияЗадачКонтекстноеМенюУпорядочить,
		ПолеДляСортировки,
		НаправлениеСортировкиПоля,
		ВозможныеПоляДляСортировки(),
		КлючФормы);
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиВариант1(Команда)
	
	ВыполнитьДействиеЗадачиНаКлиентеВФорме("РезультатВарианта1");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиВариант2(Команда)
	
	ВыполнитьДействиеЗадачиНаКлиентеВФорме("РезультатВарианта2");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиВариант3(Команда)
	
	ВыполнитьДействиеЗадачиНаКлиентеВФорме("РезультатВарианта3");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложение(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьПриложение(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьКарточку(Элементы.ДеревоПриложений.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВставитьКартинкуИзБуфера(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыВставитьКартинкуИзБуфера(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавить(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыДобавить(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРедактировать(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыРедактировать(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыЗакончитьРедактирование(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОсвободить(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыОсвободить(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОбновитьИзФайлаНаДиске(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыОбновитьИзФайлаНаДиске(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыУдалить(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыУдалить(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСохранитьКак(Команда)
	
	ИнтеграцияС1СДокументооборот3Клиент.ПриложенияЗадачиФайлыСохранитьКак(
		Элементы.ДеревоПриложений.ТекущиеДанные,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьСвязанныйОбъект(Команда)
	
	ТекущиеДанные = Элементы.СписокДействияЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.Подключаемый_СоздатьСвязанныйОбъект(
		Команда,
		ТекущиеДанные.ОсновнойПредметID,
		ТекущиеДанные.ОсновнойПредметТип);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Автообновление()
	
	ОбновитьФорму(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВозможныеПоляДляСортировки()
	
	ВозможныеПоляДляСортировки = Новый Соответствие;
	ВозможныеПоляДляСортировки.Вставить("СписокДействияЗадачЗаголовок", "title");
	ВозможныеПоляДляСортировки.Вставить("СписокДействияЗадачДата", "date");
	ВозможныеПоляДляСортировки.Вставить("СписокДействияЗадачСрок", "term");
	ВозможныеПоляДляСортировки.Вставить("СписокДействияЗадачИндексКартинкиПриоритета", "priority");
	ВозможныеПоляДляСортировки.Вставить("СписокДействияЗадачЕстьПодзадачи", "existSubtasks");
	ВозможныеПоляДляСортировки.Вставить("СписокДействияЗадачИндексКартинкиФлага", "flag");
	ВозможныеПоляДляСортировки.Вставить("СписокДействияЗадачАвторСтрокой", "authorPresentation");
	ВозможныеПоляДляСортировки.Вставить("СписокДействияЗадачИсполнительСтрокой", "performerPresentation");
	
	Возврат ВозможныеПоляДляСортировки;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьПоложениеВСписке()
	
	Для Каждого Строка Из СписокДействияЗадач Цикл
		
		Если Строка.ДействиеЗадачиID = ТекущаяСтрока Тогда
			Элементы.СписокДействияЗадач.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СледующаяСтрока = "" Тогда
		Возврат;
		
	ИначеЕсли СледующаяСтрока = "КонецСписка" Тогда
		ИндексПоследнейСтроки = СписокДействияЗадач.Количество() - 1;
		Элементы.СписокДействияЗадач.ТекущаяСтрока = СписокДействияЗадач[ИндексПоследнейСтроки].ПолучитьИдентификатор();
		Возврат;
		
	Иначе
		Для Каждого Строка Из СписокДействияЗадач Цикл
			
			Если Строка.ДействиеЗадачиID = СледующаяСтрока Тогда
				Элементы.СписокДействияЗадач.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатВариантаНомер)
	
	ТекущиеДанные = Элементы.СписокДействияЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеЗадачи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
		ТекущиеДанные.ДействиеЗадачиID,
		ТекущиеДанные.ДействиеЗадачиТип,
		ТекущиеДанные.Заголовок);
	РезультатДействия = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
		ЭтотОбъект[РезультатВариантаНомер + "ID"],
		ЭтотОбъект[РезультатВариантаНомер + "Тип"],
		ЭтотОбъект[РезультатВариантаНомер]);
	
	ПараметрыОповещения = Новый Структура("ID, Тип", ТекущиеДанные.ДействиеЗадачиID, ТекущиеДанные.ДействиеЗадачиТип);
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ВыполнитьДействиеЗадачиНаКлиентеВФормеЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		НачатьВыполнениеДействияЗадачиНаСервере(ДействиеЗадачи, РезультатДействия),
		ОповещениеОЗавершении,
		Истина,
		НСтр("ru = 'Выполнение задачи.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиНаКлиентеВФормеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Результат = ВыполнениеДействияЗадачиНаСервереЗавершение(
			Результат.РезультатДлительнойОперации,
			ПараметрыОповещения);
		Если Результат.Успешно Тогда
			ВосстановитьПоложениеВСписке();
			ОтобразитьДанныеПоТекущейЗадаче();
			Оповестить("ВыполненаЗадача1СДокументооборот", ПараметрыОповещения, ЭтотОбъект);
		Иначе
			ПоказатьПредупреждение(, Результат.ТекстПредупреждения);
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючСтрокиЗадачи(СтрокаЗадач)
	
	Если СтрокаЗадач = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрШаблон("%1_%2",
		СтрокаЗадач.ДействиеЗадачиID,
		СтрокаЗадач.ДействиеЗадачиТип);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПредпросмотр(ОбновитьДанные = Ложь)
	
	Если ОтображениеКарточкиЗадачи = ПредопределенноеЗначение(
			"Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаЗагрузкаПревью;
	
	РедактируетсяТекущимПользователем = Ложь;
	ПредпросмотрУрезан = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ОжиданиеПредпросмотра Тогда
			Возврат;
		КонецЕсли;
		
		Если (ТекущиеДанные.ПриложениеТип = "DMFile" Или ТекущиеДанные.ПриложениеТип = "DMDocument")
				И (Не ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеHTML) Или ОбновитьДанные) Тогда
			
			ТекущиеДанные.ОжиданиеПредпросмотра = Истина;
			ДлительнаяОперация = ИнтеграцияС1СДокументооборот3ВызовСервера.ПолучитьHTMLПредпросмотрОбъектаАсинхронно(
				УникальныйИдентификатор,
				ТекущиеДанные.ПриложениеID,
				ТекущиеДанные.ПриложениеТип);
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
					"ОбновитьПредпросмотрЗавершение",
					ЭтотОбъект,
					Новый Структура("ТекущиеДанные", ТекущиеДанные));
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
				ЭтотОбъект,
				ДлительнаяОперация,
				ОповещениеОЗавершении,
				Ложь,,
				Ложь);
			
			Возврат;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеHTML) Тогда
			ПредставлениеHTML = ТекущиеДанные.ПредставлениеHTML;
		Иначе
			ПредставлениеHTML = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СообщениеВПредпросмотр(
				НСтр("ru='Данные предпросмотра отсутствуют.'"),
				ЗаголовокСообщенияВОбластиПредпросмотра);
		КонецЕсли;
		
		РедактируетсяТекущимПользователем = ТекущиеДанные.РедактируетсяТекущимПользователем;
		ПредпросмотрУрезан = ТекущиеДанные.ПредпросмотрУрезан;
		
		Если ТекущиеДанные.ПриложениеТип = "DMFile" Тогда
			
			ОписаниеHTMLФайла = ПредставлениеHTML;
			ОбновитьЭлементыПредпросмотра(РедактируетсяТекущимПользователем, ПредпросмотрУрезан);
			Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорФайла;
			
		ИначеЕсли ТекущиеДанные.ПриложениеТип = "DMDocument" Тогда
			
			ОписаниеHTMLДокумента = ПредставлениеHTML;
			Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорДокумента;
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = "instruction" Тогда
			
			Инструкция = ПредставлениеHTML;
			Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаИнструкция;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаЗагрузкаПревью Тогда
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОсновное;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		HTMLПредпросмотрОбъекта = Результат.РезультатДлительнойОперации;
		HTMLПредпросмотрОбъекта.Вставить("ID", ПараметрыОповещения.ТекущиеДанные.ПриложениеID);
		HTMLПредпросмотрОбъекта.Вставить("Тип", ПараметрыОповещения.ТекущиеДанные.ПриложениеТип);
		Оповестить("ПолученHTMLПредпросмотрОбъекта", HTMLПредпросмотрОбъекта, ЭтотОбъект);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотрПриАктивизацииСтроки()
	
	ТекущаяСтрокаЗадач = Элементы.СписокДействияЗадач.ТекущиеДанные;
	Если ТекущаяСтрокаЗадач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредпросмотр();
	
	// Сохраним состояние дерева приложений.
	СостояниеДереваПриложений[КлючСтрокиЗадачи(ТекущаяСтрокаЗадач)] =
		ИнтеграцияС1СДокументооборот3Клиент.СостояниеДереваПриложений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(ВыводитьОкноОжидания = Истина, СкрыватьИнтерфейс = Ложь, СтрокиНовыхФайлов = Неопределено)
	
	Если Не ВыводитьОкноОжидания И Не СкрыватьИнтерфейс Тогда
		Элементы.СтраницыЕстьНетДанных.Доступность = Ложь;
		Элементы.ГруппаСтраницыКоманд.Доступность = Ложь;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьОбновлениеНаСервере();
	ПараметрыОповещения = Новый Структура("ВыводитьОкноОжидания, СкрыватьИнтерфейс, СтрокиНовыхФайлов",
		ВыводитьОкноОжидания,
		СкрыватьИнтерфейс,
		СтрокиНовыхФайлов);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьФормуЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ВыводитьОкноОжидания,
		НСтр("ru = 'Получение списка задач.'"),
		СкрыватьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ПараметрыОповещения.ВыводитьОкноОжидания И Не ПараметрыОповещения.СкрыватьИнтерфейс Тогда
		Элементы.СтраницыЕстьНетДанных.Доступность = Истина;
		Элементы.ГруппаСтраницыКоманд.Доступность = Истина;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Элементы.СписокДействияЗадачЗаголовок.Заголовок = НСтр("ru = 'Задачи'");
		ИнтеграцияС1СДокументооборот3Клиент.ОбновитьСортировкуВЗаголовкеЯчейки(
			ЭтотОбъект,
			Элементы.СписокДействияЗадач,
			Элементы.СписокДействияЗадачКонтекстноеМенюУпорядочить,
			ПолеДляСортировки,
			НаправлениеСортировкиПоля,
			ВозможныеПоляДляСортировки());
		ОбновлениеНаСервереЗавершение(Результат.РезультатДлительнойОперации, ПараметрыОповещения);
		ВосстановитьПоложениеВСписке();
		ОтобразитьДанныеПоТекущейЗадаче(ПараметрыОповещения.СтрокиНовыхФайлов);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбработатьИсключение(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыПредпросмотра(РедактируетсяТекущимПользователем = Ложь, ПредпросмотрУрезан = Ложь)
	
	Если ОтображениеКарточкиЗадачи = ПредопределенноеЗначение(
			"Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать") Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируетсяТекущимПользователем Тогда
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПредпросмотрУрезан;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеПоТекущейЗадаче(СтрокиНовыхФайлов = Неопределено)
	
	СтрокаЗадачи = Элементы.СписокДействияЗадач.ТекущиеДанные;
	Если СтрокаЗадачи = Неопределено Тогда
		Если СписокДействияЗадач.Количество() = 0 Тогда
			Если Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница <> Элементы.СтраницаНетЗадач Тогда
				Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница = Элементы.СтраницаНетЗадач;
			КонецЕсли;
			Возврат;
		Иначе
			СтрокаЗадачи = СписокДействияЗадач[0];
		КонецЕсли;
	КонецЕсли;
	
	КлючТекущейСтрокиЗадач = КлючСтрокиЗадачи(СтрокаЗадачи);
	
	Если Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница <> Элементы.СтраницаОднаЗадача Тогда
		Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница = Элементы.СтраницаОднаЗадача;
	КонецЕсли;
	
	ТекущаяСтрока = СтрокаЗадачи.ДействиеЗадачиID;
	
	ВсегоСтрок = СписокДействияЗадач.Количество();
	Если ВсегоСтрок = 1 Тогда
		Если ВсегоСтраниц = 1 Тогда
			// Если есть всего 1 задача на единственной странице - следующей вообще нет.
			СледующаяСтрока = "";
		Иначе
			// Если задача одна на странице, но есть другие страницы - следующей будет последняя задача
			// на другой странице.
			СледующаяСтрока = "КонецСписка";
		КонецЕсли;
		
	Иначе
		
		НомерТекСтроки = СписокДействияЗадач.Индекс(СтрокаЗадачи) + 1;
		Если НомерТекСтроки <> ВсегоСтрок Тогда
			// Если задача не последняя в списке - берем следующую задачу по списку на странице.
			СледующаяСтрока = СписокДействияЗадач[НомерТекСтроки].ДействиеЗадачиID;
			
		Иначе
			
			Если ТекущаяСтраница = ВсегоСтраниц Тогда
				// Если задача последняя в списке и это последняя страница - следующей будет предыдущая задача.
				СледующаяСтрока = СписокДействияЗадач[НомерТекСтроки - 2].ДействиеЗадачиID;
				
			Иначе
				// Если задача последняя в списке и за ней есть другие страницы - следующей будет первая задача
				// со следующей страницы.
				СледующаяСтрока = "КонецСписка";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтображениеКарточкиЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать") Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныйКомментарий = СохраненныеКомментарии[СтрокаЗадачи.ДействиеЗадачиID];
	ОписаниеHTMLЗадачи = СтрокаЗадачи.ПредставлениеHTML;
	
	Если Не ПустаяСтрока(КлючПредыдущейСтрокиЗадач) Тогда
		// Сохраним состояние дерева предыдущей задачи.
		СостояниеДереваПриложений[КлючПредыдущейСтрокиЗадач] =
			ИнтеграцияС1СДокументооборот3Клиент.СостояниеДереваПриложений(ЭтотОбъект);
		Если СтрокиНовыхФайлов <> Неопределено Тогда
			Для Каждого СтрокаНовогоФайла Из СтрокиНовыхФайлов Цикл
				Если СостояниеДереваПриложений[СтрокаНовогоФайла.КлючНайденнойСтроки] <> Неопределено Тогда
					СостояниеДереваПриложений[СтрокаНовогоФайла.КлючНайденнойСтроки].КлючТекущейСтрокиДереваПриложений =
						ИнтеграцияС1СДокументооборот3Клиент.КлючСтрокиДереваПриложений(СтрокаНовогоФайла);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьДополнительныеДанные(СтрокаЗадачи.АдресДополнительныхДанных, СохраненныйКомментарий);
	
	ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДеревоПриложений(
		ЭтотОбъект,
		СостояниеДереваПриложений[КлючТекущейСтрокиЗадач]);
	
	КлючПредыдущейСтрокиЗадач = КлючТекущейСтрокиЗадач;
	
	ОтобразитьКомандыСозданияНаОсновании(СтрокаЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКомандыСозданияНаОсновании(СтрокаЗадачи)
	
	Если СтрокаЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтраница = Элементы["ГруппаСтраницаКоманд" + СтрокаЗадачи.КлючСтраницыКомандСозданияНаОсновании];
	Если Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница = НоваяСтраница;
		Элементы.ГруппаСтраницыКоманд.Видимость =
			(НоваяСтраница.ПодчиненныеЭлементы[0].ПодчиненныеЭлементы[0].ПодчиненныеЭлементы.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтрокиЗадач()
	
	ОтобразитьДанныеПоТекущейЗадаче();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКомментарий(Текст, ID)
	
	Если Не ПустаяСтрока(Текст) Или СохраненныеКомментарии[ID] <> Неопределено Тогда
		СохраненныеКомментарии[ID] = Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПоID(ДействиеЗадачиID, ДействиеЗадачиТип)
	
	Для Каждого Строка Из СписокДействияЗадач Цикл
		
		Если Строка.ДействиеЗадачиID = ДействиеЗадачиID И Строка.ДействиеЗадачиТип = ДействиеЗадачиТип Тогда
			Возврат Строка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция ВыполнениеДействияЗадачиНаСервереЗавершение(ОтветНаЗапросыПакетаСтрока, ПараметрыОповещения)
	
	Результат = Новый Структура("Успешно, ТекстПредупреждения", Истина, "");
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
		Прокси,
		ОтветНаЗапросыПакетаСтрока);
	
	РезультатВыполнения = ОтветНаЗапросыПакета.responses[0];
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, РезультатВыполнения, "DMError") Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстПредупреждения = СокрЛП(РезультатВыполнения.description);
		Возврат Результат;
	КонецЕсли;
	
	ОтветСписокЗадач = ОтветНаЗапросыПакета.responses[1];
	ОбработатьОтветВебСервисаНаПолучениеСпискаЗадач(ОтветСписокЗадач);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗапросНаПолучениеСпискаЗадач(Прокси)
	
	Фильтры = Новый СписокЗначений;
	Если Не ПустаяСтрока(Поиск) Тогда
		Фильтры.Добавить("%" + Поиск + "%", "title");
	КонецЕсли;
	
	Возврат ИнтеграцияС1СДокументооборот3.ЗапросНаПолучениеСпискаЗадач(
		Прокси,
		ТекущаяСтраница,
		РазмерСтраницыДинамическогоСписка,
		ВозможныеПоляДляСортировки()[ПолеДляСортировки],
		НаправлениеСортировкиПоля,
		Фильтры,
		ОтображениеКарточкиЗадачи);
	
КонецФункции

&НаСервере
Функция НачатьВыполнениеДействияЗадачиНаСервере(ДействиеЗадачи, РезультатДействия)
	
	Попытка
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		ЗапросыПакета = Новый Массив;
		
		ЗапросыПакета.Добавить(
			ИнтеграцияС1СДокументооборот3.ВыполнитьДействиеЗадачиЗапрос(
				Прокси,
				ДействиеЗадачи,
				РезультатДействия,
				РезультатДействияТекстом,
				ВерсияДанныхДействияЗадачи));
		
		ЗапросыПакета.Добавить(ЗапросНаПолучениеСпискаЗадач(Прокси));
		
		Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВыполнитьПакетныйЗапросАсинхронно(
			Прокси,
			ЗапросыПакета,
			УникальныйИдентификатор,
			НСтр("ru = 'Выполнение задачи'"));
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция НачатьОбновлениеНаСервере()
	
	Попытка
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		ЗапросыПакета = Новый Массив;
		
		ЗапросыПакета.Добавить(ЗапросНаПолучениеСпискаЗадач(Прокси));
		
		Если ПараметрыСеанса.ИнтеграцияС1СДокументооборотНастройки = "" Тогда
			ЗапросыПакета.Добавить(ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьНастройкиЗапрос(Прокси));
		КонецЕсли;
		
		Если ПараметрыСеанса.ИнтеграцияС1СДокументооборотТекущийПользователь = "" Тогда
			ЗапросыПакета.Добавить(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ТекущийПользовательДокументооборотаЗапрос(Прокси));
		КонецЕсли;
		
		Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВыполнитьПакетныйЗапросАсинхронно(
			Прокси,
			ЗапросыПакета,
			УникальныйИдентификатор,
			НСтр("ru = 'Получение списка задач'"),
			Истина);
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокЗадачНаСервере(ЗадачиXDTO, ТекущийПользовательИСотрудники)
	
	СписокДействияЗадач.Очистить();
	
	Для Каждого ЗадачаXDTO Из ЗадачиXDTO Цикл
		
		НоваяСтрока = СписокДействияЗадач.Добавить();
		НоваяСтрока.ДействиеЗадачиID = ЗадачаXDTO.objectID.id;
		НоваяСтрока.ДействиеЗадачиТип = ЗадачаXDTO.objectID.type;
		
		НоваяСтрока.Заголовок = ЗадачаXDTO.title;
		ОписаниеПоступившихОбновлений = ЗадачаXDTO.descriptionOfReceivedUpdates;
		Если ЗначениеЗаполнено(ОписаниеПоступившихОбновлений) Тогда
			Если ОтображениеКарточкиЗадачи = Перечисления.ВариантыОтображенияОбластиЧтения.Справа Тогда
				НоваяСтрока.Заголовок = НоваяСтрока.Заголовок + Символы.ПС + ОписаниеПоступившихОбновлений;
			Иначе
				НоваяСтрока.Заголовок = НоваяСтрока.Заголовок + ", " + ОписаниеПоступившихОбновлений;
			КонецЕсли;
		КонецЕсли;
		
		Если НРег(ЗадачаXDTO.priority) = "high" Тогда
			НоваяСтрока.ИндексКартинкиПриоритета = 2;
			
		ИначеЕсли НРег(ЗадачаXDTO.priority) = "normal" Тогда
			НоваяСтрока.ИндексКартинкиПриоритета = 1;
			
		ИначеЕсли НРег(ЗадачаXDTO.priority) = "low" Тогда
			НоваяСтрока.ИндексКартинкиПриоритета = 0;
			
		Иначе
			НоваяСтрока.ИндексКартинкиПриоритета = -1;
			
		КонецЕсли;
		
		НоваяСтрока.ИндексКартинкиКонтроля = ЗадачаXDTO.monitoringState;
		НоваяСтрока.ИндексКартинкиСостояния = ЗадачаXDTO.actionState;
		
		Если НРег(ЗадачаXDTO.flag) = "purple" Тогда
			НоваяСтрока.ИндексКартинкиФлага = 6;
			
		ИначеЕсли НРег(ЗадачаXDTO.flag) = "orange" Тогда
			НоваяСтрока.ИндексКартинкиФлага = 5;
			
		ИначеЕсли НРег(ЗадачаXDTO.flag) = "green" Тогда
			НоваяСтрока.ИндексКартинкиФлага = 4;
			
		ИначеЕсли НРег(ЗадачаXDTO.flag) = "yellow" Тогда
			НоваяСтрока.ИндексКартинкиФлага = 3;
			
		ИначеЕсли НРег(ЗадачаXDTO.flag) = "blue" Тогда
			НоваяСтрока.ИндексКартинкиФлага = 2;
			
		ИначеЕсли НРег(ЗадачаXDTO.flag) = "red" Тогда
			НоваяСтрока.ИндексКартинкиФлага = 1;
			
		Иначе
			НоваяСтрока.ИндексКартинкиФлага = 0;
			
		КонецЕсли;
		
		НоваяСтрока.АвторСтрокой = ЗадачаXDTO.authorPresentation;
		НоваяСтрока.ИсполнительСтрокой = ЗадачаXDTO.performerPresentation;
		
		Если ЗначениеЗаполнено(ЗадачаXDTO.laboriousnessFrom) И ЗначениеЗаполнено(ЗадачаXDTO.laboriousnessUpTo) Тогда
			НоваяСтрока.Трудоемкость = СтрШаблон(
				"%1-%2",
				ЗадачаXDTO.laboriousnessFrom,
				ЗадачаXDTO.laboriousnessUpTo);
				
		ИначеЕсли ЗначениеЗаполнено(ЗадачаXDTO.laboriousnessFrom) Тогда
			НоваяСтрока.Трудоемкость = Строка(ЗадачаXDTO.laboriousnessFrom);
			
		Иначе
			НоваяСтрока.Трудоемкость = "              ";
			
		КонецЕсли;
		
		НоваяСтрока.Дата = ЗадачаXDTO.date;
		НоваяСтрока.Срок = ЗадачаXDTO.term;
		НоваяСтрока.ЕстьПодзадачи = ЗадачаXDTO.existSubtasks;
		НоваяСтрока.Новое = ЗадачаXDTO.new;
		НоваяСтрока.Просрочено = ЗадачаXDTO.isOverdue;
		НоваяСтрока.ПредставлениеHTML = ЗадачаXDTO.htmlView;
		
		ДополнительныеДанныеПоЗадаче = ИнтеграцияС1СДокументооборот3.ДополнительныеДанныеПоЗадаче(
			ЗадачаXDTO,
			ТекущийПользовательИСотрудники);
		НоваяСтрока.АдресДополнительныхДанных = ПоместитьВоВременноеХранилище(
			ДополнительныеДанныеПоЗадаче,
			УникальныйИдентификатор);
		
		УжеЕстьСвязь = Ложь;
		Для Каждого СтрокаДереваПриложений Из ДополнительныеДанныеПоЗадаче.ДеревоПриложений.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаДереваПриложений.Ссылка) Тогда
				УжеЕстьСвязь = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если УжеЕстьСвязь Тогда
			Продолжить;
		КонецЕсли;
		
		// Для построения списка команд создания на основании получим массив подходящих задаче правил интеграции,
		// также заполним данные идентификатор и тип основного предмета задачи.
		ПодходящиеПравила = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграцииПоОсновномуПредметуЗадачи(
			ЗадачаXDTO,
			НоваяСтрока.ОсновнойПредметID,
			НоваяСтрока.ОсновнойПредметТип);
		НоваяСтрока.ПодходящиеПравила = ПоместитьВоВременноеХранилище(ПодходящиеПравила, УникальныйИдентификатор);
		
		Если ПодходящиеПравила.Количество() > 0 Тогда
			// Каждой уникальной комбинации правил - соответствует своя группа команд создания на основании.
			// Для оптимизации, если у разных задач совпадают подходящие правила - не будем создавать на форме
			// новую группу команд, а будем использовать созданную ранее группу.
			// Соответствие имени станицы определенной комбинации подходящих правил хранится во временном
			// хранилище по адресу СтраницыКомандСозданияНаОсновании.
			СоответствиеСтраниц = ПолучитьИзВременногоХранилища(СтраницыКомандСозданияНаОсновании);
			КлючСоответствияСтраниц = ЗначениеВСтрокуВнутр(ПодходящиеПравила);
			НоваяСтрока.КлючСтраницыКомандСозданияНаОсновании = СоответствиеСтраниц[КлючСоответствияСтраниц];
			Если Не ЗначениеЗаполнено(НоваяСтрока.КлючСтраницыКомандСозданияНаОсновании) Тогда
				НоваяСтрока.КлючСтраницыКомандСозданияНаОсновании =
					ИнтеграцияС1СДокументооборот3.НоваяСтраницаКомандСозданияНаОсновании(
						ЭтотОбъект,
						ПодходящиеПравила);
				СоответствиеСтраниц[КлючСоответствияСтраниц] = НоваяСтрока.КлючСтраницыКомандСозданияНаОсновании;
				ПоместитьВоВременноеХранилище(СоответствиеСтраниц, СтраницыКомандСозданияНаОсновании);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиДинамическогоСписка()
	
	ИнтеграцияС1СДокументооборот3КлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		ТекущаяСтраница,
		ВсегоСтраниц);
	Для НомерКнопки = 1 По 9 Цикл
		ЭлементСтраница = Элементы["Страница" + НомерКнопки];
		Если ЭлементСтраница.Заголовок = "..." Тогда
			Команды["Страница" + НомерКнопки].Подсказка = НСтр("ru = 'Выбрать страницу'");
		Иначе
			Команды["Страница" + НомерКнопки].Подсказка = СтрШаблон(
				НСтр("ru = 'Страница %1'"), ЭлементСтраница.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКарточкиЗадачи()
	
	Элементы.СписокДействияЗадачИсполнительСтрокой.Видимость = ОтображатьИсполнителя;
	Элементы.СписокДействияЗадачДата.Видимость = Не ОтображатьТрудоемкость;
	Элементы.СписокДействияЗадачТрудоемкость.Видимость = ОтображатьТрудоемкость;
	
	ОтображениеКарточкиЗадачи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючФормы,
		"ОтображениеКарточкиЗадачи",
		Перечисления.ВариантыОтображенияОбластиЧтения.Справа);
	
	Если ОтображениеКарточкиЗадачи = Перечисления.ВариантыОтображенияОбластиЧтения.Справа Тогда
		
		Элементы.ГруппаСписок.РастягиватьПоГоризонтали = Ложь;
		
		Элементы.ОбластьПросмотра.Видимость = Истина;
		
		Элементы.СписокДействияЗадачАвторСтрокой.РастягиватьПоГоризонтали = Истина;
		
		Элементы.СписокДействияЗадачГруппаЦентральнаяКолонка.Группировка =
			ГруппировкаКолонок.Вертикальная;
		
		Элементы.СписокДействияЗадачГруппаПриоритетСостояние.Группировка =
			ГруппировкаКолонок.Вертикальная;
		
		Элементы.СписокДействияЗадачЗаголовок.Высота = 2;
		
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиПриоритета,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиСостояния,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		
		Элементы.Переместить(
			Элементы.СписокДействияЗадачЕстьПодзадачи,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиКонтроля,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиФлага,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		
		Элементы.Переместить(
			Элементы.СписокДействияЗадачАвторСтрокой,
			Элементы.СписокДействияЗадачГруппаТретьяСтрока,
			Элементы.СписокДействияЗадачПустаяСтрока);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИсполнительСтрокой,
			Элементы.СписокДействияЗадачГруппаТретьяСтрока,
			Элементы.СписокДействияЗадачПустаяСтрока);
		
		Элементы.СписокДействияЗадачПустаяСтрока.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаСписок.РастягиватьПоГоризонтали = Истина;
		
		Элементы.ОбластьПросмотра.Видимость = Ложь;
		
		Элементы.СписокДействияЗадачАвторСтрокой.РастягиватьПоГоризонтали = Ложь;
		
		Элементы.СписокДействияЗадачГруппаЦентральнаяКолонка.Группировка =
			ГруппировкаКолонок.Горизонтальная;
		
		Элементы.СписокДействияЗадачГруппаПриоритетСостояние.Группировка =
			ГруппировкаКолонок.Горизонтальная;
		
		Элементы.СписокДействияЗадачЗаголовок.Высота = 1;
		
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиПриоритета,
			Элементы.СписокДействияЗадачГруппаПриоритетСостояние);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиСостояния,
			Элементы.СписокДействияЗадачГруппаПриоритетСостояние);
		
		Элементы.Переместить(
			Элементы.СписокДействияЗадачЕстьПодзадачи,
			Элементы.СписокДействияЗадач);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиКонтроля,
			Элементы.СписокДействияЗадач);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиФлага,
			Элементы.СписокДействияЗадач);
		
		Элементы.Переместить(
			Элементы.СписокДействияЗадачАвторСтрокой,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока,
			Элементы.СписокДействияЗадачТрудоемкость);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИсполнительСтрокой,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока,
			Элементы.СписокДействияЗадачТрудоемкость);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеНаСервереЗавершение(ОтветНаЗапросыПакетаСтрока, ПараметрыОповещения)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
		Прокси,
		ОтветНаЗапросыПакетаСтрока);
	
	Для НомерЗапроса = 1 По ОтветНаЗапросыПакета.responses.Количество() - 1 Цикл
		Ответ = ОтветНаЗапросыПакета.responses[НомерЗапроса];
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMGetSettingsResponse") Тогда
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотНастройки =
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбъектXDTOВСтроку(Прокси, Ответ);
			
		ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMGetCurrentUserResponse") Тогда
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотТекущийПользователь =
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбъектXDTOВСтроку(Прокси, Ответ);
			
		КонецЕсли;
	КонецЦикла;
	
	ОтветСписокЗадач = ОтветНаЗапросыПакета.responses[0];
	ОбработатьОтветВебСервисаНаПолучениеСпискаЗадач(ОтветСписокЗадач);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветВебСервисаНаПолучениеСпискаЗадач(ОтветСписокЗадач)
	
	ВсегоСтраниц = ОтветСписокЗадач.pageCount;
	
	Если ОтветСписокЗадач.descriptionOfTotals <> "" Тогда
		СтарыйЗаголовок = Элементы.СписокДействияЗадачЗаголовок.Заголовок;
		НачалоДополнения = СтрНайти(СтарыйЗаголовок, "(");
		Если НачалоДополнения > 0 Тогда
			СтарыйЗаголовок = СокрЛП(Лев(СтарыйЗаголовок, НачалоДополнения - 1));
		КонецЕсли;
		
		Элементы.СписокДействияЗадачЗаголовок.Заголовок = СтрШаблон("%1 (%2)",
			СтарыйЗаголовок,
			ОтветСписокЗадач.descriptionOfTotals)
	КонецЕсли;
	
	НастройкиДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
	
	Если НастройкиДокументооборота.ДоступныЗадачиМне Тогда
		Элементы.СтраницыЕстьНетДанных.ТекущаяСтраница = Элементы.СтраницаЕстьДанные;
	Иначе
		Элементы.СтраницыЕстьНетДанных.ТекущаяСтраница = Элементы.СтраницаНетДанных;
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщенияВОбластиПредпросмотра = НастройкиДокументооборота.ЗаголовокСообщенияВОбластиПредпросмотра;
	ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи =
		НастройкиДокументооборота.ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи;
	ФактическийИсполнительЗадач = НастройкиДокументооборота.ФактическийИсполнительЗадач;
	Если ФактическийИсполнительЗадач <> "taskPerformer" Тогда
		ТекущийПользовательИСотрудники =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			ЭтотОбъект,
			ТекущийПользовательИСотрудники[0],
			"ТекущийПользователь");
	КонецЕсли;
	
	ОбновитьСписокЗадачНаСервере(ОтветСписокЗадач.objects, ТекущийПользовательИСотрудники);
	ОбновитьКнопкиДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДополнительныеДанные(АдресДополнительныхДанных, СохраненныйКомментарий)
	
	ДополнительныеДанныеПоЗадаче = ПолучитьИзВременногоХранилища(АдресДополнительныхДанных);
	
	Если ДополнительныеДанныеПоЗадаче = Неопределено Тогда
		Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница = Элементы.СтраницаОшибка;
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3.ОбновитьОбластьДействия(
		ЭтотОбъект,
		ДополнительныеДанныеПоЗадаче.ОбластьДействия,
		СохраненныйКомментарий);
	
	ЗначениеВРеквизитФормы(ДополнительныеДанныеПоЗадаче.ДеревоПриложений, "ДеревоПриложений");
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПриложениеПоID(ПриложениеID, ПриложениеТип = Неопределено, РеквизитыКОбновлению = Неопределено,
		ТекущаяСтрока = Неопределено, РеквизитыКЧтению = Неопределено, НайденныеСтрокиЗадач = Неопределено)
	
	ОбновлениеВыполнено = Ложь;
	
	Для Каждого Строка Из СписокДействияЗадач Цикл
		
		ДополнительныеДанныеПоЗадаче = ПолучитьИзВременногоХранилища(Строка.АдресДополнительныхДанных);
		
		НайденнаяСтрока = ПриложениеВДеревеЗначений(
			ДополнительныеДанныеПоЗадаче.ДеревоПриложений.Строки,
			ПриложениеID,
			ПриложениеТип);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			Если РеквизитыКОбновлению <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, РеквизитыКОбновлению);
				ПоместитьВоВременноеХранилище(
					ДополнительныеДанныеПоЗадаче,
					Строка.АдресДополнительныхДанных);
			КонецЕсли;
			
			Если РеквизитыКЧтению <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(РеквизитыКЧтению, НайденнаяСтрока);
			КонецЕсли;
			
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущиеДанные = СписокДействияЗадач.НайтиПоИдентификатору(ТекущаяСтрока);
				Если ТекущиеДанные <> Неопределено
						И ТекущиеДанные.ДействиеЗадачиID = Строка.ДействиеЗадачиID
						И ТекущиеДанные.ДействиеЗадачиТип = Строка.ДействиеЗадачиТип Тогда
					ЗначениеВРеквизитФормы(ДополнительныеДанныеПоЗадаче.ДеревоПриложений, "ДеревоПриложений");
				КонецЕсли;
			КонецЕсли;
			
			Если НайденныеСтрокиЗадач <> Неопределено Тогда
				НайденныеСтрокиЗадач.Добавить(Строка.ПолучитьИдентификатор());
			КонецЕсли;
			
			ОбновлениеВыполнено = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбновлениеВыполнено;
	
КонецФункции

&НаСервере
Функция ПриложениеВДеревеЗначений(Строки, ПриложениеID, ПриложениеТип)
	
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.ПриложениеID = ПриложениеID И Строка.ПриложениеТип = ПриложениеТип Тогда
			Возврат Строка;
			
		ИначеЕсли Строка.ПриложениеID = ПриложениеID И ПриложениеТип = Неопределено Тогда
			Возврат Строка;
			
		КонецЕсли;
		
		НайденнаяСтрока = ПриложениеВДеревеЗначений(Строка.Строки, ПриложениеID, ПриложениеТип);
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область Подключение

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ПриПодключении();
	Иначе // не удалось подключиться к ДО
		ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключении()
	
	Если ОбработатьФормуСогласноВерсииСервиса() Тогда
		ОбновитьФорму(Ложь, Истина);
#Если Не ВебКлиент Тогда
		Если Автообновление Тогда
			ПодключитьОбработчикОжидания("Автообновление", ПериодАвтообновления * 60);
		КонецЕсли;
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОбработанаУспешно = Истина;
	
	Попытка
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.10.1") Тогда
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
		Иначе
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
			ФормаОбработанаУспешно = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ОбработатьИсключение(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ФормаОбработанаУспешно;
	
КонецФункции

&НаСервере
Процедура ОбработатьИсключение(ИнформацияОбОшибке)
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		ОбработатьФормуСогласноВерсииСервиса();
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			ПредставлениеОшибки = ИнформацияОбОшибке;
		Иначе
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти