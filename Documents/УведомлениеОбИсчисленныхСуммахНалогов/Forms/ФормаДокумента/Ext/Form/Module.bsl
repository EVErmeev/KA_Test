#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Уведомление = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьСсылку(УникальныйИдентификатор);
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(
		ЭтотОбъект, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Уведомление);
	
	Если НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.ув.об исчис.сум.нал.") Тогда
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	КонецЕсли;
	
	#Область СтандартныеПодсистемы

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодменюПечать;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	#КонецОбласти
	
	УстановитьУсловноеОформление();
	
	ОбновитьИнформационнуюПанельБРО();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     ГоловнаяОрганизация);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ПанельОтправкиВКонтролирующиеОрганы
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Уведомление);
	// Конец ПанельОтправкиВКонтролирующиеОрганы
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	ПараметрыОповещения.Вставить("Период",      Объект.Дата);
	
	Оповестить("Запись_УведомлениеОбИсчисленныхСуммахНалогов", ПараметрыОповещения, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма",          Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	СтруктураПараметров.Вставить("ЭтоОтчет",       Ложь);
	СтруктураПараметров.Вставить("НовСтатус",      Форма.Элементы.НаименованиеЭтапа.Заголовок);
	
	РегламентированнаяОтчетностьВызовСервера.СохранитьСтатусОтправки(СтруктураПараметров, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧастиНалоги

&НаКлиенте
Процедура НалогиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		Если Не ЗначениеЗаполнено(ПараметрыСтроки.НачалоПериода)
			Или Не ЗначениеЗаполнено(ПараметрыСтроки.КонецПериода) Тогда
			ПараметрыСтроки.НачалоПериода = НачалоМесяца(Объект.Дата);
			ПараметрыСтроки.КонецПериода  = КонецМесяца(Объект.Дата);
		КонецЕсли;
		Если НоваяСтрока И Не Копирование Тогда
			ПараметрыСтроки.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки);
		КонецЕсли;
		ЗаполнитьСрокУплаты(ПараметрыСтроки);
	КонецЕсли;
	
	ПараметрыСтроки.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ПараметрыСтроки.НачалоПериода, ПараметрыСтроки.КонецПериода);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	
	Если Поле.Имя = "НалогиПредставлениеПериода" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода, ВыборКварталов",
			НачалоМесяца(ПараметрыСтроки.НачалоПериода), КонецМесяца(ПараметрыСтроки.КонецПериода), Истина);
		Если Не ЗначениеЗаполнено(ПараметрыВыбораПериода.НачалоПериода) Или Не ЗначениеЗаполнено(ПараметрыВыбораПериода.КонецПериода) Тогда
			ПараметрыВыбораПериода.НачалоПериода = НачалоМесяца(Объект.Дата);
			ПараметрыВыбораПериода.КонецПериода  = КонецМесяца(Объект.Дата);
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСтандартногоПериодаЗавершение", ЭтотОбъект, ПараметрыСтроки);
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц",
			ПараметрыВыбораПериода,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиТипНалогаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	НалогПриИзмененииНаСервере(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиРегистрацияВНалоговомОрганеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ОписаниеСтрокиДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущиеДанные);
	РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогиПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ПроверитьНаСервере(Отказ, ЕстьКритичныеОшибки, ТаблицаОшибок);
	
	Если ЕстьКритичныеОшибки Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не заполнены обязательные поля.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И ТаблицаОшибок.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
			Новый Структура("ТаблицаОшибок", ТаблицаОшибок),
			ЭтотОбъект,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Налоги.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект),
			НСтр("ru = 'Таблица налогов будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Налоги.Очистить();
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ТаблицаНалоги = Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПолучитьДанныеДляУведомления(Объект.Организация, Объект.Дата);
	Объект.Налоги.Загрузить(ТаблицаНалоги);
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СформироватьВыгрузкуИПолучитьДанные() Экспорт
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	
	Выгрузка = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если Выгрузка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выгрузка = Выгрузка[0];
	СтруктураВыгрузки = Новый Структура("ТестВыгрузки,КодировкаВыгрузки", Выгрузка.ТестВыгрузки, Выгрузка.КодировкаВыгрузки);
	СтруктураВыгрузки.Вставить("Данные", УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетДвоичныхДанных(УведомлениеОбъект.ИмяОтчета, "TIFF_2023_1"));
	СтруктураВыгрузки.Вставить("ИмяФайла", "1110355_5.02000_02.tif");
	Возврат СтруктураВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	Возврат УведомлениеОбъект.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОбновитьИнформационнуюПанельБРО()
	
	ПараметрыОтображения = ДокументооборотСКО.ПараметрыИнформационнойПанелиБРО();
	ПараметрыОтображения.Организация = Объект.Организация;
	ПараметрыОтображения.Группа = Элементы.ИнформационнаяПанельБРО;
	ПараметрыОтображения.Форма = ЭтотОбъект;
	ДокументооборотСКО.ОбновитьИнформационнуюПанельБРО(
		ПараметрыОтображения, 
		Перечисления.ТарифыОператораЭДО.ПромоЕНС);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДокументооборотСКОКлиент.ИнформационнаяПанельБРОНажатие(
		ЭтотОбъект, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
	
КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьРеквизитыОрганизации();
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок", Объект.Уведомление);
	СтруктураРеквизитовФормы.Вставить("Организация",     ГоловнаяОрганизация);
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УправлениеФормой();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ПериодПримененияЕНП =
		Объект.Дата >= РеглУчетСервер.ДатаНачалаОбязательногоПримененияЕНП();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогиПредставлениеПериода",
		"Видимость",
		ПериодПримененияЕНП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НалогиСрокУплаты",
		"Видимость",
		Не ПериодПримененияЕНП);
		
КонецПроцедуры

&НаКлиенте
Функция ОписаниеСтрокиДокумента()
	
	ОписаниеСтроки = Новый Структура("НомерСтроки, ТипНалога, КодБК,
		|РегистрацияВНалоговомОргане, КодПоОКТМО, Сумма, СрокУплаты,
		|НачалоПериода, КонецПериода, ПредставлениеПериода");
	
	Возврат ОписаниеСтроки;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПолучитьРеквизитыОрганизации();
	ОбновитьИнформационнуюПанельБРО();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРеквизитыОрганизации()
	
	ГоловнаяОрганизация         = Справочники.Организации.ПустаяСсылка();
	РегистрацияВНалоговомОргане = "";
	ЭтоЮрЛицо                   = Истина;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ГоловнаяОрганизация         = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Объект.Организация);
		РегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОргане(Объект.Организация, Объект.Дата);
		ЭтоЮрЛицо                   = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(ПараметрыСтроки)
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.ТипНалога) Тогда
		ПараметрыСтроки.КодБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(ПараметрыСтроки.ТипНалога);
	КонецЕсли;
	
	ЗаполнитьСрокУплаты(ПараметрыСтроки);
	ПараметрыСтроки.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ПараметрыСтроки.НачалоПериода, ПараметрыСтроки.КонецПериода);
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияВНалоговомОрганеПриИзмененииНаСервере(ПараметрыСтроки)
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.РегистрацияВНалоговомОргане) Тогда
		ПараметрыСтроки.КодПоОКТМО =
			Справочники.РегистрацииВНалоговомОргане.КодТерритории(ПараметрыСтроки.РегистрацияВНалоговомОргане);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтандартногоПериодаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ДополнительныеПараметры;
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	Если ЭтоНДФЛ(ПараметрыСтроки.ТипНалога)
		И Месяц(РезультатВыбора.НачалоПериода) = 12 Тогда
		
		ПерваяПоловина = Дата(Год(РезультатВыбора.НачалоПериода), 12, 1);
		ВтораяПоловина = Дата(Год(РезультатВыбора.НачалоПериода), 12, 23);
		
		СписокУточненияПериода = Новый СписокЗначений;
		СписокУточненияПериода.Добавить(ПерваяПоловина,
			СтрШаблон(НСтр("ru = 'Начало декабря: до %1'"), Формат(ВтораяПоловина, "ДФ=dd.MM.yyyy")));
		СписокУточненияПериода.Добавить(ВтораяПоловина,
			СтрШаблон(НСтр("ru = 'Конец декабря: %1 - %2'"), Формат(ВтораяПоловина, "ДФ=dd.MM.yyyy"), Формат(КонецГода(ВтораяПоловина), "ДФ=dd.MM.yyyy")));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УточнениеПериодаЗавершение", ЭтотОбъект, ПараметрыСтроки);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокУточненияПериода, "НалогиПредставлениеПериода");
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСрокУплаты(ПараметрыСтроки);
	ПараметрыСтроки.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ПараметрыСтроки.НачалоПериода, ПараметрыСтроки.КонецПериода);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПериодаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	// Уточнение периода для декабря.
	// Если уведомление за период 23-31 декабря - так и напишем
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Налоги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтроки = ДополнительныеПараметры;
	ПараметрыСтроки.НачалоПериода = РезультатВыбора.Значение;
	
	ЗаполнитьСрокУплаты(ПараметрыСтроки);
	ПараметрыСтроки.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ПараметрыСтроки.НачалоПериода, ПараметрыСтроки.КонецПериода);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаОтчета(НачалоПериода, КонецПериода)
	
	ПредставлениеПериода = "";
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		
		Если НачалоМесяца(НачалоПериода) <> НачалоПериода Тогда
			ПредставлениеПериода = Формат(НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yyyy");
		Иначе
			Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
			Иначе
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
			КонецЕсли;
			
			ПредставлениеПериода =
				ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоПериода, КонецПериода);
				
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСрокУплаты(ПараметрыСтроки)
	
	ЭтоНДФЛ = ЭтоНДФЛ(ПараметрыСтроки.ТипНалога);
	
	ДеньПлатежа = 28; // все уплаты в один день
	Если ЭтоНДФЛ И Не ПараметрыСтроки.НачалоПериода = НачалоМесяца(ПараметрыСтроки.НачалоПериода) Тогда
		ДеньПлатежа = 31;
	КонецЕсли;
	
	МесяцПлатежа = НачалоМесяца(ПараметрыСтроки.НачалоПериода);
	Если Не ЭтоНДФЛ Тогда
		МесяцПлатежа = КонецМесяца(ПараметрыСтроки.НачалоПериода) + 1;
	КонецЕсли;
	
	ПараметрыСтроки.СрокУплаты = Дата(Год(МесяцПлатежа), Месяц(МесяцПлатежа), ДеньПлатежа);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы() Экспорт
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги()
	
	Объект.СуммаДокумента = Объект.Налоги.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НалогиПредставлениеПериода");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Налоги.ПредставлениеПериода", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Заполнить>'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицы()
	
	Для каждого СтрокаТаблицы Из Объект.Налоги Цикл
		СтрокаТаблицы.ПредставлениеПериода =
			ПредставлениеПериодаОтчета(СтрокаТаблицы.НачалоПериода, СтрокаТаблицы.КонецПериода);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНДФЛ(ТипНалога)
	Возврат ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛ")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛ_ИП")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДивиденды")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДивидендыСотрудникам")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДоходыКонтрагентов")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛСПревышения");
КонецФункции

#Область РаботаСУведомлениемКакСОтчетом

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(ДокументСсылка, УникальныйИдентификатор)
	
	Возврат Документы.УведомлениеОбИсчисленныхСуммахНалогов.ВыгрузитьУведомлениеОбИсчисленныхСуммахНалогов(
		ДокументСсылка,
		УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДанныеФайла <> Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, , , Ложь, Объект.Уведомление);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере(Отказ = Ложь, ЕстьКритичныеОшибки = Ложь, ТаблицаОшибок)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ПроверитьОбязательныеПоля(ЕстьКритичныеОшибки);
	Если ЕстьКритичныеОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	ТаблицаОшибок = УведомлениеОбъект.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
	Отказ = ТаблицаОшибок.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Не Объект.Проведен Или Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ.
			|Выполнить проведение документа и продолжить?'");
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияПродолжение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ               = Ложь;
	ЕстьКритичныеОшибки = Ложь;
	ТаблицаОшибок       = Новый СписокЗначений;
	
	ПроверитьНаСервере(Отказ, ЕстьКритичныеОшибки, ТаблицаОшибок);
	ДополнительныеПараметры.Вставить("ТаблицаОшибок", ТаблицаОшибок);
	
	Если ЕстьКритичныеОшибки Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не заполнены обязательные поля.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстВопроса = НСтр("ru = 'В уведомлении обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							
		Оповещение =
			Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
	Иначе
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ТаблицаОшибок") Тогда
			Если ДополнительныеПараметры.ТаблицаОшибок.Количество() > 0 Тогда
				ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам",
					Новый Структура("ТаблицаОшибок", ДополнительныеПараметры.ТаблицаОшибок),
					ЭтотОбъект,
					Истина);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
