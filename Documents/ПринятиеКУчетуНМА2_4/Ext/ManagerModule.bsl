
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("НематериальныеАктивы");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("ОбесценениеВНА");
	
	ПринятиеКУчетуНМАЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура:
//     * Ключ - Строка - Имя таблицы.
//     * Значение - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда

		ДопПараметры.ТолькоПомеченные = Регистры <> Неопределено;
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ, ДопПараметры);
		
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДокументыПоНМА(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаМестоУчетаНМА(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаНМА(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаНМАБУ(ТекстыЗапроса, Запрос, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаНМАУУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииНМАБУ(ТекстыЗапроса, Запрос, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса, Запрос, Регистры);
		
		ТекстЗапросаТаблицаСтоимостьНМА(ТекстыЗапроса, Запрос, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(ТекстыЗапроса, Запрос, Регистры);
		ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(ТекстыЗапроса, Запрос, Регистры);
		ТекстЗапросаТаблицаДвиженияСоставЕГДС(ТекстыЗапроса, Запрос, Регистры);
		
		ПринятиеКУчетуНМАЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

// Формирует таблицы движений при расчете стоимости.
//
// Параметры:
//  Регистратор			 	- ДокументСсылка.ПринятиеКУчетуНМА2_4 - Документ, для которого формируются движения
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит вспомогательные временные таблицы, которые могут
//                                                      использоваться для формирования движений.
//
// Возвращаемое значение:
//  Структура - Содержит таблицы движений.
//
Функция ТаблицыДвиженийРасчетаСтоимости(Регистратор, МенеджерВременныхТаблиц) Экспорт
	
	СписокРегистров = "ПрочиеРасходы,ПартииПрочихРасходов,ДвиженияДоходыРасходыПрочиеАктивыПассивы,
		|СтоимостьНМА,ПервоначальныеСведенияНМА,ОтражениеДокументовВРеглУчете";
	
	ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ДопПараметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, СписокРегистров, ДопПараметры);
	
	Возврат ТаблицыДляДвижений;
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ИзменениеПараметровНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.КорректировкаСтоимостиИАмортизацииНМА.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Команда = ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаСписка";
	КонецЕсли;
	
	ПринятиеКУчетуНМАЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Принятие к учету НМА".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная команда
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПринятиеКУчетуНМА2_4) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПринятиеКУчетуНМА2_4.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПринятиеКУчетуНМА2_4);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// 
// Параметры:
//  Объект - ДокументОбъект.ПринятиеКУчетуНМА2_4 - 
Процедура ЗаполнитьСтоимость(Объект) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.НематериальныйАктив) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Дата                                      КАК Период,
	|	&ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР) КАК ВидАналитикиКапитализацииРасходов,
	|	ЛОЖЬ                                       КАК ФактическаяСтоимость,
	|	&ГруппаФинансовогоУчета                    КАК ГруппаФинансовогоУчета,
	|	&ВариантПримененияЦелевогоФинансирования   КАК ВариантПримененияЦелевогоФинансирования,
	|	&ТекущийДокумент                           КАК Регистратор,
	|	&Организация                               КАК Организация,
	|	&НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	&НематериальныйАктив                       КАК АналитикаКапитализацииРасходов,
	|	&ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете,
	|	&ОтражатьВБУ                               КАК ОтражатьВБУ,
	|	&ОтражатьВНУ                               КАК ОтражатьВНУ,
	|	ИСТИНА                                     КАК КапитализируетЗатраты
	|ПОМЕСТИТЬ ДанныеКРасчету
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НаправлениеДеятельности,
	|	АналитикаКапитализацииРасходов";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивы.ТекстЗапросаРасходыПоДокументам(СписокЗапросов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходыПоДокументам.Период,
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов,
	|	РасходыПоДокументам.Сумма КАК Сумма,
	|	РасходыПоДокументам.СуммаУпр КАК СуммаУпр,
	|	РасходыПоДокументам.СуммаБезНДС КАК СуммаБезНДС,
	|	РасходыПоДокументам.СуммаРегл КАК СуммаРегл,
	|	РасходыПоДокументам.ПостояннаяРазница КАК ПостояннаяРазница,
	|	РасходыПоДокументам.ВременнаяРазница КАК ВременнаяРазница
	|ИЗ
	|	РасходыПоДокументам КАК РасходыПоДокументам";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	ДатаДокумента = ?(Объект.Дата <> '000101010000', Объект.Дата, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Объект.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("ВариантПримененияЦелевогоФинансирования", Объект.ВариантПримененияЦелевогоФинансирования);
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВБУ);
	Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВНУ);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМА);
	Запрос.УстановитьПараметр("НематериальныйАктив", Объект.НематериальныйАктив);
	ВнеоборотныеАктивы.УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос);
	
	Результат = Запрос.Выполнить();
	
	ПараметрыРасчетаСтоимости = ВнеоборотныеАктивы.ПараметрыРасчетаСтоимости();
	ПараметрыРасчетаСтоимости.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР;
	НовыйОбъектУчета = ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.Добавить();
	НовыйОбъектУчета.ОбъектУчета = Объект.НематериальныйАктив;
	НовыйОбъектУчета.СтоимостьУУ = Объект.ПервоначальнаяСтоимостьУУ;
	НовыйОбъектУчета.СтоимостьБУ = Объект.ПервоначальнаяСтоимостьБУ;
	НовыйОбъектУчета.ОтражатьВРеглУчете = Объект.ОтражатьВРеглУчете;
	НовыйОбъектУчета.ОтражатьВУпрУчете = Объект.ОтражатьВУпрУчете;
	НовыйОбъектУчета.ОтражатьВБУ = Объект.ОтражатьВБУ;
	НовыйОбъектУчета.ОтражатьВНУ = Объект.ОтражатьВНУ;
	
	РасходыПоДокументу = ВнеоборотныеАктивы.РассчитатьРасходыПоДокументу(Результат.Выгрузить(), ПараметрыРасчетаСтоимости);
	РасходыПоДокументу.Свернуть("ОбъектУчета", "СуммаРегл,СуммаУпр");
	
	Если Объект.ОтражатьВРеглУчете Тогда
		Если РасходыПоДокументу.Количество() <> 0 Тогда
			Объект.ПервоначальнаяСтоимостьБУ = РасходыПоДокументу[0].СуммаРегл;
		Иначе
			Объект.ПервоначальнаяСтоимостьБУ = 0;
		КонецЕсли; 
	КонецЕсли; 
	Если Объект.ОтражатьВУпрУчете Тогда
		Если РасходыПоДокументу.Количество() <> 0 Тогда
			Объект.ПервоначальнаяСтоимостьУУ = РасходыПоДокументу[0].СуммаУпр;
		Иначе
			Объект.ПервоначальнаяСтоимостьУУ = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПринятиеКУчетуНМА2_4";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	СинонимТаблицыДокумента = "";
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;		
		
	Иначе
		
		ТекстЗапроса = Неопределено;
		
	КонецЕсли;
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ДопПараметры <> Неопределено
		И ДопПараметры.Свойство("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц) Тогда
		
		МенеджерВременныхТаблиц = ?(МенеджерВременныхТаблиц = Неопределено,
									Новый МенеджерВременныхТаблиц,
									МенеджерВременныхТаблиц);
		
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                КАК Период,
	|	ДанныеДокумента.Ссылка                              КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления                     КАК ПометкаУдаления,
	|	ДанныеДокумента.Номер                               КАК Номер,
	|	ДанныеДокумента.Дата                                КАК Дата,
	|	ДанныеДокумента.Проведен                            КАК Проведен,
	|	ДанныеДокумента.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ВидОбъектаУчета                     КАК ВидОбъектаУчета,
	|	ДанныеДокумента.ГруппаФинансовогоУчета              КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Комментарий                         КАК Комментарий,
	|	ДанныеДокумента.КоэффициентБУ                       КАК КоэффициентБУ,
	|	ДанныеДокумента.КоэффициентУскоренияУУ              КАК КоэффициентУскоренияУУ,
	|	ДанныеДокумента.ЛиквидационнаяСтоимость             КАК ЛиквидационнаяСтоимость,
	|	ДанныеДокумента.ЛиквидационнаяСтоимостьРегл         КАК ЛиквидационнаяСтоимостьРегл,
	|	ДанныеДокумента.НаправлениеДеятельности             КАК НаправлениеДеятельности,
	|	ДанныеДокумента.НематериальныйАктив                 КАК НематериальныйАктив,
	|	ДанныеДокумента.ОбъемНаработки                      КАК ОбъемНаработки,
	|	ДанныеДокумента.Организация                         КАК Организация,
	|	ДанныеДокумента.Ответственный                       КАК Ответственный,
	|	ДанныеДокумента.ОтражатьВРеглУчете                  КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете                   КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.ОтражатьВБУ                         КАК ОтражатьВБУ,
	|	ДанныеДокумента.ПервоначальнаяСтоимостьБУ           КАК ПервоначальнаяСтоимостьБУ,
	|	ДанныеДокумента.ПервоначальнаяСтоимостьУУ           КАК ПервоначальнаяСтоимостьУУ,
	|	ДанныеДокумента.Подразделение                       КАК Подразделение,
	|	ДанныеДокумента.Подразделение                       КАК Местонахождение,
	|	ДанныеДокумента.ПорядокУчетаБУ                      КАК ПорядокУчетаБУ,
	|	ДанныеДокумента.ПорядокУчетаУУ                      КАК ПорядокУчетаУУ,
	|	ДанныеДокумента.МетодНачисленияАмортизацииБУ        КАК МетодНачисленияАмортизацииБУ,
	|	ДанныеДокумента.МетодНачисленияАмортизацииУУ        КАК МетодНачисленияАмортизацииУУ,
	|	ДанныеДокумента.СпособПоступления                   КАК СпособПоступления,
	|	ДанныеДокумента.СрокИспользованияБУ                 КАК СрокИспользованияБУ,
	|	ДанныеДокумента.СрокИспользованияУУ                 КАК СрокИспользованияУУ,
	|	ДанныеДокумента.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
	|	ДанныеДокумента.ОрганизацияПолучательРасходов       КАК ОрганизацияПолучательРасходов,
	|	ДанныеДокумента.ЕГДС                                КАК ЕГДС,
	|	ДанныеДокумента.СтатьяРасходовБУ                    КАК СтатьяРасходовБУ,
	|	ДанныеДокумента.АналитикаРасходовБУ                 КАК АналитикаРасходовБУ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				И ДанныеДокумента.ОтражатьВУпрУчете
	|				И ДанныеДокумента.ОтражатьВБУ
	|				И ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|
	|			ТОГДА ДанныеДокумента.СтатьяРасходовБУ
	|
	|		КОГДА ДанныеДокумента.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				И ДанныеДокумента.ОтражатьВУпрУчете
	|				И ДанныеДокумента.ОтражатьВНУ
	|				И (ДанныеДокумента.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|					ИЛИ ДанныеДокумента.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)
	|					ИЛИ ДанныеДокумента.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|					ИЛИ ДанныеДокумента.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислениеАмортизацииИлиСписаниеНаРасходы))
	|
	|			ТОГДА ДанныеДокумента.СтатьяРасходовНУ
	|
	|		ИНАЧЕ ДанныеДокумента.СтатьяРасходовУУ 
	|	КОНЕЦ КАК СтатьяРасходовУУ,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				И ДанныеДокумента.ОтражатьВУпрУчете
	|				И ДанныеДокумента.ОтражатьВРеглУчете
	|				И ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|
	|			ТОГДА ДанныеДокумента.АналитикаРасходовБУ
	|
	|		КОГДА ДанныеДокумента.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				И ДанныеДокумента.ОтражатьВУпрУчете
	|				И ДанныеДокумента.ОтражатьВРеглУчете
	|				И (ДанныеДокумента.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|					ИЛИ ДанныеДокумента.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)
	|					ИЛИ ДанныеДокумента.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|					ИЛИ ДанныеДокумента.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислениеАмортизацииИлиСписаниеНаРасходы))
	|
	|			ТОГДА ДанныеДокумента.АналитикаРасходовНУ
	|
	|		ИНАЧЕ ДанныеДокумента.АналитикаРасходовУУ 
	|	КОНЕЦ КАК АналитикаРасходовУУ,
	|
	|	ДанныеДокумента.ИдентификаторДокумента              КАК ИдентификаторДокумента,
	|	НастройкиХозяйственныхОпераций.Ссылка               КАК НастройкаХозяйственнойОперации,
	|
	|	&ПринятиеКУчетуНМА_РеквизитыДокумента
	|
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ПринятиеКУчетуНМАЛокализация.ДобавитьВТекстЗапросаРеквизитыДокумента(Запрос.Текст, "ДанныеДокумента");
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	ПринятиеКУчетуНМАЛокализация.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);

	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуНМА2_4"));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru='Принятие к учету НМА'"));
	ЗначенияПараметровПроведения.Вставить("СтатьяАП", ПланыВидовХарактеристик.СтатьиАктивовПассивов.НематериальныеАктивы);
	ЗначенияПараметровПроведения.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	ЗначенияПараметровПроведения.Вставить("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ЗначенияПараметровПроведения.Вставить(
		"ХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету", 
		Перечисления.ХозяйственныеОперации.СписаниеНаРасходыСтоимостиНМАНеПринимаяКУчету);
	
	ЗначенияПараметровПроведения.Вставить(
		"НастройкаХО_СписаниеНаРасходыСтоимостиНеПринимаяКУчету", 
		Справочники.НастройкиХозяйственныхОпераций.СписаниеНаРасходыСтоимостиНМАНеПринимаяКУчету);

	Если Реквизиты <> Неопределено Тогда
		
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		ЗначенияПараметровПроведения.Вставить("КонецМесяца", КонецМесяца(Реквизиты.Период));
		ЗначенияПараметровПроведения.Вставить("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
		
		ЗначенияПараметровПроведения.Вставить(
			"РеглУчетВНАВедетсяНезависимо", 
			НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо(Реквизиты.Организация, Реквизиты.Период));
		
	КонецЕсли;
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Подразделение                          КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                                    КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоНМА(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоНМА";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	0                                       КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Подразделение                          КАК Подразделение,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Проведен                               КАК Проведен,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	&НематериальныйАктив                    КАК НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаМестоУчетаНМА(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестоУчетаНМА";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                       КАК Регистратор,
	|	&Период                       КАК Период,
	|	&НематериальныйАктив          КАК НематериальныйАктив,
	|	&Организация                  КАК Организация,
	|	&Подразделение                КАК Подразделение,
	|	&ОтражатьВУпрУчете            КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете           КАК ОтражатьВРеглУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаНМА(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаНМА";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                                 КАК Регистратор,
	|	&Период                                 КАК Период,
	|	&НематериальныйАктив                    КАК НематериальныйАктив,
	|	&Организация                            КАК Организация,
	|	&ГруппаФинансовогоУчета                 КАК ГруппаФинансовогоУчета,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&ОбъемНаработки                         КАК ОбъемНаработки,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаНМАБУ(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "ПорядокУчетаНМАБУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуНМАЛокализация.ТекстЗапросаТаблицаПорядокУчетаНМАБУ(ТекстыЗапроса, Запрос);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Ссылка                                 КАК Регистратор,
		|	&Период                                 КАК Период,
		|	&НематериальныйАктив                    КАК НематериальныйАктив,
		|	&Организация                            КАК Организация,
		|
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету) КАК СостояниеБУ,
		|
		|	&ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию) КАК НачислятьАмортизациюБУ,
		|
		|	&СтатьяРасходовБУ КАК СтатьяРасходовБУ,
		|	&АналитикаРасходовБУ КАК АналитикаРасходовБУ
		|
		|ГДЕ
		|	&ОтражатьВРеглУчете
		|	И &РеглУчетВНАВедетсяНезависимо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Ссылка                                 КАК Регистратор,
		|	&Период                                 КАК Период,
		|	&НематериальныйАктив                    КАК НематериальныйАктив,
		|	&Организация                            КАК Организация,
		|
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету) КАК СостояниеБУ,
		|
		|	&ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию) КАК НачислятьАмортизациюБУ,
		|
		|	&СтатьяРасходовУУ КАК СтатьяРасходовБУ,
		|	&АналитикаРасходовУУ КАК АналитикаРасходовБУ
		|
		|ГДЕ
		|	НЕ &РеглУчетВНАВедетсяНезависимо";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаНМАУУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаНМАУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                                 КАК Регистратор,
	|	&Период                                 КАК Период,
	|	&НематериальныйАктив                    КАК НематериальныйАктив,
	|	&Организация                            КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету) КАК Состояние,
	|	&ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию) КАК НачислятьАмортизациюУУ,
	|	&СтатьяРасходовУУ                       КАК СтатьяРасходов,
	|	&АналитикаРасходовУУ                    КАК АналитикаРасходов,
	|	&ПередаватьРасходыВДругуюОрганизацию    КАК ПередаватьРасходыВДругуюОрганизацию,
	|	&ОрганизацияПолучательРасходов          КАК ОрганизацияПолучательРасходов
	|ГДЕ
	|	&ОтражатьВУпрУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПараметрыАмортизацииНМАБУ(ТекстыЗапроса, Запрос, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииНМАБУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуНМАЛокализация.ТекстЗапросаТаблицаПараметрыАмортизацииНМАБУ(ТекстыЗапроса, Запрос);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период                      КАК Период,
		|	&Период                      КАК ДатаПоследнегоИзменения,
		|	&НематериальныйАктив         КАК НематериальныйАктив,
		|	&Организация                 КАК Организация,
		|	&СрокИспользованияБУ         КАК СрокПолезногоИспользованияБУ,
		|	&СрокИспользованияБУ         КАК СрокИспользованияДляВычисленияАмортизации,
		|	&ОбъемНаработки              КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	&КоэффициентБУ               КАК КоэффициентБУ,
		|	&ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимость
		|
		|ГДЕ
		|	&ОтражатьВРеглУчете
		|	И &РеглУчетВНАВедетсяНезависимо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период                      КАК Период,
		|	&Период                      КАК ДатаПоследнегоИзменения,
		|	&НематериальныйАктив         КАК НематериальныйАктив,
		|	&Организация                 КАК Организация,
		|	&СрокИспользованияУУ         КАК СрокПолезногоИспользованияБУ,
		|	&СрокИспользованияУУ         КАК СрокИспользованияДляВычисленияАмортизации,
		|	&ОбъемНаработки              КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	&КоэффициентУскоренияУУ      КАК КоэффициентБУ,
		|	&ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимость
		|
		|ГДЕ
		|	НЕ &РеглУчетВНАВедетсяНезависимо";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииНМАУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                             КАК Регистратор,
	|	&Период                             КАК Период,
	|	&Период                             КАК ДатаПоследнегоИзменения,
	|	&НематериальныйАктив                КАК НематериальныйАктив,
	|	&Организация                        КАК Организация,
	|	&СрокИспользованияУУ                КАК СрокИспользования,
	|	&СрокИспользованияУУ                КАК СрокИспользованияДляВычисленияАмортизации,
	|	&ОбъемНаработки                     КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	&МетодНачисленияАмортизацииУУ       КАК МетодНачисленияАмортизации,
	|	&КоэффициентУскоренияУУ             КАК КоэффициентУскорения,
	|	&ЛиквидационнаяСтоимость            КАК ЛиквидационнаяСтоимость,
	|	&ЛиквидационнаяСтоимостьРегл        КАК ЛиквидационнаяСтоимостьРегл
	|ГДЕ
	|	&ОтражатьВУпрУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса, Запрос, Регистры)
	
	ИмяРегистра = "ПервоначальныеСведенияНМА";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = ПринятиеКУчетуНМАЛокализация.ТекстЗапросаТаблицаПервоначальныеСведенияНМА(ТекстыЗапроса, Запрос);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапросаВтРасчетСтоимостиСгруппированная(ТекстыЗапроса, Запрос);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Ссылка                          КАК Регистратор,
		|	&Период                          КАК Период,
		|	&НематериальныйАктив             КАК НематериальныйАктив,
		|	&Организация                     КАК Организация,
		|
		|	ВЫБОР
		|		КОГДА &ОтражатьВУпрУчете
		|			ТОГДА &Период
		|		ИНАЧЕ ПервоначальныеСведенияНМА.ДатаПринятияКУчетуУУ
		|	КОНЕЦ КАК ДатаПринятияКУчетуУУ,
		|
		|	ВЫБОР
		|		КОГДА &ОтражатьВБУ
		|			ТОГДА &Период
		|		ИНАЧЕ ПервоначальныеСведенияНМА.ДатаПринятияКУчетуБУ
		|	КОНЕЦ КАК ДатаПринятияКУчетуБУ,
		|
		|	ВЫБОР
		|		КОГДА &ОтражатьВУпрУчете
		|			ТОГДА &Ссылка
		|		ИНАЧЕ ПервоначальныеСведенияНМА.ДокументПринятияКУчетуУУ
		|	КОНЕЦ КАК ДокументПринятияКУчетуУУ,
		|
		|	ВЫБОР
		|		КОГДА &ОтражатьВБУ
		|			ТОГДА &Ссылка
		|		ИНАЧЕ ПервоначальныеСведенияНМА.ДокументПринятияКУчетуБУ
		|	КОНЕЦ КАК ДокументПринятияКУчетуБУ,
		|
		|	ВЫБОР
		|		КОГДА &ОтражатьВБУ
		|			ТОГДА &МетодНачисленияАмортизацииБУ
		|		ИНАЧЕ ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ
		|	КОНЕЦ КАК МетодНачисленияАмортизацииБУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВУпрУчете 
		|			ТОГДА ЕСТЬNULL(РасчетСтоимости.Стоимость, &ПервоначальнаяСтоимостьУУ)
		|		ИНАЧЕ ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьУУ
		|	КОНЕЦ КАК ПервоначальнаяСтоимостьУУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВБУ
		|			ТОГДА ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, &ПервоначальнаяСтоимостьБУ)
		|		ИНАЧЕ ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ
		|	КОНЕЦ КАК ПервоначальнаяСтоимостьБУ
		|
		|ИЗ
		|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО (РасчетСтоимости.ОбъектУчета = &НематериальныйАктив)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
		|				&Период,
		|				НематериальныйАктив = &НематериальныйАктив
		|					И Организация = &Организация
		|					И Регистратор <> &Ссылка) КАК ПервоначальныеСведенияНМА
		|		ПО ИСТИНА
		|
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И &РеглУчетВНАВедетсяНезависимо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Ссылка                          КАК Регистратор,
		|	&Период                          КАК Период,
		|	&НематериальныйАктив             КАК НематериальныйАктив,
		|	&Организация                     КАК Организация,
		|
		|	&Период КАК ДатаПринятияКУчетуУУ,
		|	&Период КАК ДатаПринятияКУчетуБУ,
		|
		|	&Ссылка КАК ДокументПринятияКУчетуУУ,
		|	&Ссылка КАК ДокументПринятияКУчетуБУ,
		|
		|	&МетодНачисленияАмортизацииУУ КАК МетодНачисленияАмортизацииБУ,
		|
		|	ЕСТЬNULL(РасчетСтоимости.Стоимость, &ПервоначальнаяСтоимостьУУ) КАК ПервоначальнаяСтоимостьУУ,
		|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, &ПервоначальнаяСтоимостьБУ) КАК ПервоначальнаяСтоимостьБУ
		|
		|ИЗ
		|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
		|		ПО (РасчетСтоимости.ОбъектУчета = &НематериальныйАктив)
		|
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И НЕ &РеглУчетВНАВедетсяНезависимо
		|";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаСтоимостьНМА(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "СтоимостьНМА";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса = ПринятиеКУчетуНМАЛокализация.ТекстЗапросаТаблицаСтоимостьНМА(ТекстыЗапроса, Запрос);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&НематериальныйАктив                         КАК НематериальныйАктив,
		|	&Организация                                 КАК Организация,
		|	&Подразделение                               КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
		|	
		|	ВЫБОР
		|		КОГДА НЕ &ОтражатьВУпрУчете
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(РасчетСтоимости.Стоимость, &ПервоначальнаяСтоимостьУУ)
		|	КОНЕЦ КАК Стоимость,
		|
		|	ВЫБОР
		|		КОГДА НЕ &ОтражатьВРеглУчете
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, &ПервоначальнаяСтоимостьБУ)
		|	КОНЕЦ КАК СтоимостьРегл,
		|	
		|	0 КАК ПредварительнаяСтоимость,
		|	0 КАК ПредварительнаяСтоимостьРегл,
		|
		|	0 КАК КорПостояннаяРазница,
		|	0 КАК КорВременнаяРазница,
		|	
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	
		|	ЕСТЬNULL(РасчетСтоимости.КорПодразделение, НЕОПРЕДЕЛЕНО)                КАК КорПодразделение,
		|	ЕСТЬNULL(РасчетСтоимости.КорНаправлениеДеятельности, НЕОПРЕДЕЛЕНО)      КАК КорНаправлениеДеятельности,
		|	ЕСТЬNULL(РасчетСтоимости.КорСтатьяРасходов, НЕОПРЕДЕЛЕНО)               КАК КорСтатьяРасходов,
		|	ЕСТЬNULL(РасчетСтоимости.КорАналитикаРасходов, НЕОПРЕДЕЛЕНО)            КАК КорАналитикаРасходов,
		|	
		|	НЕ РасчетСтоимости.ОбъектУчета ЕСТЬ NULL КАК РасчетСтоимости,
		|	
		|	ЕСТЬNULL(РасчетСтоимости.ИдентификаторСтроки, &ИдентификаторНеиспользуемойФинЗаписи) КАК ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
		|
		|ИЗ
		|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
		|		ПО ИСТИНА
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Нужно отдельно записать предварительную стоимость для расчета амортизации
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&НематериальныйАктив                         КАК НематериальныйАктив,
		|	&Организация                                 КАК Организация,
		|	&Подразделение                               КАК Подразделение,
		|	&ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	&НаправлениеДеятельности                     КАК НаправлениеДеятельности,
		|	
		|	0                                            КАК Стоимость,
		|	0                                            КАК СтоимостьРегл,
		|	
		|	&ПервоначальнаяСтоимостьУУ                   КАК ПредварительнаяСтоимость,
		|	&ПервоначальнаяСтоимостьБУ                   КАК ПредварительнаяСтоимостьРегл,
		|
		|	0                                            КАК КорПостояннаяРазница,
		|	0                                            КАК КорВременнаяРазница,
		|	
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|	
		|	НЕОПРЕДЕЛЕНО                                 КАК КорПодразделение,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорНаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорСтатьяРасходов,
		|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
		|	
		|	ЛОЖЬ                                         КАК РасчетСтоимости,
		|	
		|	&ИдентификаторНеиспользуемойФинЗаписи        КАК ИдентификаторФинЗаписи,
		|	НЕОПРЕДЕЛЕНО                                 КАК НастройкаХозяйственнойОперации
		|
		|ГДЕ
		|	&ПервоначальнаяСтоимостьУУ <> 0
		|		ИЛИ &ПервоначальнаяСтоимостьБУ <> 0";
	
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПрочиеРасходы(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	СписокЗапросовОбъединение = Новый Массив;
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивыПринятияКУчету(СписокЗапросовОбъединение);	
	
	ПринятиеКУчетуНМАЛокализация.ДополнитьТекстЗапросаТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы(СписокЗапросовОбъединение);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияСоставЕГДС(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "СоставЕГДС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуНМА2_4.Ссылка КАК Регистратор,
	|	ПринятиеКУчетуНМА2_4.Дата КАК Период,
	|	ПринятиеКУчетуНМА2_4.Организация КАК Организация,
	|	ПринятиеКУчетуНМА2_4.НематериальныйАктив КАК ВнеоборотныйАктив,
	|	ПринятиеКУчетуНМА2_4.ЕГДС КАК ЕГДС
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА2_4 КАК ПринятиеКУчетуНМА2_4
	|ГДЕ
	|	ПринятиеКУчетуНМА2_4.Ссылка = &Ссылка
	|	И ПринятиеКУчетуНМА2_4.ЕГДС <> ЗНАЧЕНИЕ(Справочник.ЕдиницыГенерирующиеДенежныеСредства.ПустаяСсылка)";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяВтРасчетРасходов(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса = ПринятиеКУчетуНМАЛокализация.ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(ТекстыЗапроса, Запрос);

	Если ТекстЗапроса = Неопределено Тогда
		
		ЗапросыРегистра = Новый Массив;
		ЗапросыРегистра.Добавить(РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                      КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
		|	&Организация                                 КАК Организация,
		|	РасчетРасходов.Подразделение                 КАК Подразделение,
		|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
		|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
		|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
		|
		|	РасчетРасходов.Сумма                         КАК СуммаСНДС,
		|	РасчетРасходов.СуммаБезНДС                   КАК СуммаБезНДС,
		|	РасчетРасходов.СуммаУпр                      КАК СуммаБезНДСУпр,
		|
		|	РасчетРасходов.СуммаРегл                     КАК СуммаСНДСРегл,
		|	РасчетРасходов.СуммаРегл                     КАК СуммаБезНДСРегл,
		|	РасчетРасходов.ПостояннаяРазница             КАК ПостояннаяРазница,
		|	РасчетРасходов.ВременнаяРазница              КАК ВременнаяРазница,
		|
		|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
		|
		|	РасчетРасходов.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
		|	&НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации
		|
		|ИЗ
		|	ВтРасчетРасходов КАК РасчетРасходов";
		ЗапросыРегистра.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(ЗапросыРегистра, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
	КонецЕсли;

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРасчетСтоимостиСгруппированная(ТекстыЗапроса, Запрос)

	ИмяТаблицы = "ВтРасчетСтоимостиСгруппированная";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетСтоимости.ОбъектУчета               КАК ОбъектУчета,
	|	СУММА(РасчетСтоимости.Стоимость)          КАК Стоимость,
	|	СУММА(РасчетСтоимости.СтоимостьРегл)      КАК СтоимостьРегл,
	|	СУММА(РасчетСтоимости.СтоимостьНУ)        КАК СтоимостьНУ,
	|	СУММА(РасчетСтоимости.СтоимостьПР)        КАК СтоимостьПР,
	|	СУММА(РасчетСтоимости.СтоимостьВР)        КАК СтоимостьВР,
	|	СУММА(РасчетСтоимости.СтоимостьЦФ)        КАК СтоимостьЦФ,
	|	СУММА(РасчетСтоимости.СтоимостьНУЦФ)      КАК СтоимостьНУЦФ,
	|	СУММА(РасчетСтоимости.СтоимостьПРЦФ)      КАК СтоимостьПРЦФ,
	|	СУММА(РасчетСтоимости.СтоимостьВРЦФ)      КАК СтоимостьВРЦФ
	|ПОМЕСТИТЬ ВтРасчетСтоимостиСгруппированная 
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетСтоимости.ОбъектУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуНМАЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ПринятиеКУчетуНМАЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ПринятиеКУчетуНМАЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	ПринятиеКУчетуНМАЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);

КонецПроцедуры

#КонецОбласти

#Область РабочееМесто

// Формирует данные для рабочего места.
// 
// Параметры:
//  Параметры - Структура - Содержит:
//  	* Организация - СправочникСсылка.Организации -
//  	* Дата - Дата -
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные рабочего места.
Функция ДанныеРабочегоМеста(Параметры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступныеСтатьи.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДоступныеСтатьи
	|
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК ДоступныеСтатьи
	|ГДЕ
	|	ДоступныеСтатьи.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|	И (ДоступныеСтатьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|		ИЛИ ДоступныеСтатьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|		ИЛИ ДоступныеСтатьи.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
	|	И ДоступныеСтатьи.РасходыНаНМАиНИОКР
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрочиеРасходы.НематериальныйАктив КАК НематериальныйАктив,
	|	ПрочиеРасходы.Организация КАК Организация,
	|	
	|	СУММА(ПрочиеРасходы.СтоимостьУУ) КАК СтоимостьУУ,
	|	СУММА(ПрочиеРасходы.СтоимостьБУ) КАК СтоимостьБУ,
	|	СУММА(ПрочиеРасходы.СтоимостьНУ) КАК СтоимостьНУ
	|
	|ПОМЕСТИТЬ ПрочиеРасходы
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрочиеРасходы.АналитикаРасходов КАК НематериальныйАктив,
	|		ПрочиеРасходы.Организация КАК Организация,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ПрочиеРасходы.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьУУ,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ПрочиеРасходы.СуммаРеглОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьБУ,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ПрочиеРасходы.СуммаРеглОстаток - ПрочиеРасходы.ПостояннаяРазницаОстаток -  ПрочиеРасходы.ВременнаяРазницаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьНУ
	|
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Остатки(
	|			&НачалоМесяца,
	|			(Организация = &Организация
	|					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|				И СтатьяРасходов В (
	|					ВЫБРАТЬ
	|						ДоступныеСтатьи.Ссылка
	|					ИЗ
	|				 		ДоступныеСтатьи)
	|			) КАК ПрочиеРасходы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПрочиеРасходы.АналитикаРасходов КАК НематериальныйАктив,
	|		ПрочиеРасходы.Организация КАК Организация,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ВЫБОР 
	|						КОГДА ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ПрочиеРасходы.СуммаУпр
	|						ИНАЧЕ -ПрочиеРасходы.СуммаУпр
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьУУ,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ВЫБОР 
	|						КОГДА ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ПрочиеРасходы.СуммаРегл
	|						ИНАЧЕ -ПрочиеРасходы.СуммаРегл
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьБУ,
	|	
	|		ВЫБОР
	|			КОГДА ПрочиеРасходы.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ВЫБОР 
	|						КОГДА ПрочиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ПрочиеРасходы.СуммаРегл
	|						ИНАЧЕ -ПрочиеРасходы.СуммаРегл
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтоимостьНУ
	|
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|	ГДЕ
	|		ПрочиеРасходы.Период МЕЖДУ &НачалоМесяца И &Дата
	|		И ПрочиеРасходы.Активность
	|
	|		И (ПрочиеРасходы.Организация = &Организация
	|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|		И ПрочиеРасходы.СтатьяРасходов В (
	|					ВЫБРАТЬ
	|						ДоступныеСтатьи.Ссылка
	|					ИЗ
	|				 		ДоступныеСтатьи)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаТовары.АналитикаРасходов КАК НематериальныйАктив,
	|		ДанныеДокумента.Организация КАК Организация,
	|	
	|		0 КАК СтоимостьУУ,
	|		0 КАК СтоимостьБУ,
	|		0 КАК СтоимостьНУ
	|
	|	ИЗ
	|		Документ.ВнутреннееПотребление КАК ДанныеДокумента
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотребление.Товары ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ГДЕ
	|		ДанныеДокумента.Дата МЕЖДУ &НачалоМесяца И &Дата
	|		И ДанныеДокумента.Проведен
	|
	|		И (ДанныеДокумента.Организация = &Организация
	|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|		И ТаблицаТовары.СтатьяРасходов В (
	|					ВЫБРАТЬ
	|						ДоступныеСтатьи.Ссылка
	|					ИЗ
	|				 		ДоступныеСтатьи)
	|
	|	) КАК ПрочиеРасходы
	|
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПрочиеРасходы.НематериальныйАктив) = ТИП(Справочник.НематериальныеАктивы)
	|	И ВЫРАЗИТЬ(ПрочиеРасходы.НематериальныйАктив КАК Справочник.НематериальныеАктивы).ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходы.НематериальныйАктив,
	|	ПрочиеРасходы.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрочиеРасходы.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету))) КАК СостояниеБУ,
	|	МАКСИМУМ(ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету))) КАК СостояниеНУ,
	|	МАКСИМУМ(ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету))) КАК СостояниеУУ
	|
	|ПОМЕСТИТЬ СостояниеНМА
	|
	|ИЗ
	|	ПрочиеРасходы КАК ПрочиеРасходы
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
	|			&Дата, 
	|			НематериальныйАктив В
	|				(ВЫБРАТЬ
	|					ПрочиеРасходы.НематериальныйАктив
	|				ИЗ
	|					ПрочиеРасходы КАК ПрочиеРасходы)) КАК ПорядокУчетаНМАУУ
	|		ПО ПорядокУчетаНМАУУ.НематериальныйАктив = ПрочиеРасходы.НематериальныйАктив
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(
	|			&Дата, 
	|			НематериальныйАктив В
	|				(ВЫБРАТЬ
	|					ПрочиеРасходы.НематериальныйАктив
	|				ИЗ
	|					ПрочиеРасходы КАК ПрочиеРасходы)) КАК ПорядокУчетаНМАБУ
	|		ПО ПорядокУчетаНМАБУ.НематериальныйАктив = ПрочиеРасходы.НематериальныйАктив
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходы.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасходы.НематериальныйАктив КАК Ссылка,
	|
	|	ПрочиеРасходы.Организация КАК Организация,
	|
	|	ЕСТЬNULL(СостояниеНМА.СостояниеУУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(СостояниеНМА.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеБУ,
	|	ЕСТЬNULL(СостояниеНМА.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеНУ,
	|
	|	ПрочиеРасходы.СтоимостьУУ КАК СтоимостьУУ,
	|	ПрочиеРасходы.СтоимостьБУ КАК СтоимостьБУ,
	|	ПрочиеРасходы.СтоимостьНУ КАК СтоимостьНУ
	|
	|ИЗ
	|	ПрочиеРасходы КАК ПрочиеРасходы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеНМА КАК СостояниеНМА
	|		ПО ПрочиеРасходы.НематериальныйАктив = СостояниеНМА.НематериальныйАктив
	|
	|ГДЕ
	|	ПрочиеРасходы.СтоимостьУУ <> 0
	|	ИЛИ ПрочиеРасходы.СтоимостьБУ <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(?(Параметры.Дата <> '000101010000', Параметры.Дата, ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("Дата", КонецДня(?(Параметры.Дата <> '000101010000', Параметры.Дата, ТекущаяДатаСеанса())));
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбораСтатьиИАналитики = Новый Массив;
	
	ПринятиеКУчетуНМАЛокализация.ДополнитьПараметрыВыбораСтатейИАналитик(ПараметрыВыбораСтатьиИАналитики);
	
	// СтатьяРасходовБУ
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяРасходовБУ";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовБУ";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовБУ");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовБУ");
	
	ПараметрыВыбораСтатьиИАналитики.Добавить(ПараметрыВыбора);
	
	// СтатьяРасходовУУ
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяРасходовУУ";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовУУ";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовУУ");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовУУ");
	
	ПараметрыВыбораСтатьиИАналитики.Добавить(ПараметрыВыбора);
	
	Возврат ПараметрыВыбораСтатьиИАналитики;
	
КонецФункции

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - см. ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт

	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "СтатьяРасходовБУ");
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "АналитикаРасходовБУ");

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ПринятиеКУчетуНМА2_4.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.12.51";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("300f41e6-6029-451d-8f0e-b5a1f807c520");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПринятиеКУчетуНМА2_4.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет документы ""Принятие к учету НМА"":
								  |- Заполняет новые реквизиты ""Отражать в БУ"", ""Отражать в НУ""
								  |- Заменяет порядок учета с ""Списать при принятии к учету"" на ""Не принимать к учету, включить в расходы"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА2_4.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА2_4.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА2_4.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ПринятиеКУчетуНМА2_4";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА2_4 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ОтражатьВРеглУчете
	|		И НЕ ДанныеДокумента.ОтражатьВБУ
	//++ Локализация
	|		И НЕ ДанныеДокумента.ОтражатьВНУ
	//-- Локализация
	|	
	|	ИЛИ ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)
	|	ИЛИ ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)
	|
	//++ Локализация
	|	ИЛИ ДанныеДокумента.ПорядокУчетаНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)
	|		И ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету)
	|		И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации)
	//-- Локализация
	|";
	Запрос = Новый Запрос(ТекстЗапроса);

	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Документ.ПринятиеКУчетуНМА2_4.ОбработатьДанныеДляПереходаНаНовуюВерсию");

	ПолноеИмяОбъекта = "Документ.ПринятиеКУчетуНМА2_4";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ПринятиеКУчетуНМА2_4
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.ОтражатьВРеглУчете
				И НЕ ДокументОбъект.ОтражатьВБУ
				//++ Локализация
				И НЕ ДокументОбъект.ОтражатьВНУ 
				//-- Локализация
				Тогда
				
				ДокументОбъект.ОтражатьВБУ = Истина;
				//++ Локализация
				ДокументОбъект.ОтражатьВНУ = Истина;
				//-- Локализация
				
			КонецЕсли;

			Если ДокументОбъект.ПорядокУчетаУУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету Тогда
				ДокументОбъект.ПорядокУчетаУУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы;
			КонецЕсли;
			
			Если ДокументОбъект.ПорядокУчетаБУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету Тогда
				ДокументОбъект.ПорядокУчетаБУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы;
			КонецЕсли;
			
			Если ДокументОбъект.ПорядокУчетаНУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету
				И ДокументОбъект.ПорядокУчетаБУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации Тогда
				ДокументОбъект.ПорядокУчетаНУ = Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы;
			КонецЕсли;
			
			Если ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
 	ВнеоборотныеАктивыСлужебный.ПроверитьВыполнениеОбработчика(
 		ПроблемныхОбъектов, 
 		ОбъектовОбработано, 
 		ПолноеИмяОбъекта);
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ОбъектовОбработано);	
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
