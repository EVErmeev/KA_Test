
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация", Организация);
	Если НЕ Параметры.Свойство("ДатаОстатков", ДатаОстатков) Тогда
		ДатаОстатков = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Параметры.Свойство("МножественныйВыбор") И Параметры.МножественныйВыбор Тогда
		МножественныйВыбор = Истина;
	КонецЕсли;
	
	ЗаполнитьТаблицуВыбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура Отметить(Команда)
	
	ОбработатьОтметку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)
	
	ОбработатьОтметку(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыбранныеТипыНалогов = Новый Массив;
	ВыбранныеСчетаПрочихНалогов = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Налоги Цикл
		Если Не СтрокаТаблицы.Пометка Тогда Продолжить; КонецЕсли;
		ВыбранныеТипыНалогов.Добавить(СтрокаТаблицы.ТипНалога);
		Если СтрокаТаблицы.ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.ПрочиеНалогиИСборы") Тогда 
			ВыбранныеСчетаПрочихНалогов.Добавить(СтрокаТаблицы.СчетУчета);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("ТипыНалогов", ВыбранныеТипыНалогов);
	СтруктураВыбора.Вставить("СчетаПрочихНалогов", ВыбранныеСчетаПрочихНалогов);
	
	Если ВыбранныеТипыНалогов.Количество() > 0 Тогда
		ОповеститьОВыборе(СтруктураВыбора);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуВыбора()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПоддерживаемыеТипыНалогов = Новый Массив;
	ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.НДС);
	ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.НДС_НалоговыйАгент);
	ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.НалогНаПрибыль_РегиональныйБюджет);
	ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.НалогНаПрибыль_ФедеральныйБюджет);
	ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.ЗемельныйНалог);
	ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.ТранспортныйНалог);
	ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.НалогНаИмущество);
	ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.ТорговыйСбор);
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик(
				"НастройкиУчетаУСН",
				Организация,
				ДатаОстатков,
				Ложь);
				
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда

		Если ПараметрыУчетнойПолитики.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда 
			ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.УСН_Доходы);
		ИначеЕсли ПараметрыУчетнойПолитики.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда 
			ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.УСН_ДоходыМинусРасходы);
			ПоддерживаемыеТипыНалогов.Добавить(Перечисления.ТипыНалогов.УСН_МинимальныйНалог);
		КонецЕсли;
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ПоддерживаемыеТипыНалогов", ПоддерживаемыеТипыНалогов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыНалогов.Ссылка КАК ТипНалога,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетУчета,
	|	ВЫБОР ТипыНалогов.Ссылка
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НалогНаПрибыль_ФедеральныйБюджет)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.ФедеральныйБюджет)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НалогНаПрибыль_РегиональныйБюджет)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК УровеньБюджета,
	|	ЛОЖЬ КАК Используется
	|ИЗ
	|	Перечисление.ТипыНалогов КАК ТипыНалогов";
	ТипыНалогов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТипыНалогов Цикл
		
		СтрокаТаблицы.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(СтрокаТаблицы.ТипНалога);
		СтрокаТаблицы.Используется = ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета);
		
	КонецЦикла;
	
	СтрокаСчет68 = ТипыНалогов.Добавить();
	СтрокаСчет68.СчетУчета    = ПланыСчетов.Хозрасчетный.РасчетыПоНалогам;
	СтрокаСчет68.ТипНалога    = Перечисления.ТипыНалогов.ПрочиеНалогиИСборы;
	СтрокаСчет68.Используется = Истина;
	
	СтрокаСчет69 = ТипыНалогов.Добавить();
	СтрокаСчет69.СчетУчета    = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию;
	СтрокаСчет69.ТипНалога    = Перечисления.ТипыНалогов.ПрочиеНалогиИСборы;
	СтрокаСчет69.Используется = Истина;
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
	
	Запрос.УстановитьПараметр("ТипыНалогов", ТипыНалогов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаНалогов", ТипыНалогов.ВыгрузитьКолонку("СчетУчета"));
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ТипНалога,
	|	Таблица.СчетУчета,
	|	Таблица.УровеньБюджета,
	|	Таблица.Используется
	|ПОМЕСТИТЬ ТипыНалогов
	|ИЗ &ТипыНалогов КАК Таблица
	|;
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстатки.Субконто1) = ТИП(Перечисление.УровниБюджетов)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстатки.Субконто2) = ТИП(Перечисление.УровниБюджетов)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстатки.Субконто3) = ТИП(Перечисление.УровниБюджетов)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК УровеньБюджета,
	|	СУММА(-ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма
	|ПОМЕСТИТЬ НалогиКУплате
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В ИЕРАРХИИ (&СчетаНалогов)
	|				И НЕ Счет В ИЕРАРХИИ (&СчетаИсключения),,
	|			Организация = &Организация
	|		) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстатки.Субконто1) = ТИП(Перечисление.УровниБюджетов)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстатки.Субконто2) = ТИП(Перечисление.УровниБюджетов)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОстатки.Субконто3) = ТИП(Перечисление.УровниБюджетов)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТипыНалогов.ТипНалога,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ПрочиеНалогиИСборы)) КАК ТипНалога,
	|	НалогиКУплате.Счет КАК СчетУчета,
	|	НалогиКУплате.Сумма
	|ИЗ
	|	НалогиКУплате КАК НалогиКУплате
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТипыНалогов КАК ТипыНалогов
	|		ПО НалогиКУплате.Счет= ТипыНалогов.СчетУчета
	|		И НалогиКУплате.УровеньБюджета = ТипыНалогов.УровеньБюджета
	|
	|ГДЕ
	|	ЕСТЬNULL(ТипыНалогов.Используется, ИСТИНА)";
	
	Налоги.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтметку(Отметка)
	
	Для Каждого СтрокаТаблицы Из Налоги Цикл
		СтрокаТаблицы.Пометка = Отметка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
