
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	Элементы.РасшифровкаНалоговПодменюЗаполнить.Видимость = ИспользоватьНачислениеЗарплаты;
	Элементы.РасшифровкаНалоговЗаполнить.Видимость = Не ИспользоватьНачислениеЗарплаты;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьДоступностьСубконто();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетФедеральныйЗакон263ФЗ(Объект.Дата) Тогда
		ДанныеВыбора = ОрганизацииПлательщикиЕНП();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Организация = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаНалогов.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект, ВыбранноеЗначение),
			НСтр("ru = 'Таблица расшифровки будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииЗавершение(КодВозвратаДиалога.Да, ВыбранноеЗначение)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаНалогов

&НаКлиенте
Процедура РасшифровкаНалоговОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗаполнитьНаСервере("ПоДаннымДекларацийИРасчетов", ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле.Имя = "РасшифровкаНалоговПредставлениеПериода" Тогда
		СтандартнаяОбработка = Ложь;
		НачалоПериода = НачалоМесяца(ТекущиеДанные.НачалоПериода);
		КонецПериода  = КонецМесяца(ТекущиеДанные.КонецПериода);
		Если Не ЗначениеЗаполнено(НачалоПериода) Или Не ЗначениеЗаполнено(КонецПериода) Тогда
			НачалоПериода = НачалоМесяца(Объект.Дата);
			КонецПериода  = КонецМесяца(Объект.Дата);
		КонецЕсли;
		ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода, ВыборКварталов",
			НачалоМесяца(НачалоПериода), КонецМесяца(КонецПериода), Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСтандартногоПериодаЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц",
			ПараметрыВыбораПериода,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"РасшифровкаНалоговСубконто1", "РасшифровкаНалоговСубконто2", "РасшифровкаНалоговСубконто3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетУчета, ЭтотОбъект, ПоляФормы, Неопределено, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		ТекущиеДанные.ФормироватьУведомление = Истина;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.НачалоПериода)
			Или Не ЗначениеЗаполнено(ТекущиеДанные.КонецПериода) Тогда
			ТекущиеДанные.НачалоПериода = НачалоМесяца(Объект.Дата);
			ТекущиеДанные.КонецПериода  = КонецМесяца(Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(ТекущиеДанные.НачалоПериода, ТекущиеДанные.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговТипНалогаПриИзменении(Элемент)
	РасшифровкаНалоговТипНалогаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РасшифровкаНалоговТипНалогаПриИзмененииНаСервере()
	
	СтрокаРасшифровки = Объект.РасшифровкаНалогов.НайтиПоИдентификатору(Элементы.РасшифровкаНалогов.ТекущаяСтрока);
	Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ТипНалога) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРасшифровки.КодБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(СтрокаРасшифровки.ТипНалога);
	СтрокаРасшифровки.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(СтрокаРасшифровки.ТипНалога);
	ОбработатьИзменениеСчетаУчета(ЭтотОбъект, СтрокаРасшифровки);
	
	ЗаполнитьДобавленнуюКолонкуТаблицы(СтрокаРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСчетУчетаПриИзменении(Элемент)
	ОбработатьИзменениеСчетаУчета(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто1ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто2ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто3ПриИзменении(Элемент)
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, Элементы.РасшифровкаНалогов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНалоговСубконто3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьПараметрыВыбора(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоДаннымЗарплаты(Команда)
	
	ВариантЗаполнения = "ПоДаннымЗарплаты";
	
	Если Объект.РасшифровкаНалогов.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродолжитьЗаполнение", ЭтотОбъект, ВариантЗаполнения),
			НСтр("ru = 'Таблица расшифровки будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере(ВариантЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ДатаОстатков", Объект.Дата);
	
	ОткрытьФорму("Документ.НачислениеЕНП.Форма.ФормаВыбораНалогов",
		ПараметрыПодбора, Элементы.РасшифровкаНалогов);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымДекларацийИРасчетов(Команда)
	
	ВариантЗаполнения = "ПоДаннымДекларацийИРасчетов";
	
	Если Объект.РасшифровкаНалогов.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПродолжитьЗаполнение", ЭтотОбъект, ВариантЗаполнения),
			НСтр("ru = 'Таблица расшифровки будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере(ВариантЗаполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ТипыСвязанныеСОрганизацией = НастройкаСчетовУчетаСервер.ТипыСвязанныеСОрганизацией();
	
	ЗаполнитьДобавленныеКолонкиТаблицы();
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Представление отчетного периода
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаНалоговПредставлениеПериода");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаНалогов.ПредставлениеПериода", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Заполнить>'"));
	
	Для Индекс = 1 По 3 Цикл
		
		// Подсказка субконто
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСубконто" + Индекс].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс + "Доступность");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
		
		// Доступность субконто
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["РасшифровкаНалоговСубконто" + Индекс].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс + "Доступность");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаНалогов.Субконто" + Индекс);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЦикла;
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицы()
	
	Для каждого СтрокаТаблицы Из Объект.РасшифровкаНалогов Цикл
		ЗаполнитьДобавленнуюКолонкуТаблицы(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленнуюКолонкуТаблицы(СтрокаТаблицы)
	
	СтрокаТаблицы.ПредставлениеПериода =
		ПредставлениеПериодаОтчета(СтрокаТаблицы.НачалоПериода, СтрокаТаблицы.КонецПериода);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()
	
	Для каждого СтрокаТаблицы Из Объект.РасшифровкаНалогов Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(СтрокаТаблицы.СчетУчета, СтрокаТаблицы, ПоляОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнение(Ответ, ПараметрыЗаполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаНалогов.Очистить();
	
	ЗаполнитьНаСервере(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(ВариантЗаполнения = "ПоДаннымДекларацийИРасчетов", ТипыНалогов = Неопределено)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("ДатаДокумента", Объект.Дата);
	Если ТипЗнч(ТипыНалогов) = Тип("Структура") Тогда 
		ПараметрыЗаполнения.Вставить("ТипыНалогов", ТипыНалогов.ТипыНалогов);
		ПараметрыЗаполнения.Вставить("СчетаПрочихНалогов", ТипыНалогов.СчетаПрочихНалогов);
	Иначе
		ПараметрыЗаполнения.Вставить("ТипыНалогов", ТипыНалогов);
		ПараметрыЗаполнения.Вставить("СчетаПрочихНалогов", Неопределено);
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("Ссылка", Объект.Ссылка);
	
	Если ВариантЗаполнения = "ПоДаннымЗарплаты" Тогда
		Таблица = Документы.НачислениеЕНП.ПолучитьНалогиПоДаннымЗарплаты(ПараметрыЗаполнения);
	Иначе
		Таблица = Документы.НачислениеЕНП.ПолучитьНалогиПоДаннымДекларацийИРасчетов(ПараметрыЗаполнения);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		НоваяСтрока = Объект.РасшифровкаНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		ОбработатьИзменениеСчетаУчета(ЭтотОбъект, НоваяСтрока);
		НоваяСтрока.ПредставлениеПериода =
			ПредставлениеПериодаОтчета(НоваяСтрока.НачалоПериода, НоваяСтрока.КонецПериода);
		НоваяСтрока.ФормироватьУведомление = ЭтоНДФЛ(СтрокаТаблицы.ТипНалога);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчетаУчета(Форма, СтрокаТаблицы)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		"РасшифровкаНалоговСубконто1", "РасшифровкаНалоговСубконто2", "РасшифровкаНалоговСубконто3");
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(СтрокаТаблицы.СчетУчета, Форма, ПоляФормы, Неопределено, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", "Субконто1", "Субконто2", "Субконто3");
	ПоляОбъекта.Вставить("Организация", Форма.Объект.Организация);
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы["СчетУчета"], СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы)
	
	ПараметрыДокумента = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСубконто(Форма.Объект.Организация, СтрокаТаблицы, "Субконто%Индекс%", "СчетУчета");
	НастройкаСчетовУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, СтрокаТаблицы, "Субконто%Индекс%", "РасшифровкаНалоговСубконто%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные      = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	ПараметрыДокумента = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСубконто(ЭтотОбъект.Объект.Организация, ТекущиеДанные, "Субконто%Индекс%", "СчетУчета");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПараметрыВыбора(Элемент)
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацииПлательщикиЕНП()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Организация КАК Организация
	|ИЗ РегистрСведений.НастройкиСистемыНалогообложения
	|ГДЕ ПлательщикЕНП";
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(Ответ, РезультатВыбора) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаНалогов.Очистить();
	Объект.Организация = РезультатВыбора;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтандартногоПериодаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НачалоПериода = РезультатВыбора.НачалоПериода;
	ТекущиеДанные.КонецПериода  = РезультатВыбора.КонецПериода;
		
	Если ЭтоНДФЛ(ТекущиеДанные.ТипНалога) 
		И РезультатВыбора.НачалоПериода = НачалоМесяца(КонецГода(РезультатВыбора.НачалоПериода)) Тогда
		
		СписокУточненияПериода = Новый СписокЗначений;
		
		НачалоПериода = Дата(Год(ТекущиеДанные.НачалоПериода), 12, 23);
		КонецПериода  = Дата(Год(ТекущиеДанные.НачалоПериода), 12, 31);
		
		НачалоДекабря = СтрШаблон(НСтр("ru = 'Начало декабря: до %1'"),
			Формат(НачалоПериода, "ДФ=dd.MM.yyyy"));
		КонецДекабря  = СтрШаблон(НСтр("ru = 'Конец декабря: %1'"),
			Формат(НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
		
		СписокУточненияПериода.Добавить(1, НачалоДекабря);
		СписокУточненияПериода.Добавить(2, КонецДекабря);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УточнениеПериодаЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокУточненияПериода, "РасшифровкаНалоговПредставлениеПериода");
		
	Иначе
		ТекущиеДанные.ПредставлениеПериода =
			ПредставлениеПериодаОтчета(ТекущиеДанные.НачалоПериода, ТекущиеДанные.КонецПериода);
		ТекущиеДанные.СрокУплаты = СрокУплаты(ТекущиеДанные.КонецПериода, ЭтоНДФЛ(ТекущиеДанные.ТипНалога));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПериодаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	// Уточнение периода для декабря.
	// Если уведомление за период 23-31 декабря - так и напишем
	
	ТекущиеДанные = Элементы.РасшифровкаНалогов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТринадцатыйПериод = Ложь;
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ТринадцатыйПериод = РезультатВыбора.Значение = 2;
		Если ТринадцатыйПериод Тогда
			ТекущиеДанные.НачалоПериода = Дата(Год(ТекущиеДанные.НачалоПериода), 12, 23);
			ТекущиеДанные.КонецПериода  = Дата(Год(ТекущиеДанные.НачалоПериода), 12, 31);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеПериода =
			ПредставлениеПериодаОтчета(ТекущиеДанные.НачалоПериода, ТекущиеДанные.КонецПериода);
		
	ТекущиеДанные.СрокУплаты = СрокУплаты(ТекущиеДанные.КонецПериода,
		Истина,
		ТринадцатыйПериод);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаОтчета(НачалоПериода, КонецПериода)
	
	ПредставлениеПериода = "";
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		
		Если НачалоМесяца(НачалоПериода) <> НачалоПериода Тогда
			ПредставлениеПериода = Формат(НачалоПериода, "ДФ=dd.MM.yyyy") + " - " + Формат(КонецПериода, "ДФ=dd.MM.yyyy");
		Иначе
			Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
			Иначе
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
			КонецЕсли;
			
			ПредставлениеПериода =
				ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(ВидПериода, НачалоПериода, КонецПериода);
				
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СрокУплаты(Знач Период, ЭтоНДФЛ, ТринадцатыйПериод = Ложь)
	
	ОтчетныйПериод = Период;
	Если Не ЭтоНДФЛ Тогда
		ОтчетныйПериод = КонецМесяца(ОтчетныйПериод) + 1;
	КонецЕсли;
	
	ГодУплаты   = Год(ОтчетныйПериод);
	МесяцУплаты = Месяц(ОтчетныйПериод);
	ДеньУплаты = 28;// все уплаты в один день
	Если ЭтоНДФЛ И ТринадцатыйПериод Тогда
		ДеньУплаты = 31; // исключение
	КонецЕсли;
	
	СрокУплаты = Дата(ГодУплаты, МесяцУплаты, ДеньУплаты);
	
	Возврат СрокУплаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоНДФЛ(ТипНалога)
	Возврат ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛ")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛ_ИП")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДивиденды")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДивидендыСотрудникам")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛДоходыКонтрагентов")
		ИЛИ ТипНалога = ПредопределенноеЗначение("Перечисление.ТипыНалогов.НДФЛСПревышения");
КонецФункции

#КонецОбласти