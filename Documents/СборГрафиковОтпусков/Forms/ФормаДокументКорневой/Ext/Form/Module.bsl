
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	Если Параметры.Ключ.Пустая() Тогда
	
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		Объект.ИнициаторСбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	
		Объект.Год = Год(ТекущаяДатаСеанса());
		Объект.Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Черновик;
		
		ИнициализироватьФорму();
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли; 
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "СотрудникиСотрудник");
	КонецЕсли; 

	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ИнициализироватьФорму();
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаБЗК.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения И Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_СборГрафиковОтпусковКорневой", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик подсистемы "ПодписиДокументов".
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент) 
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент) 
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец Обработчик подсистемы "ПодписиДокументов".

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваФормыСобранныеГрафики

&НаКлиенте
Процедура СобранныеГрафикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ГрафикОтпусков) Тогда
		ФормаДокументаПодразделение = ПолучитьФорму("Документ.СборГрафиковОтпусков.Форма.ФормаДокументаПодразделение",
			Новый Структура("Ключ", Элемент.ТекущиеДанные.ГрафикОтпусков),
			ЭтаФорма);
		ФормаДокументаПодразделение.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСобранныеГрафики()
	
	ИспользоватьШтатноеРасписание = Ложь;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	УстановитьПривилегированныйРежим(Истина);
	КабинетСотрудникаВнутренний.СоздатьВТШтатноеРасписание(МенеджерВТ, ИспользоватьШтатноеРасписание);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ДатаСведений", КонецГода(Дата(Объект.Год, 1, 1)));
	Запрос.УстановитьПараметр("КорневойСборГрафиков", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗанятостьПозицийШтатногоРасписанияИнтервальный.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	СУММА(ЗанятостьПозицийШтатногоРасписанияИнтервальный.КоличествоСтавок) КАК КоличествоСтавок
	|ПОМЕСТИТЬ ВТЗанятостьПозицийШтатногоРасписания
	|ИЗ
	|	РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный КАК ЗанятостьПозицийШтатногоРасписанияИнтервальный
	|ГДЕ
	|	&ДатаСведений МЕЖДУ ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДатаНачала И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ДатаОкончания
	|	И ЗанятостьПозицийШтатногоРасписанияИнтервальный.ВидЗанятостиПозиции <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиПозицийШтатногоРасписания.Свободна)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗанятостьПозицийШтатногоРасписанияИнтервальный.ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСборГрафиковОтпусков.Ссылка КАК ГрафикОтпусков,
	|	ВЫБОР
	|		КОГДА ДокументСборГрафиковОтпусков.Подразделение ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ДокументСборГрафиковОтпусков.Подразделение
	|		КОГДА ДокументСборГрафиковОтпусков.Подразделение ССЫЛКА Справочник.СтруктураПредприятия
	|			ТОГДА ДокументСборГрафиковОтпусков.Подразделение.Источник
	|	КОНЕЦ КАК Подразделение
	|ПОМЕСТИТЬ ВТДокументыСборГрафиковОтпусковПодразделений
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК ДокументСборГрафиковОтпусков
	|ГДЕ
	|	ДокументСборГрафиковОтпусков.КорневойСборГрафиков = &КорневойСборГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Организация КАК Организация,
	|	ШтатноеРасписание.Подразделение КАК Подразделение,
	|	ШтатноеРасписание.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	НЕ ШтатноеРасписание.Утверждена КАК НеУтверждена,
	|	ШтатноеРасписание.ДатаУтверждения КАК ДатаУтверждения,
	|	ШтатноеРасписание.Закрыта КАК Закрыта,
	|	ШтатноеРасписание.ДатаЗакрытия КАК ДатаЗакрытия,
	|	ШтатноеРасписание.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ПорядокПодразделений,
	|	ШтатноеРасписание.Должность.РеквизитДопУпорядочивания КАК ПорядокДолжностей,
	|	ВЫБОР
	|		КОГДА ПравилаПубликации.ОбъектПравила ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Публиковать,
	|	ЕСТЬNULL(ВТЗанятостьПозицийШтатногоРасписания.КоличествоСтавок, 0) КАК КоличествоЗанятыхСтавок
	|ИЗ
	|	ВТШтатноеРасписание КАК ШтатноеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|		ПО ШтатноеРасписание.ПозицияШтатногоРасписания = ПравилаПубликации.ОбъектПравила
	|			И (ПравилаПубликации.ОбъектПравила ССЫЛКА Справочник.ШтатноеРасписание)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗанятостьПозицийШтатногоРасписания КАК ВТЗанятостьПозицийШтатногоРасписания
	|		ПО ШтатноеРасписание.ПозицияШтатногоРасписания = ВТЗанятостьПозицийШтатногоРасписания.ПозицияШтатногоРасписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСборГрафиковОтпусковПодразделений КАК ВТДокументыСборГрафиковОтпусковПодразделений
	|		ПО ШтатноеРасписание.Подразделение = ВТДокументыСборГрафиковОтпусковПодразделений.Подразделение
	|ГДЕ
	|	НЕ ПравилаПубликации.ОбъектПравила ЕСТЬ NULL
	|	И (ВТЗанятостьПозицийШтатногоРасписания.КоличествоСтавок > 0
	|			ИЛИ НЕ ВТДокументыСборГрафиковОтпусковПодразделений.ГрафикОтпусков ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШтатноеРасписание.Организация.Наименование,
	|	ШтатноеРасписание.Подразделение.РеквизитДопУпорядочиванияИерархического,
	|	ШтатноеРасписание.Должность.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	Организация,
	|	Подразделение ИЕРАРХИЯ";
	Если Не ИспользоватьШтатноеРасписание Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ ШтатноеРасписание.Утверждена", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.ДатаУтверждения", """");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.Закрыта", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШтатноеРасписание.ДатаЗакрытия", """");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ИсходноеДерево = РеквизитФормыВЗначение("СобранныеГрафики");
		ИсходноеДерево.Строки.Очистить();
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		НомерСтроки = 1;
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			НоваяСтрока = ИсходноеДерево.Строки.Добавить();
			НоваяСтрока.НомерСтроки = НомерСтроки;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапроса);
			НоваяСтрока.Наименование = Строка(ВыборкаЗапроса.Организация);
			
			ДочерняяВыборка = ВыборкаЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			ЗаполнитьСтрокиДерева(НоваяСтрока, ДочерняяВыборка);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ЗаполнитьРуководителей(ИсходноеДерево);
		ЗаполнитьСборыПоПодразделению(ИсходноеДерево, Объект.Ссылка);
		
		ЗначениеВРеквизитФормы(ИсходноеДерево, "СобранныеГрафики");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДерева(СтрокаДерева, ИерархическаяВыборка, КоличествоСотрудников = 0)
	
	НомерСтроки = 1;
	Пока ИерархическаяВыборка.Следующий() Цикл
		
		Если ИерархическаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			КоличествоСотрудников = КоличествоСотрудников + ИерархическаяВыборка.КоличествоЗанятыхСтавок;
			
		Иначе
						
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИерархическаяВыборка,,"Подразделение");
			НоваяСтрока.НомерСтроки = НомерСтроки;
			
			НоваяСтрока.Наименование = Строка(ИерархическаяВыборка.Подразделение);
			
			КоличествоСотрудников = 0;
			Если ИерархическаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				НоваяСтрока.Подразделение = ИерархическаяВыборка.Подразделение;
				ДочерняяВыборка = ИерархическаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ИерархическаяВыборка.Группировка());
			Иначе
				ДочерняяВыборка = ИерархическаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			КонецЕсли;
			
			ЗаполнитьСтрокиДерева(НоваяСтрока, ДочерняяВыборка, КоличествоСотрудников);
			Если ИерархическаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
				НоваяСтрока.Подразделение = ИерархическаяВыборка.Подразделение;
				НоваяСтрока.КоличествоСотрудников = НоваяСтрока.КоличествоСотрудников + КоличествоСотрудников;
			КонецЕсли;
			СтрокаДерева.КоличествоСотрудников = СтрокаДерева.КоличествоСотрудников + НоваяСтрока.КоличествоСотрудников;
						
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСборыПоПодразделению(ИсходноеДерево, КорневойСборГрафиков)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорневойСборГрафиков", КорневойСборГрафиков);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СборГрафиковОтпусковСотрудники.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СборГрафиковОтпусковСотрудники.Сотрудник) КАК ЗапланировалоОтпуск
		|ПОМЕСТИТЬ ВТЗапланировалоОтпуск
		|ИЗ
		|	Документ.СборГрафиковОтпусков.Сотрудники КАК СборГрафиковОтпусковСотрудники
		|ГДЕ
		|	НЕ СборГрафиковОтпусковСотрудники.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	СборГрафиковОтпусковСотрудники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСборГрафиковОтпусков.Ссылка КАК ГрафикОтпусков,
		|	ВЫБОР
		|		КОГДА ДокументСборГрафиковОтпусков.Подразделение ССЫЛКА Справочник.ПодразделенияОрганизаций
		|			ТОГДА ДокументСборГрафиковОтпусков.Подразделение
		|		КОГДА ДокументСборГрафиковОтпусков.Подразделение ССЫЛКА Справочник.СтруктураПредприятия
		|			ТОГДА ДокументСборГрафиковОтпусков.Подразделение.Источник
		|	КОНЕЦ КАК Подразделение,
		|	ДокументСборГрафиковОтпусков.Состояние КАК Состояние,
		|	ЕСТЬNULL(ВТЗапланировалоОтпуск.ЗапланировалоОтпуск, 0) КАК ЗапланировалоОтпуск
		|ИЗ
		|	Документ.СборГрафиковОтпусков КАК ДокументСборГрафиковОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапланировалоОтпуск КАК ВТЗапланировалоОтпуск
		|		ПО ДокументСборГрафиковОтпусков.Ссылка = ВТЗапланировалоОтпуск.Ссылка
		|ГДЕ
		|	ДокументСборГрафиковОтпусков.КорневойСборГрафиков = &КорневойСборГрафиков";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСбораГрафиковПоПодразделениям = РезультатЗапроса.Выбрать();
	ДанныеСбораГрафиковПоПодразделениям = РезультатЗапроса.Выгрузить();
	
	ЗаполнитьСборыПоПодразделениюРекурсивно(ИсходноеДерево, ДанныеСбораГрафиковПоПодразделениям);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСборыПоПодразделениюРекурсивно(ДеревоЗначений, ДанныеСбораГрафиковПоПодразделениям)
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСборыПоПодразделениюРекурсивно(СтрокаДерева, ДанныеСбораГрафиковПоПодразделениям);
		Иначе
			ПараметрыОтбора = Новый Структура("Подразделение", СтрокаДерева.Подразделение);
			ДанныеПоПодразделению = ДанныеСбораГрафиковПоПодразделениям.НайтиСтроки(ПараметрыОтбора);
			Если ДанныеПоПодразделению.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеПоПодразделению[0], "ГрафикОтпусков, Состояние, ЗапланировалоОтпуск");
				ЗаполнитьЗапланировалоОтпуск(СтрокаДерева, ДанныеПоПодразделению[0].ЗапланировалоОтпуск);
			КонецЕсли;
		КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗапланировалоОтпуск(СтрокаДерева, ЗапланировалоОтпуск)
	Если Не СтрокаДерева.Родитель = Неопределено Тогда
		СтрокаДерева.Родитель.ЗапланировалоОтпуск = СтрокаДерева.Родитель.ЗапланировалоОтпуск + ЗапланировалоОтпуск;
		ЗаполнитьЗапланировалоОтпуск(СтрокаДерева.Родитель, ЗапланировалоОтпуск);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРуководителей(ИсходноеДерево)
	
	МассивПодразделений = Новый Массив; 
	ЗаполнитьМассивПодразделений(ИсходноеДерево, МассивПодразделений);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивПодразделений, Неопределено);
	
	ПубликоватьСтруктуруЮридическихЛиц = КабинетСотрудника.ПубликоватьСтруктуруЮридическихЛиц();
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		ЗаполнитьРуководителейПодразделенийРекурсивно(ИсходноеДерево, 
			ПубликоватьСтруктуруЮридическихЛиц, 
			КабинетСотрудникаВнутренний.РуководителиПодразделенийОрганизаций(МассивПодразделений));
	Иначе
		МассивСтруктурыПредприятия = Новый Массив;
		СоответствиеПодразделенияИСтруктурыПредприятия = Новый Соответствие;
		Для Каждого Подразделение Из МассивПодразделений Цикл
			ЭлементСтруктураПредприятия = Справочники.СтруктураПредприятия.ПустаяСсылка();
			ОрганизационнаяСтруктура.ЗаполнитьДанныеИсточникаВыбранногоПодразделения(ЭлементСтруктураПредприятия, Подразделение);
			МассивСтруктурыПредприятия.Добавить(ЭлементСтруктураПредприятия);
			СоответствиеПодразделенияИСтруктурыПредприятия.Вставить(Подразделение, ЭлементСтруктураПредприятия);
		КонецЦикла;
		ЗаполнитьРуководителейПодразделенийРекурсивно(ИсходноеДерево, 
			ПубликоватьСтруктуруЮридическихЛиц, 
			КабинетСотрудникаВнутренний.ДанныеСтруктурыПредприятия(МассивСтруктурыПредприятия),
			СоответствиеПодразделенияИСтруктурыПредприятия);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьМассивПодразделений(ИсходноеДерево, МассивПодразделений)
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПодразделений, ИсходноеДерево.Строки.ВыгрузитьКолонку("Подразделение"), Истина);	
	Для Каждого СтрокаДерева Из ИсходноеДерево.Строки Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьМассивПодразделений(СтрокаДерева, МассивПодразделений);
		КонецЕсли;
	КонецЦикла;     
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРуководителейПодразделенийРекурсивно(ДеревоЗначений, ПубликоватьСтруктуруЮридическихЛиц, ПодразделенияРуководители, СоответствиеПодразделенияИСтруктурыПредприятия = Неопределено)
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
    	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
			РуководительПодразделения = ПодразделенияРуководители.Получить(СтрокаДерева.Подразделение);
			Если Не РуководительПодразделения = Неопределено Тогда
				СтрокаДерева.РуководительПредставление = Строка(РуководительПодразделения);	
			КонецЕсли;
		Иначе
			ПараметрыОтбора = Новый Структура("СтруктураПредприятия", СоответствиеПодразделенияИСтруктурыПредприятия.Получить(СтрокаДерева.Подразделение));
			ДанныеПодразделения = ПодразделенияРуководители.НайтиСтроки(ПараметрыОтбора);
			Если ДанныеПодразделения.Количество() > 0 И Не ДанныеПодразделения[0].ФизическоеЛицоРуководителя = Неопределено Тогда
				СтрокаДерева.РуководительПредставление = Строка(ДанныеПодразделения[0].ФизическоеЛицоРуководителя);	
			КонецЕсли;
		КонецЕсли;
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьРуководителейПодразделенийРекурсивно(СтрокаДерева, ПубликоватьСтруктуруЮридическихЛиц, ПодразделенияРуководители, СоответствиеПодразделенияИСтруктурыПредприятия);
		КонецЕсли;
    КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НачатьСбор(Команда)
	
	Если Параметры.Ключ.Пустая() Или Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Начать кампанию можно только для записанного документа. 
							|Записать и начать кампанию сбора графиков отпусков?'");	
		Оповещение = Новый ОписаниеОповещения("ЗаписатьДокументПередНачаломСбораЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
	Иначе 
		НачатьСборГрафиковОтпусков();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументПередНачаломСбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да И ПроверитьЗаполнение() Тогда
		Записать();
		НачатьСборЗавершение(Результат, Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСборГрафиковОтпусков()
	
	ТекстВопроса = НСтр("ru='Начать кампанию сбора графиков отпусков?'");
	Оповещение = Новый ОписаниеОповещения("НачатьСборЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСборЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
		УстановитьСтатусСбора("СборЗапущен", Истина);
	КонецЕсли;  
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗавершитьСбор(Команда)
	
	Если ПоступившиеСборыГрафиковОтпусковУтверждены(Объект.Ссылка) Тогда
		Если Параметры.Ключ.Пустая() Или Модифицированность Тогда
			ТекстВопроса = НСтр("ru = 'Завершить кампанию можно только для записанного документа. 
			|Записать?'");	
			Оповещение = Новый ОписаниеОповещения("ЗаписатьДокументПередЗавершениемСбораЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		Иначе 
			ЗавершитьСборГрафиковОтпусков();
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не все поступившие сборы графиков по подразделениям были утверждены в сервисе 1С:Кабинет сотрудника.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументПередЗавершениемСбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да И ПроверитьЗаполнение() Тогда
		Записать();
		ЗавершитьСборГрафиковОтпусков();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСборГрафиковОтпусков()
	
	ТекстВопроса = НСтр("ru='Возобновление кампании сбора графиков отпусков после завершения невозможно!
						|Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ЗавершитьСборЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСборЗавершение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьСтатусСбора("СборЗавершен", Истина);
	КонецЕсли;  
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект)
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплатаКлиент");
		МодульПроцессыОбработкиДокументовЗарплата.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтрольВеденияУчета

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиентБЗК.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	//Массив.Добавить("Объект.Сотрудники");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	//Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru = 'организации'")));
	Возврат Массив
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	УстановитьСвойстваЭлементовФормы();
	ЗаполнитьСобранныеГрафики();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы, "ФормаНачатьСбор", "Заголовок", ?(Объект.СборЗапущен, "Сбор начат", "Начать сбор"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы, "ФормаНачатьСбор", "Доступность", НЕ Объект.СборЗапущен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы, "ФормаНачатьСбор", "ЦветФона", ?(Объект.СборЗапущен и НЕ Объект.СборЗавершен, ЦветаСтиля.ПравоПросмотраФон, ЦветаСтиля.ЦветФонаКнопки));	
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы, "ФормаЗавершитьСбор", "Заголовок", ?(Объект.СборЗавершен, "Сбор завершен", "Завершить сбор"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы, "ФормаЗавершитьСбор", "Доступность", НЕ Объект.СборЗавершен и Объект.СборЗапущен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтаФорма.Элементы, "ФормаЗавершитьСбор", "ЦветФона", ?(Объект.СборЗавершен, ЦветаСтиля.ПравоПросмотраФон, ЦветаСтиля.ЦветФонаКнопки));	
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстанавливаемыеПараметры = Новый Структура;
	УстановитьПараметрыФункциональныхОпцийФормы(УстанавливаемыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму()
	
	УстановитьФункциональныеОпцииФормы(); 	
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ПроверкаПередЗаписьюВыполнена", Истина);
	Если Записать(ПараметрыЗаписи) И ЗакрытьПослеЗаписи Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСбора(ИмяФлага, ЗначениеФлага)
	
	Объект[ИмяФлага] = ЗначениеФлага;
	
	Записать();
	
	УстановитьСвойстваЭлементовФормы();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоступившиеСборыГрафиковОтпусковУтверждены(КорневойСборГрафиковОтпусков)
	Возврат	СборГрафиковОтпусков.СборыГрафиковОтпусковПодразделенийУтверждены(КорневойСборГрафиковОтпусков);
КонецФункции

#КонецОбласти
