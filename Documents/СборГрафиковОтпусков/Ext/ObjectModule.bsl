#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	КонтейнерОшибок = Неопределено;

	ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок);		
	ПроверитьПериодыПредоставленияОтпуска(КонтейнерОшибок);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КонтейнерОшибок, Отказ);
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КорневойСборГрафиков) И ЕстьСборГрафиковОтпусковНаУказанныйГод() Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'На указанный год уже введен документ Сбор графиков отпусков.'"));
		Возврат;
	КонецЕсли;
	
	УстановитьСостояниеКорневогоСбораГрафиков();
	КабинетСотрудникаРасширенный.СборГрафиковОтпусковПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	УстановитьГодПоУмолчанию();
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьГодПоУмолчанию()

	Год = Год(ТекущаяДатаСеанса());
	
КонецПроцедуры

Процедура УстановитьСостояниеКорневогоСбораГрафиков()
	
	Если Не ЗначениеЗаполнено(КорневойСборГрафиков) Тогда
		Если ПометкаУдаления Тогда
			Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Отказано
		ИначеЕсли СборЗавершен Тогда
			Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Утверждено	
		Иначе
			Состояние = Перечисления.СостоянияСбораГрафиковОтпусков.Черновик	
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок)
	
	Если Не ЗначениеЗаполнено(КорневойСборГрафиков) Тогда
		Если Не ЗначениеЗаполнено(Год) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан год сбора графиков отпусков.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Год", ТекстСообщения);
		Иначе
			РезультатЗапроса = СформироватьЗапросСборГрафиковОтпусковНаТекущийГод();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='На указанный год уже введен документ %1'"),
					Выборка.СсылкаПредставление);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Год", ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьПериодыПредоставленияОтпуска(КонтейнерОшибок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикиОтпусковСотрудников", Сотрудники.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СборГрафиковОтпусковСотрудники.Сотрудник КАК Сотрудник,
		|	СборГрафиковОтпусковСотрудники.НомерСтроки КАК НомерСтроки,
		|	СборГрафиковОтпусковСотрудники.ДатаНачала КАК ДатаНачала,
		|	СборГрафиковОтпусковСотрудники.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТГрафикиОтпусковСотрудников
		|ИЗ
		|	&ГрафикиОтпусковСотрудников КАК СборГрафиковОтпусковСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиОтпусковСотрудников.Сотрудник КАК Сотрудник,
		|	ГрафикиОтпусковСотрудников.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТСтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска
		|ИЗ
		|	ВТГрафикиОтпусковСотрудников КАК ГрафикиОтпусковСотрудников
		|ГДЕ
		|	ГрафикиОтпусковСотрудников.ДатаНачала > ГрафикиОтпусковСотрудников.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиОтпусковСотрудников.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ГрафикиОтпусковСотрудниковДругие.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТПересекаютсяПериодыОтпусков
		|ИЗ
		|	ВТГрафикиОтпусковСотрудников КАК ГрафикиОтпусковСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиОтпусковСотрудников КАК ГрафикиОтпусковСотрудниковДругие
		|		ПО ГрафикиОтпусковСотрудников.Сотрудник = ГрафикиОтпусковСотрудниковДругие.Сотрудник
		|			И ГрафикиОтпусковСотрудников.НомерСтроки <> ГрафикиОтпусковСотрудниковДругие.НомерСтроки
		|			И ГрафикиОтпусковСотрудников.ДатаОкончания >= ГрафикиОтпусковСотрудниковДругие.ДатаНачала
		|			И ГрафикиОтпусковСотрудников.ДатаОкончания <= ГрафикиОтпусковСотрудниковДругие.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиОтпусковСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересекаютсяПериодыОтпусков.Сотрудник КАК Сотрудник,
		|	ПересекаютсяПериодыОтпусков.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА КАК ПересекаютсяПериоды,
		|	ЛОЖЬ КАК НекорректныйПериодПредоставления
		|ПОМЕСТИТЬ ВТСводный
		|ИЗ
		|	ВТПересекаютсяПериодыОтпусков КАК ПересекаютсяПериодыОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиОтпусковСотрудников КАК ГрафикиОтпусковСотрудников
		|		ПО ПересекаютсяПериодыОтпусков.НомерСтроки = ГрафикиОтпусковСотрудников.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска.Сотрудник,
		|	СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска.НомерСтроки,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ВТСтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска КАК СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиОтпусковСотрудников КАК ГрафикиОтпусковСотрудников
		|		ПО СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска.НомерСтроки = ГрафикиОтпусковСотрудников.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сводный.Сотрудник КАК Сотрудник,
		|	Сводный.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(Сводный.ПересекаютсяПериоды) КАК ПересекаютсяПериоды,
		|	МАКСИМУМ(Сводный.НекорректныйПериодПредоставления) КАК НекорректныйПериодПредоставления
		|ИЗ
		|	ВТСводный КАК Сводный
		|
		|СГРУППИРОВАТЬ ПО
		|	Сводный.Сотрудник,
		|	Сводный.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = "";
			
			Если Выборка.НекорректныйПериодПредоставления Тогда
				ТекстСообщения = ?(ПустаяСтрока(ТекстСообщения), "", ТекстСообщения +", ")
					+ НСтр("ru='некорректно задан период предоставления отпуска'");
			КонецЕсли; 
			
			Если Выборка.ПересекаютсяПериоды Тогда
				ТекстСообщения = ?(ПустаяСтрока(ТекстСообщения), "", ТекстСообщения +", ")
					+ НСтр("ru='пересекается период нахождения в отпуске'");
			КонецЕсли; 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1:'"),
				Выборка.Сотрудник)
				+ " " + ТекстСообщения;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				КонтейнерОшибок,
				"Объект.Сотрудники[" + (Выборка.НомерСтроки - 1) + "].Сотрудник",
				ТекстСообщения);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьСборГрафиковОтпусковНаУказанныйГод()
		
	Возврат Не СформироватьЗапросСборГрафиковОтпусковНаТекущийГод().Пустой();
	
КонецФункции

Функция СформироватьЗапросСборГрафиковОтпусковНаТекущийГод()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Год", Год);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументСборГрафиковОтпусков.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ДокументСборГрафиковОтпусков.Ссылка) КАК СсылкаПредставление
		|ИЗ
		|	Документ.СборГрафиковОтпусков КАК ДокументСборГрафиковОтпусков
		|ГДЕ
		|	НЕ ДокументСборГрафиковОтпусков.ПометкаУдаления
		|	И ДокументСборГрафиковОтпусков.Год = &Год
		|	И ДокументСборГрафиковОтпусков.Ссылка <> &Ссылка
		|	И (ДокументСборГрафиковОтпусков.КорневойСборГрафиков = ЗНАЧЕНИЕ(Документ.СборГрафиковОтпусков.ПустаяСсылка)
		|			ИЛИ ДокументСборГрафиковОтпусков.КорневойСборГрафиков = НЕОПРЕДЕЛЕНО
		|			ИЛИ ДокументСборГрафиковОтпусков.КорневойСборГрафиков ЕСТЬ NULL)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;

КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли