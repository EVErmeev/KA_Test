#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьМесяца(Ссылка, ПериодВзаиморасчетов, "ПериодВзаиморасчетовСтрокой", Отказ, НСтр("ru='Период зарплаты'"), , , Ложь);
	
	Отказ = Отказ ИЛИ НЕ МожноЗаполнитьКомпенсации();
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Организация");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПериодРегистрации");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПериодВзаиморасчетов");
	
	КомпенсацииСотрудников = Начисления.Выгрузить(, "Сотрудник, СуммаКомпенсации");
	КомпенсацииСотрудников.Свернуть("Сотрудник", "СуммаКомпенсации");
	Для Каждого КомпенсацияСотрудника Из КомпенсацииСотрудников Цикл
		Если КомпенсацияСотрудника.СуммаКомпенсации < 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Общая сумма компенсации сотруднику не может быть отрицательной'"),
				ЭтотОбъект, 
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Состав", 
					Состав.Найти(КомпенсацияСотрудника.Сотрудник, "Сотрудник").НомерСтроки, 
					"Сотрудник"),,
				Отказ)			
		КонецЕсли;	
	КонецЦикла;	
	
	ЗарплатаКадры.ПроверитьДатуВыплаты(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки.
	СуммаПоДокументу = Начисления.Итог("СуммаКомпенсации");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗаполнитьДвиженияПоУчетам(Движения, Отказ);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МожноЗаполнитьКомпенсации() Экспорт
	
	ПравилаПроверки = Новый Структура;
	
	ПравилаПроверки.Вставить("Организация",			НСтр("ru='Не выбрана организация'"));
	ПравилаПроверки.Вставить("ПериодРегистрации",	НСтр("ru='Не указан месяц начисления'"));
	ПравилаПроверки.Вставить("ПериодВзаиморасчетов",НСтр("ru='Не указан месяц, за который задержана зарплата'"));
	
	МожноЗаполнитьКомпенсации = 
		ЗарплатаКадры.СвойстваЗаполнены(ЭтотОбъект, ПравилаПроверки);
		
		Если ЗначениеЗаполнено(ПериодВзаиморасчетов) И ЗначениеЗаполнено(ПериодРегистрации) 
			И ПериодВзаиморасчетов > ПериодРегистрации Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Компенсация не может рассчитываться за будущие периоды'"), ,
				"ПериодВзаиморасчетов", "Объект"); 
			МожноЗаполнитьКомпенсации = Ложь;	
		КонецЕсли;
		
	Возврат МожноЗаполнитьКомпенсации 
	
КонецФункции

Процедура ЗаполнитьКомпенсации() Экспорт
	
	Сотрудники = СотрудникиПоШапкеДокумента();
	НевыплаченнаяЗарплата = НевыплаченнаяЗарплата(Сотрудники);
	КомпенсацияЗаЗадержку = КомпенсацияЗаЗадержкуЗарплаты(НевыплаченнаяЗарплата);
	ЗаполнитьКомпенсацией(КомпенсацияЗаЗадержку);
	
КонецПроцедуры	

Процедура ДополнитьКомпенсации(Сотрудники) Экспорт
	
	НевыплаченнаяЗарплата = НевыплаченнаяЗарплата(Сотрудники);
	
	КомпенсацияЗаЗадержку = КомпенсацияЗаЗадержкуЗарплаты(НевыплаченнаяЗарплата);
	
	// Дополняем компенсацию теми сотрудниками, для которых не удалось рассчитать компенсацию.
	
	КомпенсацияЗаЗадержку.Индексы.Добавить("Сотрудник");
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, "Подразделение, СтатьяФинансирования", ПланируемаяДатаВыплаты);
	КадровыеДанные.Индексы.Добавить("Сотрудник");
	
	ДеньВыплаты = НачалоДня(ПланируемаяДатаВыплаты);
	
	ПериодыИзмененияСтавки = ПериодыИзмененияСтавки(ДеньВыплаты, ДеньВыплаты);
	Если ПериодыИзмененияСтавки.Количество() > 0 Тогда
		Ставка = ПериодыИзмененияСтавки[0].Ставка;
	Иначе
		Ставка = 0;
	КонецЕсли;	
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		КомпенсацияСотрудника = КомпенсацияЗаЗадержку.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		Если КомпенсацияСотрудника.Количество() = 0 Тогда
			СтрокаКомпенсации = КомпенсацияЗаЗадержку.Добавить();
			СтрокаКомпенсации.Сотрудник = Сотрудник;
			СтрокаКомпенсации.ПериодВзаиморасчетов = ПериодВзаиморасчетов;
			
			КадровыеДанныеСотрудника = КадровыеДанные.Найти(Сотрудник, "Сотрудник");
			СтрокаКомпенсации.Подразделение        = КадровыеДанныеСотрудника.Подразделение;
			СтрокаКомпенсации.СтатьяФинансирования = КадровыеДанныеСотрудника.СтатьяФинансирования;
			
			СтрокаКомпенсации.СтатьяРасходов = ОтражениеЗарплатыВБухучетеРасширенный.СтатьяРасходов211();
			СтрокаКомпенсации.СуммаКВыплате  = 0;
			
			СтрокаКомпенсации.ДатаС  = ДеньВыплаты;
			СтрокаКомпенсации.ДатаПо = ДеньВыплаты;
			СтрокаКомпенсации.Ставка = Ставка;
		КонецЕсли;	
	КонецЦикла;
	
	ДополнитьКомпенсацией(КомпенсацияЗаЗадержку);
	
КонецПроцедуры

Процедура ЗаполнитьКомпенсацией(КомпенсацияЗаЗадержкуЗарплаты)
	
	// Убираем отрицательные компенсации по сотруднику в целом
	КомпенсацииСотрудников = КомпенсацияЗаЗадержкуЗарплаты.Скопировать(, "Сотрудник, СуммаКомпенсации");
	КомпенсацииСотрудников.Свернуть("Сотрудник", "СуммаКомпенсации");
	УдаляемыеСтроки = Новый Массив;
	Для Каждого КомпенсацияСотрудника Из КомпенсацииСотрудников Цикл
		Если КомпенсацияСотрудника.СуммаКомпенсации < 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				УдаляемыеСтроки, 
				КомпенсацияЗаЗадержкуЗарплаты.НайтиСтроки(Новый Структура("Сотрудник", КомпенсацияСотрудника.Сотрудник))); 
		КонецЕсли;	
	КонецЦикла;	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		КомпенсацияЗаЗадержкуЗарплаты.Удалить(УдаляемаяСтрока)
	КонецЦикла;	
	
	// Помещаем компенсации в начисления
	Начисления.Загрузить(КомпенсацияЗаЗадержкуЗарплаты);
	
	// Заполняем ТЧ Состав
	Сотрудники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КомпенсацияЗаЗадержкуЗарплаты.ВыгрузитьКолонку("Сотрудник"));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем кадровые данные сотрудников с полями для сортировки 	
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, Истина, 
		Сотрудники, 
		КадровыеДанные, 
		КонецМесяца(ПериодВзаиморасчетов));	
	
	// Формируем упорядоченный список сотрудников
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК Сотрудники";
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "Сотрудники");
	
	Состав.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

Процедура ДополнитьКомпенсацией(КомпенсацияЗаЗадержкуЗарплаты)
	
	// Помещаем компенсации в начисления
	Для Каждого СтрокаКомпенсации Из КомпенсацияЗаЗадержкуЗарплаты Цикл
		СтрокаТЧ = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаКомпенсации);
	КонецЦикла;
	
	// Дополняем ТЧ Состав
	Сотрудники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КомпенсацияЗаЗадержкуЗарплаты.ВыгрузитьКолонку("Сотрудник"));
	Для Каждого Сотрудник Из Сотрудники Цикл
		СтрокаТЧ = Состав.Добавить();
		СтрокаТЧ.Сотрудник = Сотрудник;
	КонецЦикла;
	
КонецПроцедуры	

Функция СотрудникиПоШапкеДокумента()
	
	// Получаем всех работавших в организации в месяце периода задержанной зарплаты.
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		=  НачалоМесяца(ПериодВзаиморасчетов);
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода	=  КонецМесяца(ПериодВзаиморасчетов);
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоТрудовымДоговорам = Истина;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ = Неопределено;

	КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудниковОрганизаций);
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
		
	Возврат СотрудникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции	

Функция НевыплаченнаяЗарплата(Сотрудники)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",		ПериодВзаиморасчетов);
	Запрос.УстановитьПараметр("Сотрудники",					Сотрудники);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК СуммаКВыплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплате.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				,
	|				ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|					И Организация = &Организация
	|					И Сотрудник В (&Сотрудники)) КАК ЗарплатаКВыплате
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|		И ЗарплатаКВыплате.Организация = &Организация
	|		И ЗарплатаКВыплате.Сотрудник В(&Сотрудники)) КАК ЗарплатаКВыплате
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) <> 0";
	
	НевыплаченнаяЗарплата = Запрос.Выполнить().Выгрузить();
	
	Возврат НевыплаченнаяЗарплата;
	
КонецФункции

Функция КомпенсацияЗаЗадержкуЗарплаты(Зарплата)
	
	ДлинаСуток = 86400;
	
	ДеньВыплаты = НачалоДня(ПланируемаяДатаВыплаты);
	
	КомпенсацияЗаЗадержкуЗарплаты = Начисления.ВыгрузитьКолонки();

	Настройки = РасчетЗарплатыРасширенныйВызовСервера.СведенияОНастройкахЗарплатаКадрыРасширенная(Организация);
			
	ПериодыВзаиморасчетов = Зарплата.ВыгрузитьКолонку("ПериодВзаиморасчетов");
	ПериодыВзаиморасчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПериодыВзаиморасчетов);
	ПервыйДеньЗадержки = ДеньВыплаты;
	Для Каждого Месяц Из ПериодыВзаиморасчетов Цикл
		ПервыйДеньЗадержки = 
			Мин(
				ПервыйДеньЗадержки, 
				РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплатыПоНастройкам(Месяц, Настройки) + ДлинаСуток); 
	КонецЦикла;	
	
	ПериодыИзмененияСтавки = ПериодыИзмененияСтавки(ПервыйДеньЗадержки, ДеньВыплаты);
	
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		
		ПервыйДеньЗадержки = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплатыПоНастройкам(СтрокаЗарплаты.ПериодВзаиморасчетов, Настройки) + ДлинаСуток; 
		
		Если ПервыйДеньЗадержки <= ДеньВыплаты Тогда 
			ДатаС = ПервыйДеньЗадержки;
			Для Каждого ПериодИзмененияСтавки Из ПериодыИзмененияСтавки Цикл
				Если ДатаС >= ПериодИзмененияСтавки.ДатаС И ДатаС <= ПериодИзмененияСтавки.ДатаПо Тогда
					
					ДатаС = Макс(ДатаС, ПериодИзмененияСтавки.ДатаС);
					ДатаПо= Мин(ДеньВыплаты, ПериодИзмененияСтавки.ДатаПо);
					
					СтрокаКомпенсации = КомпенсацияЗаЗадержкуЗарплаты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКомпенсации, СтрокаЗарплаты);
					СтрокаКомпенсации.ДатаС = ДатаС;
					СтрокаКомпенсации.ДатаПо= ДатаПо;
					СтрокаКомпенсации.Ставка= ПериодИзмененияСтавки.Ставка;
					
					СтрокаКомпенсации.СуммаКомпенсации = СтрокаКомпенсации.СуммаКомпенсации
						+ СтрокаЗарплаты.СуммаКВыплате * ((ДатаПо - ДатаС) / ДлинаСуток + 1) * ПериодИзмененияСтавки.Ставка / 100;
						
					ДатаС = ДатаПо + ДлинаСуток;	
					
				Иначе
					Продолжить
				КонецЕсли	
			КонецЦикла;	
		КонецЕсли	
		
	КонецЦикла;
	
	КолонкиГруппировок = 
		"Сотрудник,
		|Подразделение,
		|ПериодВзаиморасчетов,
		|СтатьяФинансирования,
		|СтатьяРасходов,
		|ДокументОснование,
		|ДатаС,
		|ДатаПо,
		|Ставка";
	КолонкиСуммирования = 
		"СуммаКВыплате,
		|СуммаКомпенсации";
	КомпенсацияЗаЗадержкуЗарплаты.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	Возврат КомпенсацияЗаЗадержкуЗарплаты
	
КонецФункции

Функция ПериодыИзмененияСтавки(ПервыйДеньЗадержки, ДеньВыплаты)
	
	// Сначала определяем ставки по правилам предприятия
	ПериодыИзмененияСтавки = ПериодыИзмененияСтавкиЛокальные(ПервыйДеньЗадержки, ДеньВыплаты);	
	Если ПериодыИзмененияСтавки.Количество() > 0 Тогда
		Возврат ПериодыИзмененияСтавки;
	КонецЕсли;	 
	
	// Затем берем ставки по правилам ст. 136 ТК
	ПериодыИзмененияСтавки = ПериодыИзмененияСтавкиОбщие(ПервыйДеньЗадержки, ДеньВыплаты);	
	Если ПериодыИзмененияСтавки.Количество() > 0 Тогда
		Возврат ПериодыИзмененияСтавки;
	КонецЕсли;	 
	
	Возврат НовыеПериодыИзмененияСтавки();
	
КонецФункции

Функция НовыеПериодыИзмененияСтавки()
	
	ПериодыИзмененияСтавки = Новый ТаблицаЗначений;
	ПериодыИзмененияСтавки.Колонки.Добавить("ДатаС",	Метаданные().ТабличныеЧасти.Начисления.Реквизиты.ДатаС.Тип);
	ПериодыИзмененияСтавки.Колонки.Добавить("ДатаПо",	Метаданные().ТабличныеЧасти.Начисления.Реквизиты.ДатаПо.Тип);
	ПериодыИзмененияСтавки.Колонки.Добавить("Ставка",	Метаданные().ТабличныеЧасти.Начисления.Реквизиты.Ставка.Тип);
	
	Возврат ПериодыИзмененияСтавки;
	
КонецФункции

Функция ПериодыИзмененияСтавкиЛокальные(ПервыйДеньЗадержки, ДеньВыплаты)
	
	ПериодыИзмененияСтавки = НовыеПериодыИзмененияСтавки();
	
	РезультатЗапроса = 
		ЗапросПериодовИзмененияСтавки(
			Метаданные.РегистрыСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты.ПолноеИмя(),
			Метаданные.РегистрыСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты.Ресурсы.Ставка.Имя,
			ПервыйДеньЗадержки, ДеньВыплаты);
			
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Выгрузить(), ПериодыИзмененияСтавки);
	КонецЕсли;
	
	Возврат ПериодыИзмененияСтавки;
	
КонецФункции

Функция ПериодыИзмененияСтавкиОбщие(ПервыйДеньЗадержки, ДеньВыплаты)
	
	ДлинаСуток = 86400;
	
	Дата272ФЗ = '20161003';
	ДоляСтавкиЦБДо272ФЗ = 300;
	ДоляСтавкиЦБПо272ФЗ = 150;
	
	ПериодыИзмененияСтавки = НовыеПериодыИзмененияСтавки();

	РезультатЗапроса = 
		ЗапросПериодовИзмененияСтавки(
			Метаданные.РегистрыСведений.СтавкаРефинансированияЦБ.ПолноеИмя(),
			Метаданные.РегистрыСведений.СтавкаРефинансированияЦБ.Ресурсы.Размер.Имя,
			ПервыйДеньЗадержки, ДеньВыплаты);
			
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Выгрузить(), ПериодыИзмененияСтавки);
		
		// При переходе через дату вступления в силу 272-ФЗ, добавляем соответствующую строку.
		Если ПериодыИзмененияСтавки[0].ДатаС < Дата272ФЗ И ПериодыИзмененияСтавки[ПериодыИзмененияСтавки.Количество()-1].ДатаПо >= Дата272ФЗ Тогда
			
			// ищем строку перед вступлением в силу 272-ФЗ
			Индекс = 0;
			Пока Индекс < ПериодыИзмененияСтавки.Количество() И ПериодыИзмененияСтавки[Индекс].ДатаС < Дата272ФЗ Цикл
				Индекс = Индекс + 1
			КонецЦикла;
			ПериодИзмененияСтавкиДо272ФЗ = ПериодыИзмененияСтавки[Индекс-1];
			
			// добавляем строку с дня вступления в силу 272-ФЗ
			ПериодИзмененияСтавкиПо272ФЗ = ПериодыИзмененияСтавки.Вставить(Индекс);
			ПериодИзмененияСтавкиПо272ФЗ.ДатаС = Дата272ФЗ;
			ПериодИзмененияСтавкиПо272ФЗ.ДатаПо = ПериодИзмененияСтавкиДо272ФЗ.ДатаПо;
			ПериодИзмененияСтавкиПо272ФЗ.Ставка = ПериодИзмененияСтавкиДо272ФЗ.Ставка;
			
			// строку перед вступлением в силу 272-ФЗ завершаем датой вступления
			ПериодИзмененияСтавкиДо272ФЗ.ДатаПо = ПериодИзмененияСтавкиПо272ФЗ.ДатаС - ДлинаСуток;
			
		КонецЕсли;
		
		Для Каждого ПериодИзмененияСтавки Из ПериодыИзмененияСтавки Цикл
			ДоляСтавкиЦБ = ?(ПериодИзмененияСтавки.ДатаС >= Дата272ФЗ, ДоляСтавкиЦБПо272ФЗ, ДоляСтавкиЦБДо272ФЗ);  
			ПериодИзмененияСтавки.Ставка = ПериодИзмененияСтавки.Ставка / ДоляСтавкиЦБ;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ПериодыИзмененияСтавки;
	
КонецФункции

Функция ЗапросПериодовИзмененияСтавки(ИсточникДанных, Ресурс, ПервыйДеньЗадержки, ДеньВыплаты)
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА СтавкаКомпенсации.Период >= &ПервыйДеньЗадержки
	|				ТОГДА СтавкаКомпенсации.Период
	|			ИНАЧЕ &ПервыйДеньЗадержки
	|		КОНЕЦ, ДЕНЬ) КАК ДатаС,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВЫБОР
	|				КОГДА МИНИМУМ(СледующаяДата.Период) > &ДеньВыплаты
	|					ТОГДА &ДеньВыплаты
	|				ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(СледующаяДата.Период, ДЕНЬ, -1))
	|			КОНЕЦ, &ДеньВыплаты), ДЕНЬ) КАК ДатаПо,
	|	СтавкаКомпенсации.Ресурс КАК Ставка
	|ИЗ
	|	#ИсточникДанных КАК СтавкаКомпенсации
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникДанных КАК СледующаяДата
	|		ПО СтавкаКомпенсации.Период < СледующаяДата.Период
	|ГДЕ
	|	СтавкаКомпенсации.Период <= &ДеньВыплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	СтавкаКомпенсации.Ресурс,
	|	СтавкаКомпенсации.Период
	|
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА МИНИМУМ(СледующаяДата.Период) > &ДеньВыплаты
	|				ТОГДА &ДеньВыплаты
	|			ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(СледующаяДата.Период, ДЕНЬ, -1))
	|		КОНЕЦ, &ДеньВыплаты) >= &ПервыйДеньЗадержки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаС";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПервыйДеньЗадержки",	ПервыйДеньЗадержки);
	Запрос.УстановитьПараметр("ДеньВыплаты",		ДеньВыплаты);
	
	Запрос.Текст = ШаблонТекстаЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ИсточникДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СтавкаКомпенсации.Ресурс", "СтавкаКомпенсации." +	Ресурс);
	
	Возврат Запрос.Выполнить();
	
КонецФункции	

Процедура ЗаполнитьДвиженияПоУчетам(ЗаполняемыеДвижения, Отказ, СтруктураВидовУчета = Неопределено) Экспорт
	
	НачисленияКомпенсации = НачисленияКомпенсации();
	
	Если СтруктураВидовУчета = Неопределено Или СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		// Заполним описание данных для проведения в учете начисленной зарплаты.
		ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
		ДанныеДляПроведенияУчетЗарплаты.Движения 				= ЗаполняемыеДвижения;
		ДанныеДляПроведенияУчетЗарплаты.Организация 			= Организация;
		ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= ПериодРегистрации;
		ДанныеДляПроведенияУчетЗарплаты.ПланируемаяДатаВыплаты	= ПланируемаяДатаВыплаты;
		ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= ПорядокВыплаты;
		
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисления(ДанныеДляПроведенияУчетЗарплаты, Отказ, НачисленияКомпенсации, Неопределено);
		
		НДФЛПоСотрудникам = Неопределено;
		
		Если РегистрироватьКакОблагаемыйНДФЛДоход Тогда
			ДанныеДляПроведения = ДанныеДляПроведения(НачисленияКомпенсации);
			НДФЛПоСотрудникам = ДанныеДляПроведения.НДФЛПоСотрудникам;
			ДатаОперацииПоНалогам = УчетНДФЛ.ДатаОперацииПоДокументу(ПланируемаяДатаВыплаты, НачалоМесяца(ПериодРегистрации));
			УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.ДанныеДляНДФЛ, Ложь, Ложь, Ссылка);
			УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ, Ложь, Ложь, ПланируемаяДатаВыплаты);
			УчетНДФЛ.СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокументаПоВременнойТаблице(Движения, Отказ, Организация, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ссылка);
			
			// Учет исчисленного налога в "зарплате".
			УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(НДФЛПоСотрудникам, Организация, ДатаОперацииПоНалогам);
			УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(ДанныеДляПроведенияУчетЗарплаты, Отказ, НДФЛПоСотрудникам, Ложь);
		КонецЕсли;
			
		ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
				НачисленияКомпенсации, Неопределено, НДФЛПоСотрудникам);
				
		Если РегистрироватьДоходыСтраховыхВзносов Тогда
			ЗарегистрироватьДоходыСтраховыхВзносов(ЗаполняемыеДвижения, НачисленияКомпенсации, Отказ);
		КонецЕсли;	
		
		ДополнениеРасчетнойБазыУдержаний = НачисленияКомпенсации.Скопировать();
		ДополнениеРасчетнойБазыУдержаний.Свернуть("ФизическоеЛицо,Сотрудник,Начисление", "Сумма");
		ДополнениеРасчетнойБазыУдержаний.Колонки.Добавить("ГоловнаяОрганизация");
		ДополнениеРасчетнойБазыУдержаний.Колонки.Добавить("Организация");
		ДополнениеРасчетнойБазыУдержаний.Колонки.Добавить("Период");
		ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		ДополнениеРасчетнойБазыУдержаний.ЗаполнитьЗначения(ГоловнаяОрганизация, "ГоловнаяОрганизация");
		ДополнениеРасчетнойБазыУдержаний.ЗаполнитьЗначения(Организация, "Организация");
		ДополнениеРасчетнойБазыУдержаний.ЗаполнитьЗначения(ПериодРегистрации, "Период");
		РасчетЗарплатыРасширенный.СформироватьДополнениеРасчетнойБазыУдержаний(ЗаполняемыеДвижения, ДополнениеРасчетнойБазыУдержаний);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета = Неопределено Или СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		
		Если РегистрироватьДоходыСтраховыхВзносов Тогда
			ЗарегистрироватьДанныеСреднегоЗаработкаФСС(ЗаполняемыеДвижения, НачисленияКомпенсации, Отказ);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция НачисленияКомпенсации()
	
	Колонки = "Сотрудник, Подразделение, СтатьяФинансирования, СтатьяРасходов";
	НачисленияКомпенсации = Начисления.Выгрузить(, Колонки + ", СуммаКомпенсации");
	НачисленияКомпенсации.Колонки["СуммаКомпенсации"].Имя = "Сумма";
	
	// Если указано, то финансирование берем из шапки
	Если ЗначениеЗаполнено(СтатьяФинансирования) Тогда
		НачисленияКомпенсации.ЗаполнитьЗначения(СтатьяФинансирования, "СтатьяФинансирования");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
			НачисленияКомпенсации.ЗаполнитьЗначения(СтатьяРасходов, "СтатьяРасходов");
		КонецЕсли;
	Иначе
		СтатьиРасходовПоСпособамРасчетов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		Если Не ЗначениеЗаполнено(СпособРасчетовСФизическимиЛицами) Тогда
			СтатьяРасходовПоСпособуРасчетов = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
		Иначе
			СтатьяРасходовПоСпособуРасчетов = СтатьиРасходовПоСпособамРасчетов[СпособРасчетовСФизическимиЛицами];
		КонецЕсли;
		НачисленияКомпенсации.ЗаполнитьЗначения(СтатьяРасходовПоСпособуРасчетов, "СтатьяРасходов");
	КонецЕсли;
	
	// Убираем избыточную детализацию
	НачисленияКомпенсации.Свернуть(Колонки, "Сумма");
	
	// Добавляем колонку ФизическоеЛицо
	НачисленияКомпенсации.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФизлицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НачисленияКомпенсации.ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
	Для Каждого Строка Из НачисленияКомпенсации Цикл
		Строка.ФизическоеЛицо = ФизлицаСотрудников[Строка.Сотрудник]
	КонецЦикла;	
	
	// Указываем специальное начисление
	НачисленияКомпенсации.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	НачисленияКомпенсации.ЗаполнитьЗначения(Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты, "Начисление");
	
	// Период действия
	НачисленияКомпенсации.Колонки.Добавить("ДатаНачала",    Новый ОписаниеТипов("Дата"));
	НачисленияКомпенсации.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	НачисленияКомпенсации.ЗаполнитьЗначения(НачалоМесяца(ПериодРегистрации), "ДатаНачала");
	НачисленияКомпенсации.ЗаполнитьЗначения(КонецМесяца(ПериодРегистрации),  "ДатаОкончания");
	
	// Отражение в учете
	НачисленияКомпенсации.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	НачисленияКомпенсации.ЗаполнитьЗначения(Неопределено, "СпособОтраженияЗарплатыВБухучете");
	НачисленияКомпенсации.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	НачисленияКомпенсации.ЗаполнитьЗначения(ОтражениеЗарплатыВБухучете.ПлательщикЕНВД(Организация, ПериодРегистрации), "ОблагаетсяЕНВД");
	
	Возврат НачисленияКомпенсации;
	
КонецФункции

Процедура ЗарегистрироватьДанныеСреднегоЗаработкаФСС(ЗаполняемыеДвижения, НачисленияКомпенсации, Отказ)
	
	// организация
	НачисленияКомпенсации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	НачисленияКомпенсации.ЗаполнитьЗначения(Организация, "Организация");

	// дата отражения дохода в учете страховых взносов.
	НачисленияКомпенсации.Колонки.Добавить("ДатаДохода", Новый ОписаниеТипов("Дата"));
	НачисленияКомпенсации.ЗаполнитьЗначения(НачалоМесяца(ПериодРегистрации), "ДатаДохода");
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗарегистрироватьДанныеСреднегоЗаработкаФССРазовыхВыплат(
			ЗаполняемыеДвижения, Отказ, НачисленияКомпенсации);						
			
	// восстанавливаем исходную таблицу.		
	НачисленияКомпенсации.Колонки.Удалить("Организация");
	НачисленияКомпенсации.Колонки.Удалить("ДатаДохода");
	
КонецПроцедуры

Процедура ЗарегистрироватьДоходыСтраховыхВзносов(ЗаполняемыеДвижения, НачисленияКомпенсации, Отказ)
	
	// территорию выполнения работ получаем из кадровых данных 
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, НачисленияКомпенсации.ВыгрузитьКолонку("Сотрудник"), "ТерриторияВыполненияРаботВОрганизации", КонецМесяца(ПериодРегистрации));
	НачисленияКомпенсации.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
	Для Каждого Строка Из НачисленияКомпенсации Цикл
		Строка.ТерриторияВыполненияРаботВОрганизации = КадровыеДанныеСотрудников.Найти(Строка.Сотрудник, "Сотрудник").ТерриторияВыполненияРаботВОрганизации;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачисленияКомпенсации", НачисленияКомпенсации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияКомпенсации.Сотрудник КАК Сотрудник,
	|	НачисленияКомпенсации.Подразделение КАК Подразделение,
	|	НачисленияКомпенсации.Подразделение КАК ПодразделениеОрганизации,
	|	НачисленияКомпенсации.Начисление КАК Начисление,
	|	НачисленияКомпенсации.ДатаНачала КАК ДатаНачала,
	|	НачисленияКомпенсации.ДатаОкончания КАК ДатаОкончания,
	|	ЛОЖЬ КАК Сторно,
	|	ЗНАЧЕНИЕ(Документ.КомпенсацияЗаЗадержкуЗарплаты.ПустаяСсылка) КАК СторнируемыйДокумент,
	|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
	|	НачисленияКомпенсации.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияКомпенсации.Сумма КАК СуммаДохода,
	|	0 КАК СуммаВычетаВзносы
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&НачисленияКомпенсации КАК НачисленияКомпенсации";
	Запрос.Выполнить();
	
	ОтражениеЗарплатыВБухучете.СоздатьВТНачисленияСДаннымиЕНВДПоЕжемесячнойДоле(Организация, ПериодРегистрации, Запрос.МенеджерВременныхТаблиц);
	// Записываем ради регистрации данных для среднего ФСС - 
	// там требуется наличие движений регистратора по доходам страховых взносов.
	УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(ЗаполняемыеДвижения, Отказ, Организация, ПериодРегистрации, Запрос.МенеджерВременныхТаблиц, , Истина, Ссылка);
	
	// восстанавливаем исходную таблицу		
	НачисленияКомпенсации.Колонки.Удалить("ТерриторияВыполненияРаботВОрганизации");
	
КонецПроцедуры

Функция ДанныеДляПроведения(НачисленияКомпенсации) 
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	ДанныеДокумента = ДанныеДокументаСРаспределениемПоСтатьям(НачисленияКомпенсации);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВидыДоходаИсполнительногоПроизводства = УчетНачисленнойЗарплаты.ВидыДоходовИсполнительногоПроизводстваНачислений(ПланируемаяДатаВыплаты);
	ВидыДохода = ВидыДоходаИсполнительногоПроизводства[Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты];
	КодДоходаНДФЛ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДоходовНДФЛ.Код4800");
	СтавкаНалогообложенияРезидента = КодДоходаНДФЛ.СтавкаНалогообложенияРезидента;
	
	УчетНДФЛ.СоздатьВТДанныеНДФЛПоДокументу(Запрос.МенеджерВременныхТаблиц, Ссылка);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидДоходаИсполнительногоПроизводства", ВидыДохода);
	Запрос.УстановитьПараметр("КодДоходаНДФЛ", КодДоходаНДФЛ);
	Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента", СтавкаНалогообложенияРезидента);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", ПланируемаяДатаВыплаты);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Дата,
	|	&ПланируемаяДатаВыплаты КАК ДатаДействия,
	|	НАЧАЛОПЕРИОДА(&ПланируемаяДатаВыплаты, МЕСЯЦ) КАК ПериодДействия,
	|	&Организация КАК Организация,
	|	КомпенсацияЗаЗадержкуЗарплаты.Сотрудник КАК Сотрудник,
	|	КомпенсацияЗаЗадержкуЗарплаты.Подразделение КАК Подразделение,
	|	КомпенсацияЗаЗадержкуЗарплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	НАЧАЛОПЕРИОДА(&ПланируемаяДатаВыплаты, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(&ПланируемаяДатаВыплаты, МЕСЯЦ) КАК ПериодРегистрации,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты) КАК Начисление,
	|	&ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	КомпенсацияЗаЗадержкуЗарплаты.Сумма КАК Сумма,
	|	&КодДоходаНДФЛ КАК КодДохода,
	|	&СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	КомпенсацияЗаЗадержкуЗарплаты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	КомпенсацияЗаЗадержкуЗарплаты.СтатьяРасходов КАК СтатьяРасходов,
	|	&ПериодРегистрации КАК ПериодРегистрацииДокумента,
	|	КомпенсацияЗаЗадержкуЗарплаты.НДФЛ КАК НДФЛ,
	|	КомпенсацияЗаЗадержкуЗарплаты.НДФЛСПревышения КАК НДФЛСПревышения
	|ПОМЕСТИТЬ ВТДанныеДокументаПредварительно
	|ИЗ
	|	&ДанныеДокумента КАК КомпенсацияЗаЗадержкуЗарплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТДанныеДокументаПредварительно КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.КодДохода КАК КодДохода,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеДоходы) КАК КатегорияДохода,
	|	ДанныеДокумента.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ДанныеДокумента.ПланируемаяДатаВыплаты КАК Период
	|ПОМЕСТИТЬ ВТДоходыФизическихЛиц
	|ИЗ
	|	ВТДанныеДокументаПредварительно КАК ДанныеДокумента";
	
	Запрос.Выполнить();
	
	// Территория Сотрудников
	Запрос.УстановитьПараметр("ИспользоватьРаспределениеПоТерриториямУсловиямТруда", ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация));
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументаПредварительно", "Сотрудник,ДатаДействия");
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТТерриторииСотрудников";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "Территория");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.ДатаДействия КАК ДатаДействия,
	|	ДанныеДокумента.ПериодДействия КАК ПериодДействия,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Подразделение КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРаспределениеПоТерриториямУсловиямТруда = ЛОЖЬ
	|			ТОГДА ДанныеДокумента.Подразделение
	|		КОГДА ТерриторииСотрудников.Территория ЕСТЬ NULL
	|				ИЛИ ТерриторииСотрудников.Территория = НЕОПРЕДЕЛЕНО
	|				ИЛИ ТерриторииСотрудников.Территория = ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Подразделение
	|		ИНАЧЕ ТерриторииСотрудников.Территория
	|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
	|	ДанныеДокумента.Подразделение КАК ПодразделениеСотрудника,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	ДанныеДокумента.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ДанныеДокумента.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеДокумента.Начисление КАК Начисление,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.КодДохода КАК КодДохода,
	|	ДанныеДокумента.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ДанныеДокумента.НДФЛ КАК НДФЛ,
	|	ДанныеДокумента.НДФЛСПревышения КАК НДФЛСПревышения,
	|	ДанныеДокумента.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеДокумента.ПериодРегистрацииДокумента КАК ПериодРегистрацииДокумента,
	|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
	|	НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.ПериодРегистрации, МЕСЯЦ) КАК ДатаОкончания,
	|	ЛОЖЬ КАК ОблагаетсяЕНВД
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	ВТДанныеДокументаПредварительно КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСотрудников КАК ТерриторииСотрудников
	|		ПО ДанныеДокумента.Сотрудник = ТерриторииСотрудников.Сотрудник
	|			И ДанныеДокумента.ДатаДействия = ТерриторииСотрудников.Период";
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТСтавкаНДФЛПоСтавкеРезидента(Запрос.МенеджерВременныхТаблиц,"ВТДоходыФизическихЛиц");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументаСПревышения.Организация КАК Организация,
		|	ДанныеДокументаСПревышения.Сотрудник КАК Сотрудник,
		|	ДанныеДокументаСПревышения.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокументаСПревышения.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	ДанныеДокументаСПревышения.Подразделение КАК Подразделение,
		|	ДанныеДокументаСПревышения.НДФЛСПревышения КАК НДФЛСПревышения,
		|	ДанныеДокументаСПревышения.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
		|	ДанныеДокументаСПревышения.Ссылка КАК Ссылка,
		|	ДанныеДокументаСПревышения.КодДохода КАК КодДохода,
		|	ДанныеДокументаСПревышения.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	ДанныеДокументаСПревышения.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДанныеДокументаСПревышения.СтатьяРасходов КАК СтатьяРасходов
		|ПОМЕСТИТЬ ВТДанныеДокументаСПревышения
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокументаСПревышения
		|ГДЕ
		|	ДанныеДокументаСПревышения.НДФЛСПревышения <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Сотрудник КАК Сотрудник,
		|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокумента.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ДанныеДокумента.НДФЛ КАК НДФЛ,
		|	ДанныеДокумента.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.КодДохода КАК КодДохода,
		|	ДанныеДокумента.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	ДанныеДокумента.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов
		|ПОМЕСТИТЬ ВТДанныеДокументаБезПревышения
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.НДФЛ <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|			ТОГДА ДанныеДокумента.НДФЛ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НалогПоСтавке13,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|			ТОГДА ДанныеДокумента.НДФЛСПревышения
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НалогСПревышенияПоСтавке13,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
		|			ТОГДА ДанныеДокумента.НДФЛ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НалогПоСтавке09,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
		|			ТОГДА ДанныеДокумента.НДФЛ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НалогПоСтавке35,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетЛичный, 0) КАК ПримененныйВычетЛичный,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета, 0) КАК ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату, 0) КАК ПримененныйВычетЛичныйКЗачетуВозврату,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетИмущественныйРасходы, 0) КАК ПримененныйВычетИмущественныйРасходы,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам, 0) КАК ПримененныйВычетИмущественныйПроцентыПоКредитам,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании, 0) КАК ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетРасходыНаСвоеОбучение, 0) КАК ПримененныйВычетРасходыНаСвоеОбучение,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетРасходыНаОбучениеДетей, 0) КАК ПримененныйВычетРасходыНаОбучениеДетей,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетРасходыНаЛечение, 0) КАК ПримененныйВычетРасходыНаЛечение,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетСтраховыеВзносыНаМедУслуги, 0) КАК ПримененныйВычетСтраховыеВзносыНаМедУслуги,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетРасходыНаДорогостоящееЛечение, 0) КАК ПримененныйВычетРасходыНаДорогостоящееЛечение,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни, 0) КАК ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетРасходыНаЛекарства, 0) КАК ПримененныйВычетРасходыНаЛекарства,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетРасходыНаФизкультуруИСпорт, 0) КАК ПримененныйВычетРасходыНаФизкультуруИСпорт,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетей, 0) КАК ПримененныйВычетНаДетей,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейДвойной, 0) КАК ПримененныйВычетНаДетейДвойной,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейДвойнойВторой, 0) КАК ПримененныйВычетНаДетейДвойнойВторой,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаВторогоРебенка, 0) КАК ПримененныйВычетНаВторогоРебенка,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойной, 0) КАК ПримененныйВычетНаВторогоРебенкаДвойной,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторой, 0) КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаТретьегоРебенка, 0) КАК ПримененныйВычетНаТретьегоРебенка,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойной, 0) КАК ПримененныйВычетНаТретьегоРебенкаДвойной,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой, 0) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейИнвалидов, 0) КАК ПримененныйВычетНаДетейИнвалидов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной, 0) КАК ПримененныйВычетНаДетейИнвалидовДвойной,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой, 0) КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейОпекунов, 0) КАК ПримененныйВычетНаДетейОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейДвойнойОпекунов, 0) КАК ПримененныйВычетНаДетейДвойнойОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейДвойнойВторойОпекунов, 0) КАК ПримененныйВычетНаДетейДвойнойВторойОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаВторогоРебенкаОпекунов, 0) КАК ПримененныйВычетНаВторогоРебенкаОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов, 0) КАК ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов, 0) КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаТретьегоРебенкаОпекунов, 0) КАК ПримененныйВычетНаТретьегоРебенкаОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов, 0) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов, 0) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейИнвалидовОпекунов, 0) КАК ПримененныйВычетНаДетейИнвалидовОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов, 0) КАК ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов, 0) КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.МесяцПериодаПредоставленияВычета, 0) КАК МесяцПериодаПредоставленияВычета,
		|	ВТДанныеНДФЛ.ПримененныйВычетЛичныйКодВычета КАК ПримененныйВычетЛичныйКодВычета,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.ФизическоеЛицо, ДанныеДокумента.ФизическоеЛицо) КАК ФизическоеЛицо,
		|	ВТДанныеНДФЛ.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВТДанныеНДФЛ.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВТДанныеНДФЛ.МесяцНалоговогоПериода, ДанныеДокумента.ПланируемаяДатаВыплаты) КАК МесяцНалоговогоПериода,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ТерриторияВыполненияРаботВОрганизации ЕСТЬ НЕ NULL 
		|				И ДанныеДокумента.ТерриторияВыполненияРаботВОрганизации <> НЕОПРЕДЕЛЕНО
		|				И ДанныеДокумента.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|				И ДанныеДокумента.ТерриторияВыполненияРаботВОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ДанныеДокумента.ТерриторияВыполненияРаботВОрганизации
		|		ИНАЧЕ ДанныеДокумента.Подразделение
		|	КОНЕЦ КАК Подразделение,
		|	ВТДанныеНДФЛ.КатегорияДохода КАК КатегорияДохода,
		|	ЕСТЬNULL(ДанныеДокумента.КодДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КодДохода
		|ИЗ
		|	ВТДанныеНДФЛ КАК ВТДанныеНДФЛ
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ДанныеДокумента
		|		ПО ВТДанныеНДФЛ.ФизическоеЛицо = ДанныеДокумента.ФизическоеЛицо
		|			И ВТДанныеНДФЛ.Подразделение = ДанныеДокумента.ПодразделениеСотрудника
		|			И ВТДанныеНДФЛ.МесяцПериодаПредоставленияВычета = ДанныеДокумента.МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокумента.Сотрудник КАК Сотрудник,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка) КАК КатегорияДохода,
		|	ДанныеДокумента.КодДохода КАК КодДохода,
		|	ДанныеДокумента.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
		|	ДанныеДокумента.Сумма КАК СуммаДохода,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|			ТОГДА ДанныеДокумента.НДФЛ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НалогПоСтавке13,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|			ТОГДА ДанныеДокумента.НДФЛСПревышения
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НалогСПревышенияПоСтавке13,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
		|			ТОГДА ДанныеДокумента.НДФЛ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НалогПоСтавке09,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
		|			ТОГДА ДанныеДокумента.НДФЛ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НалогПоСтавке35,
		|	ДанныеДокумента.НДФЛ КАК Сумма,
		|	ДанныеДокумента.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ДанныеДокумента.ТерриторияВыполненияРаботВОрганизации КАК Подразделение,
		|	ДанныеДокумента.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
		|	ДанныеДокумента.Начисление КАК Начисление,
		|	ДанныеДокумента.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка,
		|	ДанныеДокумента.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|		ПО ДанныеДокумента.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|			И ДанныеДокумента.ПланируемаяДатаВыплаты = СтавкаНДФЛПоСтавкеРезидента.Период
		|ГДЕ
		|	ДанныеДокумента.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокументаБезПревышения.Организация КАК Организация,
		|	ДанныеДокументаБезПревышения.Сотрудник КАК Сотрудник,
		|	ДанныеДокументаБезПревышения.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокументаБезПревышения.ТерриторияВыполненияРаботВОрганизации КАК Подразделение,
		|	ДанныеДокументаБезПревышения.Подразделение КАК ПодразделениеСотрудника,
		|	ДанныеДокументаБезПревышения.НДФЛ КАК Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ) КАК ВидУдержания,
		|	ДанныеДокументаБезПревышения.Ссылка КАК ДокументОснование,
		|	ДанныеДокументаБезПревышения.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДанныеДокументаБезПревышения.СтатьяРасходов КАК СтатьяРасходов,
		|	ДанныеДокументаБезПревышения.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	ДанныеДокументаБезПревышения.ПланируемаяДатаВыплаты КАК МесяцНалоговогоПериода,
		|	ДанныеДокументаБезПревышения.КодДохода КАК КодДохода,
		|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка) КАК КатегорияДохода
		|ИЗ
		|	ВТДанныеДокументаБезПревышения КАК ДанныеДокументаБезПревышения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокументаСПревышения.Организация,
		|	ДанныеДокументаСПревышения.Сотрудник,
		|	ДанныеДокументаСПревышения.ФизическоеЛицо,
		|	ДанныеДокументаСПревышения.ТерриторияВыполненияРаботВОрганизации,
		|	ДанныеДокументаСПревышения.Подразделение,
		|	ДанныеДокументаСПревышения.НДФЛСПревышения,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения),
		|	ДанныеДокументаСПревышения.Ссылка,
		|	ДанныеДокументаСПревышения.СтатьяФинансирования,
		|	ДанныеДокументаСПревышения.СтатьяРасходов,
		|	ДанныеДокументаСПревышения.ВидДоходаИсполнительногоПроизводства,
		|	ДанныеДокументаСПревышения.ПланируемаяДатаВыплаты,
		|	ДанныеДокументаСПревышения.КодДохода,
		|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
		|ИЗ
		|	ВТДанныеДокументаСПревышения КАК ДанныеДокументаСПревышения";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результат.ВГраница();
	
	ДанныеДляПроведения.Вставить("НДФЛ", Результат[КоличествоРезультатов-2].Выгрузить());
	ДанныеДляПроведения.Вставить("ДанныеДляНДФЛ", Результат[КоличествоРезультатов-1].Выгрузить());
	ДанныеДляПроведения.Вставить("НДФЛПоСотрудникам", Результат[КоличествоРезультатов].Выгрузить());
	ДанныеДляПроведения.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	ПроставитьКатегориюДоходаПоНДФЛ(ДанныеДляПроведения.НДФЛ);
	ПроставитьКатегориюДоходаПоНДФЛ(ДанныеДляПроведения.ДанныеДляНДФЛ);
	ПроставитьКатегориюДоходаПоНДФЛ(ДанныеДляПроведения.НДФЛПоСотрудникам);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция ДанныеДокументаСРаспределениемПоСтатьям(НачисленияКомпенсации)
	
	ДанныеДокумента = ОбщегоНазначения.СкопироватьРекурсивно(НачисленияКомпенсации);
	
	ДанныеДокумента.Колонки.Добавить("НДФЛ", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеДокумента.Колонки.Добавить("НДФЛСПревышения",  ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Отбор = Новый Структура("Сотрудник");
		Отбор.Сотрудник = СтрокаСостава.Сотрудник;
		СтрокиНачислений = ДанныеДокумента.НайтиСтроки(Отбор);
		Если СтрокиНачислений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			СтрокаНачислений.НДФЛ = ?(СтрокаСостава.НДФЛ <> 0, СтрокаНачислений.Сумма, 0);
			СтрокаНачислений.НДФЛСПревышения = ?(СтрокаСостава.НДФЛСПревышения <> 0, СтрокаНачислений.Сумма, 0);
		КонецЦикла;
		
		ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаСостава.НДФЛ, СтрокиНачислений, "НДФЛ", 0);
		ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаСостава.НДФЛСПревышения, СтрокиНачислений, "НДФЛСПревышения", 0);
		
	КонецЦикла;
	
	Возврат ДанныеДокумента;
	
КонецФункции

Процедура ПроставитьКатегориюДоходаПоНДФЛ(ДанныеПоНДФЛ)

	Для каждого СтрокаНДФЛ Из ДанныеПоНДФЛ Цикл
		СтрокаНДФЛ.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(СтрокаНДФЛ.КодДохода);
		 Если Не ЗначениеЗаполнено(СтрокаНДФЛ.КатегорияДохода) Тогда
		 	 СтрокаНДФЛ.КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходы;
		 КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли