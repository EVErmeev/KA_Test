#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	//++ НЕ УТ
	
	//++ Локализация
	ЛокализацияРФ = ПолучитьФункциональнуюОпцию("ЛокализацияРФ");
	УправлениеТорговлей = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	НачалоВступленияВСилу67ФЗ = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.НачалоВступленияВСилу67ФЗ();
	//-- Локализация
	
	//-- НЕ УТ
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//++ НЕ УТ
	
	//++ Локализация
	НачатьОбновлениеКоманд()
	//-- Локализация
	
	//-- НЕ УТ
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРегистрыНУ(Команда)
	//++ НЕ УТ
	
	//++ Локализация
	ШаблонВопроса = НСтр("ru = 'По организации %Организация% будут перезаполнены остатки и обороты 
		|в регистрах налогового учета по %расчетам% за период с %НачалоПериода% до %КонецПериода%.
		|После этого необходимо рассчитать курсовые разницы и закрыть периоды начиная с текущего.
		|Перезаполнение регистров не оказывает влияние на закрытие месяца.
		|Продолжить?'");
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ХозяйственнаяОперация = ТекущиеДанные.ХозяйственнаяОперация;
	ТекстВопроса = СтрЗаменить(ШаблонВопроса, "%Организация%", ТекущиеДанные.Организация);
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами") Тогда
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%расчетам%", НСтр("ru = 'расчетам с клиентами'"));
	ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками") Тогда
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%расчетам%", НСтр("ru = 'расчетам с поставщиками'"));
	ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов") Тогда
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%расчетам%", НСтр("ru = 'финансовым инструментам'"));
	ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовПоАренде") Тогда
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%расчетам%", НСтр("ru = 'арендным расчетам'"));
	ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаДенежныхСредств") Тогда
		ТекстВопроса = НСтр("ru = 'По организации %Организация% будет перезаполнен регистр сведений ""Расчет переоценки валютных средств НУ""
		|за период с %НачалоПериода% до %КонецПериода%.
		|После этого необходимо рассчитать курсовые разницы и закрыть периоды начиная с текущего.
		|Перезаполнение регистр не оказывает влияние на закрытие месяца.
		|Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Организация%", ТекущиеДанные.Организация);
	КонецЕсли;
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НачалоПериода%", Формат(Дата(2022,1,1), "ДЛФ=DD"));
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КонецПериода%", Формат(НачалоМесяца(ТекущиеДанные.Дата), "ДЛФ=DD"));
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПерезаполнитьРегистрыНУЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	//-- Локализация
	
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

//++ НЕ УТ

//++ Локализация
&НаКлиенте
Процедура Подключаемый_ПоказатьКомандуНУ()
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ХозяйственнаяОперация = ТекущиеДанные.ХозяйственнаяОперация;
	Элементы.ФормаПерезаполнитьРегистрыНУ.Видимость = ЛокализацияРФ И НЕ УправлениеТорговлей
		И (ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами")
			ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками")
			ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов")
			ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаРасчетовПоАренде")
			ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПереоценкаДенежныхСредств"))
		И ТекущиеДанные.Дата >= НачалоВступленияВСилу67ФЗ;
			
КонецПроцедуры
//-- Локализация

//-- НЕ УТ
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//++ НЕ УТ

//++ Локализация
&НаКлиенте
Процедура НачатьОбновлениеКоманд() Экспорт
	ОтключитьОбработчикОжидания("Подключаемый_ПоказатьКомандуНУ");
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьКомандуНУ", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРегистрыНУЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		ДлительнаяОперация = НачатьВыполнениеНаСервере(ТекущиеДанные.Дата, ТекущиеДанные.Организация, ТекущиеДанные.ХозяйственнаяОперация);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеНаСервере(Период, Организация, ХозяйственнаяОперация)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами Тогда
		Возврат ДлительныеОперации.ВыполнитьПроцедуру(,
					"ОперативныеВзаиморасчетыСервер.ПерезаполнитьОборотыНУ", Организация, Период, Истина);
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками Тогда
		Возврат ДлительныеОперации.ВыполнитьПроцедуру(,
					"ОперативныеВзаиморасчетыСервер.ПерезаполнитьОборотыНУ", Организация, Период, Ложь);
		
	ИначеЕсли (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов
				ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовПоАренде) Тогда
		Возврат ДлительныеОперации.ВыполнитьПроцедуру(,
					"Документы.РасчетКурсовыхРазниц.ПерезаполнитьОборотыНУ", Организация, Период, ХозяйственнаяОперация);
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств Тогда
		Возврат ДлительныеОперации.ВыполнитьПроцедуру(,
					"Документы.РасчетКурсовыхРазниц.ПерезаполнитьРасшифровкуРасчетаНУДляДС", Организация, Период);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
 
КонецПроцедуры
//-- Локализация

//-- НЕ УТ

#КонецОбласти