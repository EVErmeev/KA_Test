#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
	
Процедура ОбработкаЗаполнения(СообщениеОснование)
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
	КонецЕсли;

	ТекущаяДата = ТекущаяДатаСеанса();
	Если Месяц(ТекущаяДата) < 4 Тогда
		// Предлагаем сделать сверки за предыдущий год
		
		ПрошлыйГод 			 = КонецГода(ДобавитьМесяц(ТекущаяДата, - 12));
		
		ДатаОкончанияПериода = ПрошлыйГод;
		ДатаНачалаПериода 	 = НачалоГода(ДатаОкончанияПериода);
		
	Иначе
		// Предлагаем сделать сверки за текущий год
		
		ДатаОкончанияПериода = ТекущаяДата;
		ДатаНачалаПериода 	 = НачалоГода(ДатаОкончанияПериода);
		
	КонецЕсли;
	
	Если ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате
		ИЛИ ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов Тогда
		ФорматОтвета = Перечисления.ФорматОтветаНаЗапросИОН.XML;
	Иначе
		ФорматОтвета = ПоследнийИспользуемыйФорматОтвета();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ЭтоФормат5_05 = КонтекстЭДОСервер.ЭтоФорматЗапросаИОН5_05();
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов
		ИЛИ НЕ ЭтоФормат5_05 И ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом Тогда
		
		Ошибки = Новый Массив;
		Для Каждого СтрокаТаблицы Из ЗапрашиваемыеНалоги Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.КБК) И СтрДлина(СтрокаТаблицы.КБК) <> 20 Тогда
				
				ТекстСообщения = НСтр("ru = 'Введено некорректное значение КБК %1
                                       |Длина КБК должна быть равна 20 символам'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.КБК);
				Ошибки.Добавить(ТекстСообщения);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.КБК) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнен КБК'");
				Ошибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
			Если НЕ ЭтоФормат5_05 Тогда
				ОКАТОНевернойДлины = СтрДлина(СтрокаТаблицы.ОКАТО) <> 11 И СтрДлина(СтрокаТаблицы.ОКАТО) <> 8;
				Если ЗначениеЗаполнено(СтрокаТаблицы.ОКАТО) И ОКАТОНевернойДлины
					ИЛИ Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаТаблицы.ОКАТО) Тогда
					
					ТекстСообщения = НСтр("ru = 'Введено некорректное значение ОКАТО или ОКТМО %1
						|Код ОКАТО/ОКТМО должен иметь длину 8 или 11 и состоять только из цифр.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.ОКАТО);
					Ошибки.Добавить(ТекстСообщения);
					
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОКАТО) Тогда
					
					ТекстСообщения = НСтр("ru = 'Не заполнено ОКАТО или ОКТМО'");
					Ошибки.Добавить(ТекстСообщения);
					
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
		
		// Вывод полученнных ошибок. Только уникальные ошибки.
		Ошибки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Ошибки);
		Для каждого Ошибка Из Ошибки Цикл
			
			ОбщегоНазначения.СообщитьПользователю(
				Ошибка, 
				ЭтотОбъект, 
				,
				,
				Отказ);
			
		КонецЦикла; 
		
		НепроверяемыеРеквизиты.Добавить("ЗапрашиваемыеНалоги");
		НепроверяемыеРеквизиты.Добавить("ЗапрашиваемыеНалоги.КБК");
		НепроверяемыеРеквизиты.Добавить("ЗапрашиваемыеНалоги.ОКАТО");
		
	Иначе
		НепроверяемыеРеквизиты.Добавить("ЗапрашиваемыеНалоги");
		НепроверяемыеРеквизиты.Добавить("ЗапрашиваемыеНалоги.КБК");
		НепроверяемыеРеквизиты.Добавить("ЗапрашиваемыеНалоги.ОКАТО");
	КонецЕсли;
	
	Если ЭтоФормат5_05 Тогда
		
		НепроверяемыеРеквизиты.Добавить("ДополнительныйПараметр");
		
		ЭтоПереченьБухОтчетности  = ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности");
		ЭтоСправкаОПринадлежности = ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.СправкаОПринадлежностиСумм");
		ЭтоАктСверки = ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
		
		ПроверятьПериод =
			ЭтоПереченьБухОтчетности
			ИЛИ ЭтоСправкаОПринадлежности
			ИЛИ ЭтоАктСверки;
			
		Если НЕ ПроверятьПериод Тогда
				
			НепроверяемыеРеквизиты.Добавить("ДатаНачалаПериода");
			НепроверяемыеРеквизиты.Добавить("ДатаОкончанияПериода");
			
		ИначеЕсли НачалоДня(ДатаОкончанияПериода) < НачалоДня(ДатаНачалаПериода) Тогда
			
			ТекстСообщения = НСтр("ru = 'Дата начала периода должна быть меньше даты окончания периода'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаОкончанияПериода",, Отказ);
			
		ИначеЕсли ЭтоСправкаОПринадлежности И Год(ДатаНачалаПериода) < 2023 Тогда
			
			ТекстСообщения = НСтр("ru = 'Согласно п. 1.7 приказа ФНС от 17 марта 2023 г. N ЕД-7-19/173@ при запросе справки о принадлежности сумм начало периода запроса не может быть меньше 01.01.2023'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаНачалаПериода",, Отказ);
			
		ИначеЕсли Год(ДатаОкончанияПериода) <> Год(ДатаНачалаПериода) И ЭтоАктСверки Тогда
			
			ТекстСообщения = НСтр("ru = 'Год начальной и конечной даты периода должен совпадать'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаОкончанияПериода",, Отказ);
			
		ИначеЕсли ЗначениеЗаполнено(ДатаОкончанияПериода) 
			И НачалоДня(ДатаОкончанияПериода) > НачалоДня(ТекущаяДатаСеанса()) Тогда
			
			ТекстСообщения = НСтр("ru = 'Конечная дата периода не должна превышать текущую дату'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаОкончанияПериода",, Отказ);
			
		КонецЕсли;
		
	Иначе
		
		Если ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом Тогда
			Если Не ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
				НепроверяемыеРеквизиты.Добавить("ДатаНачалаПериода");
				НепроверяемыеРеквизиты.Добавить("ДатаОкончанияПериода");
				ТекстСообщения = НСтр("ru = 'Поле ""За год"" не заполнено'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаОкончанияПериода",, Отказ);
			КонецЕсли;		
		КонецЕсли;
		
		Если ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом Тогда
			Если Не ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
				НепроверяемыеРеквизиты.Добавить("ДатаНачалаПериода");
				НепроверяемыеРеквизиты.Добавить("ДатаОкончанияПериода");
				ТекстСообщения = НСтр("ru = 'Поле ""На дату"" не заполнено'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаОкончанияПериода",, Отказ);
			КонецЕсли;
		КонецЕсли;
	
		НепроверяемыеРеквизиты.Добавить("ДополнительныйПараметр");
		Если ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности Тогда
			Если Не ЗначениеЗаполнено(ДополнительныйПараметр) Тогда
				ТекстСообщения = НСтр("ru = 'Поле ""Виды отчетов"" не заполнено'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДополнительныйПараметр",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов")
		ИЛИ ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом"))
		И КоличествоНалогов = Перечисления.КоличествоНалоговДляСверкиИОН.Несколько
		И ЗапрашиваемыеНалоги.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Укажите налоги или КБК, по которым запрашивается сверка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ЗапрашиваемыеНалоги",, Отказ);
			
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПоследнийИспользуемыйФорматОтвета()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ФорматОтвета
	|ИЗ
	|	Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика КАК ЗапросНаИнформационноеОбслуживаниеНалогоплательщика
	|ГДЕ
	|	ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ВидУслуги <> ЗНАЧЕНИЕ(Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате)
	|		И ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ВидУслуги <> ЗНАЧЕНИЕ(Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Перечисления.ФорматОтветаНаЗапросИОН.RTF;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.ФорматОтвета;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли