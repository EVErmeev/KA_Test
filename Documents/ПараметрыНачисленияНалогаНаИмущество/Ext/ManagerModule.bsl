
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ИмущественныеНалоги");
	МеханизмыДокумента.Добавить("ОсновныеСредства");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		ТекстЗапросаТаблицаПараметрыНачисленияНалогаНаИмущество(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСпособыОтраженияРасходовПоИмущественнымНалогам(ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДокументыПоОС(ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

// Формирует таблицы движений при отложенном проведении.
//
// Параметры:
//  ДокументСсылка			 - ДокументСсылка.ПараметрыНачисленияНалогаНаИмущество - Документ, для которого формируются движения
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - Содержит вспомогательные временные таблицы, которые могут использоваться для формирования движений.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
Функция ТаблицыОтложенногоФормированияДвижений(ДокументСсылка, МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаПараметрыНачисленияНалогаНаИмущество(ТекстыЗапроса, Неопределено);
	
	ТаблицыДляДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(
		Запрос, ТекстыЗапроса, Неопределено);
	
	Возврат ТаблицыДляДвижений;
	
КонецФункции

#КонецОбласти

// Возвращает необходимость указания КБК по коду вида имущества
//
// Параметры:
// 	 КодВидаИмущества - Строка  - Код вида имущества.
//
// Возвращаемое значение:
// 	Результат - Булево - Признак необходимости указания КБК.
//
Функция ТребуетсяУказаниеКБК(КодВидаИмущества) Экспорт
	
	Результат = Ложь;
	
	Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет команду создания документа "Параметры начисления налога на имущество".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Содержит параметры документа, которые используются разными процедурами.
// 
// Возвращаемое значение:
//  Структура - Параметры документа.
//
Функция ПараметрыДокумента() Экспорт

	ДоступныеАмортизационныеГруппы = Новый Массив;
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ТретьяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ПятаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ШестаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.СедьмаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа);
	ДоступныеАмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ПустаяСсылка());
	
	ДоступныеГруппыОСДвижимогоИмущества = Новый Массив;
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.МашиныИОборудование);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ОфисноеОборудование);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ПродуктивныйСкот);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.РабочийСкот);
	ДоступныеГруппыОСДвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ТранспортныеСредства);
	
	ДоступныеГруппыОСНедвижимогоИмущества = Новый Массив;
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество);
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.Здания);
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.МноголетниеНасаждения);
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.Сооружения);
	ДоступныеГруппыОСНедвижимогоИмущества.Добавить(Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации);

	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоступныеАмортизационныеГруппы", ДоступныеАмортизационныеГруппы);
	ПараметрыДокумента.Вставить("ДоступныеГруппыОСДвижимогоИмущества", ДоступныеГруппыОСДвижимогоИмущества);
	ПараметрыДокумента.Вставить("ДоступныеГруппыОСНедвижимогоИмущества", ДоступныеГруппыОСНедвижимогоИмущества);
	
	Возврат ПараметрыДокумента;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПараметрыНачисленияНалогаНаИмущество";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "СпособыОтраженияРасходовПоИмущественнымНалогам" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСпособыОтраженияРасходовПоИмущественнымНалогам(ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТабличнаяЧастьДокумента";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
		
	ИначеЕсли ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоОС(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;

	Возврат Результат;
	
КонецФункции

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	Возврат ИсточникиДанных;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПостановкаНаУчетВНалоговомОргане КАК ПостановкаНаУчетВНалоговомОргане,
	|	ДанныеДокумента.НалоговыйОрган КАК НалоговыйОрган,
	|	ДанныеДокумента.КодПоОКАТО КАК КодПоОКАТО,
	|	ДанныеДокумента.КодПоОКТМО КАК КодПоОКТМО,
	|	ДанныеДокумента.ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	ДанныеДокумента.НачалоДействияЛьготы КАК НачалоДействияЛьготы,
	|	ДанныеДокумента.ОкончаниеДействияЛьготы КАК ОкончаниеДействияЛьготы,
	|	ДанныеДокумента.НеПодлежитНалогообложению КАК НеПодлежитНалогообложению,
	|	ДанныеДокумента.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ДанныеДокумента.СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка,
	|	ДанныеДокумента.СуммаУменьшения КАК СуммаУменьшения,
	|	ДанныеДокумента.КодВидаИмущества КАК КодВидаИмущества,
	|	ДанныеДокумента.КБК КАК КБК,
	|	ДанныеДокумента.НалоговаяБаза КАК НалоговаяБаза,
	|	ДанныеДокумента.ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД КАК ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД,
	|	ДанныеДокумента.ДвижимоеИмуществоПодлежащееНалогообложению КАК ДвижимоеИмуществоПодлежащееНалогообложению,
	|	ДанныеДокумента.УказаныСпособыОтражениеРасходов КАК УказаныСпособыОтражениеРасходов,
	|	ДанныеДокумента.ПараметрыДействуютСПрошлойДаты КАК ПараметрыДействуютСПрошлойДаты,
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.НачалоДействия, ДЕНЬ) КАК НачалоДействия
	|ИЗ
	|	Документ.ПараметрыНачисленияНалогаНаИмущество КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПараметрыНачисленияНалогаНаИмущество"));
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПараметрыНачисленияНалогаНаИмущество);

	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Процедура ТекстЗапросаТаблицаПараметрыНачисленияНалогаНаИмущество(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыНачисленияНалогаНаИмущество";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтСписокОС(
		ТекстыЗапроса, "Документ.ПараметрыНачисленияНалогаНаИмущество");

	Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК Период,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаИсправления,
	|
	|	&Организация КАК Организация,
	|	ТабличнаяЧастьДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	&КодПоОКТМО КАК КодПоОКТМО,
	|	&КодПоОКАТО КАК КодПоОКАТО,
	|	&ПостановкаНаУчетВНалоговомОргане КАК ПостановкаНаУчетВНалоговомОргане,
	|	&НалоговыйОрган КАК НалоговыйОрган,
	|	&ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	&НачалоДействияЛьготы КАК НачалоДействияЛьготы,
	|	&ОкончаниеДействияЛьготы КАК ОкончаниеДействияЛьготы,
	|	&НеПодлежитНалогообложению КАК НеПодлежитНалогообложению,
	|	&НалоговаяСтавка КАК НалоговаяСтавка,
	|	&СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка,
	|	&СуммаУменьшения КАК СуммаУменьшения,
	|	&КодВидаИмущества КАК КодВидаИмущества,
	|	&КБК КАК КБК,
	|	ТабличнаяЧастьДокумента.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ТабличнаяЧастьДокумента.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	&НалоговаяБаза КАК НалоговаяБаза,
	|	ТабличнаяЧастьДокумента.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	ТабличнаяЧастьДокумента.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	ТабличнаяЧастьДокумента.КадастровыйНомер КАК КадастровыйНомер,
	|	ТабличнаяЧастьДокумента.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ТабличнаяЧастьДокумента.УсловныйНомер КАК УсловныйНомер,
	|	ТабличнаяЧастьДокумента.ДатаРегистрацииПраваСобственности КАК ДатаРегистрацииПраваСобственности,
	|	ТабличнаяЧастьДокумента.ДатаПрекращенияПраваСобственности КАК ДатаПрекращенияПраваСобственности,
	|	ТабличнаяЧастьДокумента.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ТабличнаяЧастьДокумента.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ТабличнаяЧастьДокумента.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	ТабличнаяЧастьДокумента.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
	|	&ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД КАК ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД,
	|	&ДвижимоеИмуществоПодлежащееНалогообложению КАК ДвижимоеИмуществоПодлежащееНалогообложению,
	|	ИСТИНА КАК РеквизитыОбновлены
	|
	|ИЗ
	|	Документ.ПараметрыНачисленияНалогаНаИмущество.ОС КАК ТабличнаяЧастьДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
	|			&Период, 
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И КодПоОКАТО = &КодПоОКАТО
	|				И КодПоОКТМО = &КодПоОКТМО
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ДанныеРегистраПоследнее
	|		ПО ДанныеРегистраПоследнее.ОсновноеСредство = ТабличнаяЧастьДокумента.ОсновноеСредство
	|
	|ГДЕ
	|	ТабличнаяЧастьДокумента.Ссылка = &Ссылка
	|	И (НЕ &ПараметрыДействуютСПрошлойДаты
	|		ИЛИ ЕСТЬNULL(ДанныеРегистраПоследнее.Период, ДАТАВРЕМЯ(1,1,1)) < &НачалоДействия)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&НачалоДействия, ДЕНЬ) КАК Период,
	|	&Период КАК ДатаИсправления,
	|
	|	&Организация КАК Организация,
	|	ТабличнаяЧастьДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	&КодПоОКТМО КАК КодПоОКТМО,
	|	&КодПоОКАТО КАК КодПоОКАТО,
	|	&ПостановкаНаУчетВНалоговомОргане КАК ПостановкаНаУчетВНалоговомОргане,
	|	&НалоговыйОрган КАК НалоговыйОрган,
	|	&ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	&НачалоДействияЛьготы КАК НачалоДействияЛьготы,
	|	&ОкончаниеДействияЛьготы КАК ОкончаниеДействияЛьготы,
	|	&НеПодлежитНалогообложению КАК НеПодлежитНалогообложению,
	|	&НалоговаяСтавка КАК НалоговаяСтавка,
	|	&СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка,
	|	&СуммаУменьшения КАК СуммаУменьшения,
	|	&КодВидаИмущества КАК КодВидаИмущества,
	|	&КБК КАК КБК,
	|	ТабличнаяЧастьДокумента.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ТабличнаяЧастьДокумента.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	&НалоговаяБаза КАК НалоговаяБаза,
	|	ТабличнаяЧастьДокумента.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	ТабличнаяЧастьДокумента.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	ТабличнаяЧастьДокумента.КадастровыйНомер КАК КадастровыйНомер,
	|	ТабличнаяЧастьДокумента.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ТабличнаяЧастьДокумента.УсловныйНомер КАК УсловныйНомер,
	|	ТабличнаяЧастьДокумента.ДатаРегистрацииПраваСобственности КАК ДатаРегистрацииПраваСобственности,
	|	ТабличнаяЧастьДокумента.ДатаПрекращенияПраваСобственности КАК ДатаПрекращенияПраваСобственности,
	|	ТабличнаяЧастьДокумента.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ТабличнаяЧастьДокумента.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ТабличнаяЧастьДокумента.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	ТабличнаяЧастьДокумента.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
	|	&ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД КАК ИспользуетсяТолькоВДеятельностиОблагаемойЕНВД,
	|	&ДвижимоеИмуществоПодлежащееНалогообложению КАК ДвижимоеИмуществоПодлежащееНалогообложению,
	|	ИСТИНА КАК РеквизитыОбновлены
	|
	|ИЗ
	|	Документ.ПараметрыНачисленияНалогаНаИмущество.ОС КАК ТабличнаяЧастьДокумента
	|
	|ГДЕ
	|	ТабличнаяЧастьДокумента.Ссылка = &Ссылка
	|	И &ПараметрыДействуютСПрошлойДаты";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаСпособыОтраженияРасходовПоИмущественнымНалогам(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СпособыОтраженияРасходовПоИмущественнымНалогам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ТабличнаяЧастьДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество) КАК ВидНалога,
	|	&Организация КАК Организация,
	|	ИСТИНА КАК СпособОтраженияРасходовЗаданДокументом,
	|	&Ссылка КАК СпособОтраженияРасходов
	|ИЗ
	|	Документ.ПараметрыНачисленияНалогаНаИмущество.ОС КАК ТабличнаяЧастьДокумента
	|ГДЕ
	|	ТабличнаяЧастьДокумента.Ссылка = &Ссылка
	|	И &УказаныСпособыОтражениеРасходов";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра);
	
	Возврат Текст;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                                    КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОС.НомерСтроки-1, 0)    КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	ИСТИНА                                  КАК ОтражатьВРеглУчете,
	|	ЛОЖЬ                                    КАК ОтражатьВУпрУчете,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство,
	|	&ПараметрыДействуютСПрошлойДаты         КАК ЭтоИсправление,
	|
	|	ВЫБОР
	|		КОГДА &ПараметрыДействуютСПрошлойДаты
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ                                   КАК НачалоПериодаИсправления,
	|
	|	ВЫБОР
	|		КОГДА &ПараметрыДействуютСПрошлойДаты
	|			ТОГДА КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ                                   КАК КонецПериодаИсправления
	|ИЗ
	|	Документ.ПараметрыНачисленияНалогаНаИмущество КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПараметрыНачисленияНалогаНаИмущество.ОС КАК ТаблицаОС
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Возврат; //В дальнейшем будет добавлен код команд
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.ОтражениеРасходов";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ОтражениеРасходовСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("ОтражениеРасходовАналитикаРасходов");
	
	Возврат ПараметрыВыбора;
	
КонецФункции

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПредставлениеОперации) Экспорт
	
	ВходящиеДанные = Новый Соответствие;
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ПараметрыНачисленияНалогаНаИмущество.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.10.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("937f69b0-43f3-46d9-bafb-d03d185cbab3");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПараметрыНачисленияНалогаНаИмущество.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет документы ""Параметры начисления налога на имущество"":
	|- заполняет новые реквизиты ""Льгота"", ""Не подлежит налогообложению""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОснованияЛьготПоИмущественнымНалогам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ПараметрыНачисленияНалогаНаИмущество";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ПараметрыНачисленияНалогаНаИмущество КАК ДанныеДокумента
	|ГДЕ
	|	НЕ ДанныеДокумента.РеквизитыОбновлены";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПараметрыНачисленияНалогаНаИмущество";
	
	ЧитаемыеДанные = Новый Массив;
	ЧитаемыеДанные.Добавить("Справочник.ОснованияЛьготПоИмущественнымНалогам");
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, ЧитаемыеДанные) Тогда
		// Обновление не начнется пока не созданы все льготы.
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	КэшКодовРегионов = Новый Соответствие;
	ОписаниеЛьгот = ЛьготыПоИмущественнымНалогамПовтИсп.ДанныеОЛьготахПоИмущественнымНалогам(Ложь);

	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ПараметрыНачисленияНалогаНаИмущество
			
			Если ДокументОбъект.УдалитьПорядокНалогообложения = Перечисления.УдалитьПорядокНалогообложенияИмущества.НеПодлежитНалогообложению 
				И НЕ ДокументОбъект.НеПодлежитНалогообложению
				И НЕ ДокументОбъект.РеквизитыОбновлены Тогда
			 
				ДокументОбъект.НеПодлежитНалогообложению = Истина;
			
			КонецЕсли;
			
			ДвижимоеИмуществоПодлежащееНалогообложению = ДокументОбъект.ДвижимоеИмуществоПодлежащееНалогообложению;
			Если ДокументОбъект.Дата >= '201801010000'
				И НЕ ДокументОбъект.РеквизитыОбновлены Тогда
				
				ДвижимоеИмуществоПодлежащееНалогообложению = 
					ДокументОбъект.УдалитьВидОбъектаНалогаНаИмущество = Перечисления.ВидыОбъектовНалогаНаИмущество.ДвижимоеИмуществоПринятоеС2013
						И ДокументОбъект.УдалитьПорядокНалогообложения <> Перечисления.УдалитьПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения
						И ДокументОбъект.УдалитьПорядокНалогообложения <> Перечисления.УдалитьПорядокНалогообложенияИмущества.ОблагаетсяПоСтавкеДляДвижимогоИмущества;
						
			ИначеЕсли НЕ ДокументОбъект.РеквизитыОбновлены Тогда
				
				ДвижимоеИмуществоПодлежащееНалогообложению = 
					ДокументОбъект.УдалитьВидОбъектаНалогаНаИмущество = Перечисления.ВидыОбъектовНалогаНаИмущество.ДвижимоеИмуществоПринятоеС2013
					И ДокументОбъект.УдалитьПорядокНалогообложения <> Перечисления.УдалитьПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения;
					
			КонецЕсли;
			
			Если ДокументОбъект.ДвижимоеИмуществоПодлежащееНалогообложению <> ДвижимоеИмуществоПодлежащееНалогообложению Тогда
				ДокументОбъект.ДвижимоеИмуществоПодлежащееНалогообложению = ДвижимоеИмуществоПодлежащееНалогообложению;
			КонецЕсли;
			
			ЗаполнитьОснованиеЛьготы(ДокументОбъект, ОписаниеЛьгот, КэшКодовРегионов);
			
			Если НЕ ДокументОбъект.РеквизитыОбновлены Тогда
				ДокументОбъект.РеквизитыОбновлены = Истина;
			КонецЕсли;
			
			Если ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
 	ВнеоборотныеАктивыСлужебный.ПроверитьВыполнениеОбработчика(
 		ПроблемныхОбъектов, 
 		ОбъектовОбработано, 
 		ПолноеИмяОбъекта);
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьОснованиеЛьготы(ДокументОбъект, ОписаниеЛьгот, КэшКодовРегионов)
	
	Если ЗначениеЗаполнено(ДокументОбъект.ОснованиеЛьготы)
		ИЛИ ДокументОбъект.РеквизитыОбновлены Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЛьготы = ПараметрыЛьготы(ДокументОбъект, ОписаниеЛьгот, КэшКодовРегионов);
	Если ПараметрыЛьготы <> Неопределено Тогда
		Если ПараметрыЛьготы.Свойство("УстановленаРегиональнымЗаконом")
			И ПараметрыЛьготы.УстановленаРегиональнымЗаконом Тогда
			ДокументОбъект.ОснованиеЛьготы = Справочники.ОснованияЛьготПоИмущественнымНалогам.РегиональнаяЛьготаПоПараметрам(ПараметрыЛьготы);
		Иначе
			ДокументОбъект.ОснованиеЛьготы = Справочники.ОснованияЛьготПоИмущественнымНалогам.ФедеральнаяЛьготаПоКоду(ПараметрыЛьготы.КодЛьготы);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

Функция КодРегиона(ДокументОбъект, КэшКодовРегионов, ОписаниеТипаКодРегиона)
	
	Если ДокументОбъект.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане Тогда
		
		КодРегиона = КэшКодовРегионов[ДокументОбъект.НалоговыйОрган];
		
		Если КодРегиона = Неопределено Тогда
			
			КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.НалоговыйОрган, "Код");
			КодРегиона = ОписаниеТипаКодРегиона.ПривестиЗначение(Лев(СокрЛП(КодНалоговогоОргана), 2));
			КэшКодовРегионов.Вставить(ДокументОбъект.НалоговыйОрган, КодРегиона);
			
		КонецЕсли;
				
	Иначе
		
		КодРегиона = КэшКодовРегионов[ДокументОбъект.Организация];
		
		Если КодРегиона = Неопределено Тогда
			
			КодОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "РегистрацияВНалоговомОргане.Код");
			КодРегиона = ОписаниеТипаКодРегиона.ПривестиЗначение(Лев(СокрЛП(КодОргана), 2));
			КэшКодовРегионов.Вставить(ДокументОбъект.Организация, КодРегиона);
			
		КонецЕсли;
						
	КонецЕсли;	

	Возврат КодРегиона;
	
КонецФункции

// Используется для получения параметров льготы при обновлении ИБ.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПараметрыНачисленияНалогаНаИмущество - Документ на основании которого определяются параметры льготы.
//  ОписаниеЛьгот - см. ЛьготыПоИмущественнымНалогамПовтИсп.ДанныеОЛьготахПоИмущественнымНалогам
//  КэшКодовРегионов - Соответствие - Кэш кодов регионов.
// 
// Возвращаемое значение:
//  Структура - Параметры льготы
Функция ПараметрыЛьготы(ДокументОбъект, ОписаниеЛьгот, КэшКодовРегионов) Экспорт

	ОписаниеТипаКодРегиона = ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный);
	
	ПараметрыЛьготы = Новый Структура;
	
	ЕстьЛьгота = Ложь;
	
	Если ДокументОбъект.УдалитьПорядокНалогообложения = Перечисления.УдалитьПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения Тогда
		 			
		ЕстьЛьгота = Истина;
		
		ПараметрыЛьготы.Вставить("КодЛьготы", ДокументОбъект.УдалитьКодНалоговойЛьготыОсвобождениеОтНалогообложения);
		ПараметрыЛьготы.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.Освобождение);
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.УдалитьКодНалоговойЛьготыОсвобождениеОтНалогообложения) Тогда
			
			// Считаем, что это региональная льгота в виде освобождения. Код 2012000.
			ПараметрыЛьготы.Вставить("КодЛьготы", 2012000);
			ПараметрыЛьготы.Вставить("КодРегиона", КодРегиона(ДокументОбъект, КэшКодовРегионов, ОписаниеТипаКодРегиона));
			ПараметрыЛьготы.Вставить("УстановленаРегиональнымЗаконом", Истина);
			 
		ИначеЕсли Лев(ДокументОбъект.УдалитьКодНалоговойЛьготыОсвобождениеОтНалогообложения, 4) = "2012" Тогда
			
			// С 2012 начинаются коды региональных льгот (в ином случае будет найдена/создана федеральная льгота)
			ПараметрыЛьготы.Вставить("КодРегиона", КодРегиона(ДокументОбъект, КэшКодовРегионов, ОписаниеТипаКодРегиона));
			ПараметрыЛьготы.Вставить("УстановленаРегиональнымЗаконом", Истина);
			 
		КонецЕсли;	
		
	ИначеЕсли Не ЗначениеЗаполнено(ДокументОбъект.ОснованиеЛьготы) 
		И ДокументОбъект.УдалитьПорядокНалогообложения = Перечисления.УдалитьПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке Тогда	 
		 
		ЕстьЛьгота = Истина;
		
		ПараметрыЛьготы.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной);
		
		// Такая льгота всегда региональная, за исключением одного случая - см. ниже
		КодРегиона = КодРегиона(ДокументОбъект, КэшКодовРегионов, ОписаниеТипаКодРегиона);
		
		// Льгота 2010402 является федеральной (указана в НК), но применяется только в Калининградской области.
		// Это льгота в виде снижения ставки налога на 50%.
		Если КодРегиона = 39 И ДокументОбъект.СниженнаяНалоговаяСтавка / ДокументОбъект.НалоговаяСтавка = 0.5 Тогда
			
			// Федеральная льгота
			ПараметрыЛьготы.Вставить("КодЛьготы", "2010402");
			ПараметрыЛьготы.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиНаПроцент);
			ПараметрыЛьготы.Вставить("ПроцентУменьшения", 50); 
			
		Иначе					
			
			// Региональная льгота
			ПараметрыЛьготы.Вставить("КодРегиона", КодРегиона);
			ПараметрыЛьготы.Вставить("УстановленаРегиональнымЗаконом", Истина); 
			
			ОписаниеЛьготы = ОписаниеЛьгот.РегиональныеЛьготы[ПараметрыЛьготы.ВидЛьготы];
			Если ОписаниеЛьготы = Неопределено Тогда
				// Считаем, что это региональная льгота с кодом 2012400.
				ПараметрыЛьготы.Вставить("КодЛьготы", 2012400);
			Иначе 
				ПараметрыЛьготы.Вставить("КодЛьготы", ОписаниеЛьготы.КодЛьготы);
			КонецЕсли;	
							
		КонецЕсли;	
		
	ИначеЕсли Не ЗначениеЗаполнено(ДокументОбъект.ОснованиеЛьготы) 
		И ДокументОбъект.УдалитьПорядокНалогообложения = Перечисления.УдалитьПорядокНалогообложенияИмущества.УменьшениеНалоговойБазы Тогда	 
		
		// Региональная льгота
		ЕстьЛьгота = Истина;
		
		ПараметрыЛьготы.Вставить("ВидЛьготы", Перечисления.ВидыЛьготПоИмущественнымНалогам.СнижениеНалоговойБазыНаСумму);
		ПараметрыЛьготы.Вставить("КодРегиона", КодРегиона(ДокументОбъект, КэшКодовРегионов, ОписаниеТипаКодРегиона));
		ПараметрыЛьготы.Вставить("УстановленаРегиональнымЗаконом", Истина); 
		
		ОписаниеЛьготы = ОписаниеЛьгот.РегиональныеЛьготы[ПараметрыЛьготы.ВидЛьготы];
		Если ОписаниеЛьготы = Неопределено Тогда
			// Считаем, что это региональная льгота с кодом 2012000.
			ПараметрыЛьготы.Вставить("КодЛьготы", 2012000);
		Иначе 
			ПараметрыЛьготы.Вставить("КодЛьготы", ОписаниеЛьготы.КодЛьготы);
		КонецЕсли;
				
	КонецЕсли;
	
	Если ЕстьЛьгота Тогда
		Возврат ПараметрыЛьготы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
