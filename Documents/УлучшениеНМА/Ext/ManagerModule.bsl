
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("НематериальныеАктивы");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	
	УлучшениеНМАЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура:
//     * Ключ - Строка - Имя таблицы.
//     * Значение - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда

		Запрос.МенеджерВременныхТаблиц = ?(
			ДопПараметры.МенеджерВременныхТаблиц <> Неопределено, 
			ДопПараметры.МенеджерВременныхТаблиц, 
			Новый МенеджерВременныхТаблиц());
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
	
		ТекстыЗапроса = Новый СписокЗначений;
		ТекстЗапросаТаблицаДокументыПоНМА(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииНМАБУ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСтоимостьНМА(ТекстыЗапроса, Запрос, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(ТекстыЗапроса, Запрос, Регистры);
		ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(ТекстыЗапроса, Запрос, Регистры);
		
		
		УлучшениеНМАЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

// Формирует таблицы движений при отложенном проведении.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УлучшениеНМА - Документ, для которого формируются движения
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит вспомогательные временные таблицы, которые могут использоваться для формирования движений.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ТаблицыОтложенногоФормированияДвижений(ДокументСсылка, МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(Запрос, ТекстыЗапроса, Неопределено);
	ТекстЗапросаТаблицаПараметрыАмортизацииНМАБУ(Запрос, ТекстыЗапроса, Неопределено);
	
	ТаблицыДляДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(
							Запрос, ТекстыЗапроса, Неопределено);
	
	Возврат ТаблицыДляДвижений;
	
КонецФункции

// Формирует таблицы движений при расчете стоимости.
//
// Параметры:
//  Регистратор	- ДокументСсылка.УлучшениеНМА - Документ, для которого формируются движения
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит вспомогательные временные таблицы, которые могут
//                                                      использоваться для формирования движений.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ДанныеДокументаДляПроведения
//
Функция ТаблицыДвиженийРасчетаСтоимости(Регистратор, МенеджерВременныхТаблиц) Экспорт
	
	СписокРегистров = "ПрочиеРасходы,
		|СтоимостьНМА,ДвиженияДоходыРасходыПрочиеАктивыПассивы,
		|ОтражениеДокументовВРеглУчете";
	
	ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ДопПараметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДопПараметры.ТолькоПомеченные = Истина;
	
	ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Регистратор, СписокРегистров, ДопПараметры);
	
	Возврат ТаблицыДляДвижений;
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаСписка";
	КонецЕсли;
	
	Документы.ИзменениеПараметровНМА2_4.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Переоценка НМА".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная команда
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.УлучшениеНМА) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.УлучшениеНМА.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.УлучшениеНМА);
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииОграниченияДоступа(Списки) Экспорт

	Списки.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.УлучшениеНМА";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                 КАК Ссылка,
	|	ДанныеДокумента.Дата                   КАК Период,
	|	ДанныеДокумента.Номер                  КАК Номер,
	|	ДанныеДокумента.Проведен               КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления        КАК ПометкаУдаления,
	|	ДанныеДокумента.ОтражатьВРеглУчете     КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете      КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ДанныеДокумента.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.Подразделение          КАК Подразделение,
	|	ДанныеДокумента.Ответственный          КАК Ответственный,
	|	ДанныеДокумента.Комментарий            КАК Комментарий
	|ИЗ
	|	Документ.УлучшениеНМА КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КонецДня", Новый Граница(КонецДня(Реквизиты.Период),ВидГраницы.Включая));
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.УлучшениеНМА"));
	ЗначенияПараметровПроведения.Вставить("НастройкаХозяйственнойОперации", Справочники.НастройкиХозяйственныхОпераций.УлучшениеНМА);
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.УлучшениеНМА);
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru='Улучшение НМА'"));
	ЗначенияПараметровПроведения.Вставить("ВидАналитикиКапитализацииРасходов", Перечисления.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР);
	ЗначенияПараметровПроведения.Вставить("ВариантПримененияЦелевогоФинансирования", Неопределено);
	ЗначенияПараметровПроведения.Вставить("СтатьяАП_НМА", ПланыВидовХарактеристик.СтатьиАктивовПассивов.НематериальныеАктивы);
	ЗначенияПараметровПроведения.Вставить("ИспользоватьУчетСебестоимости", ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости"));
	ЗначенияПараметровПроведения.Вставить("ДатаНачалаУчетаСебестоимости", Константы.ДатаНачалаУчетаСебестоимости.Получить());
	ЗначенияПараметровПроведения.Вставить("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());

	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоНМА(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоНМА";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаНМА.НомерСтроки-1, 0) КАК НомерЗаписи,
	|	&Ссылка                          КАК Ссылка,
	|	ТаблицаНМА.НематериальныйАктив   КАК НематериальныйАктив,
	|	&ХозяйственнаяОперация           КАК ХозяйственнаяОперация,
	|	&Организация                     КАК Организация,
	|	&Подразделение                   КАК Подразделение,
	|	&Период                          КАК Дата,
	|	&ИдентификаторМетаданных         КАК ТипСсылки,
	|	&Проведен                        КАК Проведен,
	|	&ОтражатьВУпрУчете               КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете              КАК ОтражатьВРеглУчете
	|ИЗ
	|	Документ.УлучшениеНМА КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УлучшениеНМА.НМА КАК ТаблицаНМА
	|		ПО ТаблицаНМА.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                        КАК Ссылка,
	|	&Период                        КАК ДатаДокументаИБ,
	|	&Номер                         КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных       КАК ТипСсылки,
	|	&Организация                   КАК Организация,
	|	&ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                   КАК НаправлениеДеятельности,
	|	&Подразделение                 КАК Подразделение,
	|	&Ответственный                 КАК Ответственный,
	|	&Комментарий                   КАК Комментарий,
	|	&Проведен                      КАК Проведен,
	|	&ПометкаУдаления               КАК ПометкаУдаления,
	|	ЛОЖЬ                           КАК ДополнительнаяЗапись,
	|	&Период                        КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                 КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                           КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                   КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                   КАК ИсправляемыйДокумент,
	|	&Период                        КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                   КАК Приоритет
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииНМАУУ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииНМАУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустыеТаблицыОтложенныхДвижений(ТекстыЗапроса, Запрос);
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПараметрыАмортизацииНМАУУ(ТекстыЗапроса, "Документ.УлучшениеНМА");
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтВыработкаНМА(ТекстыЗапроса, "Документ.УлучшениеНМА");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                        КАК Регистратор,
	|	&Период                        КАК Период,
	|	&Организация                   КАК Организация,
	|	&Период                        КАК ДатаПоследнегоИзменения,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|
	|	ПараметрыАмортизацииНМАУУ.СрокИспользования           КАК СрокИспользования,
	|	ПараметрыАмортизацииНМАУУ.КоэффициентУскорения        КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииНМАУУ.МетодНачисленияАмортизации  КАК МетодНачисленияАмортизации,
	|	ПараметрыАмортизацииНМАУУ.ЛиквидационнаяСтоимость     КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииНМАУУ.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимостьРегл,
	|
	// СрокИспользованияДляВычисленияАмортизации
	|	ПараметрыАмортизацииНМАУУ.СрокИспользованияДляВычисленияАмортизации
	|		- РАЗНОСТЬДАТ(ЕСТЬNULL(ПараметрыАмортизацииНМАУУ.ДатаПоследнегоИзменения, &Период), &Период, МЕСЯЦ) КАК СрокИспользованияДляВычисленияАмортизации,
	|
	// ОбъемПродукцииРаботДляВычисленияАмортизации
	|	ПараметрыАмортизацииНМАУУ.ОбъемПродукцииРаботДляВычисленияАмортизации
	|		- ЕСТЬNULL(ВыработкаНМА.Количество, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации
	|
	|ИЗ
	|	Документ.УлучшениеНМА.НМА КАК ТаблицаНМА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыАмортизацииНМАУУ КАК ПараметрыАмортизацииНМАУУ
	|		ПО ПараметрыАмортизацииНМАУУ.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВыработкаНМА КАК ВыработкаНМА
	|		ПО ВыработкаНМА.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииНМАБУ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииНМАБУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПараметрыАмортизацииНМАБУ(ТекстыЗапроса, "Документ.УлучшениеНМА");
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтВыработкаНМА(ТекстыЗапроса, "Документ.УлучшениеНМА");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                         КАК Регистратор,
	|	&Период                         КАК Период,
	|	&Организация                    КАК Организация,
	|	&Период                         КАК ДатаПоследнегоИзменения,
	|	ТаблицаНМА.НематериальныйАктив  КАК НематериальныйАктив,
	|
	|	ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользованияБУ,
	|	ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользованияНУ,
	|	ПараметрыАмортизацииНМАБУ.КоэффициентБУ КАК КоэффициентБУ,
	|	ПараметрыАмортизацииНМАБУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииНМАБУ.СпециальныйКоэффициент КАК СпециальныйКоэффициент,
	|
	// СрокИспользованияДляВычисленияАмортизации
	|	ПараметрыАмортизацииНМАБУ.СрокИспользованияДляВычисленияАмортизации
	|		- РАЗНОСТЬДАТ(ЕСТЬNULL(ПараметрыАмортизацииНМАБУ.ДатаПоследнегоИзменения, &Период), &Период, МЕСЯЦ) КАК СрокИспользованияДляВычисленияАмортизации,
	|
	// ОбъемПродукцииРаботДляВычисленияАмортизации
	|	ПараметрыАмортизацииНМАБУ.ОбъемПродукцииРаботДляВычисленияАмортизации
	|		- ЕСТЬNULL(втВыработкаНМА.Количество, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации
	|
	|ИЗ
	|	Документ.УлучшениеНМА.НМА КАК ТаблицаНМА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыАмортизацииНМАБУ КАК ПараметрыАмортизацииНМАБУ
	|		ПО ПараметрыАмортизацииНМАБУ.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВыработкаНМА КАК втВыработкаНМА
	|		ПО втВыработкаНМА.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И &ОтражатьВРеглУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаСтоимостьНМА(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "СтоимостьНМА";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПорядокУчетаНМА(ТекстыЗапроса, "Документ.УлучшениеНМА");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Ссылка                                  КАК Регистратор,
	|	&Период                                  КАК Период,
	|	&Организация                             КАК Организация,
	|	&Подразделение                           КАК Подразделение,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|	ПорядокУчетаНМА.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
	|	&ОтражатьВРеглУчете                      КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                       КАК ОтражатьВУпрУчете,
	|	&ВидАналитикиКапитализацииРасходов       КАК ВидАналитикиКапитализацииРасходов,
	|	&ВариантПримененияЦелевогоФинансирования КАК ВариантПримененияЦелевогоФинансирования,
	|	ТаблицаНМА.НематериальныйАктив           КАК НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив           КАК АналитикаКапитализацииРасходов,
	|
	|	ЕСТЬNULL(РасчетСтоимости.КорПодразделение, НЕОПРЕДЕЛЕНО)             КАК КорПодразделение,
	|	ЕСТЬNULL(РасчетСтоимости.КорНаправлениеДеятельности, НЕОПРЕДЕЛЕНО)   КАК КорНаправлениеДеятельности,
	|	ЕСТЬNULL(РасчетСтоимости.КорСтатьяРасходов, НЕОПРЕДЕЛЕНО)            КАК КорСтатьяРасходов,
	|	ЕСТЬNULL(РасчетСтоимости.КорАналитикаРасходов, НЕОПРЕДЕЛЕНО)         КАК КорАналитикаРасходов,
	|	НЕ РасчетСтоимости.ОбъектУчета ЕСТЬ NULL                             КАК РасчетСтоимости,
	|
	|	ЕСТЬNULL(РасчетСтоимости.Стоимость, ТаблицаНМА.СтоимостьУУ)          КАК Стоимость,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, ТаблицаНМА.СтоимостьБУ)      КАК СтоимостьРегл,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, 0)                             КАК СтоимостьНУ,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПР, 0)                             КАК СтоимостьПР,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВР, ТаблицаНМА.СтоимостьБУ)        КАК СтоимостьВР,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0)                             КАК СтоимостьЦФ,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьНУЦФ, 0)                           КАК СтоимостьНУЦФ,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьПРЦФ, 0)                           КАК СтоимостьПРЦФ,
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьВРЦФ, 0)                           КАК СтоимостьВРЦФ,
	|	0                                                                    КАК АмортизационнаяПремия,
	|	0                                                                    КАК ПредварительнаяСтоимость,
	|	0                                                                    КАК ПредварительнаяСтоимостьРегл,
	|	ЕСТЬNULL(РасчетСтоимости.КорПостояннаяРазница, 0)                    КАК КорПостояннаяРазница,
	|
	|	ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, 0)
	|		- ЕСТЬNULL(РасчетСтоимости.КорСуммаНУ, 0)
	|		- ЕСТЬNULL(РасчетСтоимости.КорПостояннаяРазница, 0)              КАК КорВременнаяРазница,
	|	
	|	ЕСТЬNULL(РасчетСтоимости.ИдентификаторСтроки, &ИдентификаторНеиспользуемойФинЗаписи) КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	Документ.УлучшениеНМА.НМА КАК ТаблицаНМА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимости КАК РасчетСтоимости
	|		ПО РасчетСтоимости.ОбъектУчета = ТаблицаНМА.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаНМА КАК ПорядокУчетаНМА
	|		ПО (ПорядокУчетаНМА.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив)
	|
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Нужно отдельно записать предварительную стоимость для расчета амортизации
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Ссылка                                  КАК Регистратор,
	|	&Период                                  КАК Период,
	|	&Организация                             КАК Организация,
	|	&Подразделение                           КАК Подразделение,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|	ПорядокУчетаНМА.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
	|	&ОтражатьВРеглУчете                      КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                       КАК ОтражатьВУпрУчете,
	|	&ВидАналитикиКапитализацииРасходов       КАК ВидАналитикиКапитализацииРасходов,
	|	&ВариантПримененияЦелевогоФинансирования КАК ВариантПримененияЦелевогоФинансирования,
	|	ТаблицаНМА.НематериальныйАктив           КАК НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив           КАК АналитикаКапитализацииРасходов,
	|	НЕОПРЕДЕЛЕНО                             КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО                             КАК КорНаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                             КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                             КАК КорАналитикаРасходов,
	|	ЛОЖЬ                                     КАК РасчетСтоимости,
	|	0                                        КАК Стоимость,
	|	0                                        КАК СтоимостьРегл,
	|	0                                        КАК СтоимостьНУ,
	|	0                                        КАК СтоимостьПР,
	|	0                                        КАК СтоимостьВР,
	|	0                                        КАК СтоимостьЦФ,
	|	0                                        КАК СтоимостьНУЦФ,
	|	0                                        КАК СтоимостьПРЦФ,
	|	0                                        КАК СтоимостьВРЦФ,
	|	0                                        КАК АмортизационнаяПремия,
	|	ТаблицаНМА.СтоимостьУУ                   КАК ПредварительнаяСтоимость,
	|	ТаблицаНМА.СтоимостьБУ                   КАК ПредварительнаяСтоимостьРегл,
	|	0                                        КАК КорПостояннаяРазница,
	|	0                                        КАК КорВременнаяРазница,
	|	
	|	&ИдентификаторНеиспользуемойФинЗаписи    КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                             КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	Документ.УлучшениеНМА.НМА КАК ТаблицаНМА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаНМА КАК ПорядокУчетаНМА
	|		ПО (ПорядокУчетаНМА.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив)
	|
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И (ТаблицаНМА.СтоимостьУУ <> 0
	|		ИЛИ ТаблицаНМА.СтоимостьБУ <> 0)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПрочиеРасходы(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(ТекстыЗапроса, Запрос, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос);
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПорядокУчетаНМА(ТекстыЗапроса, "Документ.УлучшениеНМА");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                      КАК Период,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	&Организация                                 КАК Организация,
	|
	|	РасчетСтоимости.КорПодразделение             КАК Подразделение,
	|	РасчетСтоимости.КорНаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	РасчетСтоимости.КорСтатьяРасходов            КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаДоходов,
	|	РасчетСтоимости.КорАналитикаРасходов         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                               КАК КорПодразделение,
	|	ПорядокУчетаНМА.НаправлениеДеятельности      КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_НМА                                КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК КорАналитикаРасходов,
	|	РасчетСтоимости.ОбъектУчета                  КАК КорАналитикаАктивовПассивов,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета       КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                                 КАК КорОрганизация,
	|
	|	РасчетСтоимости.Стоимость                    КАК Сумма,
	|	РасчетСтоимости.СтоимостьРегл 
	|		+ РасчетСтоимости.СтоимостьЦФ            КАК СуммаРегл,
	|	РасчетСтоимости.Стоимость                    КАК СуммаУпр
	|
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаНМА КАК ПорядокУчетаНМА
	|		ПО (ПорядокУчетаНМА.НематериальныйАктив = РасчетСтоимости.ОбъектУчета)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)

	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ВнеоборотныеАктивыСлужебный.ТекстЗапросаПустаяВтРасчетРасходов(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	&Организация                                 КАК Организация,
	|   РасчетРасходов.Подразделение                 КАК Подразделение,
	|	РасчетРасходов.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	РасчетРасходов.СтатьяРасходов                КАК СтатьяРасходов,
	|	РасчетРасходов.АналитикаРасходов             КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры,
	|
	|	РасчетРасходов.Сумма                         КАК СуммаСНДС,
	|	РасчетРасходов.СуммаБезНДС                   КАК СуммаБезНДС,
	|	РасчетРасходов.СуммаУпр                      КАК СуммаБезНДСУпр,
	|
	|	РасчетРасходов.СуммаРегл                     КАК СуммаСНДСРегл,
	|	РасчетРасходов.СуммаРегл                     КАК СуммаБезНДСРегл,
	|	РасчетРасходов.ПостояннаяРазница             КАК ПостояннаяРазница,
	|	РасчетРасходов.ВременнаяРазница              КАК ВременнаяРазница,
	|	
	|	РасчетРасходов.ИдентификаторСтроки           КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации              КАК НастройкаХозяйственнойОперации
	|	
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ВтРасчетРасходов КАК РасчетРасходов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#Область ПроведениеПоРеглУчету

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат УлучшениеНМАЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат УлучшениеНМАЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	

КонецПроцедуры

#КонецОбласти

#Область Прочее

// Заполнить сумму затрат.
// 
// Параметры:
//  Объект - ДокументОбъект.УлучшениеНМА - Объект
//  ВыбранныеСтроки - ТабличнаяЧасть - Выбранные строки
Процедура ЗаполнитьСуммуЗатрат(Объект, ВыбранныеСтроки = Неопределено) Экспорт

	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Объект.Дата) Тогда
		Возврат;
	КонецЕсли; 
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНМА.НематериальныйАктив,
	|	ТаблицаНМА.ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|ГДЕ
	|	ТаблицаНМА.НематериальныйАктив <> ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Дата                                      КАК Период,
	|	&ВидАналитикиКапитализацииРасходов         КАК ВидАналитикиКапитализацииРасходов,
	|	&ФактическаяСтоимость                      КАК ФактическаяСтоимость,
	|	&ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка) КАК ГруппаФинансовогоУчета,
	|	&ТекущийДокумент                           КАК Регистратор,
	|	&Организация                               КАК Организация,
	|	НЕОПРЕДЕЛЕНО                               КАК НаправлениеДеятельности,
	|	ТаблицаНМА.НематериальныйАктив             КАК АналитикаКапитализацииРасходов,
	|	&ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете,
	|	ТаблицаНМА.ИдентификаторСтроки             КАК ИдентификаторФинЗаписи,
	|	ИСТИНА                                     КАК КапитализируетЗатраты
	|
	|ПОМЕСТИТЬ ДанныеКРасчету
	|
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НаправлениеДеятельности,
	|	АналитикаКапитализацииРасходов";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивы.ТекстЗапросаРасходыПоДокументам(СписокЗапросов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходыПоДокументам.Период,
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов,
	|	РасходыПоДокументам.Сумма КАК Сумма,
	|	РасходыПоДокументам.СуммаУпр КАК СуммаУпр,
	|	РасходыПоДокументам.СуммаБезНДС КАК СуммаБезНДС,
	|	РасходыПоДокументам.СуммаРегл КАК СуммаРегл,
	|	РасходыПоДокументам.ПостояннаяРазница КАК ПостояннаяРазница,
	|	РасходыПоДокументам.ВременнаяРазница КАК ВременнаяРазница
	|ИЗ
	|	РасходыПоДокументам КАК РасходыПоДокументам";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ВидАналитикиКапитализацииРасходов", Перечисления.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР);
	Запрос.УстановитьПараметр("ФактическаяСтоимость", Ложь);
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.УлучшениеНМА);
	Запрос.УстановитьПараметр("ВариантПримененияЦелевогоФинансирования", Неопределено);
	ВнеоборотныеАктивы.УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос);
	
	ТаблицаНМА = Объект.НМА.Выгрузить(ВыбранныеСтроки);
	ТаблицаНМА.Сортировать("НомерСтроки Возр"); // Нужна сортировка как при расчете стоимости.
	Запрос.УстановитьПараметр("ТаблицаНМА", ТаблицаНМА);
	
	Результат = Запрос.Выполнить();
	
	ПараметрыРасчетаСтоимости = ВнеоборотныеАктивы.ПараметрыРасчетаСтоимости();
	ПараметрыРасчетаСтоимости.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР;
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ОбъектУчета", "НематериальныйАктив");
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета, ТаблицаНМА, СоответствиеПолей);
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВРеглУчете, "ОтражатьВРеглУчете");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВУпрУчете, "ОтражатьВУпрУчете");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Объект.ОтражатьВРеглУчете, "ОтражатьВБУ");
	ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета.ЗаполнитьЗначения(Ложь, "ОтражатьВНУ");
	РасходыПоДокументу = ВнеоборотныеАктивы.РассчитатьРасходыПоДокументу(Результат.Выгрузить(), ПараметрыРасчетаСтоимости);
							
	РасходыПоДокументу.Свернуть("ОбъектУчета", "СуммаРегл,СуммаУпр");
	
	Если ВыбранныеСтроки <> Неопределено Тогда
		СписокСтрок = ВыбранныеСтроки;
	Иначе
		СписокСтрок = Объект.НМА;
	КонецЕсли; 
	
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		СтруктураПоиска = Новый Структура("ОбъектУчета", ДанныеСтроки.НематериальныйАктив);
		СписокСтрокРасходы = РасходыПоДокументу.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрокРасходы.Количество() <> 0 Тогда
			Если Объект.ОтражатьВРеглУчете Тогда
				ДанныеСтроки.СтоимостьБУ = СписокСтрокРасходы[0].СуммаРегл;
			КонецЕсли; 
			Если Объект.ОтражатьВУпрУчете Тогда
				ДанныеСтроки.СтоимостьУУ = СписокСтрокРасходы[0].СуммаУпр;
			КонецЕсли;
		Иначе
			ДанныеСтроки.СтоимостьУУ = 0;
			ДанныеСтроки.СтоимостьБУ = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
