#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает представление плана в финансовых отчетах
//
// Возвращаемое значение:
// 	Строка - Представление плана счетов в финансовых отчетах
//
Функция ПредставлениеВФинансовыхОтчетах() Экспорт
	
	Возврат НСтр("ru = 'Регламентированный'");
	
КонецФункции

// Возвращает массив счетов с видами субконто заданными в качестве параметра.
//
// Параметры:
// 	ВидыСубконто - Массив - Массив ссылок или ссылка на вид субконто, по которому необходимо получить счета.
//	ИсключаемыеСсылки - Массив - Массив счетов, которые необходимо исключить.
//
// Возвращаемое значение:
// 	Массив - Массив ссылок ПланСчетовСсылка.Хозрасчетный, поддерживающих субконто заданные параметром функции.
//
Функция СчетаСНаборомСубконто(ВидыСубконто, ИсключаемыеСсылки=Неопределено) Экспорт
	
	ТипПараметра = ТипЗнч(ВидыСубконто);
	НесколькоСубконто = ((ТипПараметра = Тип("Массив")
		Или ТипПараметра = Тип("ФиксированныйМассив")
		Или ТипПараметра = Тип("СписокЗначений"))
			И ВидыСубконто.Количество()>1);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПланСчетовВидыСубконто.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Счета
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ПланСчетовВидыСубконто
	|ГДЕ
	|	ПланСчетовВидыСубконто.ВидСубконто В(&ВидыСубконто)
	|	И НЕ ПланСчетовВидыСубконто.Ссылка В (&ИсключаемыеСсылки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланСчетовВидыСубконто.Ссылка КАК Ссылка
	|ИЗ
	|	Счета КАК Счета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ПланСчетовВидыСубконто
	|		ПО Счета.Ссылка = ПланСчетовВидыСубконто.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланСчетовВидыСубконто.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПланСчетовВидыСубконто.Ссылка) = &КоличествоВидовСубконто И
	|	СУММА(ВЫБОР
	|			КОГДА ПланСчетовВидыСубконто.ВидСубконто В (&ВидыСубконто)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) = &КоличествоВидовСубконто";
	
	Запрос.УстановитьПараметр("КоличествоВидовСубконто", ?(НесколькоСубконто, ВидыСубконто.Количество(), 1));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ИсключаемыеСсылки", ИсключаемыеСсылки);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает счета доступные для выбора с учетом параметров выбора.
// 
// Параметры:
// 	Параметры - Структура - Может содержать свойства "ВидыСубконто", "ВГруппе".
// 	
// Возвращаемое значение:
// 	Массив из ПланСчетовСсылка.Хозрасчетный - доступные для выбора счета.
Функция СчетаДляВыбора(Параметры) Экспорт

	СписокСчетов = Новый Массив;
	
	Если Параметры.Свойство("ВидыСубконто") Тогда
		ИсключаемыеСсылки = Неопределено;
		Параметры.Свойство("ИсключаемыеСсылки", ИсключаемыеСсылки);
		СписокСчетов = СчетаСНаборомСубконто(Параметры.ВидыСубконто, ИсключаемыеСсылки);
	КонецЕсли;
	
	Если Параметры.Свойство("ВГруппе") Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	(НЕ &ОтборПоСпискуСчетов
		|		ИЛИ Хозрасчетный.Ссылка В (&СписокСчетов))
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ(&ВГруппе)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВГруппе", Параметры.ВГруппе);
		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
		Запрос.УстановитьПараметр("ОтборПоСпискуСчетов", СписокСчетов.Количество() <> 0);
		
		СписокСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;

	Возврат СписокСчетов;
	
КонецФункции

// Возвращает массив счетов-исключений, настройки которых не редактируются пользователем.
//
// Возвращаемое значение:
//	ФиксированныйМассив - Массив счетов.
//
Функция ПолучитьСчетаИсключения() Экспорт
	
	МассивСчетовИсключений = Новый Массив;
	
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные); 											// 60.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные); 										// 62.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию);	// 76.01
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам); 						// 76.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);      		// 76.21
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);                     // 10.11
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДопРасходыМатериалы);										// 10.ДР
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДопРасходыТовары);											// 41.ДР
	
	Возврат Новый ФиксированныйМассив(МассивСчетовИсключений);
	
КонецФункции

// Определяет перечень аналитики, которая может присутствовать на счете,
// но скрыта от пользователя, до тех пор, пока не предполагает вариативности.
// 
// Возвращаемое значение:
//  Массив - неиспользуемая аналитика. Элементы массива: 
//       * ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - вид субконто на счете
//       * Строка - имя измерения регистра бухгалтерии ("Подразделение")
//
Функция НеиспользуемаяАналитика() Экспорт

	НеиспользуемаяАналитика = Новый Массив;
	Если БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Тогда
		НеиспользуемаяАналитика.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	КонецЕсли;
	Если Не РаботаСДоговорамиКонтрагентовБПВызовСервера.ВестиУчетПоДоговорам() Тогда
		НеиспользуемаяАналитика.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли;
	Если Не БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения() Тогда
		НеиспользуемаяАналитика.Добавить("Подразделение");
	КонецЕсли;
	
	Возврат НеиспользуемаяАналитика;
	
КонецФункции

// Обработка переименования счета 68.12.
//
Процедура ПереименоватьСчетНалогаУСН() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
	
		СчетСсылка = ПланыСчетов.Хозрасчетный.ЕНприУСН;

		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетСсылка,
			"Код, Наименование, ЗапретитьИспользоватьВПроводках, Забалансовый");
			
		Если НЕ РеквизитыСчета.ЗапретитьИспользоватьВПроводках
			И НЕ РеквизитыСчета.Забалансовый
			И РеквизитыСчета.Код = "68.12"
			И СокрЛП(РеквизитыСчета.Наименование) = НСтр("ru = 'Единый налог при применении упрощенной системы налогообложения'") Тогда

			// Счет не модифицировался пользователем
			// Можно менять наименование
			
			СчетОбъект = СчетСсылка.ПолучитьОбъект();
			СчетОбъект.Наименование = НСтр("ru = 'Налог при упрощенной системе налогообложения'");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект, Истина);
		
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить новое наименование
			|для счета 68.12 ""Единый налог при применении упрощенной системы налогообложения"".
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
    Результат.Добавить("ЗапретитьИспользоватьВПроводках");
    Результат.Добавить("Валютный");
    Результат.Добавить("Количественный");
    Результат.Добавить("УчетПоПодразделениям");
    Результат.Добавить("УчетПоНаправлениямДеятельности");
	Результат.Добавить("НалоговыйУчет");
    Результат.Добавить("ВидыСубконто"); 
    
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	// При вводе кода счета с цифровой клавиатуры заменяем запятую на точку
	Если ТипЗнч(Параметры.СтрокаПоиска) = Тип("Строка") Тогда
		Параметры.СтрокаПоиска = СтрЗаменить(Параметры.СтрокаПоиска, ",", ".");
	КонецЕсли;
	
	Если Параметры.Свойство("ВидыСубконто")
		ИЛИ Параметры.Свойство("ВГруппе") Тогда
			
		РеглУчетВызовСервера.ОбработкаПолученияДанныхВыбораПланСчетовХозрасчетный(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Простой список
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПростойСписок";
	КомандаПечати.Представление = НСтр("ru = 'Простой список'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'План счетов'");
	КомандаПечати.СписокФорм    = "ФормаСписка, ФормаВыбора";
	
	// С подробными описаниями
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СПодробнымиОписаниями";
	КомандаПечати.Представление = НСтр("ru = 'С подробными описаниями'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'План счетов (с подробными описаниями)'");
	КомандаПечати.СписокФорм    = "ФормаСписка, ФормаВыбора";
	
КонецПроцедуры

Функция ПечатьПланаСчетов(ВыводитьОписания = Ложь)
	
	Макет = ПланыСчетов.Хозрасчетный.ПолучитьМакет("Описание");
	
	Шапка  = Макет.ПолучитьОбласть("Шапка");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.Вывести(Шапка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользоватьВалютныйУчет", БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланСчетов1.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ПланСчетов2.Ссылка) КАК КоличествоДочерних
	|ПОМЕСТИТЬ ВТ_ГруппыСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК ПланСчетов2
	|		ПО ПланСчетов1.Ссылка = ПланСчетов2.Родитель
	|ГДЕ
	|	ПланСчетов1.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланСчетов1.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов1.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПланаСчетов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ГруппыСчетов.КоличествоДочерних > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоГруппа,
	|	ТаблицаПланаСчетов.Код КАК Код,
	|	ТаблицаПланаСчетов.Порядок КАК Порядок,
	|	ТаблицаПланаСчетов.Наименование КАК Наименование,
	|	ТаблицаПланаСчетов.Валютный КАК Валютный,
	|	ТаблицаПланаСчетов.Количественный КАК Количественный,
	|	ТаблицаПланаСчетов.Забалансовый КАК Забалансовый,
	|	ТаблицаПланаСчетов.Вид КАК Вид,
	|	ТаблицаПланаСчетов.ВидыСубконто.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВидСубконто.Наименование КАК Наименование,
	|		ТолькоОбороты КАК ТолькоОбороты
	|	) КАК ВидыСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ТаблицаПланаСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГруппыСчетов КАК ВТ_ГруппыСчетов
	|		ПО ТаблицаПланаСчетов.Ссылка = ВТ_ГруппыСчетов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПланаСчетов.Порядок";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Строка = Макет.ПолучитьОбласть("Группа");
		Иначе
			Строка = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
			
		Строка.Параметры.Заполнить(Выборка);
			
		Если Выборка.Вид = ВидСчета.Активный Тогда
			Строка.Параметры.Активность = "А";
		ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
			Строка.Параметры.Активность = "П";
		Иначе
			Строка.Параметры.Активность = "АП";
		КонецЕсли;
		
		ВидыСубконто = Выборка.ВидыСубконто.Выбрать();
		Пока ВидыСубконто.Следующий() Цикл
			Строка.Параметры["Субконто" + ВидыСубконто.НомерСтроки] = ?(ВидыСубконто.ТолькоОбороты, "(об) ", "") + ВидыСубконто.Наименование;
		КонецЦикла;
			
		ТабДокумент.Вывести(Строка);
		
		Если ВыводитьОписания Тогда
		
			Попытка
				Описание = Макет.ПолучитьОбласть(ПланыСчетов[Выборка.Ссылка.Метаданные().Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка));
				ТабДокумент.Вывести(Описание);
			Исключение
				// Для счета отсутствует описание, не прерывает из-за этого работу.
			    ЗаписьЖурналаРегистрации(НСтр("ru = 'Печать плана счетов ""Хозрасчетный""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			       УровеньЖурналаРегистрации.Ошибка,,,
			       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДокумент.ФиксацияСверху = 2;
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПростойСписок") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПростойСписок", НСтр("ru = 'Простой список'"), ПечатьПланаСчетов());                                            
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СПодробнымиОписаниями") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СПодробнымиОписаниями", НСтр("ru = 'С подробными описаниями'"), ПечатьПланаСчетов(Истина));                                            
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ПланыСчетов.Хозрасчетный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.12.37";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b1bf12c3-b714-4c25-a353-b0ff7421f911");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ПланыСчетов.Хозрасчетный.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет план счетов ""Хозрасчетный"":
	|- отключает переоценку регл. для счета учета 71.21'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыСчетов.Хозрасчетный.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.ПланыСчетов.Хозрасчетный.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СчетаУчета.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК СчетаУчета
	|ГДЕ
	|	СчетаУчета.Ссылка = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	И НЕ (СчетаУчета.ИсключитьСуммуБУИзПереоценкиПоПлануСчетов
	|		И СчетаУчета.ИсключитьСуммуУУИзПереоценкиПоПлануСчетов)");
	
	СписокСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокСсылок);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланСчетов.Хозрасчетный";
	МетаданныеОбъекта = Метаданные.ПланыСчетов.Хозрасчетный;
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если Объект.Ссылка = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал
				И НЕ (Объект.ИсключитьСуммуБУИзПереоценкиПоПлануСчетов
					И Объект.ИсключитьСуммуУУИзПереоценкиПоПлануСчетов) Тогда
				Объект.ИсключитьСуммуБУИзПереоценкиПоПлануСчетов = Истина;
				Объект.ИсключитьСуммуУУИзПереоценкиПоПлануСчетов = Истина;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",     ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%",    ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеНастройки() Экспорт
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("ИсключитьСуммуБУИзПереоценкиПоПлануСчетов", Истина);
	ЗначенияРеквизитов.Вставить("ИсключитьСуммуУУИзПереоценкиПоПлануСчетов", Истина);
	
	УстановитьРеквизитыСчета(ПС.РасчетыПоАвансамВыданнымВал, ЗначенияРеквизитов);
	УстановитьРеквизитыСчета(ПС.РасчетыПоАвансамВыданнымУЕ, ЗначенияРеквизитов);
	УстановитьРеквизитыСчета(ПС.РасчетыПоАвансамПолученнымВал, ЗначенияРеквизитов);
	УстановитьРеквизитыСчета(ПС.РасчетыПоАвансамПолученнымУЕ, ЗначенияРеквизитов);
	УстановитьРеквизитыСчета(ПС.РасчетыСПодотчетнымиЛицамиВал, ЗначенияРеквизитов);
	
КонецПроцедуры

Процедура УстановитьРеквизитыСчета(Счет, ЗначенияРеквизитов)
	
	ОбъектСчета = Счет.ПолучитьОбъект();
	
	Для каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
		ОбъектСчета[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСчета);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
