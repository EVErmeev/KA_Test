#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийДвиженияПоПрочимАктивамПассивам"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

// Формирует текст запроса для формирования временной таблицы "ВтДвиженияПоПрочимАктивамПассивам".
//
// Параметры:
//  ДополнительныеПоля	 - Строка	 - Список дополнительный полей.
//  ВозможныРазныеПериодыВДвижениях - Булево - определяет где хранятся параметры партионного учета, в параметрах запроса или во временной таблице ВТПараметрыПартионногоУчетаДляПроведения
// 
// Возвращаемое значение:
//  Строка - Текст запроса формирования временной таблицы ВтДвиженияПоПрочимАктивамПассивам.
//
Функция ТекстЗапросаТаблицаВтДвиженияПоПрочимАктивамПассивам(ДополнительныеПоля = "", ВозможныРазныеПериодыВДвижениях = Ложь) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Строки.Период                           КАК Период,
	|	Строки.Организация                      КАК Организация,
	|	Строки.Подразделение                    КАК Подразделение,
	|	Строки.Статья                           КАК Статья,
	|	Строки.Аналитика                        КАК Аналитика,
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(НаправленияДеятельности.УчетЗатрат, ЛОЖЬ)
	|			ТОГДА Строки.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КОНЕЦ) КАК НаправлениеДеятельности,
	
	//++ НЕ УТ
	|	Строки.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	
	|	Строки.ДебетКредит КАК ДебетКредит,
	|
	|	Строки.СуммаСНДС                        КАК СуммаСНДС,
	|	Строки.СуммаБезНДС                      КАК СуммаБезНДС,
	|	(ВЫБОР
	|		КОГДА НЕ &УправленческийУчетОрганизаций
	|			ТОГДА 0
	|		КОГДА Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|				И НЕ &ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|			ТОГДА Строки.СуммаУпр
	|		ИНАЧЕ Строки.СуммаБезНДСУпр КОНЕЦ)  КАК СуммаУпр,
	|	(ВЫБОР
	|		КОГДА Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|				И НЕ &ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|			ТОГДА Строки.СуммаРегл
	|		ИНАЧЕ Строки.СуммаБезНДСРегл КОНЕЦ) КАК СуммаРегл,
	|
	|	Строки.ПостояннаяРазница                КАК ПостояннаяРазница,
	|	Строки.ВременнаяРазница                 КАК ВременнаяРазница,
	|
	|	Строки.ИдентификаторФинЗаписи           КАК ИдентификаторФинЗаписи,
	|	Строки.НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|
	|	,&ДополнительныеПоля
	|
	|ПОМЕСТИТЬ ВтДвиженияПоПрочимАктивамПассивам
	|ИЗ
	|	ВтИсходныеДвиженияПоПрочимАктивамПассивам КАК Строки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО НаправленияДеятельности.Ссылка = Строки.НаправлениеДеятельности
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты ПО ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.Период                           КАК Период,
	|	Строки.Организация                      КАК Организация,
	|	Строки.Подразделение                    КАК Подразделение,
	|	Строки.Статья                           КАК Статья,
	|	Строки.Аналитика                        КАК Аналитика,
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(НаправленияДеятельности.УчетЗатрат, ЛОЖЬ)
	|			ТОГДА Строки.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КОНЕЦ) КАК НаправлениеДеятельности,
	
	//++ НЕ УТ
	|	Строки.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	
	|	Строки.ДебетКредит КАК ДебетКредит,
	|	0                                       КАК СуммаСНДС,
	|	0                                       КАК СуммаБезНДС,
	|	(ВЫБОР
	|		КОГДА НЕ &УправленческийУчетОрганизаций
	|			ТОГДА 0
	|		ИНАЧЕ
	|			Строки.СуммаСНДС - Строки.СуммаБезНДС
	|		КОНЕЦ)                                КАК СуммаУпр,
	|	Строки.СуммаРегл - Строки.СуммаБезНДСРегл КАК СуммаРегл,
	|
	|	Строки.ПостояннаяРазница                КАК ПостояннаяРазница,
	|	Строки.ВременнаяРазница                 КАК ВременнаяРазница,
	|
	|	&Идентификатор                          КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВключениеНДСВСтоимость) КАК НастройкаХозяйственнойОперации
	|
	|	,&ДополнительныеПоля
	|
	|ИЗ
	|	ВтИсходныеДвиженияПоПрочимАктивамПассивам КАК Строки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО НаправленияДеятельности.Ссылка = Строки.НаправлениеДеятельности
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты ПО ИСТИНА
	|ГДЕ
	|	&ФормироватьНДСПредъявленныйПриВключенииВСтоимость
	|	И Строки.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|";
	
	ТекстСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК ТаблицаКонстанты ПО ИСТИНА";
	
	Если НЕ ВозможныРазныеПериодыВДвижениях Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстСоединения, "");
		
	Иначе
		
		// Параметры партионного учета хранятся не в параметрах запроса, а в одноименных полях временной таблицы ВТПараметрыПартионногоУчетаДляПроведения.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстСоединения,
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПараметрыПартионногоУчетаДляПроведения КАК ПараметрыПартионногоУчета
			|	ПО ПараметрыПартионногоУчета.Период = НАЧАЛОПЕРИОДА(Строки.Период, МЕСЯЦ)");
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить("УправленческийУчетОрганизаций");
		МассивПараметров.Добавить("ФормироватьНДСПредъявленныйПриВключенииВСтоимость");
		
		Для Каждого ТекущийПараметр Из МассивПараметров Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ТекущийПараметр, "ПараметрыПартионногоУчета." + ТекущийПараметр);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрНайти(ДополнительныеПоля, "ИдентификаторСтроки") <> 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Идентификатор", "Строки.ИдентификаторСтроки");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Идентификатор", "Строки.ИдентификаторФинЗаписи");
	КонецЕсли;
	
	ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для формирования движений по регистру "Движения по прочим активам пассивам".
//
// Параметры:
//  ДополнительныеПоля	 - Строка	 - Список дополнительный полей.
// 
// Возвращаемое значение:
//  Строка - Текст запроса формирования движений в регистре ДвиженияПоПрочимАктивамПассивам.
//
Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(ДополнительныеПоля = "") Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(НД.УчетЗатрат, ЛОЖЬ) ТОГДА
	|			Строки.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	Строки.Статья КАК Статья,
	|	Строки.Аналитика КАК Аналитика,
	
	//++ НЕ УТ
	|	Строки.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	
	|	Строки.ДебетКредит КАК ДебетКредит,
	|
	|	Строки.СуммаБезНДС КАК СуммаБезНДС,
	|	Строки.СуммаСНДС КАК СуммаСНДС,
	|	Строки.СуммаУпр КАК СуммаУпр,
	|
	|	Строки.СуммаРегл КАК СуммаРегл,
	|	Строки.ПостояннаяРазница КАК ПостояннаяРазница,
	|	Строки.ВременнаяРазница КАК ВременнаяРазница,
	|
	|	Строки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Строки.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|
	|	,&ДополнительныеПоля
	|
	|ИЗ
	|	ВтДвиженияПоПрочимАктивамПассивам КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НД
	|		ПО НД.Ссылка = Строки.НаправлениеДеятельности
	|ГДЕ
	|	(Строки.СуммаБезНДС <> 0 ИЛИ Строки.СуммаСНДС <> 0 ИЛИ Строки.СуммаУпр <> 0
	|	ИЛИ Строки.СуммаРегл <> 0 ИЛИ Строки.ПостояннаяРазница <> 0 ИЛИ Строки.ВременнаяРазница <> 0)
	|";
	
	ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьДополнительныеПоляВТекстЗапроса(ДополнительныеПоля, ТекстЗапроса)

	Если НЕ ЗначениеЗаполнено(ДополнительныеПоля) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ДополнительныеПоля", "");
		Возврат;
	КонецЕсли; 
	
	ТекстДополнительныеПоля = "";
	
	СписокПолей = СтрРазделить(ДополнительныеПоля, ",");
	Для каждого ИмяПоля Из СписокПолей Цикл
		ТекстДополнительныеПоля = ТекстДополнительныеПоля + "
		|	,Строки." + ИмяПоля;
	КонецЦикла; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ДополнительныеПоля", ТекстДополнительныеПоля); 

КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТ

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.12.61";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("919746fa-cb93-4b40-96d3-cf3580744665");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение ""Аналитика"" предопределенным значением ""Резерв ежегодных отпусков"" справочника ""Резервы""
		|в движениях со значением измерения ""Статья"" равным ""Резервы по вознаграждениям"" или ""Резервы по страховым взносам"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Описание
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияПоПрочимАктивамПассивам.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ДвиженияПоПрочимАктивамПассивам
	|ГДЕ
	|	ЛОЖЬ
	//++ Локализация
	|	ИЛИ
	|	(ДвиженияПоПрочимАктивамПассивам.Статья В (
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РезервыПоВознаграждениям),
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РезервыПоСтраховымВзносам))
	|	И НЕ ДвиженияПоПрочимАктивамПассивам.Аналитика ССЫЛКА Справочник.Резервы)
	//-- Локализация
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	
	Регистраторы = Результат.Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		НачатьТранзакцию();
		
		Попытка
			
			Регистратор = Выборка.Регистратор;// ДокументСсылка - 
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Прочитать();
			
			Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
				//++ Локализация
				Если ЗаписьРегистра.Статья = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РезервыПоВознаграждениям
				 ИЛИ ЗаписьРегистра.Статья = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РезервыПоСтраховымВзносам Тогда
					Если ТипЗнч(ЗаписьРегистра.Аналитика) <> Тип("СправочникСсылка.Резервы") ИЛИ НЕ ЗначениеЗаполнено(ЗаписьРегистра.Аналитика) Тогда
						ЗаписьРегистра.Аналитика = Справочники.Резервы.РезервЕжегодныхОтпусков();
					КонецЕсли;
				КонецЕсли;
				//-- Локализация
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 по регистратору ""%2"", по причине: %3'");
			
			ТекстСообщения = 	СтрШаблон(
				Шаблон,
				ПолноеИмяРегистра,
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли
