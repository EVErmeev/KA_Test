#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список полуфабрикатов/продукции, потреблеющих заданный полуфабрикат.
//
// Параметры:
//  Полуфабрикат - Структура - параметры полуфабриката.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные о потребителях полуфабриката.
//
Функция ПотребителиПолуфабриката(Полуфабрикат) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланыПотребленияМатериалов.Сценарий КАК Сценарий,
		|	ПланыПотребленияМатериалов.Статус КАК Статус,
		|	ПланыПотребленияМатериалов.НоменклатураПродукции КАК Номенклатура,
		|	ПланыПотребленияМатериалов.ХарактеристикаПродукции КАК Характеристика,
		|	ПланыПотребленияМатериалов.ПодразделениеДиспетчер КАК Подразделение,
		|	ПланыПотребленияМатериалов.ПланПроизводства КАК ПланПроизводства,
		|	ПланыПотребленияМатериалов.СпецификацияПродукции КАК Спецификация,
		|	ПланыПотребленияМатериалов.НазначениеПродукции КАК Назначение,
		|	ПланыПотребленияМатериалов.ДатаПроизводства КАК Период
		|ИЗ
		|	РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
		|ГДЕ
		|	ПланыПотребленияМатериалов.Сценарий = &Сценарий
		|	И ПланыПотребленияМатериалов.Статус = &Статус
		|	И ПланыПотребленияМатериалов.Номенклатура = &Номенклатура
		|	И ПланыПотребленияМатериалов.Характеристика = &Характеристика
		|	И ПланыПотребленияМатериалов.Назначение = &Назначение
		|	И ПланыПотребленияМатериалов.ПодразделениеДиспетчер = &Подразделение
		|	И ПланыПотребленияМатериалов.ПланПроизводства = &ПланПроизводства
		|	И ПланыПотребленияМатериалов.Период = &ДатаВыпускаПолуфабриката
		|	И ПланыПотребленияМатериалов.ЭтоПолуфабрикат = ИСТИНА");
	
	Запрос.УстановитьПараметр("Сценарий", Полуфабрикат.Сценарий);
	Запрос.УстановитьПараметр("Статус", Полуфабрикат.Статус);
	Запрос.УстановитьПараметр("Номенклатура", Полуфабрикат.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Полуфабрикат.Характеристика);
	Запрос.УстановитьПараметр("Назначение", Полуфабрикат.Назначение);
	Запрос.УстановитьПараметр("Подразделение", Полуфабрикат.Подразделение);
	Запрос.УстановитьПараметр("ПланПроизводства", Полуфабрикат.ПланПроизводства);
	Запрос.УстановитьПараметр("ДатаВыпускаПолуфабриката", Полуфабрикат.ДатаВыпускаПолуфабриката);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ПодразделениеДиспетчер)
	|	И ЗначениеРазрешено(Сценарий)
	|	И ЗначениеРазрешено(ВидПлана)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПланыПотребленияМатериалов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.12.35";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("160f2caf-02e3-4100-9e07-4538228c7e9a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыПотребленияМатериалов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новый реквизит ""Склад материалов"" значением текущего измерения ""Склад""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПланыПотребленияМатериалов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПланыПотребленияМатериалов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.ПланыПотребленияМатериалов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрНакопления.ПланыПотребленияМатериалов";

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланыПотребленияМатериалов.Регистратор
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
	|	
	|ГДЕ
	|	ПланыПотребленияМатериалов.СкладМатериалов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И ПланыПотребленияМатериалов.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрНакопления.ПланыПотребленияМатериалов";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПланыПотребленияМатериалов.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Элемент.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Элемент.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для Каждого СтрокаНабора Из НаборЗаписей Цикл
				СтрокаНабора.СкладМатериалов = СтрокаНабора.Склад;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Элемент.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
